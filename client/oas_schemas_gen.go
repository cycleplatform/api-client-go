// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *DefaultErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// An object representing information about the currently logged-in user.
// Ref: #/components/schemas/Account
type Account struct {
	ID ID `json:"id"`
	// The first and last name associated with the Account.
	Name AccountName `json:"name"`
	// Information about the email address associated with the Account.
	Email AccountEmail `json:"email"`
	// Two factor auth verification information.
	TwoFactorAuth OptNilAccountTwoFactorAuth `json:"two_factor_auth"`
	// Indicates whether or not Cycle employees have authorization to log in to this Account in a support
	// capacity.
	AllowSupportLogin OptBool      `json:"allow_support_login"`
	State             AccountState `json:"state"`
	// A collection of timestamps for each event in the Account's lifetime.
	Events AccountEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Account) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Account) GetName() AccountName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *Account) GetEmail() AccountEmail {
	return s.Email
}

// GetTwoFactorAuth returns the value of TwoFactorAuth.
func (s *Account) GetTwoFactorAuth() OptNilAccountTwoFactorAuth {
	return s.TwoFactorAuth
}

// GetAllowSupportLogin returns the value of AllowSupportLogin.
func (s *Account) GetAllowSupportLogin() OptBool {
	return s.AllowSupportLogin
}

// GetState returns the value of State.
func (s *Account) GetState() AccountState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Account) GetEvents() AccountEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Account) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Account) SetName(val AccountName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *Account) SetEmail(val AccountEmail) {
	s.Email = val
}

// SetTwoFactorAuth sets the value of TwoFactorAuth.
func (s *Account) SetTwoFactorAuth(val OptNilAccountTwoFactorAuth) {
	s.TwoFactorAuth = val
}

// SetAllowSupportLogin sets the value of AllowSupportLogin.
func (s *Account) SetAllowSupportLogin(val OptBool) {
	s.AllowSupportLogin = val
}

// SetState sets the value of State.
func (s *Account) SetState(val AccountState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Account) SetEvents(val AccountEvents) {
	s.Events = val
}

// Information about the email address associated with the Account.
type AccountEmail struct {
	// The email address.
	Address string `json:"address"`
	// If true, the email has been verified and the Account is active.
	Verified bool     `json:"verified"`
	Added    DateTime `json:"added"`
}

// GetAddress returns the value of Address.
func (s *AccountEmail) GetAddress() string {
	return s.Address
}

// GetVerified returns the value of Verified.
func (s *AccountEmail) GetVerified() bool {
	return s.Verified
}

// GetAdded returns the value of Added.
func (s *AccountEmail) GetAdded() DateTime {
	return s.Added
}

// SetAddress sets the value of Address.
func (s *AccountEmail) SetAddress(val string) {
	s.Address = val
}

// SetVerified sets the value of Verified.
func (s *AccountEmail) SetVerified(val bool) {
	s.Verified = val
}

// SetAdded sets the value of Added.
func (s *AccountEmail) SetAdded(val DateTime) {
	s.Added = val
}

// Merged schema.
// Ref: #/components/schemas/AccountEmployeeLogin
type AccountEmployeeLogin struct {
	ID      ID          `json:"id"`
	Account AccountInfo `json:"account"`
	Time    DateTime    `json:"time"`
	// Merged property.
	Type AccountEmployeeLoginType `json:"type"`
	// A boolean where true reflects that the login was successful.
	Success bool `json:"success"`
	// If this was an employee login, contains information about who accessed the Account.
	Employee OptAccountEmployeeLoginEmployee `json:"employee"`
}

// GetID returns the value of ID.
func (s *AccountEmployeeLogin) GetID() ID {
	return s.ID
}

// GetAccount returns the value of Account.
func (s *AccountEmployeeLogin) GetAccount() AccountInfo {
	return s.Account
}

// GetTime returns the value of Time.
func (s *AccountEmployeeLogin) GetTime() DateTime {
	return s.Time
}

// GetType returns the value of Type.
func (s *AccountEmployeeLogin) GetType() AccountEmployeeLoginType {
	return s.Type
}

// GetSuccess returns the value of Success.
func (s *AccountEmployeeLogin) GetSuccess() bool {
	return s.Success
}

// GetEmployee returns the value of Employee.
func (s *AccountEmployeeLogin) GetEmployee() OptAccountEmployeeLoginEmployee {
	return s.Employee
}

// SetID sets the value of ID.
func (s *AccountEmployeeLogin) SetID(val ID) {
	s.ID = val
}

// SetAccount sets the value of Account.
func (s *AccountEmployeeLogin) SetAccount(val AccountInfo) {
	s.Account = val
}

// SetTime sets the value of Time.
func (s *AccountEmployeeLogin) SetTime(val DateTime) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *AccountEmployeeLogin) SetType(val AccountEmployeeLoginType) {
	s.Type = val
}

// SetSuccess sets the value of Success.
func (s *AccountEmployeeLogin) SetSuccess(val bool) {
	s.Success = val
}

// SetEmployee sets the value of Employee.
func (s *AccountEmployeeLogin) SetEmployee(val OptAccountEmployeeLoginEmployee) {
	s.Employee = val
}

// If this was an employee login, contains information about who accessed the Account.
type AccountEmployeeLoginEmployee struct {
	ID ID     `json:"id"`
	IP string `json:"ip"`
}

// GetID returns the value of ID.
func (s *AccountEmployeeLoginEmployee) GetID() ID {
	return s.ID
}

// GetIP returns the value of IP.
func (s *AccountEmployeeLoginEmployee) GetIP() string {
	return s.IP
}

// SetID sets the value of ID.
func (s *AccountEmployeeLoginEmployee) SetID(val ID) {
	s.ID = val
}

// SetIP sets the value of IP.
func (s *AccountEmployeeLoginEmployee) SetIP(val string) {
	s.IP = val
}

// Merged schema.
type AccountEmployeeLoginType string

const (
	AccountEmployeeLoginTypeEmployee AccountEmployeeLoginType = "employee"
)

// AllValues returns all AccountEmployeeLoginType values.
func (AccountEmployeeLoginType) AllValues() []AccountEmployeeLoginType {
	return []AccountEmployeeLoginType{
		AccountEmployeeLoginTypeEmployee,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountEmployeeLoginType) MarshalText() ([]byte, error) {
	switch s {
	case AccountEmployeeLoginTypeEmployee:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountEmployeeLoginType) UnmarshalText(data []byte) error {
	switch AccountEmployeeLoginType(data) {
	case AccountEmployeeLoginTypeEmployee:
		*s = AccountEmployeeLoginTypeEmployee
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A collection of timestamps for each event in the Account's lifetime.
type AccountEvents struct {
	Created   DateTime `json:"created"`
	Updated   DateTime `json:"updated"`
	Deleted   DateTime `json:"deleted"`
	LastLogin DateTime `json:"last_login"`
}

// GetCreated returns the value of Created.
func (s *AccountEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AccountEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *AccountEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastLogin returns the value of LastLogin.
func (s *AccountEvents) GetLastLogin() DateTime {
	return s.LastLogin
}

// SetCreated sets the value of Created.
func (s *AccountEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AccountEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *AccountEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastLogin sets the value of LastLogin.
func (s *AccountEvents) SetLastLogin(val DateTime) {
	s.LastLogin = val
}

// Details of an Account login.
// Ref: #/components/schemas/AccountInfo
type AccountInfo struct {
	ID ID `json:"id"`
	// The IP of the request used during login.
	IP string `json:"ip"`
}

// GetID returns the value of ID.
func (s *AccountInfo) GetID() ID {
	return s.ID
}

// GetIP returns the value of IP.
func (s *AccountInfo) GetIP() string {
	return s.IP
}

// SetID sets the value of ID.
func (s *AccountInfo) SetID(val ID) {
	s.ID = val
}

// SetIP sets the value of IP.
func (s *AccountInfo) SetIP(val string) {
	s.IP = val
}

// The first and last name associated with the Account.
type AccountName struct {
	// The first name of the Account owner.
	First string `json:"first"`
	// The last name of the Account owner.
	Last string `json:"last"`
}

// GetFirst returns the value of First.
func (s *AccountName) GetFirst() string {
	return s.First
}

// GetLast returns the value of Last.
func (s *AccountName) GetLast() string {
	return s.Last
}

// SetFirst sets the value of First.
func (s *AccountName) SetFirst(val string) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *AccountName) SetLast(val string) {
	s.Last = val
}

// Merged schema.
// Ref: #/components/schemas/AccountPasswordLogin
type AccountPasswordLogin struct {
	ID      ID          `json:"id"`
	Account AccountInfo `json:"account"`
	Time    DateTime    `json:"time"`
	// Merged property.
	Type AccountPasswordLoginType `json:"type"`
	// A boolean where true reflects that the login was successful.
	Success bool `json:"success"`
}

// GetID returns the value of ID.
func (s *AccountPasswordLogin) GetID() ID {
	return s.ID
}

// GetAccount returns the value of Account.
func (s *AccountPasswordLogin) GetAccount() AccountInfo {
	return s.Account
}

// GetTime returns the value of Time.
func (s *AccountPasswordLogin) GetTime() DateTime {
	return s.Time
}

// GetType returns the value of Type.
func (s *AccountPasswordLogin) GetType() AccountPasswordLoginType {
	return s.Type
}

// GetSuccess returns the value of Success.
func (s *AccountPasswordLogin) GetSuccess() bool {
	return s.Success
}

// SetID sets the value of ID.
func (s *AccountPasswordLogin) SetID(val ID) {
	s.ID = val
}

// SetAccount sets the value of Account.
func (s *AccountPasswordLogin) SetAccount(val AccountInfo) {
	s.Account = val
}

// SetTime sets the value of Time.
func (s *AccountPasswordLogin) SetTime(val DateTime) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *AccountPasswordLogin) SetType(val AccountPasswordLoginType) {
	s.Type = val
}

// SetSuccess sets the value of Success.
func (s *AccountPasswordLogin) SetSuccess(val bool) {
	s.Success = val
}

// Merged schema.
type AccountPasswordLoginType string

const (
	AccountPasswordLoginTypePassword AccountPasswordLoginType = "password"
)

// AllValues returns all AccountPasswordLoginType values.
func (AccountPasswordLoginType) AllValues() []AccountPasswordLoginType {
	return []AccountPasswordLoginType{
		AccountPasswordLoginTypePassword,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountPasswordLoginType) MarshalText() ([]byte, error) {
	switch s {
	case AccountPasswordLoginTypePassword:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountPasswordLoginType) UnmarshalText(data []byte) error {
	switch AccountPasswordLoginType(data) {
	case AccountPasswordLoginTypePassword:
		*s = AccountPasswordLoginTypePassword
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/AccountState
type AccountState struct {
	// The current state of the account.
	Current AccountStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptAccountStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *AccountState) GetCurrent() AccountStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *AccountState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *AccountState) GetError() OptAccountStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *AccountState) SetCurrent(val AccountStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *AccountState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *AccountState) SetError(val OptAccountStateError) {
	s.Error = val
}

// The current state of the account.
type AccountStateCurrent string

const (
	AccountStateCurrentNew        AccountStateCurrent = "new"
	AccountStateCurrentLive       AccountStateCurrent = "live"
	AccountStateCurrentSuspending AccountStateCurrent = "suspending"
	AccountStateCurrentPurging    AccountStateCurrent = "purging"
	AccountStateCurrentDeleting   AccountStateCurrent = "deleting"
	AccountStateCurrentDeleted    AccountStateCurrent = "deleted"
)

// AllValues returns all AccountStateCurrent values.
func (AccountStateCurrent) AllValues() []AccountStateCurrent {
	return []AccountStateCurrent{
		AccountStateCurrentNew,
		AccountStateCurrentLive,
		AccountStateCurrentSuspending,
		AccountStateCurrentPurging,
		AccountStateCurrentDeleting,
		AccountStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case AccountStateCurrentNew:
		return []byte(s), nil
	case AccountStateCurrentLive:
		return []byte(s), nil
	case AccountStateCurrentSuspending:
		return []byte(s), nil
	case AccountStateCurrentPurging:
		return []byte(s), nil
	case AccountStateCurrentDeleting:
		return []byte(s), nil
	case AccountStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountStateCurrent) UnmarshalText(data []byte) error {
	switch AccountStateCurrent(data) {
	case AccountStateCurrentNew:
		*s = AccountStateCurrentNew
		return nil
	case AccountStateCurrentLive:
		*s = AccountStateCurrentLive
		return nil
	case AccountStateCurrentSuspending:
		*s = AccountStateCurrentSuspending
		return nil
	case AccountStateCurrentPurging:
		*s = AccountStateCurrentPurging
		return nil
	case AccountStateCurrentDeleting:
		*s = AccountStateCurrentDeleting
		return nil
	case AccountStateCurrentDeleted:
		*s = AccountStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type AccountStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *AccountStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *AccountStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *AccountStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *AccountStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Two factor auth verification information.
type AccountTwoFactorAuth struct {
	// A boolean representing if the Account has verified with two-factor authentication.
	Verified bool `json:"verified"`
}

// GetVerified returns the value of Verified.
func (s *AccountTwoFactorAuth) GetVerified() bool {
	return s.Verified
}

// SetVerified sets the value of Verified.
func (s *AccountTwoFactorAuth) SetVerified(val bool) {
	s.Verified = val
}

// Address information for a given billing method.
// Ref: #/components/schemas/Address
type Address struct {
	// The country this billing method is associated with.
	Country string `json:"country"`
	// The zip code this billing method is associated with.
	Zip string `json:"zip"`
}

// GetCountry returns the value of Country.
func (s *Address) GetCountry() string {
	return s.Country
}

// GetZip returns the value of Zip.
func (s *Address) GetZip() string {
	return s.Zip
}

// SetCountry sets the value of Country.
func (s *Address) SetCountry(val string) {
	s.Country = val
}

// SetZip sets the value of Zip.
func (s *Address) SetZip(val string) {
	s.Zip = val
}

// An announcement from the Cycle team.
// Ref: #/components/schemas/Announcement
type Announcement struct {
	ID ID `json:"id"`
	// A description of the event being announced.
	Title string `json:"title"`
	// A description of the announcement.
	Description          string               `json:"description"`
	Updates              []AnnouncementUpdate `json:"updates"`
	AffectedIntegrations []string             `json:"affected_integrations"`
	Creator              CreatorScope         `json:"creator"`
	State                AnnouncementState    `json:"state"`
	// The priority or severity of the announcement.
	Priority AnnouncementPriority `json:"priority"`
	// A collection of timestamps for each event in the announcement's lifetime.
	Events AnnouncementEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Announcement) GetID() ID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Announcement) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Announcement) GetDescription() string {
	return s.Description
}

// GetUpdates returns the value of Updates.
func (s *Announcement) GetUpdates() []AnnouncementUpdate {
	return s.Updates
}

// GetAffectedIntegrations returns the value of AffectedIntegrations.
func (s *Announcement) GetAffectedIntegrations() []string {
	return s.AffectedIntegrations
}

// GetCreator returns the value of Creator.
func (s *Announcement) GetCreator() CreatorScope {
	return s.Creator
}

// GetState returns the value of State.
func (s *Announcement) GetState() AnnouncementState {
	return s.State
}

// GetPriority returns the value of Priority.
func (s *Announcement) GetPriority() AnnouncementPriority {
	return s.Priority
}

// GetEvents returns the value of Events.
func (s *Announcement) GetEvents() AnnouncementEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Announcement) SetID(val ID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Announcement) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Announcement) SetDescription(val string) {
	s.Description = val
}

// SetUpdates sets the value of Updates.
func (s *Announcement) SetUpdates(val []AnnouncementUpdate) {
	s.Updates = val
}

// SetAffectedIntegrations sets the value of AffectedIntegrations.
func (s *Announcement) SetAffectedIntegrations(val []string) {
	s.AffectedIntegrations = val
}

// SetCreator sets the value of Creator.
func (s *Announcement) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetState sets the value of State.
func (s *Announcement) SetState(val AnnouncementState) {
	s.State = val
}

// SetPriority sets the value of Priority.
func (s *Announcement) SetPriority(val AnnouncementPriority) {
	s.Priority = val
}

// SetEvents sets the value of Events.
func (s *Announcement) SetEvents(val AnnouncementEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the announcement's lifetime.
type AnnouncementEvents struct {
	Created  DateTime `json:"created"`
	Updated  DateTime `json:"updated"`
	Deleted  DateTime `json:"deleted"`
	Resolved DateTime `json:"resolved"`
}

// GetCreated returns the value of Created.
func (s *AnnouncementEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AnnouncementEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *AnnouncementEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetResolved returns the value of Resolved.
func (s *AnnouncementEvents) GetResolved() DateTime {
	return s.Resolved
}

// SetCreated sets the value of Created.
func (s *AnnouncementEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AnnouncementEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *AnnouncementEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetResolved sets the value of Resolved.
func (s *AnnouncementEvents) SetResolved(val DateTime) {
	s.Resolved = val
}

// The priority or severity of the announcement.
type AnnouncementPriority string

const (
	AnnouncementPriorityNotice AnnouncementPriority = "notice"
	AnnouncementPriorityLow    AnnouncementPriority = "low"
	AnnouncementPriorityMedium AnnouncementPriority = "medium"
	AnnouncementPriorityHigh   AnnouncementPriority = "high"
	AnnouncementPrioritySevere AnnouncementPriority = "severe"
)

// AllValues returns all AnnouncementPriority values.
func (AnnouncementPriority) AllValues() []AnnouncementPriority {
	return []AnnouncementPriority{
		AnnouncementPriorityNotice,
		AnnouncementPriorityLow,
		AnnouncementPriorityMedium,
		AnnouncementPriorityHigh,
		AnnouncementPrioritySevere,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnnouncementPriority) MarshalText() ([]byte, error) {
	switch s {
	case AnnouncementPriorityNotice:
		return []byte(s), nil
	case AnnouncementPriorityLow:
		return []byte(s), nil
	case AnnouncementPriorityMedium:
		return []byte(s), nil
	case AnnouncementPriorityHigh:
		return []byte(s), nil
	case AnnouncementPrioritySevere:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnnouncementPriority) UnmarshalText(data []byte) error {
	switch AnnouncementPriority(data) {
	case AnnouncementPriorityNotice:
		*s = AnnouncementPriorityNotice
		return nil
	case AnnouncementPriorityLow:
		*s = AnnouncementPriorityLow
		return nil
	case AnnouncementPriorityMedium:
		*s = AnnouncementPriorityMedium
		return nil
	case AnnouncementPriorityHigh:
		*s = AnnouncementPriorityHigh
		return nil
	case AnnouncementPrioritySevere:
		*s = AnnouncementPrioritySevere
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AnnouncementState struct {
	// The current state of the method.
	Current AnnouncementStateCurrent `json:"current"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptAnnouncementStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *AnnouncementState) GetCurrent() AnnouncementStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *AnnouncementState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *AnnouncementState) GetError() OptAnnouncementStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *AnnouncementState) SetCurrent(val AnnouncementStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *AnnouncementState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *AnnouncementState) SetError(val OptAnnouncementStateError) {
	s.Error = val
}

// The current state of the method.
type AnnouncementStateCurrent string

const (
	AnnouncementStateCurrentLive     AnnouncementStateCurrent = "live"
	AnnouncementStateCurrentDeleting AnnouncementStateCurrent = "deleting"
	AnnouncementStateCurrentDeleted  AnnouncementStateCurrent = "deleted"
)

// AllValues returns all AnnouncementStateCurrent values.
func (AnnouncementStateCurrent) AllValues() []AnnouncementStateCurrent {
	return []AnnouncementStateCurrent{
		AnnouncementStateCurrentLive,
		AnnouncementStateCurrentDeleting,
		AnnouncementStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AnnouncementStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case AnnouncementStateCurrentLive:
		return []byte(s), nil
	case AnnouncementStateCurrentDeleting:
		return []byte(s), nil
	case AnnouncementStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AnnouncementStateCurrent) UnmarshalText(data []byte) error {
	switch AnnouncementStateCurrent(data) {
	case AnnouncementStateCurrentLive:
		*s = AnnouncementStateCurrentLive
		return nil
	case AnnouncementStateCurrentDeleting:
		*s = AnnouncementStateCurrentDeleting
		return nil
	case AnnouncementStateCurrentDeleted:
		*s = AnnouncementStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type AnnouncementStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *AnnouncementStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *AnnouncementStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *AnnouncementStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *AnnouncementStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An update to an Announcement.
// Ref: #/components/schemas/AnnouncementUpdate
type AnnouncementUpdate struct {
	ID ID `json:"id"`
	// The text describing the update to the announcement.
	Message string       `json:"message"`
	Creator CreatorScope `json:"creator"`
	Time    DateTime     `json:"time"`
}

// GetID returns the value of ID.
func (s *AnnouncementUpdate) GetID() ID {
	return s.ID
}

// GetMessage returns the value of Message.
func (s *AnnouncementUpdate) GetMessage() string {
	return s.Message
}

// GetCreator returns the value of Creator.
func (s *AnnouncementUpdate) GetCreator() CreatorScope {
	return s.Creator
}

// GetTime returns the value of Time.
func (s *AnnouncementUpdate) GetTime() DateTime {
	return s.Time
}

// SetID sets the value of ID.
func (s *AnnouncementUpdate) SetID(val ID) {
	s.ID = val
}

// SetMessage sets the value of Message.
func (s *AnnouncementUpdate) SetMessage(val string) {
	s.Message = val
}

// SetCreator sets the value of Creator.
func (s *AnnouncementUpdate) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetTime sets the value of Time.
func (s *AnnouncementUpdate) SetTime(val DateTime) {
	s.Time = val
}

// An API key resource.
// Ref: #/components/schemas/ApiKey
type ApiKey struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A name for the API key.
	Name    string       `json:"name"`
	Creator CreatorScope `json:"creator"`
	// The API key secret.
	Secret string `json:"secret"`
	// Information about this members permissions for a given resource.
	Permissions ApiKeyPermissions `json:"permissions"`
	// An object holding information about the capabilities of this API key.
	Capabilities ApiKeyCapabilities `json:"capabilities"`
	// An array of IP's this API key can make calls from.
	Ips   []string    `json:"ips"`
	State ApiKeyState `json:"state"`
	// A collection of timestamps for each event in the hub's lifetime.
	Events ApiKeyEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *ApiKey) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *ApiKey) GetHubID() HubID {
	return s.HubID
}

// GetName returns the value of Name.
func (s *ApiKey) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *ApiKey) GetCreator() CreatorScope {
	return s.Creator
}

// GetSecret returns the value of Secret.
func (s *ApiKey) GetSecret() string {
	return s.Secret
}

// GetPermissions returns the value of Permissions.
func (s *ApiKey) GetPermissions() ApiKeyPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *ApiKey) GetCapabilities() ApiKeyCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *ApiKey) GetIps() []string {
	return s.Ips
}

// GetState returns the value of State.
func (s *ApiKey) GetState() ApiKeyState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ApiKey) GetEvents() ApiKeyEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *ApiKey) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *ApiKey) SetHubID(val HubID) {
	s.HubID = val
}

// SetName sets the value of Name.
func (s *ApiKey) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *ApiKey) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetSecret sets the value of Secret.
func (s *ApiKey) SetSecret(val string) {
	s.Secret = val
}

// SetPermissions sets the value of Permissions.
func (s *ApiKey) SetPermissions(val ApiKeyPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ApiKey) SetCapabilities(val ApiKeyCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *ApiKey) SetIps(val []string) {
	s.Ips = val
}

// SetState sets the value of State.
func (s *ApiKey) SetState(val ApiKeyState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ApiKey) SetEvents(val ApiKeyEvents) {
	s.Events = val
}

// An object holding information about the capabilities of this API key.
type ApiKeyCapabilities struct {
	// A boolean where true represents this key has all available capabilities.
	All bool `json:"all"`
	// An array a capabilities this key has.
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *ApiKeyCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *ApiKeyCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *ApiKeyCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *ApiKeyCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

// An extended resource that has information on a Cycle hub API key.
// Ref: #/components/schemas/ApiKeyCreator
type ApiKeyCreator struct {
	ID ID `json:"id"`
	// The name of the API key.
	Name  string `json:"name"`
	HubID ID     `json:"hub_id"`
	// The API key secret.
	Secret      OptString   `json:"secret"`
	Permissions Permissions `json:"permissions"`
	// The API key capabilities list.
	Capabilities ApiKeyCreatorCapabilities `json:"capabilities"`
	Ips          []string                  `json:"ips"`
	State        ApiKeyCreatorState        `json:"state"`
	Events       Events                    `json:"events"`
}

// GetID returns the value of ID.
func (s *ApiKeyCreator) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ApiKeyCreator) GetName() string {
	return s.Name
}

// GetHubID returns the value of HubID.
func (s *ApiKeyCreator) GetHubID() ID {
	return s.HubID
}

// GetSecret returns the value of Secret.
func (s *ApiKeyCreator) GetSecret() OptString {
	return s.Secret
}

// GetPermissions returns the value of Permissions.
func (s *ApiKeyCreator) GetPermissions() Permissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *ApiKeyCreator) GetCapabilities() ApiKeyCreatorCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *ApiKeyCreator) GetIps() []string {
	return s.Ips
}

// GetState returns the value of State.
func (s *ApiKeyCreator) GetState() ApiKeyCreatorState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ApiKeyCreator) GetEvents() Events {
	return s.Events
}

// SetID sets the value of ID.
func (s *ApiKeyCreator) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ApiKeyCreator) SetName(val string) {
	s.Name = val
}

// SetHubID sets the value of HubID.
func (s *ApiKeyCreator) SetHubID(val ID) {
	s.HubID = val
}

// SetSecret sets the value of Secret.
func (s *ApiKeyCreator) SetSecret(val OptString) {
	s.Secret = val
}

// SetPermissions sets the value of Permissions.
func (s *ApiKeyCreator) SetPermissions(val Permissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ApiKeyCreator) SetCapabilities(val ApiKeyCreatorCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *ApiKeyCreator) SetIps(val []string) {
	s.Ips = val
}

// SetState sets the value of State.
func (s *ApiKeyCreator) SetState(val ApiKeyCreatorState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ApiKeyCreator) SetEvents(val Events) {
	s.Events = val
}

// The API key capabilities list.
type ApiKeyCreatorCapabilities struct {
	All      bool     `json:"all"`
	Specific []string `json:"specific"`
}

// GetAll returns the value of All.
func (s *ApiKeyCreatorCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *ApiKeyCreatorCapabilities) GetSpecific() []string {
	return s.Specific
}

// SetAll sets the value of All.
func (s *ApiKeyCreatorCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *ApiKeyCreatorCapabilities) SetSpecific(val []string) {
	s.Specific = val
}

// Merged schema.
type ApiKeyCreatorState struct {
	Current ApiKeyCreatorStateCurrent `json:"current"`
	Changed DateTime                  `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptApiKeyCreatorStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ApiKeyCreatorState) GetCurrent() ApiKeyCreatorStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ApiKeyCreatorState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ApiKeyCreatorState) GetError() OptApiKeyCreatorStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ApiKeyCreatorState) SetCurrent(val ApiKeyCreatorStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ApiKeyCreatorState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ApiKeyCreatorState) SetError(val OptApiKeyCreatorStateError) {
	s.Error = val
}

type ApiKeyCreatorStateCurrent string

const (
	ApiKeyCreatorStateCurrentLive     ApiKeyCreatorStateCurrent = "live"
	ApiKeyCreatorStateCurrentDeleting ApiKeyCreatorStateCurrent = "deleting"
	ApiKeyCreatorStateCurrentDeleted  ApiKeyCreatorStateCurrent = "deleted"
)

// AllValues returns all ApiKeyCreatorStateCurrent values.
func (ApiKeyCreatorStateCurrent) AllValues() []ApiKeyCreatorStateCurrent {
	return []ApiKeyCreatorStateCurrent{
		ApiKeyCreatorStateCurrentLive,
		ApiKeyCreatorStateCurrentDeleting,
		ApiKeyCreatorStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyCreatorStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyCreatorStateCurrentLive:
		return []byte(s), nil
	case ApiKeyCreatorStateCurrentDeleting:
		return []byte(s), nil
	case ApiKeyCreatorStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyCreatorStateCurrent) UnmarshalText(data []byte) error {
	switch ApiKeyCreatorStateCurrent(data) {
	case ApiKeyCreatorStateCurrentLive:
		*s = ApiKeyCreatorStateCurrentLive
		return nil
	case ApiKeyCreatorStateCurrentDeleting:
		*s = ApiKeyCreatorStateCurrentDeleting
		return nil
	case ApiKeyCreatorStateCurrentDeleted:
		*s = ApiKeyCreatorStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ApiKeyCreatorStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ApiKeyCreatorStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ApiKeyCreatorStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ApiKeyCreatorStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ApiKeyCreatorStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A collection of timestamps for each event in the hub's lifetime.
type ApiKeyEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ApiKeyEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ApiKeyEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ApiKeyEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ApiKeyEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ApiKeyEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ApiKeyEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information about this members permissions for a given resource.
type ApiKeyPermissions struct {
	// A boolean where true represents the member has access to view and manage all environments for the
	// resource.
	AllEnvironments bool `json:"all_environments"`
	// An array of environments this resource has access to.
	Environments []ApiKeyPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *ApiKeyPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *ApiKeyPermissions) GetEnvironments() []ApiKeyPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *ApiKeyPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *ApiKeyPermissions) SetEnvironments(val []ApiKeyPermissionsEnvironmentsItem) {
	s.Environments = val
}

// Environment resource resources.
type ApiKeyPermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean where true represents this environment can be managed by the resource (i.e. its not just
	// read-only).
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *ApiKeyPermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *ApiKeyPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *ApiKeyPermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *ApiKeyPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// Merged schema.
// Ref: #/components/schemas/ApiKeyState
type ApiKeyState struct {
	// The current state of the API key.
	Current ApiKeyStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptApiKeyStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ApiKeyState) GetCurrent() ApiKeyStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ApiKeyState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ApiKeyState) GetError() OptApiKeyStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ApiKeyState) SetCurrent(val ApiKeyStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ApiKeyState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ApiKeyState) SetError(val OptApiKeyStateError) {
	s.Error = val
}

// The current state of the API key.
type ApiKeyStateCurrent string

const (
	ApiKeyStateCurrentNew         ApiKeyStateCurrent = "new"
	ApiKeyStateCurrentConfiguring ApiKeyStateCurrent = "configuring"
	ApiKeyStateCurrentLive        ApiKeyStateCurrent = "live"
	ApiKeyStateCurrentInactive    ApiKeyStateCurrent = "inactive"
	ApiKeyStateCurrentDeleting    ApiKeyStateCurrent = "deleting"
	ApiKeyStateCurrentDeleted     ApiKeyStateCurrent = "deleted"
)

// AllValues returns all ApiKeyStateCurrent values.
func (ApiKeyStateCurrent) AllValues() []ApiKeyStateCurrent {
	return []ApiKeyStateCurrent{
		ApiKeyStateCurrentNew,
		ApiKeyStateCurrentConfiguring,
		ApiKeyStateCurrentLive,
		ApiKeyStateCurrentInactive,
		ApiKeyStateCurrentDeleting,
		ApiKeyStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ApiKeyStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ApiKeyStateCurrentNew:
		return []byte(s), nil
	case ApiKeyStateCurrentConfiguring:
		return []byte(s), nil
	case ApiKeyStateCurrentLive:
		return []byte(s), nil
	case ApiKeyStateCurrentInactive:
		return []byte(s), nil
	case ApiKeyStateCurrentDeleting:
		return []byte(s), nil
	case ApiKeyStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ApiKeyStateCurrent) UnmarshalText(data []byte) error {
	switch ApiKeyStateCurrent(data) {
	case ApiKeyStateCurrentNew:
		*s = ApiKeyStateCurrentNew
		return nil
	case ApiKeyStateCurrentConfiguring:
		*s = ApiKeyStateCurrentConfiguring
		return nil
	case ApiKeyStateCurrentLive:
		*s = ApiKeyStateCurrentLive
		return nil
	case ApiKeyStateCurrentInactive:
		*s = ApiKeyStateCurrentInactive
		return nil
	case ApiKeyStateCurrentDeleting:
		*s = ApiKeyStateCurrentDeleting
		return nil
	case ApiKeyStateCurrentDeleted:
		*s = ApiKeyStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ApiKeyStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ApiKeyStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ApiKeyStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ApiKeyStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ApiKeyStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about a billing discount.
// Ref: #/components/schemas/AssociatedDiscount
type AssociatedDiscount struct {
	ID      ID            `json:"id"`
	Amount  BillingAmount `json:"amount"`
	Expires DateTime      `json:"expires"`
}

// GetID returns the value of ID.
func (s *AssociatedDiscount) GetID() ID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *AssociatedDiscount) GetAmount() BillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *AssociatedDiscount) GetExpires() DateTime {
	return s.Expires
}

// SetID sets the value of ID.
func (s *AssociatedDiscount) SetID(val ID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *AssociatedDiscount) SetAmount(val BillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *AssociatedDiscount) SetExpires(val DateTime) {
	s.Expires = val
}

// A DNS TLS certificate generation attempt resource.
// Ref: #/components/schemas/Attempt
type Attempt struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A list of domains associated with the attempt.
	Domains []string `json:"domains"`
	Time    DateTime `json:"time"`
	// A boolean where true means the attept was successful at creating the TLS certificate.
	Success bool `json:"success"`
	// If success is false this property will be populated with an error.
	Error OptString `json:"error"`
}

// GetID returns the value of ID.
func (s *Attempt) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Attempt) GetHubID() HubID {
	return s.HubID
}

// GetDomains returns the value of Domains.
func (s *Attempt) GetDomains() []string {
	return s.Domains
}

// GetTime returns the value of Time.
func (s *Attempt) GetTime() DateTime {
	return s.Time
}

// GetSuccess returns the value of Success.
func (s *Attempt) GetSuccess() bool {
	return s.Success
}

// GetError returns the value of Error.
func (s *Attempt) GetError() OptString {
	return s.Error
}

// SetID sets the value of ID.
func (s *Attempt) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Attempt) SetHubID(val HubID) {
	s.HubID = val
}

// SetDomains sets the value of Domains.
func (s *Attempt) SetDomains(val []string) {
	s.Domains = val
}

// SetTime sets the value of Time.
func (s *Attempt) SetTime(val DateTime) {
	s.Time = val
}

// SetSuccess sets the value of Success.
func (s *Attempt) SetSuccess(val bool) {
	s.Success = val
}

// SetError sets the value of Error.
func (s *Attempt) SetError(val OptString) {
	s.Error = val
}

// Ref: #/components/schemas/AutoScaleGroup
type AutoScaleGroup struct {
	ID             string                       `json:"id"`
	Name           string                       `json:"name"`
	Identifier     string                       `json:"identifier"`
	Creator        CreatorScope                 `json:"creator"`
	HubID          string                       `json:"hub_id"`
	Cluster        string                       `json:"cluster"`
	Scale          OptAutoScaleGroupScale       `json:"scale"`
	Infrastructure AutoScaleGroupInfrastructure `json:"infrastructure"`
	State          AutoScaleGroupState          `json:"state"`
	// A collection of timestamps for each event in the auto-scale group's lifetime.
	Events AutoScaleGroupEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *AutoScaleGroup) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *AutoScaleGroup) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *AutoScaleGroup) GetIdentifier() string {
	return s.Identifier
}

// GetCreator returns the value of Creator.
func (s *AutoScaleGroup) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *AutoScaleGroup) GetHubID() string {
	return s.HubID
}

// GetCluster returns the value of Cluster.
func (s *AutoScaleGroup) GetCluster() string {
	return s.Cluster
}

// GetScale returns the value of Scale.
func (s *AutoScaleGroup) GetScale() OptAutoScaleGroupScale {
	return s.Scale
}

// GetInfrastructure returns the value of Infrastructure.
func (s *AutoScaleGroup) GetInfrastructure() AutoScaleGroupInfrastructure {
	return s.Infrastructure
}

// GetState returns the value of State.
func (s *AutoScaleGroup) GetState() AutoScaleGroupState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *AutoScaleGroup) GetEvents() AutoScaleGroupEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *AutoScaleGroup) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AutoScaleGroup) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *AutoScaleGroup) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCreator sets the value of Creator.
func (s *AutoScaleGroup) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *AutoScaleGroup) SetHubID(val string) {
	s.HubID = val
}

// SetCluster sets the value of Cluster.
func (s *AutoScaleGroup) SetCluster(val string) {
	s.Cluster = val
}

// SetScale sets the value of Scale.
func (s *AutoScaleGroup) SetScale(val OptAutoScaleGroupScale) {
	s.Scale = val
}

// SetInfrastructure sets the value of Infrastructure.
func (s *AutoScaleGroup) SetInfrastructure(val AutoScaleGroupInfrastructure) {
	s.Infrastructure = val
}

// SetState sets the value of State.
func (s *AutoScaleGroup) SetState(val AutoScaleGroupState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *AutoScaleGroup) SetEvents(val AutoScaleGroupEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the auto-scale group's lifetime.
type AutoScaleGroupEvents struct {
	Created  DateTime `json:"created"`
	Updated  DateTime `json:"updated"`
	Deleted  DateTime `json:"deleted"`
	LastSync DateTime `json:"last_sync"`
}

// GetCreated returns the value of Created.
func (s *AutoScaleGroupEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AutoScaleGroupEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *AutoScaleGroupEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastSync returns the value of LastSync.
func (s *AutoScaleGroupEvents) GetLastSync() DateTime {
	return s.LastSync
}

// SetCreated sets the value of Created.
func (s *AutoScaleGroupEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AutoScaleGroupEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *AutoScaleGroupEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastSync sets the value of LastSync.
func (s *AutoScaleGroupEvents) SetLastSync(val DateTime) {
	s.LastSync = val
}

// All includable resource linkable to the given auto-scale group.
// Ref: #/components/schemas/AutoScaleGroupIncludes
type AutoScaleGroupIncludes struct {
	Integrations OptIntegrationsIncludes `json:"integrations"`
	Models       OptServerModelsIncludes `json:"models"`
	Locations    OptLocationsIncludes    `json:"locations"`
}

// GetIntegrations returns the value of Integrations.
func (s *AutoScaleGroupIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// GetModels returns the value of Models.
func (s *AutoScaleGroupIncludes) GetModels() OptServerModelsIncludes {
	return s.Models
}

// GetLocations returns the value of Locations.
func (s *AutoScaleGroupIncludes) GetLocations() OptLocationsIncludes {
	return s.Locations
}

// SetIntegrations sets the value of Integrations.
func (s *AutoScaleGroupIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// SetModels sets the value of Models.
func (s *AutoScaleGroupIncludes) SetModels(val OptServerModelsIncludes) {
	s.Models = val
}

// SetLocations sets the value of Locations.
func (s *AutoScaleGroupIncludes) SetLocations(val OptLocationsIncludes) {
	s.Locations = val
}

// Ref: #/components/schemas/AutoScaleGroupInfrastructure
type AutoScaleGroupInfrastructure struct {
	Models []AutoScaleGroupInfrastructureModelsItem `json:"models"`
}

// GetModels returns the value of Models.
func (s *AutoScaleGroupInfrastructure) GetModels() []AutoScaleGroupInfrastructureModelsItem {
	return s.Models
}

// SetModels sets the value of Models.
func (s *AutoScaleGroupInfrastructure) SetModels(val []AutoScaleGroupInfrastructureModelsItem) {
	s.Models = val
}

type AutoScaleGroupInfrastructureModelsItem struct {
	// The integration identifier for infrastructure provider used.
	Provider      string                                                `json:"provider"`
	IntegrationID OptID                                                 `json:"integration_id"`
	ModelID       string                                                `json:"model_id"`
	Priority      int                                                   `json:"priority"`
	Locations     []AutoScaleGroupInfrastructureModelsItemLocationsItem `json:"locations"`
}

// GetProvider returns the value of Provider.
func (s *AutoScaleGroupInfrastructureModelsItem) GetProvider() string {
	return s.Provider
}

// GetIntegrationID returns the value of IntegrationID.
func (s *AutoScaleGroupInfrastructureModelsItem) GetIntegrationID() OptID {
	return s.IntegrationID
}

// GetModelID returns the value of ModelID.
func (s *AutoScaleGroupInfrastructureModelsItem) GetModelID() string {
	return s.ModelID
}

// GetPriority returns the value of Priority.
func (s *AutoScaleGroupInfrastructureModelsItem) GetPriority() int {
	return s.Priority
}

// GetLocations returns the value of Locations.
func (s *AutoScaleGroupInfrastructureModelsItem) GetLocations() []AutoScaleGroupInfrastructureModelsItemLocationsItem {
	return s.Locations
}

// SetProvider sets the value of Provider.
func (s *AutoScaleGroupInfrastructureModelsItem) SetProvider(val string) {
	s.Provider = val
}

// SetIntegrationID sets the value of IntegrationID.
func (s *AutoScaleGroupInfrastructureModelsItem) SetIntegrationID(val OptID) {
	s.IntegrationID = val
}

// SetModelID sets the value of ModelID.
func (s *AutoScaleGroupInfrastructureModelsItem) SetModelID(val string) {
	s.ModelID = val
}

// SetPriority sets the value of Priority.
func (s *AutoScaleGroupInfrastructureModelsItem) SetPriority(val int) {
	s.Priority = val
}

// SetLocations sets the value of Locations.
func (s *AutoScaleGroupInfrastructureModelsItem) SetLocations(val []AutoScaleGroupInfrastructureModelsItemLocationsItem) {
	s.Locations = val
}

type AutoScaleGroupInfrastructureModelsItemLocationsItem struct {
	ID                string   `json:"id"`
	AvailabilityZones []string `json:"availability_zones"`
}

// GetID returns the value of ID.
func (s *AutoScaleGroupInfrastructureModelsItemLocationsItem) GetID() string {
	return s.ID
}

// GetAvailabilityZones returns the value of AvailabilityZones.
func (s *AutoScaleGroupInfrastructureModelsItemLocationsItem) GetAvailabilityZones() []string {
	return s.AvailabilityZones
}

// SetID sets the value of ID.
func (s *AutoScaleGroupInfrastructureModelsItemLocationsItem) SetID(val string) {
	s.ID = val
}

// SetAvailabilityZones sets the value of AvailabilityZones.
func (s *AutoScaleGroupInfrastructureModelsItemLocationsItem) SetAvailabilityZones(val []string) {
	s.AvailabilityZones = val
}

// Ref: #/components/schemas/AutoScaleGroupScale
type AutoScaleGroupScale struct {
	Down OptAutoScaleGroupScaleDown `json:"down"`
	Up   OptAutoScaleGroupScaleUp   `json:"up"`
}

// GetDown returns the value of Down.
func (s *AutoScaleGroupScale) GetDown() OptAutoScaleGroupScaleDown {
	return s.Down
}

// GetUp returns the value of Up.
func (s *AutoScaleGroupScale) GetUp() OptAutoScaleGroupScaleUp {
	return s.Up
}

// SetDown sets the value of Down.
func (s *AutoScaleGroupScale) SetDown(val OptAutoScaleGroupScaleDown) {
	s.Down = val
}

// SetUp sets the value of Up.
func (s *AutoScaleGroupScale) SetUp(val OptAutoScaleGroupScaleUp) {
	s.Up = val
}

type AutoScaleGroupScaleDown struct {
	MinTTL           OptDuration                      `json:"min_ttl"`
	InactivityPeriod OptDuration                      `json:"inactivity_period"`
	Method           OptAutoScaleGroupScaleDownMethod `json:"method"`
}

// GetMinTTL returns the value of MinTTL.
func (s *AutoScaleGroupScaleDown) GetMinTTL() OptDuration {
	return s.MinTTL
}

// GetInactivityPeriod returns the value of InactivityPeriod.
func (s *AutoScaleGroupScaleDown) GetInactivityPeriod() OptDuration {
	return s.InactivityPeriod
}

// GetMethod returns the value of Method.
func (s *AutoScaleGroupScaleDown) GetMethod() OptAutoScaleGroupScaleDownMethod {
	return s.Method
}

// SetMinTTL sets the value of MinTTL.
func (s *AutoScaleGroupScaleDown) SetMinTTL(val OptDuration) {
	s.MinTTL = val
}

// SetInactivityPeriod sets the value of InactivityPeriod.
func (s *AutoScaleGroupScaleDown) SetInactivityPeriod(val OptDuration) {
	s.InactivityPeriod = val
}

// SetMethod sets the value of Method.
func (s *AutoScaleGroupScaleDown) SetMethod(val OptAutoScaleGroupScaleDownMethod) {
	s.Method = val
}

type AutoScaleGroupScaleDownMethod string

const (
	AutoScaleGroupScaleDownMethodFifo AutoScaleGroupScaleDownMethod = "fifo"
	AutoScaleGroupScaleDownMethodLifo AutoScaleGroupScaleDownMethod = "lifo"
)

// AllValues returns all AutoScaleGroupScaleDownMethod values.
func (AutoScaleGroupScaleDownMethod) AllValues() []AutoScaleGroupScaleDownMethod {
	return []AutoScaleGroupScaleDownMethod{
		AutoScaleGroupScaleDownMethodFifo,
		AutoScaleGroupScaleDownMethodLifo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AutoScaleGroupScaleDownMethod) MarshalText() ([]byte, error) {
	switch s {
	case AutoScaleGroupScaleDownMethodFifo:
		return []byte(s), nil
	case AutoScaleGroupScaleDownMethodLifo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AutoScaleGroupScaleDownMethod) UnmarshalText(data []byte) error {
	switch AutoScaleGroupScaleDownMethod(data) {
	case AutoScaleGroupScaleDownMethodFifo:
		*s = AutoScaleGroupScaleDownMethodFifo
		return nil
	case AutoScaleGroupScaleDownMethodLifo:
		*s = AutoScaleGroupScaleDownMethodLifo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AutoScaleGroupScaleUp struct {
	Maximum OptInt `json:"maximum"`
}

// GetMaximum returns the value of Maximum.
func (s *AutoScaleGroupScaleUp) GetMaximum() OptInt {
	return s.Maximum
}

// SetMaximum sets the value of Maximum.
func (s *AutoScaleGroupScaleUp) SetMaximum(val OptInt) {
	s.Maximum = val
}

// Merged schema.
type AutoScaleGroupState struct {
	// The current state of the auto-scale group.
	Current AutoScaleGroupStateCurrent `json:"current"`
	Changed DateTime                   `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptAutoScaleGroupStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *AutoScaleGroupState) GetCurrent() AutoScaleGroupStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *AutoScaleGroupState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *AutoScaleGroupState) GetError() OptAutoScaleGroupStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *AutoScaleGroupState) SetCurrent(val AutoScaleGroupStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *AutoScaleGroupState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *AutoScaleGroupState) SetError(val OptAutoScaleGroupStateError) {
	s.Error = val
}

// The current state of the auto-scale group.
type AutoScaleGroupStateCurrent string

const (
	AutoScaleGroupStateCurrentNew      AutoScaleGroupStateCurrent = "new"
	AutoScaleGroupStateCurrentLive     AutoScaleGroupStateCurrent = "live"
	AutoScaleGroupStateCurrentDeleting AutoScaleGroupStateCurrent = "deleting"
	AutoScaleGroupStateCurrentDeleted  AutoScaleGroupStateCurrent = "deleted"
)

// AllValues returns all AutoScaleGroupStateCurrent values.
func (AutoScaleGroupStateCurrent) AllValues() []AutoScaleGroupStateCurrent {
	return []AutoScaleGroupStateCurrent{
		AutoScaleGroupStateCurrentNew,
		AutoScaleGroupStateCurrentLive,
		AutoScaleGroupStateCurrentDeleting,
		AutoScaleGroupStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AutoScaleGroupStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case AutoScaleGroupStateCurrentNew:
		return []byte(s), nil
	case AutoScaleGroupStateCurrentLive:
		return []byte(s), nil
	case AutoScaleGroupStateCurrentDeleting:
		return []byte(s), nil
	case AutoScaleGroupStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AutoScaleGroupStateCurrent) UnmarshalText(data []byte) error {
	switch AutoScaleGroupStateCurrent(data) {
	case AutoScaleGroupStateCurrentNew:
		*s = AutoScaleGroupStateCurrentNew
		return nil
	case AutoScaleGroupStateCurrentLive:
		*s = AutoScaleGroupStateCurrentLive
		return nil
	case AutoScaleGroupStateCurrentDeleting:
		*s = AutoScaleGroupStateCurrentDeleting
		return nil
	case AutoScaleGroupStateCurrentDeleted:
		*s = AutoScaleGroupStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type AutoScaleGroupStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *AutoScaleGroupStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *AutoScaleGroupStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *AutoScaleGroupStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *AutoScaleGroupStateError) SetTime(val OptDateTime) {
	s.Time = val
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// An object holding information about term and amount that relates to a specific billing component.
// Ref: #/components/schemas/BillingAmount
type BillingAmount struct {
	// 1/10th of a cent.
	Mills int `json:"mills"`
	// The length of the term.
	Term BillingAmountTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingAmount) GetMills() int {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingAmount) GetTerm() BillingAmountTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingAmount) SetMills(val int) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingAmount) SetTerm(val BillingAmountTerm) {
	s.Term = val
}

// The length of the term.
type BillingAmountTerm string

const (
	BillingAmountTermOnce    BillingAmountTerm = "once"
	BillingAmountTermMonthly BillingAmountTerm = "monthly"
	BillingAmountTermYearly  BillingAmountTerm = "yearly"
)

// AllValues returns all BillingAmountTerm values.
func (BillingAmountTerm) AllValues() []BillingAmountTerm {
	return []BillingAmountTerm{
		BillingAmountTermOnce,
		BillingAmountTermMonthly,
		BillingAmountTermYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingAmountTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingAmountTermOnce:
		return []byte(s), nil
	case BillingAmountTermMonthly:
		return []byte(s), nil
	case BillingAmountTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingAmountTerm) UnmarshalText(data []byte) error {
	switch BillingAmountTerm(data) {
	case BillingAmountTermOnce:
		*s = BillingAmountTermOnce
		return nil
	case BillingAmountTermMonthly:
		*s = BillingAmountTermMonthly
		return nil
	case BillingAmountTermYearly:
		*s = BillingAmountTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingBuilds
type BillingBuilds struct {
	Parallel float64 `json:"parallel"`
	// The number of CPU Cores availiable for builds.
	CPUCores float64 `json:"cpu_cores"`
	// The amount of RAM availiable for builds.
	RAMGB float64 `json:"ram_gb"`
	// The maximum number of builds processed per day.
	MaxDailyBuilds NilInt `json:"max_daily_builds"`
}

// GetParallel returns the value of Parallel.
func (s *BillingBuilds) GetParallel() float64 {
	return s.Parallel
}

// GetCPUCores returns the value of CPUCores.
func (s *BillingBuilds) GetCPUCores() float64 {
	return s.CPUCores
}

// GetRAMGB returns the value of RAMGB.
func (s *BillingBuilds) GetRAMGB() float64 {
	return s.RAMGB
}

// GetMaxDailyBuilds returns the value of MaxDailyBuilds.
func (s *BillingBuilds) GetMaxDailyBuilds() NilInt {
	return s.MaxDailyBuilds
}

// SetParallel sets the value of Parallel.
func (s *BillingBuilds) SetParallel(val float64) {
	s.Parallel = val
}

// SetCPUCores sets the value of CPUCores.
func (s *BillingBuilds) SetCPUCores(val float64) {
	s.CPUCores = val
}

// SetRAMGB sets the value of RAMGB.
func (s *BillingBuilds) SetRAMGB(val float64) {
	s.RAMGB = val
}

// SetMaxDailyBuilds sets the value of MaxDailyBuilds.
func (s *BillingBuilds) SetMaxDailyBuilds(val NilInt) {
	s.MaxDailyBuilds = val
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingImageStorage
type BillingImageStorage struct {
	// The GB of image storage included in tier.
	IncludedGB float64 `json:"included_gb"`
	// Additional cost for image storage exceeding included_gb.
	AdditionalGB BillingImageStorageAdditionalGB `json:"additional_gb"`
	// A boolean indicating if there is a hard limit on the image storage.
	HardCap bool `json:"hard_cap"`
}

// GetIncludedGB returns the value of IncludedGB.
func (s *BillingImageStorage) GetIncludedGB() float64 {
	return s.IncludedGB
}

// GetAdditionalGB returns the value of AdditionalGB.
func (s *BillingImageStorage) GetAdditionalGB() BillingImageStorageAdditionalGB {
	return s.AdditionalGB
}

// GetHardCap returns the value of HardCap.
func (s *BillingImageStorage) GetHardCap() bool {
	return s.HardCap
}

// SetIncludedGB sets the value of IncludedGB.
func (s *BillingImageStorage) SetIncludedGB(val float64) {
	s.IncludedGB = val
}

// SetAdditionalGB sets the value of AdditionalGB.
func (s *BillingImageStorage) SetAdditionalGB(val BillingImageStorageAdditionalGB) {
	s.AdditionalGB = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingImageStorage) SetHardCap(val bool) {
	s.HardCap = val
}

// Additional cost for image storage exceeding included_gb.
type BillingImageStorageAdditionalGB struct {
	Mills float64                             `json:"mills"`
	Term  BillingImageStorageAdditionalGBTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingImageStorageAdditionalGB) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingImageStorageAdditionalGB) GetTerm() BillingImageStorageAdditionalGBTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingImageStorageAdditionalGB) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingImageStorageAdditionalGB) SetTerm(val BillingImageStorageAdditionalGBTerm) {
	s.Term = val
}

type BillingImageStorageAdditionalGBTerm string

const (
	BillingImageStorageAdditionalGBTermOnce    BillingImageStorageAdditionalGBTerm = "once"
	BillingImageStorageAdditionalGBTermMonthly BillingImageStorageAdditionalGBTerm = "monthly"
	BillingImageStorageAdditionalGBTermYearly  BillingImageStorageAdditionalGBTerm = "yearly"
)

// AllValues returns all BillingImageStorageAdditionalGBTerm values.
func (BillingImageStorageAdditionalGBTerm) AllValues() []BillingImageStorageAdditionalGBTerm {
	return []BillingImageStorageAdditionalGBTerm{
		BillingImageStorageAdditionalGBTermOnce,
		BillingImageStorageAdditionalGBTermMonthly,
		BillingImageStorageAdditionalGBTermYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingImageStorageAdditionalGBTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingImageStorageAdditionalGBTermOnce:
		return []byte(s), nil
	case BillingImageStorageAdditionalGBTermMonthly:
		return []byte(s), nil
	case BillingImageStorageAdditionalGBTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingImageStorageAdditionalGBTerm) UnmarshalText(data []byte) error {
	switch BillingImageStorageAdditionalGBTerm(data) {
	case BillingImageStorageAdditionalGBTermOnce:
		*s = BillingImageStorageAdditionalGBTermOnce
		return nil
	case BillingImageStorageAdditionalGBTermMonthly:
		*s = BillingImageStorageAdditionalGBTermMonthly
		return nil
	case BillingImageStorageAdditionalGBTermYearly:
		*s = BillingImageStorageAdditionalGBTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about members included in Billing tier.
// Ref: #/components/schemas/BillingMembers
type BillingMembers struct {
	// The number of members included in the tier price.
	Included float64 `json:"included"`
	// A boolean indicating if there is a hard member limit on the tier.
	HardCap bool `json:"hard_cap"`
	// An object describing the additonal cost of members exceeding the included member count.
	Additional BillingMembersAdditional `json:"additional"`
}

// GetIncluded returns the value of Included.
func (s *BillingMembers) GetIncluded() float64 {
	return s.Included
}

// GetHardCap returns the value of HardCap.
func (s *BillingMembers) GetHardCap() bool {
	return s.HardCap
}

// GetAdditional returns the value of Additional.
func (s *BillingMembers) GetAdditional() BillingMembersAdditional {
	return s.Additional
}

// SetIncluded sets the value of Included.
func (s *BillingMembers) SetIncluded(val float64) {
	s.Included = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingMembers) SetHardCap(val bool) {
	s.HardCap = val
}

// SetAdditional sets the value of Additional.
func (s *BillingMembers) SetAdditional(val BillingMembersAdditional) {
	s.Additional = val
}

// An object describing the additonal cost of members exceeding the included member count.
type BillingMembersAdditional struct {
	Mills float64                      `json:"mills"`
	Term  BillingMembersAdditionalTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingMembersAdditional) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingMembersAdditional) GetTerm() BillingMembersAdditionalTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingMembersAdditional) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingMembersAdditional) SetTerm(val BillingMembersAdditionalTerm) {
	s.Term = val
}

type BillingMembersAdditionalTerm string

const (
	BillingMembersAdditionalTermOnce    BillingMembersAdditionalTerm = "once"
	BillingMembersAdditionalTermMonthly BillingMembersAdditionalTerm = "monthly"
	BillingMembersAdditionalTermYearly  BillingMembersAdditionalTerm = "yearly"
)

// AllValues returns all BillingMembersAdditionalTerm values.
func (BillingMembersAdditionalTerm) AllValues() []BillingMembersAdditionalTerm {
	return []BillingMembersAdditionalTerm{
		BillingMembersAdditionalTermOnce,
		BillingMembersAdditionalTermMonthly,
		BillingMembersAdditionalTermYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingMembersAdditionalTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingMembersAdditionalTermOnce:
		return []byte(s), nil
	case BillingMembersAdditionalTermMonthly:
		return []byte(s), nil
	case BillingMembersAdditionalTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingMembersAdditionalTerm) UnmarshalText(data []byte) error {
	switch BillingMembersAdditionalTerm(data) {
	case BillingMembersAdditionalTermOnce:
		*s = BillingMembersAdditionalTermOnce
		return nil
	case BillingMembersAdditionalTermMonthly:
		*s = BillingMembersAdditionalTermMonthly
		return nil
	case BillingMembersAdditionalTermYearly:
		*s = BillingMembersAdditionalTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Expiration information for a billing method.
// Ref: #/components/schemas/BillingMethodExpiration
type BillingMethodExpiration struct {
	// The month the billing method expires.
	Month int `json:"month"`
	// The year the billing method expires.
	Year int `json:"year"`
}

// GetMonth returns the value of Month.
func (s *BillingMethodExpiration) GetMonth() int {
	return s.Month
}

// GetYear returns the value of Year.
func (s *BillingMethodExpiration) GetYear() int {
	return s.Year
}

// SetMonth sets the value of Month.
func (s *BillingMethodExpiration) SetMonth(val int) {
	s.Month = val
}

// SetYear sets the value of Year.
func (s *BillingMethodExpiration) SetYear(val int) {
	s.Year = val
}

// Information about an order.
// Ref: #/components/schemas/BillingOrder
type BillingOrder struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// An ID associated with a promo code used with the order.
	PromoCodeID NilString `json:"promo_code_id"`
	Term        Term      `json:"term"`
	// A boolean where true represents the order is approved to be paid by the user.
	Approved bool          `json:"approved"`
	Items    []ServiceItem `json:"items"`
	// 1/10th of a cent.
	TotalPrice int `json:"total_price"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events BillingOrderEvents `json:"events"`
	State  BillingOrderState  `json:"state"`
}

// GetID returns the value of ID.
func (s *BillingOrder) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *BillingOrder) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *BillingOrder) GetCreator() CreatorScope {
	return s.Creator
}

// GetPromoCodeID returns the value of PromoCodeID.
func (s *BillingOrder) GetPromoCodeID() NilString {
	return s.PromoCodeID
}

// GetTerm returns the value of Term.
func (s *BillingOrder) GetTerm() Term {
	return s.Term
}

// GetApproved returns the value of Approved.
func (s *BillingOrder) GetApproved() bool {
	return s.Approved
}

// GetItems returns the value of Items.
func (s *BillingOrder) GetItems() []ServiceItem {
	return s.Items
}

// GetTotalPrice returns the value of TotalPrice.
func (s *BillingOrder) GetTotalPrice() int {
	return s.TotalPrice
}

// GetEvents returns the value of Events.
func (s *BillingOrder) GetEvents() BillingOrderEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *BillingOrder) GetState() BillingOrderState {
	return s.State
}

// SetID sets the value of ID.
func (s *BillingOrder) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *BillingOrder) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *BillingOrder) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetPromoCodeID sets the value of PromoCodeID.
func (s *BillingOrder) SetPromoCodeID(val NilString) {
	s.PromoCodeID = val
}

// SetTerm sets the value of Term.
func (s *BillingOrder) SetTerm(val Term) {
	s.Term = val
}

// SetApproved sets the value of Approved.
func (s *BillingOrder) SetApproved(val bool) {
	s.Approved = val
}

// SetItems sets the value of Items.
func (s *BillingOrder) SetItems(val []ServiceItem) {
	s.Items = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *BillingOrder) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetEvents sets the value of Events.
func (s *BillingOrder) SetEvents(val BillingOrderEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *BillingOrder) SetState(val BillingOrderState) {
	s.State = val
}

// A collection of timestamps for each event in the billing order's lifetime.
type BillingOrderEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
	Expires DateTime `json:"expires"`
}

// GetCreated returns the value of Created.
func (s *BillingOrderEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *BillingOrderEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *BillingOrderEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetExpires returns the value of Expires.
func (s *BillingOrderEvents) GetExpires() DateTime {
	return s.Expires
}

// SetCreated sets the value of Created.
func (s *BillingOrderEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *BillingOrderEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *BillingOrderEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetExpires sets the value of Expires.
func (s *BillingOrderEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// Ref: #/components/schemas/BillingOrderIncludes
type BillingOrderIncludes struct {
	PromoCodes OptPromoCodeInclude `json:"promo_codes"`
}

// GetPromoCodes returns the value of PromoCodes.
func (s *BillingOrderIncludes) GetPromoCodes() OptPromoCodeInclude {
	return s.PromoCodes
}

// SetPromoCodes sets the value of PromoCodes.
func (s *BillingOrderIncludes) SetPromoCodes(val OptPromoCodeInclude) {
	s.PromoCodes = val
}

// Merged schema.
type BillingOrderState struct {
	// The current state of the order.
	Current BillingOrderStateCurrent `json:"current"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptBillingOrderStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *BillingOrderState) GetCurrent() BillingOrderStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *BillingOrderState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *BillingOrderState) GetError() OptBillingOrderStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *BillingOrderState) SetCurrent(val BillingOrderStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *BillingOrderState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *BillingOrderState) SetError(val OptBillingOrderStateError) {
	s.Error = val
}

// The current state of the order.
type BillingOrderStateCurrent string

const (
	BillingOrderStateCurrentNew       BillingOrderStateCurrent = "new"
	BillingOrderStateCurrentProcessed BillingOrderStateCurrent = "processed"
	BillingOrderStateCurrentDeleting  BillingOrderStateCurrent = "deleting"
	BillingOrderStateCurrentDeleted   BillingOrderStateCurrent = "deleted"
)

// AllValues returns all BillingOrderStateCurrent values.
func (BillingOrderStateCurrent) AllValues() []BillingOrderStateCurrent {
	return []BillingOrderStateCurrent{
		BillingOrderStateCurrentNew,
		BillingOrderStateCurrentProcessed,
		BillingOrderStateCurrentDeleting,
		BillingOrderStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingOrderStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case BillingOrderStateCurrentNew:
		return []byte(s), nil
	case BillingOrderStateCurrentProcessed:
		return []byte(s), nil
	case BillingOrderStateCurrentDeleting:
		return []byte(s), nil
	case BillingOrderStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingOrderStateCurrent) UnmarshalText(data []byte) error {
	switch BillingOrderStateCurrent(data) {
	case BillingOrderStateCurrentNew:
		*s = BillingOrderStateCurrentNew
		return nil
	case BillingOrderStateCurrentProcessed:
		*s = BillingOrderStateCurrentProcessed
		return nil
	case BillingOrderStateCurrentDeleting:
		*s = BillingOrderStateCurrentDeleting
		return nil
	case BillingOrderStateCurrentDeleted:
		*s = BillingOrderStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type BillingOrderStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *BillingOrderStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *BillingOrderStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *BillingOrderStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *BillingOrderStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingRam
type BillingRam struct {
	// The GB of image storage included in tier.
	IncludedGB float64 `json:"included_gb"`
	// Additional cost for image storage exceeding included_gb.
	AdditionalGB BillingRamAdditionalGB `json:"additional_gb"`
	// A boolean indicating if there is a hard limit on the image storage.
	HardCap bool `json:"hard_cap"`
}

// GetIncludedGB returns the value of IncludedGB.
func (s *BillingRam) GetIncludedGB() float64 {
	return s.IncludedGB
}

// GetAdditionalGB returns the value of AdditionalGB.
func (s *BillingRam) GetAdditionalGB() BillingRamAdditionalGB {
	return s.AdditionalGB
}

// GetHardCap returns the value of HardCap.
func (s *BillingRam) GetHardCap() bool {
	return s.HardCap
}

// SetIncludedGB sets the value of IncludedGB.
func (s *BillingRam) SetIncludedGB(val float64) {
	s.IncludedGB = val
}

// SetAdditionalGB sets the value of AdditionalGB.
func (s *BillingRam) SetAdditionalGB(val BillingRamAdditionalGB) {
	s.AdditionalGB = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingRam) SetHardCap(val bool) {
	s.HardCap = val
}

// Additional cost for image storage exceeding included_gb.
type BillingRamAdditionalGB struct {
	Mills float64                    `json:"mills"`
	Term  BillingRamAdditionalGBTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingRamAdditionalGB) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingRamAdditionalGB) GetTerm() BillingRamAdditionalGBTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingRamAdditionalGB) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingRamAdditionalGB) SetTerm(val BillingRamAdditionalGBTerm) {
	s.Term = val
}

type BillingRamAdditionalGBTerm string

const (
	BillingRamAdditionalGBTermOnce    BillingRamAdditionalGBTerm = "once"
	BillingRamAdditionalGBTermMonthly BillingRamAdditionalGBTerm = "monthly"
	BillingRamAdditionalGBTermYearly  BillingRamAdditionalGBTerm = "yearly"
)

// AllValues returns all BillingRamAdditionalGBTerm values.
func (BillingRamAdditionalGBTerm) AllValues() []BillingRamAdditionalGBTerm {
	return []BillingRamAdditionalGBTerm{
		BillingRamAdditionalGBTermOnce,
		BillingRamAdditionalGBTermMonthly,
		BillingRamAdditionalGBTermYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingRamAdditionalGBTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingRamAdditionalGBTermOnce:
		return []byte(s), nil
	case BillingRamAdditionalGBTermMonthly:
		return []byte(s), nil
	case BillingRamAdditionalGBTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingRamAdditionalGBTerm) UnmarshalText(data []byte) error {
	switch BillingRamAdditionalGBTerm(data) {
	case BillingRamAdditionalGBTermOnce:
		*s = BillingRamAdditionalGBTermOnce
		return nil
	case BillingRamAdditionalGBTermMonthly:
		*s = BillingRamAdditionalGBTermMonthly
		return nil
	case BillingRamAdditionalGBTermYearly:
		*s = BillingRamAdditionalGBTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An object holding information about servers included in Billing tier.
// Ref: #/components/schemas/BillingServers
type BillingServers struct {
	// The number of servers included in the tier price.
	Included float64 `json:"included"`
	// A boolean indicating if there is a hard server limit on the tier.
	HardCap bool `json:"hard_cap"`
	// An object describing the additonal cost of servers exceeding the included server count.
	Additional BillingServersAdditional `json:"additional"`
}

// GetIncluded returns the value of Included.
func (s *BillingServers) GetIncluded() float64 {
	return s.Included
}

// GetHardCap returns the value of HardCap.
func (s *BillingServers) GetHardCap() bool {
	return s.HardCap
}

// GetAdditional returns the value of Additional.
func (s *BillingServers) GetAdditional() BillingServersAdditional {
	return s.Additional
}

// SetIncluded sets the value of Included.
func (s *BillingServers) SetIncluded(val float64) {
	s.Included = val
}

// SetHardCap sets the value of HardCap.
func (s *BillingServers) SetHardCap(val bool) {
	s.HardCap = val
}

// SetAdditional sets the value of Additional.
func (s *BillingServers) SetAdditional(val BillingServersAdditional) {
	s.Additional = val
}

// An object describing the additonal cost of servers exceeding the included server count.
type BillingServersAdditional struct {
	Mills float64                      `json:"mills"`
	Term  BillingServersAdditionalTerm `json:"term"`
}

// GetMills returns the value of Mills.
func (s *BillingServersAdditional) GetMills() float64 {
	return s.Mills
}

// GetTerm returns the value of Term.
func (s *BillingServersAdditional) GetTerm() BillingServersAdditionalTerm {
	return s.Term
}

// SetMills sets the value of Mills.
func (s *BillingServersAdditional) SetMills(val float64) {
	s.Mills = val
}

// SetTerm sets the value of Term.
func (s *BillingServersAdditional) SetTerm(val BillingServersAdditionalTerm) {
	s.Term = val
}

type BillingServersAdditionalTerm string

const (
	BillingServersAdditionalTermOnce    BillingServersAdditionalTerm = "once"
	BillingServersAdditionalTermMonthly BillingServersAdditionalTerm = "monthly"
	BillingServersAdditionalTermYearly  BillingServersAdditionalTerm = "yearly"
)

// AllValues returns all BillingServersAdditionalTerm values.
func (BillingServersAdditionalTerm) AllValues() []BillingServersAdditionalTerm {
	return []BillingServersAdditionalTerm{
		BillingServersAdditionalTermOnce,
		BillingServersAdditionalTermMonthly,
		BillingServersAdditionalTermYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingServersAdditionalTerm) MarshalText() ([]byte, error) {
	switch s {
	case BillingServersAdditionalTermOnce:
		return []byte(s), nil
	case BillingServersAdditionalTermMonthly:
		return []byte(s), nil
	case BillingServersAdditionalTermYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingServersAdditionalTerm) UnmarshalText(data []byte) error {
	switch BillingServersAdditionalTerm(data) {
	case BillingServersAdditionalTermOnce:
		*s = BillingServersAdditionalTermOnce
		return nil
	case BillingServersAdditionalTermMonthly:
		*s = BillingServersAdditionalTermMonthly
		return nil
	case BillingServersAdditionalTermYearly:
		*s = BillingServersAdditionalTermYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/BillingServiceState
type BillingServiceState struct {
	// The current state of the billing service.
	Current BillingServiceStateCurrent `json:"current"`
	Changed DateTime                   `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptBillingServiceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *BillingServiceState) GetCurrent() BillingServiceStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *BillingServiceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *BillingServiceState) GetError() OptBillingServiceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *BillingServiceState) SetCurrent(val BillingServiceStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *BillingServiceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *BillingServiceState) SetError(val OptBillingServiceStateError) {
	s.Error = val
}

// The current state of the billing service.
type BillingServiceStateCurrent string

const (
	BillingServiceStateCurrentActive BillingServiceStateCurrent = "active"
)

// AllValues returns all BillingServiceStateCurrent values.
func (BillingServiceStateCurrent) AllValues() []BillingServiceStateCurrent {
	return []BillingServiceStateCurrent{
		BillingServiceStateCurrentActive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingServiceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case BillingServiceStateCurrentActive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingServiceStateCurrent) UnmarshalText(data []byte) error {
	switch BillingServiceStateCurrent(data) {
	case BillingServiceStateCurrentActive:
		*s = BillingServiceStateCurrentActive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type BillingServiceStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *BillingServiceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *BillingServiceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *BillingServiceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *BillingServiceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A billing summary.
// Ref: #/components/schemas/BillingSummary
type BillingSummary struct {
	// The ID of the billing service, the summary pertains to.
	ServiceID string `json:"service_id"`
	// The billing summary title.
	Title string `json:"title"`
	// The plan type.
	Type BillingSummaryType `json:"type"`
	Term Term               `json:"term"`
	// 1/10th of a cent.
	Price    string `json:"price"`
	Discount string `json:"discount"`
}

// GetServiceID returns the value of ServiceID.
func (s *BillingSummary) GetServiceID() string {
	return s.ServiceID
}

// GetTitle returns the value of Title.
func (s *BillingSummary) GetTitle() string {
	return s.Title
}

// GetType returns the value of Type.
func (s *BillingSummary) GetType() BillingSummaryType {
	return s.Type
}

// GetTerm returns the value of Term.
func (s *BillingSummary) GetTerm() Term {
	return s.Term
}

// GetPrice returns the value of Price.
func (s *BillingSummary) GetPrice() string {
	return s.Price
}

// GetDiscount returns the value of Discount.
func (s *BillingSummary) GetDiscount() string {
	return s.Discount
}

// SetServiceID sets the value of ServiceID.
func (s *BillingSummary) SetServiceID(val string) {
	s.ServiceID = val
}

// SetTitle sets the value of Title.
func (s *BillingSummary) SetTitle(val string) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *BillingSummary) SetType(val BillingSummaryType) {
	s.Type = val
}

// SetTerm sets the value of Term.
func (s *BillingSummary) SetTerm(val Term) {
	s.Term = val
}

// SetPrice sets the value of Price.
func (s *BillingSummary) SetPrice(val string) {
	s.Price = val
}

// SetDiscount sets the value of Discount.
func (s *BillingSummary) SetDiscount(val string) {
	s.Discount = val
}

// The plan type.
type BillingSummaryType string

const (
	BillingSummaryTypeTier    BillingSummaryType = "tier"
	BillingSummaryTypeSupport BillingSummaryType = "support"
)

// AllValues returns all BillingSummaryType values.
func (BillingSummaryType) AllValues() []BillingSummaryType {
	return []BillingSummaryType{
		BillingSummaryTypeTier,
		BillingSummaryTypeSupport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BillingSummaryType) MarshalText() ([]byte, error) {
	switch s {
	case BillingSummaryTypeTier:
		return []byte(s), nil
	case BillingSummaryTypeSupport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BillingSummaryType) UnmarshalText(data []byte) error {
	switch BillingSummaryType(data) {
	case BillingSummaryTypeTier:
		*s = BillingSummaryTypeTier
		return nil
	case BillingSummaryTypeSupport:
		*s = BillingSummaryTypeSupport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BucketImageSourceType
type BucketImageSourceType struct {
	Details  OptBucketImageSourceTypeDetails  `json:"details"`
	Override OptBucketImageSourceTypeOverride `json:"override"`
}

// GetDetails returns the value of Details.
func (s *BucketImageSourceType) GetDetails() OptBucketImageSourceTypeDetails {
	return s.Details
}

// GetOverride returns the value of Override.
func (s *BucketImageSourceType) GetOverride() OptBucketImageSourceTypeOverride {
	return s.Override
}

// SetDetails sets the value of Details.
func (s *BucketImageSourceType) SetDetails(val OptBucketImageSourceTypeDetails) {
	s.Details = val
}

// SetOverride sets the value of Override.
func (s *BucketImageSourceType) SetOverride(val OptBucketImageSourceTypeOverride) {
	s.Override = val
}

type BucketImageSourceTypeDetails struct {
	ID     string      `json:"id"`
	Origin ImageOrigin `json:"origin"`
}

// GetID returns the value of ID.
func (s *BucketImageSourceTypeDetails) GetID() string {
	return s.ID
}

// GetOrigin returns the value of Origin.
func (s *BucketImageSourceTypeDetails) GetOrigin() ImageOrigin {
	return s.Origin
}

// SetID sets the value of ID.
func (s *BucketImageSourceTypeDetails) SetID(val string) {
	s.ID = val
}

// SetOrigin sets the value of Origin.
func (s *BucketImageSourceTypeDetails) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

type BucketImageSourceTypeOverride struct {
	Target   OptString `json:"target"`
	TargzURL OptString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *BucketImageSourceTypeOverride) GetTarget() OptString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *BucketImageSourceTypeOverride) GetTargzURL() OptString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *BucketImageSourceTypeOverride) SetTarget(val OptString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *BucketImageSourceTypeOverride) SetTargzURL(val OptString) {
	s.TargzURL = val
}

type BucketImageSourceTypeType string

const (
	BucketImageSourceTypeTypeBucket BucketImageSourceTypeType = "bucket"
)

// AllValues returns all BucketImageSourceTypeType values.
func (BucketImageSourceTypeType) AllValues() []BucketImageSourceTypeType {
	return []BucketImageSourceTypeType{
		BucketImageSourceTypeTypeBucket,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s BucketImageSourceTypeType) MarshalText() ([]byte, error) {
	switch s {
	case BucketImageSourceTypeTypeBucket:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BucketImageSourceTypeType) UnmarshalText(data []byte) error {
	switch BucketImageSourceTypeType(data) {
	case BucketImageSourceTypeTypeBucket:
		*s = BucketImageSourceTypeTypeBucket
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A build log for a given image.
// Ref: #/components/schemas/BuildLog
type BuildLog struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The ID of the image the build log pertains to.
	ImageID string `json:"image_id"`
	// The log itself.
	Log string `json:"log"`
	// A collection of timestamps for each event in the build log's lifetime.
	Events BuildLogEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *BuildLog) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *BuildLog) GetHubID() HubID {
	return s.HubID
}

// GetImageID returns the value of ImageID.
func (s *BuildLog) GetImageID() string {
	return s.ImageID
}

// GetLog returns the value of Log.
func (s *BuildLog) GetLog() string {
	return s.Log
}

// GetEvents returns the value of Events.
func (s *BuildLog) GetEvents() BuildLogEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *BuildLog) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *BuildLog) SetHubID(val HubID) {
	s.HubID = val
}

// SetImageID sets the value of ImageID.
func (s *BuildLog) SetImageID(val string) {
	s.ImageID = val
}

// SetLog sets the value of Log.
func (s *BuildLog) SetLog(val string) {
	s.Log = val
}

// SetEvents sets the value of Events.
func (s *BuildLog) SetEvents(val BuildLogEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the build log's lifetime.
type BuildLogEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *BuildLogEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *BuildLogEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *BuildLogEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *BuildLogEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *BuildLogEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *BuildLogEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// A telemetry snapshot pertaining to CPU usage.
// Ref: #/components/schemas/CPUSnapshot
type CPUSnapshot struct {
	// Usage statistics.
	Usage CPUSnapshotUsage `json:"usage"`
	// Throttling statistics.
	Throttling CPUSnapshotThrottling `json:"throttling"`
}

// GetUsage returns the value of Usage.
func (s *CPUSnapshot) GetUsage() CPUSnapshotUsage {
	return s.Usage
}

// GetThrottling returns the value of Throttling.
func (s *CPUSnapshot) GetThrottling() CPUSnapshotThrottling {
	return s.Throttling
}

// SetUsage sets the value of Usage.
func (s *CPUSnapshot) SetUsage(val CPUSnapshotUsage) {
	s.Usage = val
}

// SetThrottling sets the value of Throttling.
func (s *CPUSnapshot) SetThrottling(val CPUSnapshotThrottling) {
	s.Throttling = val
}

// Throttling statistics.
type CPUSnapshotThrottling struct {
	// The amount of periods that have passed since the last restart.
	Periods OptInt `json:"periods"`
	// How many times the instance has been throttled for using all its alloted CPU during a period.
	ThrottledPeriods OptInt `json:"throttled_periods"`
	// The amount of time in nanoseconds this instnace has spent with throttled CPU resources.
	ThrottledTime OptInt `json:"throttled_time"`
}

// GetPeriods returns the value of Periods.
func (s *CPUSnapshotThrottling) GetPeriods() OptInt {
	return s.Periods
}

// GetThrottledPeriods returns the value of ThrottledPeriods.
func (s *CPUSnapshotThrottling) GetThrottledPeriods() OptInt {
	return s.ThrottledPeriods
}

// GetThrottledTime returns the value of ThrottledTime.
func (s *CPUSnapshotThrottling) GetThrottledTime() OptInt {
	return s.ThrottledTime
}

// SetPeriods sets the value of Periods.
func (s *CPUSnapshotThrottling) SetPeriods(val OptInt) {
	s.Periods = val
}

// SetThrottledPeriods sets the value of ThrottledPeriods.
func (s *CPUSnapshotThrottling) SetThrottledPeriods(val OptInt) {
	s.ThrottledPeriods = val
}

// SetThrottledTime sets the value of ThrottledTime.
func (s *CPUSnapshotThrottling) SetThrottledTime(val OptInt) {
	s.ThrottledTime = val
}

// Usage statistics.
type CPUSnapshotUsage struct {
	// Total amount of VPU time since last restart.
	Total int `json:"total"`
	// An array showing CPU core specific usage in nanoseconds since the last restart.
	PerCore []int `json:"per_core"`
	// The amount of time in nanoseconds used by the kernel since last restart.
	Kernel int `json:"kernel"`
	// The amount of time in nanoseconds taken up for user processes.
	User float64 `json:"user"`
}

// GetTotal returns the value of Total.
func (s *CPUSnapshotUsage) GetTotal() int {
	return s.Total
}

// GetPerCore returns the value of PerCore.
func (s *CPUSnapshotUsage) GetPerCore() []int {
	return s.PerCore
}

// GetKernel returns the value of Kernel.
func (s *CPUSnapshotUsage) GetKernel() int {
	return s.Kernel
}

// GetUser returns the value of User.
func (s *CPUSnapshotUsage) GetUser() float64 {
	return s.User
}

// SetTotal sets the value of Total.
func (s *CPUSnapshotUsage) SetTotal(val int) {
	s.Total = val
}

// SetPerCore sets the value of PerCore.
func (s *CPUSnapshotUsage) SetPerCore(val []int) {
	s.PerCore = val
}

// SetKernel sets the value of Kernel.
func (s *CPUSnapshotUsage) SetKernel(val int) {
	s.Kernel = val
}

// SetUser sets the value of User.
func (s *CPUSnapshotUsage) SetUser(val float64) {
	s.User = val
}

// Information about the CPU for a given server.
// Ref: #/components/schemas/CPUSpec
type CPUSpec struct {
	// The number of CPUs.
	Count int `json:"count"`
	// The number of cores.
	Cores OptInt `json:"cores"`
	// The number of threads.
	Threads OptInt `json:"threads"`
	// The type of the CPU.
	Type string `json:"type"`
	// A boolean where true represents the CPU is shared.
	Shared OptBool `json:"shared"`
	// Extra information about the CPU if there is any.
	Extra OptCPUSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *CPUSpec) GetCount() int {
	return s.Count
}

// GetCores returns the value of Cores.
func (s *CPUSpec) GetCores() OptInt {
	return s.Cores
}

// GetThreads returns the value of Threads.
func (s *CPUSpec) GetThreads() OptInt {
	return s.Threads
}

// GetType returns the value of Type.
func (s *CPUSpec) GetType() string {
	return s.Type
}

// GetShared returns the value of Shared.
func (s *CPUSpec) GetShared() OptBool {
	return s.Shared
}

// GetExtra returns the value of Extra.
func (s *CPUSpec) GetExtra() OptCPUSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *CPUSpec) SetCount(val int) {
	s.Count = val
}

// SetCores sets the value of Cores.
func (s *CPUSpec) SetCores(val OptInt) {
	s.Cores = val
}

// SetThreads sets the value of Threads.
func (s *CPUSpec) SetThreads(val OptInt) {
	s.Threads = val
}

// SetType sets the value of Type.
func (s *CPUSpec) SetType(val string) {
	s.Type = val
}

// SetShared sets the value of Shared.
func (s *CPUSpec) SetShared(val OptBool) {
	s.Shared = val
}

// SetExtra sets the value of Extra.
func (s *CPUSpec) SetExtra(val OptCPUSpecExtra) {
	s.Extra = val
}

// Extra information about the CPU if there is any.
type CPUSpecExtra map[string]string

func (s *CPUSpecExtra) init() CPUSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A capability that a user or API key that represents what an API key or a user can do.
// Ref: #/components/schemas/Capability
type Capability string

const (
	CapabilityAPIKeysManage                     Capability = "api-keys-manage"
	CapabilityApionlyJobsView                   Capability = "apionly-jobs-view"
	CapabilityApionlyNotificationsListen        Capability = "apionly-notifications-listen"
	CapabilityAutoscaleGroupsManage             Capability = "autoscale-groups-manage"
	CapabilityAutoscaleGroupsView               Capability = "autoscale-groups-view"
	CapabilityBillingCreditsView                Capability = "billing-credits-view"
	CapabilityBillingInvoicesPay                Capability = "billing-invoices-pay"
	CapabilityBillingInvoicesView               Capability = "billing-invoices-view"
	CapabilityBillingMethodsManage              Capability = "billing-methods-manage"
	CapabilityBillingServicesManage             Capability = "billing-services-manage"
	CapabilityBillingServicesView               Capability = "billing-services-view"
	CapabilityContainersBackupsManage           Capability = "containers-backups-manage"
	CapabilityContainersBackupsView             Capability = "containers-backups-view"
	CapabilityContainersConsole                 Capability = "containers-console"
	CapabilityContainersDeploy                  Capability = "containers-deploy"
	CapabilityContainersInstancesMigrate        Capability = "containers-instances-migrate"
	CapabilityContainersLock                    Capability = "containers-lock"
	CapabilityContainersSSH                     Capability = "containers-ssh"
	CapabilityContainersManage                  Capability = "containers-manage"
	CapabilityContainersView                    Capability = "containers-view"
	CapabilityContainersVolumesManage           Capability = "containers-volumes-manage"
	CapabilityContainersVolumesView             Capability = "containers-volumes-view"
	CapabilityDNSCertsView                      Capability = "dns-certs-view"
	CapabilityDNSManage                         Capability = "dns-manage"
	CapabilityDNSView                           Capability = "dns-view"
	CapabilityEnvironmentsDeploymentsManage     Capability = "environments-deployments-manage"
	CapabilityEnvironmentsManage                Capability = "environments-manage"
	CapabilityEnvironmentsScopedvariablesManage Capability = "environments-scopedvariables-manage"
	CapabilityEnvironmentsScopedvariablesView   Capability = "environments-scopedvariables-view"
	CapabilityEnvironmentsServicesManage        Capability = "environments-services-manage"
	CapabilityEnvironmentsView                  Capability = "environments-view"
	CapabilityEnvironmentsVpn                   Capability = "environments-vpn"
	CapabilityEnvironmentsVpnManage             Capability = "environments-vpn-manage"
	CapabilityHubsDelete                        Capability = "hubs-delete"
	CapabilityHubsIntegrationsManage            Capability = "hubs-integrations-manage"
	CapabilityHubsIntegrationsView              Capability = "hubs-integrations-view"
	CapabilityHubsInvitesManage                 Capability = "hubs-invites-manage"
	CapabilityHubsInvitesSend                   Capability = "hubs-invites-send"
	CapabilityHubsMembersManage                 Capability = "hubs-members-manage"
	CapabilityHubsMembersView                   Capability = "hubs-members-view"
	CapabilityHubsRolesManage                   Capability = "hubs-roles-manage"
	CapabilityHubsRolesView                     Capability = "hubs-roles-view"
	CapabilityHubsUsageView                     Capability = "hubs-usage-view"
	CapabilityHubsUpdate                        Capability = "hubs-update"
	CapabilityHubsAuditlogView                  Capability = "hubs-auditlog-view"
	CapabilityImagesManage                      Capability = "images-manage"
	CapabilityImagesSourcesManage               Capability = "images-sources-manage"
	CapabilityImagesSourcesView                 Capability = "images-sources-view"
	CapabilityImagesView                        Capability = "images-view"
	CapabilityIpsManage                         Capability = "ips-manage"
	CapabilityServersConsole                    Capability = "servers-console"
	CapabilityServersDecommission               Capability = "servers-decommission"
	CapabilityServersLogin                      Capability = "servers-login"
	CapabilityServersProvision                  Capability = "servers-provision"
	CapabilityServersManage                     Capability = "servers-manage"
	CapabilityServersView                       Capability = "servers-view"
	CapabilityMonitorManage                     Capability = "monitor-manage"
	CapabilityMonitorView                       Capability = "monitor-view"
	CapabilityPipelinesManage                   Capability = "pipelines-manage"
	CapabilityPipelinesTrigger                  Capability = "pipelines-trigger"
	CapabilityPipelinesView                     Capability = "pipelines-view"
	CapabilitySdnNetworksManage                 Capability = "sdn-networks-manage"
	CapabilitySdnNetworksView                   Capability = "sdn-networks-view"
	CapabilitySecurityManage                    Capability = "security-manage"
	CapabilitySecurityView                      Capability = "security-view"
	CapabilityStacksBuildsDeploy                Capability = "stacks-builds-deploy"
	CapabilityStacksBuildsManage                Capability = "stacks-builds-manage"
	CapabilityStacksManage                      Capability = "stacks-manage"
	CapabilityStacksView                        Capability = "stacks-view"
)

// AllValues returns all Capability values.
func (Capability) AllValues() []Capability {
	return []Capability{
		CapabilityAPIKeysManage,
		CapabilityApionlyJobsView,
		CapabilityApionlyNotificationsListen,
		CapabilityAutoscaleGroupsManage,
		CapabilityAutoscaleGroupsView,
		CapabilityBillingCreditsView,
		CapabilityBillingInvoicesPay,
		CapabilityBillingInvoicesView,
		CapabilityBillingMethodsManage,
		CapabilityBillingServicesManage,
		CapabilityBillingServicesView,
		CapabilityContainersBackupsManage,
		CapabilityContainersBackupsView,
		CapabilityContainersConsole,
		CapabilityContainersDeploy,
		CapabilityContainersInstancesMigrate,
		CapabilityContainersLock,
		CapabilityContainersSSH,
		CapabilityContainersManage,
		CapabilityContainersView,
		CapabilityContainersVolumesManage,
		CapabilityContainersVolumesView,
		CapabilityDNSCertsView,
		CapabilityDNSManage,
		CapabilityDNSView,
		CapabilityEnvironmentsDeploymentsManage,
		CapabilityEnvironmentsManage,
		CapabilityEnvironmentsScopedvariablesManage,
		CapabilityEnvironmentsScopedvariablesView,
		CapabilityEnvironmentsServicesManage,
		CapabilityEnvironmentsView,
		CapabilityEnvironmentsVpn,
		CapabilityEnvironmentsVpnManage,
		CapabilityHubsDelete,
		CapabilityHubsIntegrationsManage,
		CapabilityHubsIntegrationsView,
		CapabilityHubsInvitesManage,
		CapabilityHubsInvitesSend,
		CapabilityHubsMembersManage,
		CapabilityHubsMembersView,
		CapabilityHubsRolesManage,
		CapabilityHubsRolesView,
		CapabilityHubsUsageView,
		CapabilityHubsUpdate,
		CapabilityHubsAuditlogView,
		CapabilityImagesManage,
		CapabilityImagesSourcesManage,
		CapabilityImagesSourcesView,
		CapabilityImagesView,
		CapabilityIpsManage,
		CapabilityServersConsole,
		CapabilityServersDecommission,
		CapabilityServersLogin,
		CapabilityServersProvision,
		CapabilityServersManage,
		CapabilityServersView,
		CapabilityMonitorManage,
		CapabilityMonitorView,
		CapabilityPipelinesManage,
		CapabilityPipelinesTrigger,
		CapabilityPipelinesView,
		CapabilitySdnNetworksManage,
		CapabilitySdnNetworksView,
		CapabilitySecurityManage,
		CapabilitySecurityView,
		CapabilityStacksBuildsDeploy,
		CapabilityStacksBuildsManage,
		CapabilityStacksManage,
		CapabilityStacksView,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Capability) MarshalText() ([]byte, error) {
	switch s {
	case CapabilityAPIKeysManage:
		return []byte(s), nil
	case CapabilityApionlyJobsView:
		return []byte(s), nil
	case CapabilityApionlyNotificationsListen:
		return []byte(s), nil
	case CapabilityAutoscaleGroupsManage:
		return []byte(s), nil
	case CapabilityAutoscaleGroupsView:
		return []byte(s), nil
	case CapabilityBillingCreditsView:
		return []byte(s), nil
	case CapabilityBillingInvoicesPay:
		return []byte(s), nil
	case CapabilityBillingInvoicesView:
		return []byte(s), nil
	case CapabilityBillingMethodsManage:
		return []byte(s), nil
	case CapabilityBillingServicesManage:
		return []byte(s), nil
	case CapabilityBillingServicesView:
		return []byte(s), nil
	case CapabilityContainersBackupsManage:
		return []byte(s), nil
	case CapabilityContainersBackupsView:
		return []byte(s), nil
	case CapabilityContainersConsole:
		return []byte(s), nil
	case CapabilityContainersDeploy:
		return []byte(s), nil
	case CapabilityContainersInstancesMigrate:
		return []byte(s), nil
	case CapabilityContainersLock:
		return []byte(s), nil
	case CapabilityContainersSSH:
		return []byte(s), nil
	case CapabilityContainersManage:
		return []byte(s), nil
	case CapabilityContainersView:
		return []byte(s), nil
	case CapabilityContainersVolumesManage:
		return []byte(s), nil
	case CapabilityContainersVolumesView:
		return []byte(s), nil
	case CapabilityDNSCertsView:
		return []byte(s), nil
	case CapabilityDNSManage:
		return []byte(s), nil
	case CapabilityDNSView:
		return []byte(s), nil
	case CapabilityEnvironmentsDeploymentsManage:
		return []byte(s), nil
	case CapabilityEnvironmentsManage:
		return []byte(s), nil
	case CapabilityEnvironmentsScopedvariablesManage:
		return []byte(s), nil
	case CapabilityEnvironmentsScopedvariablesView:
		return []byte(s), nil
	case CapabilityEnvironmentsServicesManage:
		return []byte(s), nil
	case CapabilityEnvironmentsView:
		return []byte(s), nil
	case CapabilityEnvironmentsVpn:
		return []byte(s), nil
	case CapabilityEnvironmentsVpnManage:
		return []byte(s), nil
	case CapabilityHubsDelete:
		return []byte(s), nil
	case CapabilityHubsIntegrationsManage:
		return []byte(s), nil
	case CapabilityHubsIntegrationsView:
		return []byte(s), nil
	case CapabilityHubsInvitesManage:
		return []byte(s), nil
	case CapabilityHubsInvitesSend:
		return []byte(s), nil
	case CapabilityHubsMembersManage:
		return []byte(s), nil
	case CapabilityHubsMembersView:
		return []byte(s), nil
	case CapabilityHubsRolesManage:
		return []byte(s), nil
	case CapabilityHubsRolesView:
		return []byte(s), nil
	case CapabilityHubsUsageView:
		return []byte(s), nil
	case CapabilityHubsUpdate:
		return []byte(s), nil
	case CapabilityHubsAuditlogView:
		return []byte(s), nil
	case CapabilityImagesManage:
		return []byte(s), nil
	case CapabilityImagesSourcesManage:
		return []byte(s), nil
	case CapabilityImagesSourcesView:
		return []byte(s), nil
	case CapabilityImagesView:
		return []byte(s), nil
	case CapabilityIpsManage:
		return []byte(s), nil
	case CapabilityServersConsole:
		return []byte(s), nil
	case CapabilityServersDecommission:
		return []byte(s), nil
	case CapabilityServersLogin:
		return []byte(s), nil
	case CapabilityServersProvision:
		return []byte(s), nil
	case CapabilityServersManage:
		return []byte(s), nil
	case CapabilityServersView:
		return []byte(s), nil
	case CapabilityMonitorManage:
		return []byte(s), nil
	case CapabilityMonitorView:
		return []byte(s), nil
	case CapabilityPipelinesManage:
		return []byte(s), nil
	case CapabilityPipelinesTrigger:
		return []byte(s), nil
	case CapabilityPipelinesView:
		return []byte(s), nil
	case CapabilitySdnNetworksManage:
		return []byte(s), nil
	case CapabilitySdnNetworksView:
		return []byte(s), nil
	case CapabilitySecurityManage:
		return []byte(s), nil
	case CapabilitySecurityView:
		return []byte(s), nil
	case CapabilityStacksBuildsDeploy:
		return []byte(s), nil
	case CapabilityStacksBuildsManage:
		return []byte(s), nil
	case CapabilityStacksManage:
		return []byte(s), nil
	case CapabilityStacksView:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Capability) UnmarshalText(data []byte) error {
	switch Capability(data) {
	case CapabilityAPIKeysManage:
		*s = CapabilityAPIKeysManage
		return nil
	case CapabilityApionlyJobsView:
		*s = CapabilityApionlyJobsView
		return nil
	case CapabilityApionlyNotificationsListen:
		*s = CapabilityApionlyNotificationsListen
		return nil
	case CapabilityAutoscaleGroupsManage:
		*s = CapabilityAutoscaleGroupsManage
		return nil
	case CapabilityAutoscaleGroupsView:
		*s = CapabilityAutoscaleGroupsView
		return nil
	case CapabilityBillingCreditsView:
		*s = CapabilityBillingCreditsView
		return nil
	case CapabilityBillingInvoicesPay:
		*s = CapabilityBillingInvoicesPay
		return nil
	case CapabilityBillingInvoicesView:
		*s = CapabilityBillingInvoicesView
		return nil
	case CapabilityBillingMethodsManage:
		*s = CapabilityBillingMethodsManage
		return nil
	case CapabilityBillingServicesManage:
		*s = CapabilityBillingServicesManage
		return nil
	case CapabilityBillingServicesView:
		*s = CapabilityBillingServicesView
		return nil
	case CapabilityContainersBackupsManage:
		*s = CapabilityContainersBackupsManage
		return nil
	case CapabilityContainersBackupsView:
		*s = CapabilityContainersBackupsView
		return nil
	case CapabilityContainersConsole:
		*s = CapabilityContainersConsole
		return nil
	case CapabilityContainersDeploy:
		*s = CapabilityContainersDeploy
		return nil
	case CapabilityContainersInstancesMigrate:
		*s = CapabilityContainersInstancesMigrate
		return nil
	case CapabilityContainersLock:
		*s = CapabilityContainersLock
		return nil
	case CapabilityContainersSSH:
		*s = CapabilityContainersSSH
		return nil
	case CapabilityContainersManage:
		*s = CapabilityContainersManage
		return nil
	case CapabilityContainersView:
		*s = CapabilityContainersView
		return nil
	case CapabilityContainersVolumesManage:
		*s = CapabilityContainersVolumesManage
		return nil
	case CapabilityContainersVolumesView:
		*s = CapabilityContainersVolumesView
		return nil
	case CapabilityDNSCertsView:
		*s = CapabilityDNSCertsView
		return nil
	case CapabilityDNSManage:
		*s = CapabilityDNSManage
		return nil
	case CapabilityDNSView:
		*s = CapabilityDNSView
		return nil
	case CapabilityEnvironmentsDeploymentsManage:
		*s = CapabilityEnvironmentsDeploymentsManage
		return nil
	case CapabilityEnvironmentsManage:
		*s = CapabilityEnvironmentsManage
		return nil
	case CapabilityEnvironmentsScopedvariablesManage:
		*s = CapabilityEnvironmentsScopedvariablesManage
		return nil
	case CapabilityEnvironmentsScopedvariablesView:
		*s = CapabilityEnvironmentsScopedvariablesView
		return nil
	case CapabilityEnvironmentsServicesManage:
		*s = CapabilityEnvironmentsServicesManage
		return nil
	case CapabilityEnvironmentsView:
		*s = CapabilityEnvironmentsView
		return nil
	case CapabilityEnvironmentsVpn:
		*s = CapabilityEnvironmentsVpn
		return nil
	case CapabilityEnvironmentsVpnManage:
		*s = CapabilityEnvironmentsVpnManage
		return nil
	case CapabilityHubsDelete:
		*s = CapabilityHubsDelete
		return nil
	case CapabilityHubsIntegrationsManage:
		*s = CapabilityHubsIntegrationsManage
		return nil
	case CapabilityHubsIntegrationsView:
		*s = CapabilityHubsIntegrationsView
		return nil
	case CapabilityHubsInvitesManage:
		*s = CapabilityHubsInvitesManage
		return nil
	case CapabilityHubsInvitesSend:
		*s = CapabilityHubsInvitesSend
		return nil
	case CapabilityHubsMembersManage:
		*s = CapabilityHubsMembersManage
		return nil
	case CapabilityHubsMembersView:
		*s = CapabilityHubsMembersView
		return nil
	case CapabilityHubsRolesManage:
		*s = CapabilityHubsRolesManage
		return nil
	case CapabilityHubsRolesView:
		*s = CapabilityHubsRolesView
		return nil
	case CapabilityHubsUsageView:
		*s = CapabilityHubsUsageView
		return nil
	case CapabilityHubsUpdate:
		*s = CapabilityHubsUpdate
		return nil
	case CapabilityHubsAuditlogView:
		*s = CapabilityHubsAuditlogView
		return nil
	case CapabilityImagesManage:
		*s = CapabilityImagesManage
		return nil
	case CapabilityImagesSourcesManage:
		*s = CapabilityImagesSourcesManage
		return nil
	case CapabilityImagesSourcesView:
		*s = CapabilityImagesSourcesView
		return nil
	case CapabilityImagesView:
		*s = CapabilityImagesView
		return nil
	case CapabilityIpsManage:
		*s = CapabilityIpsManage
		return nil
	case CapabilityServersConsole:
		*s = CapabilityServersConsole
		return nil
	case CapabilityServersDecommission:
		*s = CapabilityServersDecommission
		return nil
	case CapabilityServersLogin:
		*s = CapabilityServersLogin
		return nil
	case CapabilityServersProvision:
		*s = CapabilityServersProvision
		return nil
	case CapabilityServersManage:
		*s = CapabilityServersManage
		return nil
	case CapabilityServersView:
		*s = CapabilityServersView
		return nil
	case CapabilityMonitorManage:
		*s = CapabilityMonitorManage
		return nil
	case CapabilityMonitorView:
		*s = CapabilityMonitorView
		return nil
	case CapabilityPipelinesManage:
		*s = CapabilityPipelinesManage
		return nil
	case CapabilityPipelinesTrigger:
		*s = CapabilityPipelinesTrigger
		return nil
	case CapabilityPipelinesView:
		*s = CapabilityPipelinesView
		return nil
	case CapabilitySdnNetworksManage:
		*s = CapabilitySdnNetworksManage
		return nil
	case CapabilitySdnNetworksView:
		*s = CapabilitySdnNetworksView
		return nil
	case CapabilitySecurityManage:
		*s = CapabilitySecurityManage
		return nil
	case CapabilitySecurityView:
		*s = CapabilitySecurityView
		return nil
	case CapabilityStacksBuildsDeploy:
		*s = CapabilityStacksBuildsDeploy
		return nil
	case CapabilityStacksBuildsManage:
		*s = CapabilityStacksBuildsManage
		return nil
	case CapabilityStacksManage:
		*s = CapabilityStacksManage
		return nil
	case CapabilityStacksView:
		*s = CapabilityStacksView
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChangePasswordOK struct {
	Data Account `json:"data"`
}

// GetData returns the value of Data.
func (s *ChangePasswordOK) GetData() Account {
	return s.Data
}

// SetData sets the value of Data.
func (s *ChangePasswordOK) SetData(val Account) {
	s.Data = val
}

type ChangePasswordReq struct {
	// Current Password.
	Current string `json:"current"`
	// New Password.
	New string `json:"new"`
}

// GetCurrent returns the value of Current.
func (s *ChangePasswordReq) GetCurrent() string {
	return s.Current
}

// GetNew returns the value of New.
func (s *ChangePasswordReq) GetNew() string {
	return s.New
}

// SetCurrent sets the value of Current.
func (s *ChangePasswordReq) SetCurrent(val string) {
	s.Current = val
}

// SetNew sets the value of New.
func (s *ChangePasswordReq) SetNew(val string) {
	s.New = val
}

// A count of servers in a cluster with the given version of Cycle software.
// Ref: #/components/schemas/ClusterVersionServerCount
type ClusterVersionServerCount struct {
	Agent               ClusterVersionServerCountAgent               `json:"agent"`
	AgentMinusSpawner   ClusterVersionServerCountAgentMinusSpawner   `json:"agent-spawner"`
	Compute             ClusterVersionServerCountCompute             `json:"compute"`
	ComputeMinusSpawner ClusterVersionServerCountComputeMinusSpawner `json:"compute-spawner"`
}

// GetAgent returns the value of Agent.
func (s *ClusterVersionServerCount) GetAgent() ClusterVersionServerCountAgent {
	return s.Agent
}

// GetAgentMinusSpawner returns the value of AgentMinusSpawner.
func (s *ClusterVersionServerCount) GetAgentMinusSpawner() ClusterVersionServerCountAgentMinusSpawner {
	return s.AgentMinusSpawner
}

// GetCompute returns the value of Compute.
func (s *ClusterVersionServerCount) GetCompute() ClusterVersionServerCountCompute {
	return s.Compute
}

// GetComputeMinusSpawner returns the value of ComputeMinusSpawner.
func (s *ClusterVersionServerCount) GetComputeMinusSpawner() ClusterVersionServerCountComputeMinusSpawner {
	return s.ComputeMinusSpawner
}

// SetAgent sets the value of Agent.
func (s *ClusterVersionServerCount) SetAgent(val ClusterVersionServerCountAgent) {
	s.Agent = val
}

// SetAgentMinusSpawner sets the value of AgentMinusSpawner.
func (s *ClusterVersionServerCount) SetAgentMinusSpawner(val ClusterVersionServerCountAgentMinusSpawner) {
	s.AgentMinusSpawner = val
}

// SetCompute sets the value of Compute.
func (s *ClusterVersionServerCount) SetCompute(val ClusterVersionServerCountCompute) {
	s.Compute = val
}

// SetComputeMinusSpawner sets the value of ComputeMinusSpawner.
func (s *ClusterVersionServerCount) SetComputeMinusSpawner(val ClusterVersionServerCountComputeMinusSpawner) {
	s.ComputeMinusSpawner = val
}

type ClusterVersionServerCountAgent map[string]float64

func (s *ClusterVersionServerCountAgent) init() ClusterVersionServerCountAgent {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

type ClusterVersionServerCountAgentMinusSpawner map[string]float64

func (s *ClusterVersionServerCountAgentMinusSpawner) init() ClusterVersionServerCountAgentMinusSpawner {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

type ClusterVersionServerCountCompute map[string]float64

func (s *ClusterVersionServerCountCompute) init() ClusterVersionServerCountCompute {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

type ClusterVersionServerCountComputeMinusSpawner map[string]float64

func (s *ClusterVersionServerCountComputeMinusSpawner) init() ClusterVersionServerCountComputeMinusSpawner {
	m := *s
	if m == nil {
		m = map[string]float64{}
		*s = m
	}
	return m
}

// Generic component format for describing resources for the search index.
// Ref: #/components/schemas/Component
type Component struct {
	// ID of the component.
	ID string `json:"id"`
	// Name of the component.
	Name       string        `json:"name"`
	Identifier OptIdentifier `json:"identifier"`
	// State of the component.
	State  string `json:"state"`
	Events Events `json:"events"`
	// Related strings for fuzzy search.
	ContextBlobs []string `json:"context_blobs"`
	// Component associations.
	Associations ComponentAssociations `json:"associations"`
}

// GetID returns the value of ID.
func (s *Component) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Component) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *Component) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetState returns the value of State.
func (s *Component) GetState() string {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Component) GetEvents() Events {
	return s.Events
}

// GetContextBlobs returns the value of ContextBlobs.
func (s *Component) GetContextBlobs() []string {
	return s.ContextBlobs
}

// GetAssociations returns the value of Associations.
func (s *Component) GetAssociations() ComponentAssociations {
	return s.Associations
}

// SetID sets the value of ID.
func (s *Component) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Component) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *Component) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetState sets the value of State.
func (s *Component) SetState(val string) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Component) SetEvents(val Events) {
	s.Events = val
}

// SetContextBlobs sets the value of ContextBlobs.
func (s *Component) SetContextBlobs(val []string) {
	s.ContextBlobs = val
}

// SetAssociations sets the value of Associations.
func (s *Component) SetAssociations(val ComponentAssociations) {
	s.Associations = val
}

// Component associations.
type ComponentAssociations struct {
	// Associated container Id.
	Container OptString `json:"container"`
	// Associated environment Id.
	Environment OptString `json:"environment"`
	// Associated image source Id.
	ImageMinusSource OptString `json:"image-source"`
	// Associated image Id.
	Image OptString `json:"image"`
	// Associated stack Id.
	Stack OptString `json:"stack"`
	// Associated server Id.
	Server OptString `json:"server"`
	// Associated provider location Id.
	ProviderMinusLocation OptString `json:"provider-location"`
}

// GetContainer returns the value of Container.
func (s *ComponentAssociations) GetContainer() OptString {
	return s.Container
}

// GetEnvironment returns the value of Environment.
func (s *ComponentAssociations) GetEnvironment() OptString {
	return s.Environment
}

// GetImageMinusSource returns the value of ImageMinusSource.
func (s *ComponentAssociations) GetImageMinusSource() OptString {
	return s.ImageMinusSource
}

// GetImage returns the value of Image.
func (s *ComponentAssociations) GetImage() OptString {
	return s.Image
}

// GetStack returns the value of Stack.
func (s *ComponentAssociations) GetStack() OptString {
	return s.Stack
}

// GetServer returns the value of Server.
func (s *ComponentAssociations) GetServer() OptString {
	return s.Server
}

// GetProviderMinusLocation returns the value of ProviderMinusLocation.
func (s *ComponentAssociations) GetProviderMinusLocation() OptString {
	return s.ProviderMinusLocation
}

// SetContainer sets the value of Container.
func (s *ComponentAssociations) SetContainer(val OptString) {
	s.Container = val
}

// SetEnvironment sets the value of Environment.
func (s *ComponentAssociations) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetImageMinusSource sets the value of ImageMinusSource.
func (s *ComponentAssociations) SetImageMinusSource(val OptString) {
	s.ImageMinusSource = val
}

// SetImage sets the value of Image.
func (s *ComponentAssociations) SetImage(val OptString) {
	s.Image = val
}

// SetStack sets the value of Stack.
func (s *ComponentAssociations) SetStack(val OptString) {
	s.Stack = val
}

// SetServer sets the value of Server.
func (s *ComponentAssociations) SetServer(val OptString) {
	s.Server = val
}

// SetProviderMinusLocation sets the value of ProviderMinusLocation.
func (s *ComponentAssociations) SetProviderMinusLocation(val OptString) {
	s.ProviderMinusLocation = val
}

// A container configuration.
// Ref: #/components/schemas/Config
type Config struct {
	Network      ContainerNetwork         `json:"network"`
	Deploy       ContainerDeploy          `json:"deploy"`
	Scale        OptContainerScale        `json:"scale"`
	Runtime      OptContainerRuntime      `json:"runtime"`
	Resources    OptContainerResources    `json:"resources"`
	Integrations OptContainerIntegrations `json:"integrations"`
}

// GetNetwork returns the value of Network.
func (s *Config) GetNetwork() ContainerNetwork {
	return s.Network
}

// GetDeploy returns the value of Deploy.
func (s *Config) GetDeploy() ContainerDeploy {
	return s.Deploy
}

// GetScale returns the value of Scale.
func (s *Config) GetScale() OptContainerScale {
	return s.Scale
}

// GetRuntime returns the value of Runtime.
func (s *Config) GetRuntime() OptContainerRuntime {
	return s.Runtime
}

// GetResources returns the value of Resources.
func (s *Config) GetResources() OptContainerResources {
	return s.Resources
}

// GetIntegrations returns the value of Integrations.
func (s *Config) GetIntegrations() OptContainerIntegrations {
	return s.Integrations
}

// SetNetwork sets the value of Network.
func (s *Config) SetNetwork(val ContainerNetwork) {
	s.Network = val
}

// SetDeploy sets the value of Deploy.
func (s *Config) SetDeploy(val ContainerDeploy) {
	s.Deploy = val
}

// SetScale sets the value of Scale.
func (s *Config) SetScale(val OptContainerScale) {
	s.Scale = val
}

// SetRuntime sets the value of Runtime.
func (s *Config) SetRuntime(val OptContainerRuntime) {
	s.Runtime = val
}

// SetResources sets the value of Resources.
func (s *Config) SetResources(val OptContainerResources) {
	s.Resources = val
}

// SetIntegrations sets the value of Integrations.
func (s *Config) SetIntegrations(val OptContainerIntegrations) {
	s.Integrations = val
}

// Containers are a way to package together your application along with it's dependencies, and run in
// a resource isolated process. They provide consistency across different hosts, efficiency over
// traditional hosting methods, and facilitate a micro-service based approach, where each logical
// piece of your application is split into multiple, easily testable parts (such as API, Backend,
// Frontend, etc).
// Ref: #/components/schemas/Container
type Container struct {
	ID         ID         `json:"id"`
	Identifier Identifier `json:"identifier"`
	// A user defined name for the container resource.
	Name        string                      `json:"name"`
	Creator     CreatorScope                `json:"creator"`
	Environment ContainerEnvironmentSummary `json:"environment"`
	HubID       HubID                       `json:"hub_id"`
	Image       ImageSummary                `json:"image"`
	Stack       OptNilContainerStack        `json:"stack"`
	Config      Config                      `json:"config"`
	Deployment  OptNilContainerDeployment   `json:"deployment"`
	// The number of instances for a given container.
	Instances int             `json:"instances"`
	Volumes   []VolumeSummary `json:"volumes"`
	// Custom meta data for a given container.
	Annotations OptNilContainerAnnotations `json:"annotations"`
	// The role of a given container if it has one.
	Role OptNilContainerRole `json:"role"`
	// A boolean where true signifies the container is stateful.
	Stateful bool `json:"stateful"`
	// A boolean where true signifies the container is marked as deprecated.
	Deprecate bool `json:"deprecate"`
	// When set to true, prevents this container from being deleted.
	Lock  bool           `json:"lock"`
	State ContainerState `json:"state"`
	// A collection of timestamps for each event in the container's lifetime.
	Events ContainerEvents   `json:"events"`
	Meta   OptContainersMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Container) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *Container) GetIdentifier() Identifier {
	return s.Identifier
}

// GetName returns the value of Name.
func (s *Container) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *Container) GetCreator() CreatorScope {
	return s.Creator
}

// GetEnvironment returns the value of Environment.
func (s *Container) GetEnvironment() ContainerEnvironmentSummary {
	return s.Environment
}

// GetHubID returns the value of HubID.
func (s *Container) GetHubID() HubID {
	return s.HubID
}

// GetImage returns the value of Image.
func (s *Container) GetImage() ImageSummary {
	return s.Image
}

// GetStack returns the value of Stack.
func (s *Container) GetStack() OptNilContainerStack {
	return s.Stack
}

// GetConfig returns the value of Config.
func (s *Container) GetConfig() Config {
	return s.Config
}

// GetDeployment returns the value of Deployment.
func (s *Container) GetDeployment() OptNilContainerDeployment {
	return s.Deployment
}

// GetInstances returns the value of Instances.
func (s *Container) GetInstances() int {
	return s.Instances
}

// GetVolumes returns the value of Volumes.
func (s *Container) GetVolumes() []VolumeSummary {
	return s.Volumes
}

// GetAnnotations returns the value of Annotations.
func (s *Container) GetAnnotations() OptNilContainerAnnotations {
	return s.Annotations
}

// GetRole returns the value of Role.
func (s *Container) GetRole() OptNilContainerRole {
	return s.Role
}

// GetStateful returns the value of Stateful.
func (s *Container) GetStateful() bool {
	return s.Stateful
}

// GetDeprecate returns the value of Deprecate.
func (s *Container) GetDeprecate() bool {
	return s.Deprecate
}

// GetLock returns the value of Lock.
func (s *Container) GetLock() bool {
	return s.Lock
}

// GetState returns the value of State.
func (s *Container) GetState() ContainerState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Container) GetEvents() ContainerEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *Container) GetMeta() OptContainersMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Container) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *Container) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetName sets the value of Name.
func (s *Container) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *Container) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEnvironment sets the value of Environment.
func (s *Container) SetEnvironment(val ContainerEnvironmentSummary) {
	s.Environment = val
}

// SetHubID sets the value of HubID.
func (s *Container) SetHubID(val HubID) {
	s.HubID = val
}

// SetImage sets the value of Image.
func (s *Container) SetImage(val ImageSummary) {
	s.Image = val
}

// SetStack sets the value of Stack.
func (s *Container) SetStack(val OptNilContainerStack) {
	s.Stack = val
}

// SetConfig sets the value of Config.
func (s *Container) SetConfig(val Config) {
	s.Config = val
}

// SetDeployment sets the value of Deployment.
func (s *Container) SetDeployment(val OptNilContainerDeployment) {
	s.Deployment = val
}

// SetInstances sets the value of Instances.
func (s *Container) SetInstances(val int) {
	s.Instances = val
}

// SetVolumes sets the value of Volumes.
func (s *Container) SetVolumes(val []VolumeSummary) {
	s.Volumes = val
}

// SetAnnotations sets the value of Annotations.
func (s *Container) SetAnnotations(val OptNilContainerAnnotations) {
	s.Annotations = val
}

// SetRole sets the value of Role.
func (s *Container) SetRole(val OptNilContainerRole) {
	s.Role = val
}

// SetStateful sets the value of Stateful.
func (s *Container) SetStateful(val bool) {
	s.Stateful = val
}

// SetDeprecate sets the value of Deprecate.
func (s *Container) SetDeprecate(val bool) {
	s.Deprecate = val
}

// SetLock sets the value of Lock.
func (s *Container) SetLock(val bool) {
	s.Lock = val
}

// SetState sets the value of State.
func (s *Container) SetState(val ContainerState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Container) SetEvents(val ContainerEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *Container) SetMeta(val OptContainersMeta) {
	s.Meta = val
}

// Custom meta data for a given container.
type ContainerAnnotations map[string]jx.Raw

func (s *ContainerAnnotations) init() ContainerAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A Container Backup.
// Ref: #/components/schemas/ContainerBackup
type ContainerBackup struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The ID of the given container.
	ContainerID string `json:"container_id"`
	// The ID of the instance the backup belongs to.
	InstanceID string                `json:"instance_id"`
	Target     ContainerBackupTarget `json:"target"`
	State      ContainerBackupState  `json:"state"`
	// A collection of timestamps for each event in the backup's lifetime.
	Events ContainerBackupEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *ContainerBackup) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *ContainerBackup) GetHubID() HubID {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *ContainerBackup) GetContainerID() string {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *ContainerBackup) GetInstanceID() string {
	return s.InstanceID
}

// GetTarget returns the value of Target.
func (s *ContainerBackup) GetTarget() ContainerBackupTarget {
	return s.Target
}

// GetState returns the value of State.
func (s *ContainerBackup) GetState() ContainerBackupState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ContainerBackup) GetEvents() ContainerBackupEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *ContainerBackup) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *ContainerBackup) SetHubID(val HubID) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *ContainerBackup) SetContainerID(val string) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *ContainerBackup) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetTarget sets the value of Target.
func (s *ContainerBackup) SetTarget(val ContainerBackupTarget) {
	s.Target = val
}

// SetState sets the value of State.
func (s *ContainerBackup) SetState(val ContainerBackupState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ContainerBackup) SetEvents(val ContainerBackupEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the backup's lifetime.
type ContainerBackupEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ContainerBackupEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ContainerBackupEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ContainerBackupEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ContainerBackupEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ContainerBackupEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ContainerBackupEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// All includable resources linkable to the given Zone.
// Ref: #/components/schemas/ContainerBackupIncludes
type ContainerBackupIncludes struct {
	Integrations OptIntegrationsIncludes `json:"integrations"`
}

// GetIntegrations returns the value of Integrations.
func (s *ContainerBackupIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// SetIntegrations sets the value of Integrations.
func (s *ContainerBackupIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// Backup logs for a given container.
// Ref: #/components/schemas/ContainerBackupLogs
type ContainerBackupLogs struct {
	ID ID `json:"id"`
	// An identifier for the container.
	ContainerID string `json:"container_id"`
	// An identifier for the instance.
	InstanceID string `json:"instance_id"`
	// An identifier for the backup.
	BackupID string `json:"backup_id"`
	HubID    HubID  `json:"hub_id"`
	// The type of the backup log.
	Type ContainerBackupLogsType `json:"type"`
	// The log.
	Log   string                         `json:"log"`
	Error OptNilContainerBackupLogsError `json:"error"`
	// A collection of timestamps for each event in the backup log's lifetime.
	Events ContainerBackupLogsEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *ContainerBackupLogs) GetID() ID {
	return s.ID
}

// GetContainerID returns the value of ContainerID.
func (s *ContainerBackupLogs) GetContainerID() string {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *ContainerBackupLogs) GetInstanceID() string {
	return s.InstanceID
}

// GetBackupID returns the value of BackupID.
func (s *ContainerBackupLogs) GetBackupID() string {
	return s.BackupID
}

// GetHubID returns the value of HubID.
func (s *ContainerBackupLogs) GetHubID() HubID {
	return s.HubID
}

// GetType returns the value of Type.
func (s *ContainerBackupLogs) GetType() ContainerBackupLogsType {
	return s.Type
}

// GetLog returns the value of Log.
func (s *ContainerBackupLogs) GetLog() string {
	return s.Log
}

// GetError returns the value of Error.
func (s *ContainerBackupLogs) GetError() OptNilContainerBackupLogsError {
	return s.Error
}

// GetEvents returns the value of Events.
func (s *ContainerBackupLogs) GetEvents() ContainerBackupLogsEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *ContainerBackupLogs) SetID(val ID) {
	s.ID = val
}

// SetContainerID sets the value of ContainerID.
func (s *ContainerBackupLogs) SetContainerID(val string) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *ContainerBackupLogs) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetBackupID sets the value of BackupID.
func (s *ContainerBackupLogs) SetBackupID(val string) {
	s.BackupID = val
}

// SetHubID sets the value of HubID.
func (s *ContainerBackupLogs) SetHubID(val HubID) {
	s.HubID = val
}

// SetType sets the value of Type.
func (s *ContainerBackupLogs) SetType(val ContainerBackupLogsType) {
	s.Type = val
}

// SetLog sets the value of Log.
func (s *ContainerBackupLogs) SetLog(val string) {
	s.Log = val
}

// SetError sets the value of Error.
func (s *ContainerBackupLogs) SetError(val OptNilContainerBackupLogsError) {
	s.Error = val
}

// SetEvents sets the value of Events.
func (s *ContainerBackupLogs) SetEvents(val ContainerBackupLogsEvents) {
	s.Events = val
}

type ContainerBackupLogsError struct {
	Message         string                              `json:"message"`
	MessageInternal OptString                           `json:"message_internal"`
	Stack           []ContainerBackupLogsErrorStackItem `json:"stack"`
}

// GetMessage returns the value of Message.
func (s *ContainerBackupLogsError) GetMessage() string {
	return s.Message
}

// GetMessageInternal returns the value of MessageInternal.
func (s *ContainerBackupLogsError) GetMessageInternal() OptString {
	return s.MessageInternal
}

// GetStack returns the value of Stack.
func (s *ContainerBackupLogsError) GetStack() []ContainerBackupLogsErrorStackItem {
	return s.Stack
}

// SetMessage sets the value of Message.
func (s *ContainerBackupLogsError) SetMessage(val string) {
	s.Message = val
}

// SetMessageInternal sets the value of MessageInternal.
func (s *ContainerBackupLogsError) SetMessageInternal(val OptString) {
	s.MessageInternal = val
}

// SetStack sets the value of Stack.
func (s *ContainerBackupLogsError) SetStack(val []ContainerBackupLogsErrorStackItem) {
	s.Stack = val
}

type ContainerBackupLogsErrorStackItem struct {
	File     string `json:"file"`
	Function string `json:"function"`
	Line     int    `json:"line"`
}

// GetFile returns the value of File.
func (s *ContainerBackupLogsErrorStackItem) GetFile() string {
	return s.File
}

// GetFunction returns the value of Function.
func (s *ContainerBackupLogsErrorStackItem) GetFunction() string {
	return s.Function
}

// GetLine returns the value of Line.
func (s *ContainerBackupLogsErrorStackItem) GetLine() int {
	return s.Line
}

// SetFile sets the value of File.
func (s *ContainerBackupLogsErrorStackItem) SetFile(val string) {
	s.File = val
}

// SetFunction sets the value of Function.
func (s *ContainerBackupLogsErrorStackItem) SetFunction(val string) {
	s.Function = val
}

// SetLine sets the value of Line.
func (s *ContainerBackupLogsErrorStackItem) SetLine(val int) {
	s.Line = val
}

// A collection of timestamps for each event in the backup log's lifetime.
type ContainerBackupLogsEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ContainerBackupLogsEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ContainerBackupLogsEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ContainerBackupLogsEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ContainerBackupLogsEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ContainerBackupLogsEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ContainerBackupLogsEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// The type of the backup log.
type ContainerBackupLogsType string

const (
	ContainerBackupLogsTypeRestore ContainerBackupLogsType = "restore"
	ContainerBackupLogsTypeBackup  ContainerBackupLogsType = "backup"
)

// AllValues returns all ContainerBackupLogsType values.
func (ContainerBackupLogsType) AllValues() []ContainerBackupLogsType {
	return []ContainerBackupLogsType{
		ContainerBackupLogsTypeRestore,
		ContainerBackupLogsTypeBackup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerBackupLogsType) MarshalText() ([]byte, error) {
	switch s {
	case ContainerBackupLogsTypeRestore:
		return []byte(s), nil
	case ContainerBackupLogsTypeBackup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerBackupLogsType) UnmarshalText(data []byte) error {
	switch ContainerBackupLogsType(data) {
	case ContainerBackupLogsTypeRestore:
		*s = ContainerBackupLogsTypeRestore
		return nil
	case ContainerBackupLogsTypeBackup:
		*s = ContainerBackupLogsTypeBackup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ContainerBackupState
type ContainerBackupState struct {
	// The current state of the Container Backup.
	Current ContainerBackupStateCurrent `json:"current"`
	Changed DateTime                    `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptContainerBackupStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ContainerBackupState) GetCurrent() ContainerBackupStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ContainerBackupState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ContainerBackupState) GetError() OptContainerBackupStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ContainerBackupState) SetCurrent(val ContainerBackupStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ContainerBackupState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ContainerBackupState) SetError(val OptContainerBackupStateError) {
	s.Error = val
}

// The current state of the Container Backup.
type ContainerBackupStateCurrent string

const (
	ContainerBackupStateCurrentSaving   ContainerBackupStateCurrent = "saving"
	ContainerBackupStateCurrentLive     ContainerBackupStateCurrent = "live"
	ContainerBackupStateCurrentDeleting ContainerBackupStateCurrent = "deleting"
	ContainerBackupStateCurrentDeleted  ContainerBackupStateCurrent = "deleted"
)

// AllValues returns all ContainerBackupStateCurrent values.
func (ContainerBackupStateCurrent) AllValues() []ContainerBackupStateCurrent {
	return []ContainerBackupStateCurrent{
		ContainerBackupStateCurrentSaving,
		ContainerBackupStateCurrentLive,
		ContainerBackupStateCurrentDeleting,
		ContainerBackupStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerBackupStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ContainerBackupStateCurrentSaving:
		return []byte(s), nil
	case ContainerBackupStateCurrentLive:
		return []byte(s), nil
	case ContainerBackupStateCurrentDeleting:
		return []byte(s), nil
	case ContainerBackupStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerBackupStateCurrent) UnmarshalText(data []byte) error {
	switch ContainerBackupStateCurrent(data) {
	case ContainerBackupStateCurrentSaving:
		*s = ContainerBackupStateCurrentSaving
		return nil
	case ContainerBackupStateCurrentLive:
		*s = ContainerBackupStateCurrentLive
		return nil
	case ContainerBackupStateCurrentDeleting:
		*s = ContainerBackupStateCurrentDeleting
		return nil
	case ContainerBackupStateCurrentDeleted:
		*s = ContainerBackupStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ContainerBackupStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ContainerBackupStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ContainerBackupStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ContainerBackupStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ContainerBackupStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A target for the given Container Backup.
// Ref: #/components/schemas/ContainerBackupTarget
type ContainerBackupTarget struct {
	IntegrationID HybridIdentifier `json:"integration_id"`
	// The target for where to store the Container Backup on the destination service.
	Path   string `json:"path"`
	FileID string `json:"file_id"`
	// The total size of the backup.
	Size int `json:"size"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ContainerBackupTarget) GetIntegrationID() HybridIdentifier {
	return s.IntegrationID
}

// GetPath returns the value of Path.
func (s *ContainerBackupTarget) GetPath() string {
	return s.Path
}

// GetFileID returns the value of FileID.
func (s *ContainerBackupTarget) GetFileID() string {
	return s.FileID
}

// GetSize returns the value of Size.
func (s *ContainerBackupTarget) GetSize() int {
	return s.Size
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ContainerBackupTarget) SetIntegrationID(val HybridIdentifier) {
	s.IntegrationID = val
}

// SetPath sets the value of Path.
func (s *ContainerBackupTarget) SetPath(val string) {
	s.Path = val
}

// SetFileID sets the value of FileID.
func (s *ContainerBackupTarget) SetFileID(val string) {
	s.FileID = val
}

// SetSize sets the value of Size.
func (s *ContainerBackupTarget) SetSize(val int) {
	s.Size = val
}

// Settings for the create container step for a pipeline.
// Ref: #/components/schemas/ContainerCreateStep
type ContainerCreateStep struct {
	// An identifier for the step.
	Identifier OptString                     `json:"identifier"`
	Options    OptContainerCreateStepOptions `json:"options"`
	Details    ContainerCreateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerCreateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerCreateStep) GetOptions() OptContainerCreateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerCreateStep) GetDetails() ContainerCreateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerCreateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerCreateStep) SetOptions(val OptContainerCreateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerCreateStep) SetDetails(val ContainerCreateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerCreateStepAction string

const (
	ContainerCreateStepActionContainerCreate ContainerCreateStepAction = "container.create"
)

// AllValues returns all ContainerCreateStepAction values.
func (ContainerCreateStepAction) AllValues() []ContainerCreateStepAction {
	return []ContainerCreateStepAction{
		ContainerCreateStepActionContainerCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerCreateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerCreateStepActionContainerCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerCreateStepAction) UnmarshalText(data []byte) error {
	switch ContainerCreateStepAction(data) {
	case ContainerCreateStepActionContainerCreate:
		*s = ContainerCreateStepActionContainerCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerCreateStepDetails struct {
	Name        string          `json:"name"`
	Identifier  OptNilString    `json:"identifier"`
	Environment FluidIdentifier `json:"environment"`
	Image       FluidIdentifier `json:"image"`
	Stateful    bool            `json:"stateful"`
	// Additional information about a container.
	Annotations OptNilContainerCreateStepDetailsAnnotations `json:"annotations"`
	Config      Config                                      `json:"config"`
	Volumes     []ContainerVolume                           `json:"volumes"`
	Deployment  OptNilContainerCreateStepDetailsDeployment  `json:"deployment"`
}

// GetName returns the value of Name.
func (s *ContainerCreateStepDetails) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerCreateStepDetails) GetIdentifier() OptNilString {
	return s.Identifier
}

// GetEnvironment returns the value of Environment.
func (s *ContainerCreateStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetImage returns the value of Image.
func (s *ContainerCreateStepDetails) GetImage() FluidIdentifier {
	return s.Image
}

// GetStateful returns the value of Stateful.
func (s *ContainerCreateStepDetails) GetStateful() bool {
	return s.Stateful
}

// GetAnnotations returns the value of Annotations.
func (s *ContainerCreateStepDetails) GetAnnotations() OptNilContainerCreateStepDetailsAnnotations {
	return s.Annotations
}

// GetConfig returns the value of Config.
func (s *ContainerCreateStepDetails) GetConfig() Config {
	return s.Config
}

// GetVolumes returns the value of Volumes.
func (s *ContainerCreateStepDetails) GetVolumes() []ContainerVolume {
	return s.Volumes
}

// GetDeployment returns the value of Deployment.
func (s *ContainerCreateStepDetails) GetDeployment() OptNilContainerCreateStepDetailsDeployment {
	return s.Deployment
}

// SetName sets the value of Name.
func (s *ContainerCreateStepDetails) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerCreateStepDetails) SetIdentifier(val OptNilString) {
	s.Identifier = val
}

// SetEnvironment sets the value of Environment.
func (s *ContainerCreateStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetImage sets the value of Image.
func (s *ContainerCreateStepDetails) SetImage(val FluidIdentifier) {
	s.Image = val
}

// SetStateful sets the value of Stateful.
func (s *ContainerCreateStepDetails) SetStateful(val bool) {
	s.Stateful = val
}

// SetAnnotations sets the value of Annotations.
func (s *ContainerCreateStepDetails) SetAnnotations(val OptNilContainerCreateStepDetailsAnnotations) {
	s.Annotations = val
}

// SetConfig sets the value of Config.
func (s *ContainerCreateStepDetails) SetConfig(val Config) {
	s.Config = val
}

// SetVolumes sets the value of Volumes.
func (s *ContainerCreateStepDetails) SetVolumes(val []ContainerVolume) {
	s.Volumes = val
}

// SetDeployment sets the value of Deployment.
func (s *ContainerCreateStepDetails) SetDeployment(val OptNilContainerCreateStepDetailsDeployment) {
	s.Deployment = val
}

// Additional information about a container.
type ContainerCreateStepDetailsAnnotations map[string]jx.Raw

func (s *ContainerCreateStepDetailsAnnotations) init() ContainerCreateStepDetailsAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type ContainerCreateStepDetailsDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *ContainerCreateStepDetailsDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *ContainerCreateStepDetailsDeployment) SetVersion(val Version) {
	s.Version = val
}

type ContainerCreateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerCreateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerCreateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Settings for deleting a container in a pipeline.
// Ref: #/components/schemas/ContainerDeleteStep
type ContainerDeleteStep struct {
	// An identifier for the step.
	Identifier OptString                     `json:"identifier"`
	Options    OptContainerDeleteStepOptions `json:"options"`
	Details    ContainerDeleteStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerDeleteStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerDeleteStep) GetOptions() OptContainerDeleteStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerDeleteStep) GetDetails() ContainerDeleteStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerDeleteStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerDeleteStep) SetOptions(val OptContainerDeleteStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerDeleteStep) SetDetails(val ContainerDeleteStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerDeleteStepAction string

const (
	ContainerDeleteStepActionContainerDelete ContainerDeleteStepAction = "container.delete"
)

// AllValues returns all ContainerDeleteStepAction values.
func (ContainerDeleteStepAction) AllValues() []ContainerDeleteStepAction {
	return []ContainerDeleteStepAction{
		ContainerDeleteStepActionContainerDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerDeleteStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerDeleteStepActionContainerDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerDeleteStepAction) UnmarshalText(data []byte) error {
	switch ContainerDeleteStepAction(data) {
	case ContainerDeleteStepActionContainerDelete:
		*s = ContainerDeleteStepActionContainerDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerDeleteStepDetails struct {
	Container FluidIdentifier `json:"container"`
}

// GetContainer returns the value of Container.
func (s *ContainerDeleteStepDetails) GetContainer() FluidIdentifier {
	return s.Container
}

// SetContainer sets the value of Container.
func (s *ContainerDeleteStepDetails) SetContainer(val FluidIdentifier) {
	s.Container = val
}

type ContainerDeleteStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerDeleteStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerDeleteStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Deployment configuration for the given container.
// Ref: #/components/schemas/ContainerDeploy
type ContainerDeploy struct {
	// The number of initial desired instances for a given container.
	Instances int                        `json:"instances"`
	Strategy  OptDeploymentStrategyName  `json:"strategy"`
	Stateful  OptContainerDeployStateful `json:"stateful"`
	// Settings that give more granular control over deployment targets and conditions.
	Constraints OptContainerDeployConstraints `json:"constraints"`
	// Configuration for what to do during container shutdown.
	Shutdown OptContainerDeployShutdown `json:"shutdown"`
	// Configurations for container startup.
	Startup OptContainerDeployStartup `json:"startup"`
	// Configurations for container updates.
	Update OptContainerDeployUpdate `json:"update"`
	// Configurations for container restart events.
	Restart OptContainerDeployRestart `json:"restart"`
	// Configuration for determining the health of a container.
	HealthCheck OptContainerDeployHealthCheck `json:"health_check"`
	// Configuration settings for container telemetery reporting.
	Telemetry OptContainerDeployTelemetry `json:"telemetry"`
}

// GetInstances returns the value of Instances.
func (s *ContainerDeploy) GetInstances() int {
	return s.Instances
}

// GetStrategy returns the value of Strategy.
func (s *ContainerDeploy) GetStrategy() OptDeploymentStrategyName {
	return s.Strategy
}

// GetStateful returns the value of Stateful.
func (s *ContainerDeploy) GetStateful() OptContainerDeployStateful {
	return s.Stateful
}

// GetConstraints returns the value of Constraints.
func (s *ContainerDeploy) GetConstraints() OptContainerDeployConstraints {
	return s.Constraints
}

// GetShutdown returns the value of Shutdown.
func (s *ContainerDeploy) GetShutdown() OptContainerDeployShutdown {
	return s.Shutdown
}

// GetStartup returns the value of Startup.
func (s *ContainerDeploy) GetStartup() OptContainerDeployStartup {
	return s.Startup
}

// GetUpdate returns the value of Update.
func (s *ContainerDeploy) GetUpdate() OptContainerDeployUpdate {
	return s.Update
}

// GetRestart returns the value of Restart.
func (s *ContainerDeploy) GetRestart() OptContainerDeployRestart {
	return s.Restart
}

// GetHealthCheck returns the value of HealthCheck.
func (s *ContainerDeploy) GetHealthCheck() OptContainerDeployHealthCheck {
	return s.HealthCheck
}

// GetTelemetry returns the value of Telemetry.
func (s *ContainerDeploy) GetTelemetry() OptContainerDeployTelemetry {
	return s.Telemetry
}

// SetInstances sets the value of Instances.
func (s *ContainerDeploy) SetInstances(val int) {
	s.Instances = val
}

// SetStrategy sets the value of Strategy.
func (s *ContainerDeploy) SetStrategy(val OptDeploymentStrategyName) {
	s.Strategy = val
}

// SetStateful sets the value of Stateful.
func (s *ContainerDeploy) SetStateful(val OptContainerDeployStateful) {
	s.Stateful = val
}

// SetConstraints sets the value of Constraints.
func (s *ContainerDeploy) SetConstraints(val OptContainerDeployConstraints) {
	s.Constraints = val
}

// SetShutdown sets the value of Shutdown.
func (s *ContainerDeploy) SetShutdown(val OptContainerDeployShutdown) {
	s.Shutdown = val
}

// SetStartup sets the value of Startup.
func (s *ContainerDeploy) SetStartup(val OptContainerDeployStartup) {
	s.Startup = val
}

// SetUpdate sets the value of Update.
func (s *ContainerDeploy) SetUpdate(val OptContainerDeployUpdate) {
	s.Update = val
}

// SetRestart sets the value of Restart.
func (s *ContainerDeploy) SetRestart(val OptContainerDeployRestart) {
	s.Restart = val
}

// SetHealthCheck sets the value of HealthCheck.
func (s *ContainerDeploy) SetHealthCheck(val OptContainerDeployHealthCheck) {
	s.HealthCheck = val
}

// SetTelemetry sets the value of Telemetry.
func (s *ContainerDeploy) SetTelemetry(val OptContainerDeployTelemetry) {
	s.Telemetry = val
}

// Settings that give more granular control over deployment targets and conditions.
type ContainerDeployConstraints struct {
	// Constraint settings related to which nodes an instance can be deployed to.
	Node    OptContainerDeployConstraintsNode `json:"node"`
	Secrets []string                          `json:"secrets"`
}

// GetNode returns the value of Node.
func (s *ContainerDeployConstraints) GetNode() OptContainerDeployConstraintsNode {
	return s.Node
}

// GetSecrets returns the value of Secrets.
func (s *ContainerDeployConstraints) GetSecrets() []string {
	return s.Secrets
}

// SetNode sets the value of Node.
func (s *ContainerDeployConstraints) SetNode(val OptContainerDeployConstraintsNode) {
	s.Node = val
}

// SetSecrets sets the value of Secrets.
func (s *ContainerDeployConstraints) SetSecrets(val []string) {
	s.Secrets = val
}

// Constraint settings related to which nodes an instance can be deployed to.
type ContainerDeployConstraintsNode struct {
	// Lists of server tags that formally declair servers that match the criteria for deployment.
	Tags ContainerDeployConstraintsNodeTags `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *ContainerDeployConstraintsNode) GetTags() ContainerDeployConstraintsNodeTags {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *ContainerDeployConstraintsNode) SetTags(val ContainerDeployConstraintsNodeTags) {
	s.Tags = val
}

// Lists of server tags that formally declair servers that match the criteria for deployment.
type ContainerDeployConstraintsNodeTags struct {
	// A list of tags where a server matching any tags from the list is qualified as a deployment target.
	Any []string `json:"any"`
	// A list of tags where a server matching all tags from the list is the only scenario where the
	// server is qualified as a deployment target.
	All []string `json:"all"`
}

// GetAny returns the value of Any.
func (s *ContainerDeployConstraintsNodeTags) GetAny() []string {
	return s.Any
}

// GetAll returns the value of All.
func (s *ContainerDeployConstraintsNodeTags) GetAll() []string {
	return s.All
}

// SetAny sets the value of Any.
func (s *ContainerDeployConstraintsNodeTags) SetAny(val []string) {
	s.Any = val
}

// SetAll sets the value of All.
func (s *ContainerDeployConstraintsNodeTags) SetAll(val []string) {
	s.All = val
}

// Configuration for determining the health of a container.
type ContainerDeployHealthCheck struct {
	// The command that will be run to verify the health of the container.
	Command string `json:"command"`
	// The number of times the platform will retry the command before marking the container unhealthy.
	Retries int `json:"retries"`
	// How long to wait before performing an initial health check when the instance starts. The `state.
	// health.healthy` field of the instance will be `null`` until the first check is performed.
	Delay    NilString `json:"delay"`
	Interval Duration  `json:"interval"`
	Timeout  Duration  `json:"timeout"`
	// A boolean where `true` represents the desire for a container to restart if unhealthy.
	Restart bool `json:"restart"`
}

// GetCommand returns the value of Command.
func (s *ContainerDeployHealthCheck) GetCommand() string {
	return s.Command
}

// GetRetries returns the value of Retries.
func (s *ContainerDeployHealthCheck) GetRetries() int {
	return s.Retries
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployHealthCheck) GetDelay() NilString {
	return s.Delay
}

// GetInterval returns the value of Interval.
func (s *ContainerDeployHealthCheck) GetInterval() Duration {
	return s.Interval
}

// GetTimeout returns the value of Timeout.
func (s *ContainerDeployHealthCheck) GetTimeout() Duration {
	return s.Timeout
}

// GetRestart returns the value of Restart.
func (s *ContainerDeployHealthCheck) GetRestart() bool {
	return s.Restart
}

// SetCommand sets the value of Command.
func (s *ContainerDeployHealthCheck) SetCommand(val string) {
	s.Command = val
}

// SetRetries sets the value of Retries.
func (s *ContainerDeployHealthCheck) SetRetries(val int) {
	s.Retries = val
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployHealthCheck) SetDelay(val NilString) {
	s.Delay = val
}

// SetInterval sets the value of Interval.
func (s *ContainerDeployHealthCheck) SetInterval(val Duration) {
	s.Interval = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerDeployHealthCheck) SetTimeout(val Duration) {
	s.Timeout = val
}

// SetRestart sets the value of Restart.
func (s *ContainerDeployHealthCheck) SetRestart(val bool) {
	s.Restart = val
}

// Configurations for container restart events.
type ContainerDeployRestart struct {
	// Policy for what should happen in the event of a container dying.
	Condition ContainerDeployRestartCondition `json:"condition"`
	Delay     Duration                        `json:"delay"`
	// The amount of times the platform will attempt the restart policies.
	MaxAttempts int `json:"max_attempts"`
}

// GetCondition returns the value of Condition.
func (s *ContainerDeployRestart) GetCondition() ContainerDeployRestartCondition {
	return s.Condition
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployRestart) GetDelay() Duration {
	return s.Delay
}

// GetMaxAttempts returns the value of MaxAttempts.
func (s *ContainerDeployRestart) GetMaxAttempts() int {
	return s.MaxAttempts
}

// SetCondition sets the value of Condition.
func (s *ContainerDeployRestart) SetCondition(val ContainerDeployRestartCondition) {
	s.Condition = val
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployRestart) SetDelay(val Duration) {
	s.Delay = val
}

// SetMaxAttempts sets the value of MaxAttempts.
func (s *ContainerDeployRestart) SetMaxAttempts(val int) {
	s.MaxAttempts = val
}

// Policy for what should happen in the event of a container dying.
type ContainerDeployRestartCondition string

const (
	ContainerDeployRestartConditionAlways  ContainerDeployRestartCondition = "always"
	ContainerDeployRestartConditionNever   ContainerDeployRestartCondition = "never"
	ContainerDeployRestartConditionFailure ContainerDeployRestartCondition = "failure"
)

// AllValues returns all ContainerDeployRestartCondition values.
func (ContainerDeployRestartCondition) AllValues() []ContainerDeployRestartCondition {
	return []ContainerDeployRestartCondition{
		ContainerDeployRestartConditionAlways,
		ContainerDeployRestartConditionNever,
		ContainerDeployRestartConditionFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerDeployRestartCondition) MarshalText() ([]byte, error) {
	switch s {
	case ContainerDeployRestartConditionAlways:
		return []byte(s), nil
	case ContainerDeployRestartConditionNever:
		return []byte(s), nil
	case ContainerDeployRestartConditionFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerDeployRestartCondition) UnmarshalText(data []byte) error {
	switch ContainerDeployRestartCondition(data) {
	case ContainerDeployRestartConditionAlways:
		*s = ContainerDeployRestartConditionAlways
		return nil
	case ContainerDeployRestartConditionNever:
		*s = ContainerDeployRestartConditionNever
		return nil
	case ContainerDeployRestartConditionFailure:
		*s = ContainerDeployRestartConditionFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configuration for what to do during container shutdown.
type ContainerDeployShutdown struct {
	// How long the platform will wait for a container to stop gracefully.
	GracefulTimeout OptNilString `json:"graceful_timeout"`
	// Process signal sent to the container process.
	Signals OptNilContainerDeployShutdownSignalsItemArray `json:"signals"`
}

// GetGracefulTimeout returns the value of GracefulTimeout.
func (s *ContainerDeployShutdown) GetGracefulTimeout() OptNilString {
	return s.GracefulTimeout
}

// GetSignals returns the value of Signals.
func (s *ContainerDeployShutdown) GetSignals() OptNilContainerDeployShutdownSignalsItemArray {
	return s.Signals
}

// SetGracefulTimeout sets the value of GracefulTimeout.
func (s *ContainerDeployShutdown) SetGracefulTimeout(val OptNilString) {
	s.GracefulTimeout = val
}

// SetSignals sets the value of Signals.
func (s *ContainerDeployShutdown) SetSignals(val OptNilContainerDeployShutdownSignalsItemArray) {
	s.Signals = val
}

type ContainerDeployShutdownSignalsItem string

const (
	ContainerDeployShutdownSignalsItemSIGTERM ContainerDeployShutdownSignalsItem = "SIGTERM"
	ContainerDeployShutdownSignalsItemSIGINT  ContainerDeployShutdownSignalsItem = "SIGINT"
	ContainerDeployShutdownSignalsItemSIGUSR1 ContainerDeployShutdownSignalsItem = "SIGUSR1"
	ContainerDeployShutdownSignalsItemSIGUSR2 ContainerDeployShutdownSignalsItem = "SIGUSR2"
	ContainerDeployShutdownSignalsItemSIGHUP  ContainerDeployShutdownSignalsItem = "SIGHUP"
	ContainerDeployShutdownSignalsItemSIGQUIT ContainerDeployShutdownSignalsItem = "SIGQUIT"
)

// AllValues returns all ContainerDeployShutdownSignalsItem values.
func (ContainerDeployShutdownSignalsItem) AllValues() []ContainerDeployShutdownSignalsItem {
	return []ContainerDeployShutdownSignalsItem{
		ContainerDeployShutdownSignalsItemSIGTERM,
		ContainerDeployShutdownSignalsItemSIGINT,
		ContainerDeployShutdownSignalsItemSIGUSR1,
		ContainerDeployShutdownSignalsItemSIGUSR2,
		ContainerDeployShutdownSignalsItemSIGHUP,
		ContainerDeployShutdownSignalsItemSIGQUIT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerDeployShutdownSignalsItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerDeployShutdownSignalsItemSIGTERM:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGINT:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGUSR1:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGUSR2:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGHUP:
		return []byte(s), nil
	case ContainerDeployShutdownSignalsItemSIGQUIT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerDeployShutdownSignalsItem) UnmarshalText(data []byte) error {
	switch ContainerDeployShutdownSignalsItem(data) {
	case ContainerDeployShutdownSignalsItemSIGTERM:
		*s = ContainerDeployShutdownSignalsItemSIGTERM
		return nil
	case ContainerDeployShutdownSignalsItemSIGINT:
		*s = ContainerDeployShutdownSignalsItemSIGINT
		return nil
	case ContainerDeployShutdownSignalsItemSIGUSR1:
		*s = ContainerDeployShutdownSignalsItemSIGUSR1
		return nil
	case ContainerDeployShutdownSignalsItemSIGUSR2:
		*s = ContainerDeployShutdownSignalsItemSIGUSR2
		return nil
	case ContainerDeployShutdownSignalsItemSIGHUP:
		*s = ContainerDeployShutdownSignalsItemSIGHUP
		return nil
	case ContainerDeployShutdownSignalsItemSIGQUIT:
		*s = ContainerDeployShutdownSignalsItemSIGQUIT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Configurations for container startup.
type ContainerDeployStartup struct {
	Delay OptDuration `json:"delay"`
}

// GetDelay returns the value of Delay.
func (s *ContainerDeployStartup) GetDelay() OptDuration {
	return s.Delay
}

// SetDelay sets the value of Delay.
func (s *ContainerDeployStartup) SetDelay(val OptDuration) {
	s.Delay = val
}

type ContainerDeployStateful struct {
	Options OptNilContainerDeployStatefulOptions `json:"options"`
}

// GetOptions returns the value of Options.
func (s *ContainerDeployStateful) GetOptions() OptNilContainerDeployStatefulOptions {
	return s.Options
}

// SetOptions sets the value of Options.
func (s *ContainerDeployStateful) SetOptions(val OptNilContainerDeployStatefulOptions) {
	s.Options = val
}

type ContainerDeployStatefulOptions struct {
	UseBaseHostname OptNilBool `json:"use_base_hostname"`
}

// GetUseBaseHostname returns the value of UseBaseHostname.
func (s *ContainerDeployStatefulOptions) GetUseBaseHostname() OptNilBool {
	return s.UseBaseHostname
}

// SetUseBaseHostname sets the value of UseBaseHostname.
func (s *ContainerDeployStatefulOptions) SetUseBaseHostname(val OptNilBool) {
	s.UseBaseHostname = val
}

// Configuration settings for container telemetery reporting.
type ContainerDeployTelemetry struct {
	Retention Duration `json:"retention"`
	Interval  Duration `json:"interval"`
	// A boolean where true disables all telemetry reporting for this container.
	Disable bool `json:"disable"`
	// An endpoint to report the telemetry data to.
	WebHook OptString `json:"web_hook"`
}

// GetRetention returns the value of Retention.
func (s *ContainerDeployTelemetry) GetRetention() Duration {
	return s.Retention
}

// GetInterval returns the value of Interval.
func (s *ContainerDeployTelemetry) GetInterval() Duration {
	return s.Interval
}

// GetDisable returns the value of Disable.
func (s *ContainerDeployTelemetry) GetDisable() bool {
	return s.Disable
}

// GetWebHook returns the value of WebHook.
func (s *ContainerDeployTelemetry) GetWebHook() OptString {
	return s.WebHook
}

// SetRetention sets the value of Retention.
func (s *ContainerDeployTelemetry) SetRetention(val Duration) {
	s.Retention = val
}

// SetInterval sets the value of Interval.
func (s *ContainerDeployTelemetry) SetInterval(val Duration) {
	s.Interval = val
}

// SetDisable sets the value of Disable.
func (s *ContainerDeployTelemetry) SetDisable(val bool) {
	s.Disable = val
}

// SetWebHook sets the value of WebHook.
func (s *ContainerDeployTelemetry) SetWebHook(val OptString) {
	s.WebHook = val
}

// Configurations for container updates.
type ContainerDeployUpdate struct {
	Stagger OptDuration `json:"stagger"`
}

// GetStagger returns the value of Stagger.
func (s *ContainerDeployUpdate) GetStagger() OptDuration {
	return s.Stagger
}

// SetStagger sets the value of Stagger.
func (s *ContainerDeployUpdate) SetStagger(val OptDuration) {
	s.Stagger = val
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type ContainerDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *ContainerDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *ContainerDeployment) SetVersion(val Version) {
	s.Version = val
}

// A summary of supplemental environment and network information specific to a container.
// Ref: #/components/schemas/ContainerEnvironmentSummary
type ContainerEnvironmentSummary struct {
	ID ID `json:"id"`
	// The cluster this environment is associated with.
	Cluster string `json:"cluster"`
	// The private network subnet ID for this container and its instances.
	ContainerSubnet OptNilString                          `json:"container_subnet"`
	Ipv6            OptNilContainerEnvironmentSummaryIpv6 `json:"ipv6"`
	Legacy          NilContainerEnvironmentSummaryLegacy  `json:"legacy"`
}

// GetID returns the value of ID.
func (s *ContainerEnvironmentSummary) GetID() ID {
	return s.ID
}

// GetCluster returns the value of Cluster.
func (s *ContainerEnvironmentSummary) GetCluster() string {
	return s.Cluster
}

// GetContainerSubnet returns the value of ContainerSubnet.
func (s *ContainerEnvironmentSummary) GetContainerSubnet() OptNilString {
	return s.ContainerSubnet
}

// GetIpv6 returns the value of Ipv6.
func (s *ContainerEnvironmentSummary) GetIpv6() OptNilContainerEnvironmentSummaryIpv6 {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *ContainerEnvironmentSummary) GetLegacy() NilContainerEnvironmentSummaryLegacy {
	return s.Legacy
}

// SetID sets the value of ID.
func (s *ContainerEnvironmentSummary) SetID(val ID) {
	s.ID = val
}

// SetCluster sets the value of Cluster.
func (s *ContainerEnvironmentSummary) SetCluster(val string) {
	s.Cluster = val
}

// SetContainerSubnet sets the value of ContainerSubnet.
func (s *ContainerEnvironmentSummary) SetContainerSubnet(val OptNilString) {
	s.ContainerSubnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *ContainerEnvironmentSummary) SetIpv6(val OptNilContainerEnvironmentSummaryIpv6) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *ContainerEnvironmentSummary) SetLegacy(val NilContainerEnvironmentSummaryLegacy) {
	s.Legacy = val
}

type ContainerEnvironmentSummaryIpv6 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *ContainerEnvironmentSummaryIpv6) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *ContainerEnvironmentSummaryIpv6) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *ContainerEnvironmentSummaryIpv6) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *ContainerEnvironmentSummaryIpv6) SetCidr(val string) {
	s.Cidr = val
}

// Legacy network information for an Environment.
type ContainerEnvironmentSummaryLegacy struct {
	// The IPv4 subnet Id.
	Subnet int `json:"subnet"`
	// IPv4 information available from environments using legacy networking.
	Ipv4 OptNilContainerEnvironmentSummaryLegacyIpv4 `json:"ipv4"`
}

// GetSubnet returns the value of Subnet.
func (s *ContainerEnvironmentSummaryLegacy) GetSubnet() int {
	return s.Subnet
}

// GetIpv4 returns the value of Ipv4.
func (s *ContainerEnvironmentSummaryLegacy) GetIpv4() OptNilContainerEnvironmentSummaryLegacyIpv4 {
	return s.Ipv4
}

// SetSubnet sets the value of Subnet.
func (s *ContainerEnvironmentSummaryLegacy) SetSubnet(val int) {
	s.Subnet = val
}

// SetIpv4 sets the value of Ipv4.
func (s *ContainerEnvironmentSummaryLegacy) SetIpv4(val OptNilContainerEnvironmentSummaryLegacyIpv4) {
	s.Ipv4 = val
}

type ContainerEnvironmentSummaryLegacyIpv4 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *ContainerEnvironmentSummaryLegacyIpv4) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *ContainerEnvironmentSummaryLegacyIpv4) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *ContainerEnvironmentSummaryLegacyIpv4) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *ContainerEnvironmentSummaryLegacyIpv4) SetCidr(val string) {
	s.Cidr = val
}

// A collection of timestamps for each event in the container's lifetime.
type ContainerEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
	Started DateTime `json:"started"`
}

// GetCreated returns the value of Created.
func (s *ContainerEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ContainerEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ContainerEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetStarted returns the value of Started.
func (s *ContainerEvents) GetStarted() DateTime {
	return s.Started
}

// SetCreated sets the value of Created.
func (s *ContainerEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ContainerEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ContainerEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetStarted sets the value of Started.
func (s *ContainerEvents) SetStarted(val DateTime) {
	s.Started = val
}

// The Id of the image and information on if it is a service.
// Ref: #/components/schemas/ContainerImageSummary
type ContainerImageSummary struct {
	ID ID `json:"id"`
	// If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
	Service NilContainerImageSummaryService `json:"service"`
}

// GetID returns the value of ID.
func (s *ContainerImageSummary) GetID() ID {
	return s.ID
}

// GetService returns the value of Service.
func (s *ContainerImageSummary) GetService() NilContainerImageSummaryService {
	return s.Service
}

// SetID sets the value of ID.
func (s *ContainerImageSummary) SetID(val ID) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *ContainerImageSummary) SetService(val NilContainerImageSummaryService) {
	s.Service = val
}

// If this image is a service container this will say either `discovery` | `loadbalancer` | `vpn`.
type ContainerImageSummaryService string

const (
	ContainerImageSummaryServiceDiscovery    ContainerImageSummaryService = "discovery"
	ContainerImageSummaryServiceLoadbalancer ContainerImageSummaryService = "loadbalancer"
	ContainerImageSummaryServiceVpn          ContainerImageSummaryService = "vpn"
)

// AllValues returns all ContainerImageSummaryService values.
func (ContainerImageSummaryService) AllValues() []ContainerImageSummaryService {
	return []ContainerImageSummaryService{
		ContainerImageSummaryServiceDiscovery,
		ContainerImageSummaryServiceLoadbalancer,
		ContainerImageSummaryServiceVpn,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerImageSummaryService) MarshalText() ([]byte, error) {
	switch s {
	case ContainerImageSummaryServiceDiscovery:
		return []byte(s), nil
	case ContainerImageSummaryServiceLoadbalancer:
		return []byte(s), nil
	case ContainerImageSummaryServiceVpn:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerImageSummaryService) UnmarshalText(data []byte) error {
	switch ContainerImageSummaryService(data) {
	case ContainerImageSummaryServiceDiscovery:
		*s = ContainerImageSummaryServiceDiscovery
		return nil
	case ContainerImageSummaryServiceLoadbalancer:
		*s = ContainerImageSummaryServiceLoadbalancer
		return nil
	case ContainerImageSummaryServiceVpn:
		*s = ContainerImageSummaryServiceVpn
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// All includable resources linkable to the given container.
// Ref: #/components/schemas/ContainerIncludes
type ContainerIncludes struct {
	Creators                OptCreatorInclude      `json:"creators"`
	Images                  OptImagesIncludes      `json:"images"`
	StackBuilds             OptStackBuildIncludes  `json:"stack_builds"`
	Stacks                  OptStackIncludes       `json:"stacks"`
	StacksIdentifiers       OptIdentifierIncludes  `json:"stacks:identifiers"`
	Environments            OptEnvironmentIncludes `json:"environments"`
	EnvironmentsIdentifiers OptIdentifierIncludes  `json:"environments:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *ContainerIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetImages returns the value of Images.
func (s *ContainerIncludes) GetImages() OptImagesIncludes {
	return s.Images
}

// GetStackBuilds returns the value of StackBuilds.
func (s *ContainerIncludes) GetStackBuilds() OptStackBuildIncludes {
	return s.StackBuilds
}

// GetStacks returns the value of Stacks.
func (s *ContainerIncludes) GetStacks() OptStackIncludes {
	return s.Stacks
}

// GetStacksIdentifiers returns the value of StacksIdentifiers.
func (s *ContainerIncludes) GetStacksIdentifiers() OptIdentifierIncludes {
	return s.StacksIdentifiers
}

// GetEnvironments returns the value of Environments.
func (s *ContainerIncludes) GetEnvironments() OptEnvironmentIncludes {
	return s.Environments
}

// GetEnvironmentsIdentifiers returns the value of EnvironmentsIdentifiers.
func (s *ContainerIncludes) GetEnvironmentsIdentifiers() OptIdentifierIncludes {
	return s.EnvironmentsIdentifiers
}

// SetCreators sets the value of Creators.
func (s *ContainerIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetImages sets the value of Images.
func (s *ContainerIncludes) SetImages(val OptImagesIncludes) {
	s.Images = val
}

// SetStackBuilds sets the value of StackBuilds.
func (s *ContainerIncludes) SetStackBuilds(val OptStackBuildIncludes) {
	s.StackBuilds = val
}

// SetStacks sets the value of Stacks.
func (s *ContainerIncludes) SetStacks(val OptStackIncludes) {
	s.Stacks = val
}

// SetStacksIdentifiers sets the value of StacksIdentifiers.
func (s *ContainerIncludes) SetStacksIdentifiers(val OptIdentifierIncludes) {
	s.StacksIdentifiers = val
}

// SetEnvironments sets the value of Environments.
func (s *ContainerIncludes) SetEnvironments(val OptEnvironmentIncludes) {
	s.Environments = val
}

// SetEnvironmentsIdentifiers sets the value of EnvironmentsIdentifiers.
func (s *ContainerIncludes) SetEnvironmentsIdentifiers(val OptIdentifierIncludes) {
	s.EnvironmentsIdentifiers = val
}

// Configuration settings for integrations with a given container.
// Ref: #/components/schemas/ContainerIntegrations
type ContainerIntegrations struct {
	// Webhooks that can be set for specific event reporting and advanced container configurations.
	Webhooks OptContainerIntegrationsWebhooks `json:"webhooks"`
	// Inject remotely hosted files into container instances at runtime.
	Files []ContainerIntegrationsFilesItem `json:"files"`
	// Configuration settings to embed a TLS certificate in the container.
	LetsEncrypt OptContainerIntegrationsLetsEncrypt `json:"lets_encrypt"`
	// Automated backups configuration for the given container.
	Backups           OptContainerIntegrationsBackups              `json:"backups"`
	SharedFileSystems OptNilContainerIntegrationsSharedFileSystems `json:"shared_file_systems"`
}

// GetWebhooks returns the value of Webhooks.
func (s *ContainerIntegrations) GetWebhooks() OptContainerIntegrationsWebhooks {
	return s.Webhooks
}

// GetFiles returns the value of Files.
func (s *ContainerIntegrations) GetFiles() []ContainerIntegrationsFilesItem {
	return s.Files
}

// GetLetsEncrypt returns the value of LetsEncrypt.
func (s *ContainerIntegrations) GetLetsEncrypt() OptContainerIntegrationsLetsEncrypt {
	return s.LetsEncrypt
}

// GetBackups returns the value of Backups.
func (s *ContainerIntegrations) GetBackups() OptContainerIntegrationsBackups {
	return s.Backups
}

// GetSharedFileSystems returns the value of SharedFileSystems.
func (s *ContainerIntegrations) GetSharedFileSystems() OptNilContainerIntegrationsSharedFileSystems {
	return s.SharedFileSystems
}

// SetWebhooks sets the value of Webhooks.
func (s *ContainerIntegrations) SetWebhooks(val OptContainerIntegrationsWebhooks) {
	s.Webhooks = val
}

// SetFiles sets the value of Files.
func (s *ContainerIntegrations) SetFiles(val []ContainerIntegrationsFilesItem) {
	s.Files = val
}

// SetLetsEncrypt sets the value of LetsEncrypt.
func (s *ContainerIntegrations) SetLetsEncrypt(val OptContainerIntegrationsLetsEncrypt) {
	s.LetsEncrypt = val
}

// SetBackups sets the value of Backups.
func (s *ContainerIntegrations) SetBackups(val OptContainerIntegrationsBackups) {
	s.Backups = val
}

// SetSharedFileSystems sets the value of SharedFileSystems.
func (s *ContainerIntegrations) SetSharedFileSystems(val OptNilContainerIntegrationsSharedFileSystems) {
	s.SharedFileSystems = val
}

// Automated backups configuration for the given container.
type ContainerIntegrationsBackups struct {
	IntegrationID OptHybridIdentifier `json:"integration_id"`
	// Configuration settings for each backup.
	Backup ContainerIntegrationsBackupsBackup `json:"backup"`
	// Configuration settings for restoring from a backup.
	Restore NilContainerIntegrationsBackupsRestore `json:"restore"`
	// How long the platform will keep backups. Default is 1 year.
	Retention NilString `json:"retention"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ContainerIntegrationsBackups) GetIntegrationID() OptHybridIdentifier {
	return s.IntegrationID
}

// GetBackup returns the value of Backup.
func (s *ContainerIntegrationsBackups) GetBackup() ContainerIntegrationsBackupsBackup {
	return s.Backup
}

// GetRestore returns the value of Restore.
func (s *ContainerIntegrationsBackups) GetRestore() NilContainerIntegrationsBackupsRestore {
	return s.Restore
}

// GetRetention returns the value of Retention.
func (s *ContainerIntegrationsBackups) GetRetention() NilString {
	return s.Retention
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ContainerIntegrationsBackups) SetIntegrationID(val OptHybridIdentifier) {
	s.IntegrationID = val
}

// SetBackup sets the value of Backup.
func (s *ContainerIntegrationsBackups) SetBackup(val ContainerIntegrationsBackupsBackup) {
	s.Backup = val
}

// SetRestore sets the value of Restore.
func (s *ContainerIntegrationsBackups) SetRestore(val NilContainerIntegrationsBackupsRestore) {
	s.Restore = val
}

// SetRetention sets the value of Retention.
func (s *ContainerIntegrationsBackups) SetRetention(val NilString) {
	s.Retention = val
}

// Configuration settings for each backup.
type ContainerIntegrationsBackupsBackup struct {
	// The command to run for the backup.
	Command string `json:"command"`
	// How long the backup will attempt to run before timing out.
	Timeout OptNilString `json:"timeout"`
	// A cron string that configures how often the backup will run.
	CronString OptString `json:"cron_string"`
}

// GetCommand returns the value of Command.
func (s *ContainerIntegrationsBackupsBackup) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *ContainerIntegrationsBackupsBackup) GetTimeout() OptNilString {
	return s.Timeout
}

// GetCronString returns the value of CronString.
func (s *ContainerIntegrationsBackupsBackup) GetCronString() OptString {
	return s.CronString
}

// SetCommand sets the value of Command.
func (s *ContainerIntegrationsBackupsBackup) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerIntegrationsBackupsBackup) SetTimeout(val OptNilString) {
	s.Timeout = val
}

// SetCronString sets the value of CronString.
func (s *ContainerIntegrationsBackupsBackup) SetCronString(val OptString) {
	s.CronString = val
}

// Configuration settings for restoring from a backup.
type ContainerIntegrationsBackupsRestore struct {
	// The command to run for restoring from a backup.
	Command string `json:"command"`
	// The time in seconds for the restore to attempt to complete before timing out.
	Timeout OptString `json:"timeout"`
}

// GetCommand returns the value of Command.
func (s *ContainerIntegrationsBackupsRestore) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *ContainerIntegrationsBackupsRestore) GetTimeout() OptString {
	return s.Timeout
}

// SetCommand sets the value of Command.
func (s *ContainerIntegrationsBackupsRestore) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *ContainerIntegrationsBackupsRestore) SetTimeout(val OptString) {
	s.Timeout = val
}

// These objects are sources and destinations for the given files.
type ContainerIntegrationsFilesItem struct {
	// The http endpoint that is hosting the files to be used.
	Source string `json:"source"`
	// The path in the container for these files to be injected.
	Destination string `json:"destination"`
}

// GetSource returns the value of Source.
func (s *ContainerIntegrationsFilesItem) GetSource() string {
	return s.Source
}

// GetDestination returns the value of Destination.
func (s *ContainerIntegrationsFilesItem) GetDestination() string {
	return s.Destination
}

// SetSource sets the value of Source.
func (s *ContainerIntegrationsFilesItem) SetSource(val string) {
	s.Source = val
}

// SetDestination sets the value of Destination.
func (s *ContainerIntegrationsFilesItem) SetDestination(val string) {
	s.Destination = val
}

// Configuration settings to embed a TLS certificate in the container.
type ContainerIntegrationsLetsEncrypt struct {
	// A boolean where true represents the desire for a container to have its corresponding TLS
	// certificate(s) injected into the configured path(s).
	Enable bool `json:"enable"`
	// Path where the `certificate.cert` will be saved.
	CertificatePath OptString `json:"certificate_path"`
	// Path where the `certificate.chain` will be saved.
	ChainPath OptString `json:"chain_path"`
	// Path where the `certificate.key` will be saved.
	KeyPath OptString `json:"key_path"`
	// Path where the `certificate.bundle` will be saved.
	BundlePath OptString `json:"bundle_path"`
	// File path where any remaining certificate files will be stored.
	AdditionalCertsPath OptString `json:"additional_certs_path"`
}

// GetEnable returns the value of Enable.
func (s *ContainerIntegrationsLetsEncrypt) GetEnable() bool {
	return s.Enable
}

// GetCertificatePath returns the value of CertificatePath.
func (s *ContainerIntegrationsLetsEncrypt) GetCertificatePath() OptString {
	return s.CertificatePath
}

// GetChainPath returns the value of ChainPath.
func (s *ContainerIntegrationsLetsEncrypt) GetChainPath() OptString {
	return s.ChainPath
}

// GetKeyPath returns the value of KeyPath.
func (s *ContainerIntegrationsLetsEncrypt) GetKeyPath() OptString {
	return s.KeyPath
}

// GetBundlePath returns the value of BundlePath.
func (s *ContainerIntegrationsLetsEncrypt) GetBundlePath() OptString {
	return s.BundlePath
}

// GetAdditionalCertsPath returns the value of AdditionalCertsPath.
func (s *ContainerIntegrationsLetsEncrypt) GetAdditionalCertsPath() OptString {
	return s.AdditionalCertsPath
}

// SetEnable sets the value of Enable.
func (s *ContainerIntegrationsLetsEncrypt) SetEnable(val bool) {
	s.Enable = val
}

// SetCertificatePath sets the value of CertificatePath.
func (s *ContainerIntegrationsLetsEncrypt) SetCertificatePath(val OptString) {
	s.CertificatePath = val
}

// SetChainPath sets the value of ChainPath.
func (s *ContainerIntegrationsLetsEncrypt) SetChainPath(val OptString) {
	s.ChainPath = val
}

// SetKeyPath sets the value of KeyPath.
func (s *ContainerIntegrationsLetsEncrypt) SetKeyPath(val OptString) {
	s.KeyPath = val
}

// SetBundlePath sets the value of BundlePath.
func (s *ContainerIntegrationsLetsEncrypt) SetBundlePath(val OptString) {
	s.BundlePath = val
}

// SetAdditionalCertsPath sets the value of AdditionalCertsPath.
func (s *ContainerIntegrationsLetsEncrypt) SetAdditionalCertsPath(val OptString) {
	s.AdditionalCertsPath = val
}

type ContainerIntegrationsSharedFileSystems map[string]ContainerIntegrationsSharedFileSystemsItem

func (s *ContainerIntegrationsSharedFileSystems) init() ContainerIntegrationsSharedFileSystems {
	m := *s
	if m == nil {
		m = map[string]ContainerIntegrationsSharedFileSystemsItem{}
		*s = m
	}
	return m
}

type ContainerIntegrationsSharedFileSystemsItem struct {
	Writable   bool   `json:"writable"`
	MountPoint string `json:"mount_point"`
}

// GetWritable returns the value of Writable.
func (s *ContainerIntegrationsSharedFileSystemsItem) GetWritable() bool {
	return s.Writable
}

// GetMountPoint returns the value of MountPoint.
func (s *ContainerIntegrationsSharedFileSystemsItem) GetMountPoint() string {
	return s.MountPoint
}

// SetWritable sets the value of Writable.
func (s *ContainerIntegrationsSharedFileSystemsItem) SetWritable(val bool) {
	s.Writable = val
}

// SetMountPoint sets the value of MountPoint.
func (s *ContainerIntegrationsSharedFileSystemsItem) SetMountPoint(val string) {
	s.MountPoint = val
}

// Webhooks that can be set for specific event reporting and advanced container configurations.
type ContainerIntegrationsWebhooks struct {
	// Container events that can be configured to report to a webhook.
	Events OptContainerIntegrationsWebhooksEvents `json:"events"`
	// An endpoint that the platform will react out to with a get request.  This endpoint serves a
	// partial container config which can modify `runtime`, `resources`, and `integrations`
	// configurations.
	Config OptString `json:"config"`
}

// GetEvents returns the value of Events.
func (s *ContainerIntegrationsWebhooks) GetEvents() OptContainerIntegrationsWebhooksEvents {
	return s.Events
}

// GetConfig returns the value of Config.
func (s *ContainerIntegrationsWebhooks) GetConfig() OptString {
	return s.Config
}

// SetEvents sets the value of Events.
func (s *ContainerIntegrationsWebhooks) SetEvents(val OptContainerIntegrationsWebhooksEvents) {
	s.Events = val
}

// SetConfig sets the value of Config.
func (s *ContainerIntegrationsWebhooks) SetConfig(val OptString) {
	s.Config = val
}

// Container events that can be configured to report to a webhook.
type ContainerIntegrationsWebhooksEvents struct {
	// A webhook to hit when a container deploy event happens.
	Deploy OptString `json:"deploy"`
	// A webhook to hit when a container start event happens.
	Start OptString `json:"start"`
	// A webhook to hit when a container stop event happens.
	Stop OptString `json:"stop"`
}

// GetDeploy returns the value of Deploy.
func (s *ContainerIntegrationsWebhooksEvents) GetDeploy() OptString {
	return s.Deploy
}

// GetStart returns the value of Start.
func (s *ContainerIntegrationsWebhooksEvents) GetStart() OptString {
	return s.Start
}

// GetStop returns the value of Stop.
func (s *ContainerIntegrationsWebhooksEvents) GetStop() OptString {
	return s.Stop
}

// SetDeploy sets the value of Deploy.
func (s *ContainerIntegrationsWebhooksEvents) SetDeploy(val OptString) {
	s.Deploy = val
}

// SetStart sets the value of Start.
func (s *ContainerIntegrationsWebhooksEvents) SetStart(val OptString) {
	s.Start = val
}

// SetStop sets the value of Stop.
func (s *ContainerIntegrationsWebhooksEvents) SetStop(val OptString) {
	s.Stop = val
}

// Network configuration for a container.
// Ref: #/components/schemas/ContainerNetwork
type ContainerNetwork struct {
	// The public network settings for the given container.
	Public ContainerNetworkPublic `json:"public"`
	// The hostname for the given container.
	Hostname string `json:"hostname"`
	// An array of port mappings for the container.
	Ports []string `json:"ports"`
}

// GetPublic returns the value of Public.
func (s *ContainerNetwork) GetPublic() ContainerNetworkPublic {
	return s.Public
}

// GetHostname returns the value of Hostname.
func (s *ContainerNetwork) GetHostname() string {
	return s.Hostname
}

// GetPorts returns the value of Ports.
func (s *ContainerNetwork) GetPorts() []string {
	return s.Ports
}

// SetPublic sets the value of Public.
func (s *ContainerNetwork) SetPublic(val ContainerNetworkPublic) {
	s.Public = val
}

// SetHostname sets the value of Hostname.
func (s *ContainerNetwork) SetHostname(val string) {
	s.Hostname = val
}

// SetPorts sets the value of Ports.
func (s *ContainerNetwork) SetPorts(val []string) {
	s.Ports = val
}

// The public network settings for the given container.
type ContainerNetworkPublic string

const (
	ContainerNetworkPublicEnable     ContainerNetworkPublic = "enable"
	ContainerNetworkPublicEgressOnly ContainerNetworkPublic = "egress-only"
	ContainerNetworkPublicDisable    ContainerNetworkPublic = "disable"
)

// AllValues returns all ContainerNetworkPublic values.
func (ContainerNetworkPublic) AllValues() []ContainerNetworkPublic {
	return []ContainerNetworkPublic{
		ContainerNetworkPublicEnable,
		ContainerNetworkPublicEgressOnly,
		ContainerNetworkPublicDisable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerNetworkPublic) MarshalText() ([]byte, error) {
	switch s {
	case ContainerNetworkPublicEnable:
		return []byte(s), nil
	case ContainerNetworkPublicEgressOnly:
		return []byte(s), nil
	case ContainerNetworkPublicDisable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerNetworkPublic) UnmarshalText(data []byte) error {
	switch ContainerNetworkPublic(data) {
	case ContainerNetworkPublicEnable:
		*s = ContainerNetworkPublicEnable
		return nil
	case ContainerNetworkPublicEgressOnly:
		*s = ContainerNetworkPublicEgressOnly
		return nil
	case ContainerNetworkPublicDisable:
		*s = ContainerNetworkPublicDisable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Settings for reimaging a container in a pipeline.
// Ref: #/components/schemas/ContainerReimageStep
type ContainerReimageStep struct {
	// An identifier for the step.
	Identifier OptString                      `json:"identifier"`
	Options    OptContainerReimageStepOptions `json:"options"`
	Details    ContainerReimageStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerReimageStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerReimageStep) GetOptions() OptContainerReimageStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerReimageStep) GetDetails() ContainerReimageStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerReimageStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerReimageStep) SetOptions(val OptContainerReimageStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerReimageStep) SetDetails(val ContainerReimageStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerReimageStepAction string

const (
	ContainerReimageStepActionContainerReimage ContainerReimageStepAction = "container.reimage"
)

// AllValues returns all ContainerReimageStepAction values.
func (ContainerReimageStepAction) AllValues() []ContainerReimageStepAction {
	return []ContainerReimageStepAction{
		ContainerReimageStepActionContainerReimage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerReimageStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerReimageStepActionContainerReimage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerReimageStepAction) UnmarshalText(data []byte) error {
	switch ContainerReimageStepAction(data) {
	case ContainerReimageStepActionContainerReimage:
		*s = ContainerReimageStepActionContainerReimage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerReimageStepDetails struct {
	Container FluidIdentifier                       `json:"container"`
	Image     FluidIdentifier                       `json:"image"`
	Options   OptContainerReimageStepDetailsOptions `json:"options"`
}

// GetContainer returns the value of Container.
func (s *ContainerReimageStepDetails) GetContainer() FluidIdentifier {
	return s.Container
}

// GetImage returns the value of Image.
func (s *ContainerReimageStepDetails) GetImage() FluidIdentifier {
	return s.Image
}

// GetOptions returns the value of Options.
func (s *ContainerReimageStepDetails) GetOptions() OptContainerReimageStepDetailsOptions {
	return s.Options
}

// SetContainer sets the value of Container.
func (s *ContainerReimageStepDetails) SetContainer(val FluidIdentifier) {
	s.Container = val
}

// SetImage sets the value of Image.
func (s *ContainerReimageStepDetails) SetImage(val FluidIdentifier) {
	s.Image = val
}

// SetOptions sets the value of Options.
func (s *ContainerReimageStepDetails) SetOptions(val OptContainerReimageStepDetailsOptions) {
	s.Options = val
}

type ContainerReimageStepDetailsOptions struct {
	AllowIncompatible bool `json:"allow_incompatible"`
}

// GetAllowIncompatible returns the value of AllowIncompatible.
func (s *ContainerReimageStepDetailsOptions) GetAllowIncompatible() bool {
	return s.AllowIncompatible
}

// SetAllowIncompatible sets the value of AllowIncompatible.
func (s *ContainerReimageStepDetailsOptions) SetAllowIncompatible(val bool) {
	s.AllowIncompatible = val
}

type ContainerReimageStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerReimageStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerReimageStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Configuration settings for the resource allocations and limits of a given container.
// Ref: #/components/schemas/ContainerResources
type ContainerResources struct {
	// Configurations settings related to CPU usage.
	CPU ContainerResourcesCPU `json:"cpu"`
	// Configuration settings for limits and reserves of RAM resources for the given container.
	RAM ContainerResourcesRAM `json:"ram"`
}

// GetCPU returns the value of CPU.
func (s *ContainerResources) GetCPU() ContainerResourcesCPU {
	return s.CPU
}

// GetRAM returns the value of RAM.
func (s *ContainerResources) GetRAM() ContainerResourcesRAM {
	return s.RAM
}

// SetCPU sets the value of CPU.
func (s *ContainerResources) SetCPU(val ContainerResourcesCPU) {
	s.CPU = val
}

// SetRAM sets the value of RAM.
func (s *ContainerResources) SetRAM(val ContainerResourcesRAM) {
	s.RAM = val
}

// Configurations settings related to CPU usage.
type ContainerResourcesCPU struct {
	// A share represents 1/10th of the available compute time on a single thread.
	Shares OptContainerResourcesCPUShares `json:"shares"`
	Cpus   OptString                      `json:"cpus"`
}

// GetShares returns the value of Shares.
func (s *ContainerResourcesCPU) GetShares() OptContainerResourcesCPUShares {
	return s.Shares
}

// GetCpus returns the value of Cpus.
func (s *ContainerResourcesCPU) GetCpus() OptString {
	return s.Cpus
}

// SetShares sets the value of Shares.
func (s *ContainerResourcesCPU) SetShares(val OptContainerResourcesCPUShares) {
	s.Shares = val
}

// SetCpus sets the value of Cpus.
func (s *ContainerResourcesCPU) SetCpus(val OptString) {
	s.Cpus = val
}

// A share represents 1/10th of the available compute time on a single thread.
type ContainerResourcesCPUShares struct {
	// The limit (maximum) amount of shares each instance of a container can use.
	Limit int `json:"limit"`
	// The reserve (allocation) number of shares for each instance of a given container.
	Reserve int `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *ContainerResourcesCPUShares) GetLimit() int {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *ContainerResourcesCPUShares) GetReserve() int {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *ContainerResourcesCPUShares) SetLimit(val int) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *ContainerResourcesCPUShares) SetReserve(val int) {
	s.Reserve = val
}

// Configuration settings for limits and reserves of RAM resources for the given container.
type ContainerResourcesRAM struct {
	// The limit (maximum) amount of RAM each instance of the given container can use.
	Limit OptString `json:"limit"`
	// The reserve (allocation) of RAM given to each instance of the container.
	Reserve OptString `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *ContainerResourcesRAM) GetLimit() OptString {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *ContainerResourcesRAM) GetReserve() OptString {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *ContainerResourcesRAM) SetLimit(val OptString) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *ContainerResourcesRAM) SetReserve(val OptString) {
	s.Reserve = val
}

// Settings for restarting a container in a pipeline.
// Ref: #/components/schemas/ContainerRestartStep
type ContainerRestartStep struct {
	// An identifier for the step.
	Identifier OptString                      `json:"identifier"`
	Options    OptContainerRestartStepOptions `json:"options"`
	Details    ContainerRestartStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerRestartStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerRestartStep) GetOptions() OptContainerRestartStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerRestartStep) GetDetails() ContainerRestartStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerRestartStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerRestartStep) SetOptions(val OptContainerRestartStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerRestartStep) SetDetails(val ContainerRestartStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerRestartStepAction string

const (
	ContainerRestartStepActionContainerRestart ContainerRestartStepAction = "container.restart"
)

// AllValues returns all ContainerRestartStepAction values.
func (ContainerRestartStepAction) AllValues() []ContainerRestartStepAction {
	return []ContainerRestartStepAction{
		ContainerRestartStepActionContainerRestart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRestartStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRestartStepActionContainerRestart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRestartStepAction) UnmarshalText(data []byte) error {
	switch ContainerRestartStepAction(data) {
	case ContainerRestartStepActionContainerRestart:
		*s = ContainerRestartStepActionContainerRestart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerRestartStepDetails struct {
	Container FluidIdentifier `json:"container"`
}

// GetContainer returns the value of Container.
func (s *ContainerRestartStepDetails) GetContainer() FluidIdentifier {
	return s.Container
}

// SetContainer sets the value of Container.
func (s *ContainerRestartStepDetails) SetContainer(val FluidIdentifier) {
	s.Container = val
}

type ContainerRestartStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerRestartStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerRestartStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// The role of a given container if it has one.
type ContainerRole string

const (
	ContainerRoleOrchestrator ContainerRole = "orchestrator"
)

// AllValues returns all ContainerRole values.
func (ContainerRole) AllValues() []ContainerRole {
	return []ContainerRole{
		ContainerRoleOrchestrator,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRole) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRoleOrchestrator:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRole) UnmarshalText(data []byte) error {
	switch ContainerRole(data) {
	case ContainerRoleOrchestrator:
		*s = ContainerRoleOrchestrator
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Runtime configurations for a given container.
// Ref: #/components/schemas/ContainerRuntime
type ContainerRuntime struct {
	// A command that will be run in place of the images defined startup command.
	Command OptNilContainerRuntimeCommand `json:"command"`
	// Namespaces the given container will have access to.
	Namespaces []ContainerRuntimeNamespacesItem `json:"namespaces"`
	// A record of environment variables for the given container.
	EnvironmentVars OptContainerRuntimeEnvironmentVars `json:"environment_vars"`
	// Selecting this option will give this container full permissions on the server. This is not
	// recommended and increases the likelihood of your server being compromised.
	Privileged bool `json:"privileged"`
	// A list of linux kernel capabilites for the given container.
	Capabilities []ContainerRuntimeCapabilitiesItem `json:"capabilities"`
	// Configure the working directory for the given container.
	Workdir OptString `json:"workdir"`
	// A record of sysctl fields and values for a given container.
	Sysctl OptContainerRuntimeSysctl `json:"sysctl"`
	// A record of rlimits and their values.
	Rlimits OptContainerRuntimeRlimits    `json:"rlimits"`
	Seccomp OptNilContainerRuntimeSeccomp `json:"seccomp"`
	Host    OptNilContainerRuntimeHost    `json:"host"`
	Rootfs  OptContainerRuntimeRootfs     `json:"rootfs"`
}

// GetCommand returns the value of Command.
func (s *ContainerRuntime) GetCommand() OptNilContainerRuntimeCommand {
	return s.Command
}

// GetNamespaces returns the value of Namespaces.
func (s *ContainerRuntime) GetNamespaces() []ContainerRuntimeNamespacesItem {
	return s.Namespaces
}

// GetEnvironmentVars returns the value of EnvironmentVars.
func (s *ContainerRuntime) GetEnvironmentVars() OptContainerRuntimeEnvironmentVars {
	return s.EnvironmentVars
}

// GetPrivileged returns the value of Privileged.
func (s *ContainerRuntime) GetPrivileged() bool {
	return s.Privileged
}

// GetCapabilities returns the value of Capabilities.
func (s *ContainerRuntime) GetCapabilities() []ContainerRuntimeCapabilitiesItem {
	return s.Capabilities
}

// GetWorkdir returns the value of Workdir.
func (s *ContainerRuntime) GetWorkdir() OptString {
	return s.Workdir
}

// GetSysctl returns the value of Sysctl.
func (s *ContainerRuntime) GetSysctl() OptContainerRuntimeSysctl {
	return s.Sysctl
}

// GetRlimits returns the value of Rlimits.
func (s *ContainerRuntime) GetRlimits() OptContainerRuntimeRlimits {
	return s.Rlimits
}

// GetSeccomp returns the value of Seccomp.
func (s *ContainerRuntime) GetSeccomp() OptNilContainerRuntimeSeccomp {
	return s.Seccomp
}

// GetHost returns the value of Host.
func (s *ContainerRuntime) GetHost() OptNilContainerRuntimeHost {
	return s.Host
}

// GetRootfs returns the value of Rootfs.
func (s *ContainerRuntime) GetRootfs() OptContainerRuntimeRootfs {
	return s.Rootfs
}

// SetCommand sets the value of Command.
func (s *ContainerRuntime) SetCommand(val OptNilContainerRuntimeCommand) {
	s.Command = val
}

// SetNamespaces sets the value of Namespaces.
func (s *ContainerRuntime) SetNamespaces(val []ContainerRuntimeNamespacesItem) {
	s.Namespaces = val
}

// SetEnvironmentVars sets the value of EnvironmentVars.
func (s *ContainerRuntime) SetEnvironmentVars(val OptContainerRuntimeEnvironmentVars) {
	s.EnvironmentVars = val
}

// SetPrivileged sets the value of Privileged.
func (s *ContainerRuntime) SetPrivileged(val bool) {
	s.Privileged = val
}

// SetCapabilities sets the value of Capabilities.
func (s *ContainerRuntime) SetCapabilities(val []ContainerRuntimeCapabilitiesItem) {
	s.Capabilities = val
}

// SetWorkdir sets the value of Workdir.
func (s *ContainerRuntime) SetWorkdir(val OptString) {
	s.Workdir = val
}

// SetSysctl sets the value of Sysctl.
func (s *ContainerRuntime) SetSysctl(val OptContainerRuntimeSysctl) {
	s.Sysctl = val
}

// SetRlimits sets the value of Rlimits.
func (s *ContainerRuntime) SetRlimits(val OptContainerRuntimeRlimits) {
	s.Rlimits = val
}

// SetSeccomp sets the value of Seccomp.
func (s *ContainerRuntime) SetSeccomp(val OptNilContainerRuntimeSeccomp) {
	s.Seccomp = val
}

// SetHost sets the value of Host.
func (s *ContainerRuntime) SetHost(val OptNilContainerRuntimeHost) {
	s.Host = val
}

// SetRootfs sets the value of Rootfs.
func (s *ContainerRuntime) SetRootfs(val OptContainerRuntimeRootfs) {
	s.Rootfs = val
}

type ContainerRuntimeCapabilitiesItem string

const (
	ContainerRuntimeCapabilitiesItemCAPCHOWN          ContainerRuntimeCapabilitiesItem = "CAP_CHOWN"
	ContainerRuntimeCapabilitiesItemCAPFSETID         ContainerRuntimeCapabilitiesItem = "CAP_FSETID"
	ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE    ContainerRuntimeCapabilitiesItem = "CAP_DAC_OVERRIDE"
	ContainerRuntimeCapabilitiesItemCAPFOWNER         ContainerRuntimeCapabilitiesItem = "CAP_FOWNER"
	ContainerRuntimeCapabilitiesItemCAPSETFCAP        ContainerRuntimeCapabilitiesItem = "CAP_SETFCAP"
	ContainerRuntimeCapabilitiesItemCAPSETGID         ContainerRuntimeCapabilitiesItem = "CAP_SETGID"
	ContainerRuntimeCapabilitiesItemCAPSETUID         ContainerRuntimeCapabilitiesItem = "CAP_SETUID"
	ContainerRuntimeCapabilitiesItemCAPKILL           ContainerRuntimeCapabilitiesItem = "CAP_KILL"
	ContainerRuntimeCapabilitiesItemCAPMKNOD          ContainerRuntimeCapabilitiesItem = "CAP_MKNOD"
	ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE ContainerRuntimeCapabilitiesItem = "CAP_NET_BIND_SERVICE"
	ContainerRuntimeCapabilitiesItemCAPNETRAW         ContainerRuntimeCapabilitiesItem = "CAP_NET_RAW"
	ContainerRuntimeCapabilitiesItemCAPAUDITWRITE     ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_WRITE"
	ContainerRuntimeCapabilitiesItemCAPSYSCHROOT      ContainerRuntimeCapabilitiesItem = "CAP_SYS_CHROOT"
	ContainerRuntimeCapabilitiesItemCAPSETPCAP        ContainerRuntimeCapabilitiesItem = "CAP_SETPCAP"
	ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH  ContainerRuntimeCapabilitiesItem = "CAP_DAC_READ_SEARCH"
	ContainerRuntimeCapabilitiesItemCAPNETADMIN       ContainerRuntimeCapabilitiesItem = "CAP_NET_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPNETBROADCAST   ContainerRuntimeCapabilitiesItem = "CAP_NET_BROADCAST"
	ContainerRuntimeCapabilitiesItemCAPSYSADMIN       ContainerRuntimeCapabilitiesItem = "CAP_SYS_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPSYSMODULE      ContainerRuntimeCapabilitiesItem = "CAP_SYS_MODULE"
	ContainerRuntimeCapabilitiesItemCAPSYSNICE        ContainerRuntimeCapabilitiesItem = "CAP_SYS_NICE"
	ContainerRuntimeCapabilitiesItemCAPSYSPACCT       ContainerRuntimeCapabilitiesItem = "CAP_SYS_PACCT"
	ContainerRuntimeCapabilitiesItemCAPSYSPTRACE      ContainerRuntimeCapabilitiesItem = "CAP_SYS_PTRACE"
	ContainerRuntimeCapabilitiesItemCAPSYSRAWIO       ContainerRuntimeCapabilitiesItem = "CAP_SYS_RAWIO"
	ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE    ContainerRuntimeCapabilitiesItem = "CAP_SYS_RESOURCE"
	ContainerRuntimeCapabilitiesItemCAPSYSBOOT        ContainerRuntimeCapabilitiesItem = "CAP_SYS_BOOT"
	ContainerRuntimeCapabilitiesItemCAPSYSTIME        ContainerRuntimeCapabilitiesItem = "CAP_SYS_TIME"
	ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG   ContainerRuntimeCapabilitiesItem = "CAP_SYS_TTY_CONFIG"
	ContainerRuntimeCapabilitiesItemCAPSYSLOG         ContainerRuntimeCapabilitiesItem = "CAP_SYSLOG"
	ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL   ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_CONTROL"
	ContainerRuntimeCapabilitiesItemCAPAUDITREAD      ContainerRuntimeCapabilitiesItem = "CAP_AUDIT_READ"
	ContainerRuntimeCapabilitiesItemCAPIPCLOCK        ContainerRuntimeCapabilitiesItem = "CAP_IPC_LOCK"
	ContainerRuntimeCapabilitiesItemCAPIPCOWNER       ContainerRuntimeCapabilitiesItem = "CAP_IPC_OWNER"
	ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE ContainerRuntimeCapabilitiesItem = "CAP_LINUX_IMMUTABLE"
	ContainerRuntimeCapabilitiesItemCAPMACADMIN       ContainerRuntimeCapabilitiesItem = "CAP_MAC_ADMIN"
	ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE    ContainerRuntimeCapabilitiesItem = "CAP_MAC_OVERRIDE"
	ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND   ContainerRuntimeCapabilitiesItem = "CAP_BLOCK_SUSPEND"
	ContainerRuntimeCapabilitiesItemCAPLEASE          ContainerRuntimeCapabilitiesItem = "CAP_LEASE"
	ContainerRuntimeCapabilitiesItemCAPWAKEALARM      ContainerRuntimeCapabilitiesItem = "CAP_WAKE_ALARM"
)

// AllValues returns all ContainerRuntimeCapabilitiesItem values.
func (ContainerRuntimeCapabilitiesItem) AllValues() []ContainerRuntimeCapabilitiesItem {
	return []ContainerRuntimeCapabilitiesItem{
		ContainerRuntimeCapabilitiesItemCAPCHOWN,
		ContainerRuntimeCapabilitiesItemCAPFSETID,
		ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE,
		ContainerRuntimeCapabilitiesItemCAPFOWNER,
		ContainerRuntimeCapabilitiesItemCAPSETFCAP,
		ContainerRuntimeCapabilitiesItemCAPSETGID,
		ContainerRuntimeCapabilitiesItemCAPSETUID,
		ContainerRuntimeCapabilitiesItemCAPKILL,
		ContainerRuntimeCapabilitiesItemCAPMKNOD,
		ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE,
		ContainerRuntimeCapabilitiesItemCAPNETRAW,
		ContainerRuntimeCapabilitiesItemCAPAUDITWRITE,
		ContainerRuntimeCapabilitiesItemCAPSYSCHROOT,
		ContainerRuntimeCapabilitiesItemCAPSETPCAP,
		ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH,
		ContainerRuntimeCapabilitiesItemCAPNETADMIN,
		ContainerRuntimeCapabilitiesItemCAPNETBROADCAST,
		ContainerRuntimeCapabilitiesItemCAPSYSADMIN,
		ContainerRuntimeCapabilitiesItemCAPSYSMODULE,
		ContainerRuntimeCapabilitiesItemCAPSYSNICE,
		ContainerRuntimeCapabilitiesItemCAPSYSPACCT,
		ContainerRuntimeCapabilitiesItemCAPSYSPTRACE,
		ContainerRuntimeCapabilitiesItemCAPSYSRAWIO,
		ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE,
		ContainerRuntimeCapabilitiesItemCAPSYSBOOT,
		ContainerRuntimeCapabilitiesItemCAPSYSTIME,
		ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG,
		ContainerRuntimeCapabilitiesItemCAPSYSLOG,
		ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL,
		ContainerRuntimeCapabilitiesItemCAPAUDITREAD,
		ContainerRuntimeCapabilitiesItemCAPIPCLOCK,
		ContainerRuntimeCapabilitiesItemCAPIPCOWNER,
		ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE,
		ContainerRuntimeCapabilitiesItemCAPMACADMIN,
		ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE,
		ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND,
		ContainerRuntimeCapabilitiesItemCAPLEASE,
		ContainerRuntimeCapabilitiesItemCAPWAKEALARM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRuntimeCapabilitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRuntimeCapabilitiesItemCAPCHOWN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPFSETID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPFOWNER:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETFCAP:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETGID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETUID:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPKILL:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMKNOD:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETRAW:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITWRITE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSCHROOT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSETPCAP:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPNETBROADCAST:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSMODULE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSNICE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPACCT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPTRACE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRAWIO:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSBOOT:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTIME:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPSYSLOG:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITREAD:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPIPCLOCK:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPIPCOWNER:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMACADMIN:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPLEASE:
		return []byte(s), nil
	case ContainerRuntimeCapabilitiesItemCAPWAKEALARM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRuntimeCapabilitiesItem) UnmarshalText(data []byte) error {
	switch ContainerRuntimeCapabilitiesItem(data) {
	case ContainerRuntimeCapabilitiesItemCAPCHOWN:
		*s = ContainerRuntimeCapabilitiesItemCAPCHOWN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPFSETID:
		*s = ContainerRuntimeCapabilitiesItemCAPFSETID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE:
		*s = ContainerRuntimeCapabilitiesItemCAPDACOVERRIDE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPFOWNER:
		*s = ContainerRuntimeCapabilitiesItemCAPFOWNER
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETFCAP:
		*s = ContainerRuntimeCapabilitiesItemCAPSETFCAP
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETGID:
		*s = ContainerRuntimeCapabilitiesItemCAPSETGID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETUID:
		*s = ContainerRuntimeCapabilitiesItemCAPSETUID
		return nil
	case ContainerRuntimeCapabilitiesItemCAPKILL:
		*s = ContainerRuntimeCapabilitiesItemCAPKILL
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMKNOD:
		*s = ContainerRuntimeCapabilitiesItemCAPMKNOD
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		*s = ContainerRuntimeCapabilitiesItemCAPNETBINDSERVICE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETRAW:
		*s = ContainerRuntimeCapabilitiesItemCAPNETRAW
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITWRITE:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITWRITE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSCHROOT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSCHROOT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSETPCAP:
		*s = ContainerRuntimeCapabilitiesItemCAPSETPCAP
		return nil
	case ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH:
		*s = ContainerRuntimeCapabilitiesItemCAPDACREADSEARCH
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPNETADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPNETBROADCAST:
		*s = ContainerRuntimeCapabilitiesItemCAPNETBROADCAST
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSMODULE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSMODULE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSNICE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSNICE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPACCT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSPACCT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSPTRACE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSPTRACE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRAWIO:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSRAWIO
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSRESOURCE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSBOOT:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSBOOT
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTIME:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSTIME
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSTTYCONFIG
		return nil
	case ContainerRuntimeCapabilitiesItemCAPSYSLOG:
		*s = ContainerRuntimeCapabilitiesItemCAPSYSLOG
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITCONTROL
		return nil
	case ContainerRuntimeCapabilitiesItemCAPAUDITREAD:
		*s = ContainerRuntimeCapabilitiesItemCAPAUDITREAD
		return nil
	case ContainerRuntimeCapabilitiesItemCAPIPCLOCK:
		*s = ContainerRuntimeCapabilitiesItemCAPIPCLOCK
		return nil
	case ContainerRuntimeCapabilitiesItemCAPIPCOWNER:
		*s = ContainerRuntimeCapabilitiesItemCAPIPCOWNER
		return nil
	case ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		*s = ContainerRuntimeCapabilitiesItemCAPLINUXIMMUTABLE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMACADMIN:
		*s = ContainerRuntimeCapabilitiesItemCAPMACADMIN
		return nil
	case ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE:
		*s = ContainerRuntimeCapabilitiesItemCAPMACOVERRIDE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		*s = ContainerRuntimeCapabilitiesItemCAPBLOCKSUSPEND
		return nil
	case ContainerRuntimeCapabilitiesItemCAPLEASE:
		*s = ContainerRuntimeCapabilitiesItemCAPLEASE
		return nil
	case ContainerRuntimeCapabilitiesItemCAPWAKEALARM:
		*s = ContainerRuntimeCapabilitiesItemCAPWAKEALARM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A command that will be run in place of the images defined startup command.
type ContainerRuntimeCommand struct {
	// System path for the command.
	Path OptNilString `json:"path"`
	// Arguments to pass to the command.
	Args OptNilString `json:"args"`
}

// GetPath returns the value of Path.
func (s *ContainerRuntimeCommand) GetPath() OptNilString {
	return s.Path
}

// GetArgs returns the value of Args.
func (s *ContainerRuntimeCommand) GetArgs() OptNilString {
	return s.Args
}

// SetPath sets the value of Path.
func (s *ContainerRuntimeCommand) SetPath(val OptNilString) {
	s.Path = val
}

// SetArgs sets the value of Args.
func (s *ContainerRuntimeCommand) SetArgs(val OptNilString) {
	s.Args = val
}

// A record of environment variables for the given container.
type ContainerRuntimeEnvironmentVars map[string]string

func (s *ContainerRuntimeEnvironmentVars) init() ContainerRuntimeEnvironmentVars {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type ContainerRuntimeHost struct {
	ExposeProc OptNilBool `json:"expose_proc"`
}

// GetExposeProc returns the value of ExposeProc.
func (s *ContainerRuntimeHost) GetExposeProc() OptNilBool {
	return s.ExposeProc
}

// SetExposeProc sets the value of ExposeProc.
func (s *ContainerRuntimeHost) SetExposeProc(val OptNilBool) {
	s.ExposeProc = val
}

type ContainerRuntimeNamespacesItem string

const (
	ContainerRuntimeNamespacesItemIpc     ContainerRuntimeNamespacesItem = "ipc"
	ContainerRuntimeNamespacesItemPid     ContainerRuntimeNamespacesItem = "pid"
	ContainerRuntimeNamespacesItemUts     ContainerRuntimeNamespacesItem = "uts"
	ContainerRuntimeNamespacesItemNetwork ContainerRuntimeNamespacesItem = "network"
	ContainerRuntimeNamespacesItemMount   ContainerRuntimeNamespacesItem = "mount"
	ContainerRuntimeNamespacesItemUser    ContainerRuntimeNamespacesItem = "user"
	ContainerRuntimeNamespacesItemCgroup  ContainerRuntimeNamespacesItem = "cgroup"
)

// AllValues returns all ContainerRuntimeNamespacesItem values.
func (ContainerRuntimeNamespacesItem) AllValues() []ContainerRuntimeNamespacesItem {
	return []ContainerRuntimeNamespacesItem{
		ContainerRuntimeNamespacesItemIpc,
		ContainerRuntimeNamespacesItemPid,
		ContainerRuntimeNamespacesItemUts,
		ContainerRuntimeNamespacesItemNetwork,
		ContainerRuntimeNamespacesItemMount,
		ContainerRuntimeNamespacesItemUser,
		ContainerRuntimeNamespacesItemCgroup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerRuntimeNamespacesItem) MarshalText() ([]byte, error) {
	switch s {
	case ContainerRuntimeNamespacesItemIpc:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemPid:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemUts:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemNetwork:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemMount:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemUser:
		return []byte(s), nil
	case ContainerRuntimeNamespacesItemCgroup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerRuntimeNamespacesItem) UnmarshalText(data []byte) error {
	switch ContainerRuntimeNamespacesItem(data) {
	case ContainerRuntimeNamespacesItemIpc:
		*s = ContainerRuntimeNamespacesItemIpc
		return nil
	case ContainerRuntimeNamespacesItemPid:
		*s = ContainerRuntimeNamespacesItemPid
		return nil
	case ContainerRuntimeNamespacesItemUts:
		*s = ContainerRuntimeNamespacesItemUts
		return nil
	case ContainerRuntimeNamespacesItemNetwork:
		*s = ContainerRuntimeNamespacesItemNetwork
		return nil
	case ContainerRuntimeNamespacesItemMount:
		*s = ContainerRuntimeNamespacesItemMount
		return nil
	case ContainerRuntimeNamespacesItemUser:
		*s = ContainerRuntimeNamespacesItemUser
		return nil
	case ContainerRuntimeNamespacesItemCgroup:
		*s = ContainerRuntimeNamespacesItemCgroup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A record of rlimits and their values.
type ContainerRuntimeRlimits map[string]ContainerRuntimeRlimitsItem

func (s *ContainerRuntimeRlimits) init() ContainerRuntimeRlimits {
	m := *s
	if m == nil {
		m = map[string]ContainerRuntimeRlimitsItem{}
		*s = m
	}
	return m
}

type ContainerRuntimeRlimitsItem struct {
	// The hard limit for the rlimit.
	Hard OptInt `json:"hard"`
	// The soft limit for the rlimit.
	Soft OptInt `json:"soft"`
}

// GetHard returns the value of Hard.
func (s *ContainerRuntimeRlimitsItem) GetHard() OptInt {
	return s.Hard
}

// GetSoft returns the value of Soft.
func (s *ContainerRuntimeRlimitsItem) GetSoft() OptInt {
	return s.Soft
}

// SetHard sets the value of Hard.
func (s *ContainerRuntimeRlimitsItem) SetHard(val OptInt) {
	s.Hard = val
}

// SetSoft sets the value of Soft.
func (s *ContainerRuntimeRlimitsItem) SetSoft(val OptInt) {
	s.Soft = val
}

type ContainerRuntimeRootfs struct {
	// Enabling this option will set the containers filesystem to readonly. Volumes associated with the
	// container will not be affected by this.
	Readonly OptBool `json:"readonly"`
}

// GetReadonly returns the value of Readonly.
func (s *ContainerRuntimeRootfs) GetReadonly() OptBool {
	return s.Readonly
}

// SetReadonly sets the value of Readonly.
func (s *ContainerRuntimeRootfs) SetReadonly(val OptBool) {
	s.Readonly = val
}

type ContainerRuntimeSeccomp struct {
	Disable OptBool       `json:"disable"`
	Rules   []SeccompRule `json:"rules"`
}

// GetDisable returns the value of Disable.
func (s *ContainerRuntimeSeccomp) GetDisable() OptBool {
	return s.Disable
}

// GetRules returns the value of Rules.
func (s *ContainerRuntimeSeccomp) GetRules() []SeccompRule {
	return s.Rules
}

// SetDisable sets the value of Disable.
func (s *ContainerRuntimeSeccomp) SetDisable(val OptBool) {
	s.Disable = val
}

// SetRules sets the value of Rules.
func (s *ContainerRuntimeSeccomp) SetRules(val []SeccompRule) {
	s.Rules = val
}

// A record of sysctl fields and values for a given container.
type ContainerRuntimeSysctl map[string]string

func (s *ContainerRuntimeSysctl) init() ContainerRuntimeSysctl {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Network configuration for a container.
// Ref: #/components/schemas/ContainerScale
type ContainerScale struct {
	// The autoscaling group describes which servers should be deployed.
	AutoscaleGroup NilString `json:"autoscale_group"`
	// Describes how many instances should be running.
	Instances ContainerScaleInstances `json:"instances"`
	Window    Duration                `json:"window"`
	// An array of rules that dictate when a scaling event will be triggered.
	Thresholds []ScaleThresholdMetric `json:"thresholds"`
}

// GetAutoscaleGroup returns the value of AutoscaleGroup.
func (s *ContainerScale) GetAutoscaleGroup() NilString {
	return s.AutoscaleGroup
}

// GetInstances returns the value of Instances.
func (s *ContainerScale) GetInstances() ContainerScaleInstances {
	return s.Instances
}

// GetWindow returns the value of Window.
func (s *ContainerScale) GetWindow() Duration {
	return s.Window
}

// GetThresholds returns the value of Thresholds.
func (s *ContainerScale) GetThresholds() []ScaleThresholdMetric {
	return s.Thresholds
}

// SetAutoscaleGroup sets the value of AutoscaleGroup.
func (s *ContainerScale) SetAutoscaleGroup(val NilString) {
	s.AutoscaleGroup = val
}

// SetInstances sets the value of Instances.
func (s *ContainerScale) SetInstances(val ContainerScaleInstances) {
	s.Instances = val
}

// SetWindow sets the value of Window.
func (s *ContainerScale) SetWindow(val Duration) {
	s.Window = val
}

// SetThresholds sets the value of Thresholds.
func (s *ContainerScale) SetThresholds(val []ScaleThresholdMetric) {
	s.Thresholds = val
}

// Describes how many instances should be running.
type ContainerScaleInstances struct {
	// Number of additional instances the auto-scaler will add/subtract per scaling event.
	Delta int `json:"delta"`
	// Maximum additional instances the auto-scaler will run at any time.
	Max int `json:"max"`
	// Minimum number of instances per server.
	MaxServer int      `json:"max_server"`
	MinTTL    Duration `json:"min_ttl"`
}

// GetDelta returns the value of Delta.
func (s *ContainerScaleInstances) GetDelta() int {
	return s.Delta
}

// GetMax returns the value of Max.
func (s *ContainerScaleInstances) GetMax() int {
	return s.Max
}

// GetMaxServer returns the value of MaxServer.
func (s *ContainerScaleInstances) GetMaxServer() int {
	return s.MaxServer
}

// GetMinTTL returns the value of MinTTL.
func (s *ContainerScaleInstances) GetMinTTL() Duration {
	return s.MinTTL
}

// SetDelta sets the value of Delta.
func (s *ContainerScaleInstances) SetDelta(val int) {
	s.Delta = val
}

// SetMax sets the value of Max.
func (s *ContainerScaleInstances) SetMax(val int) {
	s.Max = val
}

// SetMaxServer sets the value of MaxServer.
func (s *ContainerScaleInstances) SetMaxServer(val int) {
	s.MaxServer = val
}

// SetMinTTL sets the value of MinTTL.
func (s *ContainerScaleInstances) SetMinTTL(val Duration) {
	s.MinTTL = val
}

// A summary of the stack this container was created format.
type ContainerStack struct {
	ID OptID `json:"id"`
	// The ID of the stack build this container is associated with.
	BuildID OptString `json:"build_id"`
	// The container identifier, usually the key to the container section of a stack file.
	Identifier OptString `json:"identifier"`
}

// GetID returns the value of ID.
func (s *ContainerStack) GetID() OptID {
	return s.ID
}

// GetBuildID returns the value of BuildID.
func (s *ContainerStack) GetBuildID() OptString {
	return s.BuildID
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerStack) GetIdentifier() OptString {
	return s.Identifier
}

// SetID sets the value of ID.
func (s *ContainerStack) SetID(val OptID) {
	s.ID = val
}

// SetBuildID sets the value of BuildID.
func (s *ContainerStack) SetBuildID(val OptString) {
	s.BuildID = val
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerStack) SetIdentifier(val OptString) {
	s.Identifier = val
}

// Ref: #/components/schemas/ContainerStartAction
type ContainerStartAction struct{}

// The name of the action to perform.
type ContainerStartActionAction string

const (
	ContainerStartActionActionStart ContainerStartActionAction = "start"
)

// AllValues returns all ContainerStartActionAction values.
func (ContainerStartActionAction) AllValues() []ContainerStartActionAction {
	return []ContainerStartActionAction{
		ContainerStartActionActionStart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStartActionAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStartActionActionStart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStartActionAction) UnmarshalText(data []byte) error {
	switch ContainerStartActionAction(data) {
	case ContainerStartActionActionStart:
		*s = ContainerStartActionActionStart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Settings for starting a container in a pipeline.
// Ref: #/components/schemas/ContainerStartStep
type ContainerStartStep struct {
	// An identifier for the step.
	Identifier OptString                    `json:"identifier"`
	Options    OptContainerStartStepOptions `json:"options"`
	Details    ContainerStartStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerStartStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerStartStep) GetOptions() OptContainerStartStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerStartStep) GetDetails() ContainerStartStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerStartStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerStartStep) SetOptions(val OptContainerStartStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerStartStep) SetDetails(val ContainerStartStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerStartStepAction string

const (
	ContainerStartStepActionContainerStart ContainerStartStepAction = "container.start"
)

// AllValues returns all ContainerStartStepAction values.
func (ContainerStartStepAction) AllValues() []ContainerStartStepAction {
	return []ContainerStartStepAction{
		ContainerStartStepActionContainerStart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStartStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStartStepActionContainerStart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStartStepAction) UnmarshalText(data []byte) error {
	switch ContainerStartStepAction(data) {
	case ContainerStartStepActionContainerStart:
		*s = ContainerStartStepActionContainerStart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerStartStepDetails struct {
	Container FluidIdentifier `json:"container"`
}

// GetContainer returns the value of Container.
func (s *ContainerStartStepDetails) GetContainer() FluidIdentifier {
	return s.Container
}

// SetContainer sets the value of Container.
func (s *ContainerStartStepDetails) SetContainer(val FluidIdentifier) {
	s.Container = val
}

type ContainerStartStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerStartStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerStartStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Merged schema.
// Ref: #/components/schemas/ContainerState
type ContainerState struct {
	// The current state of the container.
	Current ContainerStateCurrent `json:"current"`
	// The desired state of the container.
	Desired OptContainerStateDesired `json:"desired"`
	Changed DateTime                 `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptContainerStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ContainerState) GetCurrent() ContainerStateCurrent {
	return s.Current
}

// GetDesired returns the value of Desired.
func (s *ContainerState) GetDesired() OptContainerStateDesired {
	return s.Desired
}

// GetChanged returns the value of Changed.
func (s *ContainerState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ContainerState) GetError() OptContainerStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ContainerState) SetCurrent(val ContainerStateCurrent) {
	s.Current = val
}

// SetDesired sets the value of Desired.
func (s *ContainerState) SetDesired(val OptContainerStateDesired) {
	s.Desired = val
}

// SetChanged sets the value of Changed.
func (s *ContainerState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ContainerState) SetError(val OptContainerStateError) {
	s.Error = val
}

// The current state of the container.
type ContainerStateCurrent string

const (
	ContainerStateCurrentNew      ContainerStateCurrent = "new"
	ContainerStateCurrentStarting ContainerStateCurrent = "starting"
	ContainerStateCurrentRunning  ContainerStateCurrent = "running"
	ContainerStateCurrentFunction ContainerStateCurrent = "function"
	ContainerStateCurrentStopping ContainerStateCurrent = "stopping"
	ContainerStateCurrentStopped  ContainerStateCurrent = "stopped"
	ContainerStateCurrentDeleting ContainerStateCurrent = "deleting"
	ContainerStateCurrentDeleted  ContainerStateCurrent = "deleted"
)

// AllValues returns all ContainerStateCurrent values.
func (ContainerStateCurrent) AllValues() []ContainerStateCurrent {
	return []ContainerStateCurrent{
		ContainerStateCurrentNew,
		ContainerStateCurrentStarting,
		ContainerStateCurrentRunning,
		ContainerStateCurrentFunction,
		ContainerStateCurrentStopping,
		ContainerStateCurrentStopped,
		ContainerStateCurrentDeleting,
		ContainerStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStateCurrentNew:
		return []byte(s), nil
	case ContainerStateCurrentStarting:
		return []byte(s), nil
	case ContainerStateCurrentRunning:
		return []byte(s), nil
	case ContainerStateCurrentFunction:
		return []byte(s), nil
	case ContainerStateCurrentStopping:
		return []byte(s), nil
	case ContainerStateCurrentStopped:
		return []byte(s), nil
	case ContainerStateCurrentDeleting:
		return []byte(s), nil
	case ContainerStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStateCurrent) UnmarshalText(data []byte) error {
	switch ContainerStateCurrent(data) {
	case ContainerStateCurrentNew:
		*s = ContainerStateCurrentNew
		return nil
	case ContainerStateCurrentStarting:
		*s = ContainerStateCurrentStarting
		return nil
	case ContainerStateCurrentRunning:
		*s = ContainerStateCurrentRunning
		return nil
	case ContainerStateCurrentFunction:
		*s = ContainerStateCurrentFunction
		return nil
	case ContainerStateCurrentStopping:
		*s = ContainerStateCurrentStopping
		return nil
	case ContainerStateCurrentStopped:
		*s = ContainerStateCurrentStopped
		return nil
	case ContainerStateCurrentDeleting:
		*s = ContainerStateCurrentDeleting
		return nil
	case ContainerStateCurrentDeleted:
		*s = ContainerStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The desired state of the container.
type ContainerStateDesired string

const (
	ContainerStateDesiredNew      ContainerStateDesired = "new"
	ContainerStateDesiredStarting ContainerStateDesired = "starting"
	ContainerStateDesiredRunning  ContainerStateDesired = "running"
	ContainerStateDesiredFunction ContainerStateDesired = "function"
	ContainerStateDesiredStopping ContainerStateDesired = "stopping"
	ContainerStateDesiredStopped  ContainerStateDesired = "stopped"
	ContainerStateDesiredDeleting ContainerStateDesired = "deleting"
	ContainerStateDesiredDeleted  ContainerStateDesired = "deleted"
)

// AllValues returns all ContainerStateDesired values.
func (ContainerStateDesired) AllValues() []ContainerStateDesired {
	return []ContainerStateDesired{
		ContainerStateDesiredNew,
		ContainerStateDesiredStarting,
		ContainerStateDesiredRunning,
		ContainerStateDesiredFunction,
		ContainerStateDesiredStopping,
		ContainerStateDesiredStopped,
		ContainerStateDesiredDeleting,
		ContainerStateDesiredDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStateDesired) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStateDesiredNew:
		return []byte(s), nil
	case ContainerStateDesiredStarting:
		return []byte(s), nil
	case ContainerStateDesiredRunning:
		return []byte(s), nil
	case ContainerStateDesiredFunction:
		return []byte(s), nil
	case ContainerStateDesiredStopping:
		return []byte(s), nil
	case ContainerStateDesiredStopped:
		return []byte(s), nil
	case ContainerStateDesiredDeleting:
		return []byte(s), nil
	case ContainerStateDesiredDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStateDesired) UnmarshalText(data []byte) error {
	switch ContainerStateDesired(data) {
	case ContainerStateDesiredNew:
		*s = ContainerStateDesiredNew
		return nil
	case ContainerStateDesiredStarting:
		*s = ContainerStateDesiredStarting
		return nil
	case ContainerStateDesiredRunning:
		*s = ContainerStateDesiredRunning
		return nil
	case ContainerStateDesiredFunction:
		*s = ContainerStateDesiredFunction
		return nil
	case ContainerStateDesiredStopping:
		*s = ContainerStateDesiredStopping
		return nil
	case ContainerStateDesiredStopped:
		*s = ContainerStateDesiredStopped
		return nil
	case ContainerStateDesiredDeleting:
		*s = ContainerStateDesiredDeleting
		return nil
	case ContainerStateDesiredDeleted:
		*s = ContainerStateDesiredDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ContainerStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ContainerStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ContainerStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ContainerStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ContainerStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/ContainerStopAction
type ContainerStopAction struct{}

// The name of the action to perform.
type ContainerStopActionAction string

const (
	ContainerStopActionActionStop ContainerStopActionAction = "stop"
)

// AllValues returns all ContainerStopActionAction values.
func (ContainerStopActionAction) AllValues() []ContainerStopActionAction {
	return []ContainerStopActionAction{
		ContainerStopActionActionStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStopActionAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStopActionActionStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStopActionAction) UnmarshalText(data []byte) error {
	switch ContainerStopActionAction(data) {
	case ContainerStopActionActionStop:
		*s = ContainerStopActionActionStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Settings for stopping a container in a pipeline.
// Ref: #/components/schemas/ContainerStopStep
type ContainerStopStep struct {
	// An identifier for the step.
	Identifier OptString                   `json:"identifier"`
	Options    OptContainerStopStepOptions `json:"options"`
	Details    ContainerStopStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ContainerStopStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ContainerStopStep) GetOptions() OptContainerStopStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ContainerStopStep) GetDetails() ContainerStopStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ContainerStopStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ContainerStopStep) SetOptions(val OptContainerStopStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ContainerStopStep) SetDetails(val ContainerStopStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ContainerStopStepAction string

const (
	ContainerStopStepActionContainerStop ContainerStopStepAction = "container.stop"
)

// AllValues returns all ContainerStopStepAction values.
func (ContainerStopStepAction) AllValues() []ContainerStopStepAction {
	return []ContainerStopStepAction{
		ContainerStopStepActionContainerStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerStopStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ContainerStopStepActionContainerStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerStopStepAction) UnmarshalText(data []byte) error {
	switch ContainerStopStepAction(data) {
	case ContainerStopStepActionContainerStop:
		*s = ContainerStopStepActionContainerStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContainerStopStepDetails struct {
	Container FluidIdentifier `json:"container"`
}

// GetContainer returns the value of Container.
func (s *ContainerStopStepDetails) GetContainer() FluidIdentifier {
	return s.Container
}

// SetContainer sets the value of Container.
func (s *ContainerStopStepDetails) SetContainer(val FluidIdentifier) {
	s.Container = val
}

type ContainerStopStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ContainerStopStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ContainerStopStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Configuration settings for container volumes.
// Ref: #/components/schemas/ContainerVolume
type ContainerVolume struct {
	// A boolean where true marks the volume as read only.
	ReadOnly bool `json:"read_only"`
	// Configuration for settings local to the container filesystem.
	Local OptContainerVolumeLocal `json:"local"`
	// The mountpoint path for the container.
	Destination string `json:"destination"`
	// Configuration settings for remotely accessing the container volume.
	RemoteAccess OptContainerVolumeRemoteAccess `json:"remote_access"`
}

// GetReadOnly returns the value of ReadOnly.
func (s *ContainerVolume) GetReadOnly() bool {
	return s.ReadOnly
}

// GetLocal returns the value of Local.
func (s *ContainerVolume) GetLocal() OptContainerVolumeLocal {
	return s.Local
}

// GetDestination returns the value of Destination.
func (s *ContainerVolume) GetDestination() string {
	return s.Destination
}

// GetRemoteAccess returns the value of RemoteAccess.
func (s *ContainerVolume) GetRemoteAccess() OptContainerVolumeRemoteAccess {
	return s.RemoteAccess
}

// SetReadOnly sets the value of ReadOnly.
func (s *ContainerVolume) SetReadOnly(val bool) {
	s.ReadOnly = val
}

// SetLocal sets the value of Local.
func (s *ContainerVolume) SetLocal(val OptContainerVolumeLocal) {
	s.Local = val
}

// SetDestination sets the value of Destination.
func (s *ContainerVolume) SetDestination(val string) {
	s.Destination = val
}

// SetRemoteAccess sets the value of RemoteAccess.
func (s *ContainerVolume) SetRemoteAccess(val OptContainerVolumeRemoteAccess) {
	s.RemoteAccess = val
}

// Configuration for settings local to the container filesystem.
type ContainerVolumeLocal struct {
	// The maximum size the volume can grow to. A number followed by a size. `10G` would be 10 gigabytes.
	MaxSize string `json:"max_size"`
	// A boolean where true signifies using the largest drive over 2TB for the target server.
	StoragePool OptBool `json:"storage_pool"`
}

// GetMaxSize returns the value of MaxSize.
func (s *ContainerVolumeLocal) GetMaxSize() string {
	return s.MaxSize
}

// GetStoragePool returns the value of StoragePool.
func (s *ContainerVolumeLocal) GetStoragePool() OptBool {
	return s.StoragePool
}

// SetMaxSize sets the value of MaxSize.
func (s *ContainerVolumeLocal) SetMaxSize(val string) {
	s.MaxSize = val
}

// SetStoragePool sets the value of StoragePool.
func (s *ContainerVolumeLocal) SetStoragePool(val OptBool) {
	s.StoragePool = val
}

// Configuration settings for remotely accessing the container volume.
type ContainerVolumeRemoteAccess struct {
	// A boolean where true represents this container volume being open to remote access connections over
	// SFTP.
	Enable bool     `json:"enable"`
	Ips    []string `json:"ips"`
	// Call out to a webhook to authenticate usernames/passwords if an organization manages their own
	// accounts.
	WebHook OptString `json:"web_hook"`
	// Password configuration settings for the remote access of the container volume.
	Password NilContainerVolumeRemoteAccessPassword `json:"password"`
}

// GetEnable returns the value of Enable.
func (s *ContainerVolumeRemoteAccess) GetEnable() bool {
	return s.Enable
}

// GetIps returns the value of Ips.
func (s *ContainerVolumeRemoteAccess) GetIps() []string {
	return s.Ips
}

// GetWebHook returns the value of WebHook.
func (s *ContainerVolumeRemoteAccess) GetWebHook() OptString {
	return s.WebHook
}

// GetPassword returns the value of Password.
func (s *ContainerVolumeRemoteAccess) GetPassword() NilContainerVolumeRemoteAccessPassword {
	return s.Password
}

// SetEnable sets the value of Enable.
func (s *ContainerVolumeRemoteAccess) SetEnable(val bool) {
	s.Enable = val
}

// SetIps sets the value of Ips.
func (s *ContainerVolumeRemoteAccess) SetIps(val []string) {
	s.Ips = val
}

// SetWebHook sets the value of WebHook.
func (s *ContainerVolumeRemoteAccess) SetWebHook(val OptString) {
	s.WebHook = val
}

// SetPassword sets the value of Password.
func (s *ContainerVolumeRemoteAccess) SetPassword(val NilContainerVolumeRemoteAccessPassword) {
	s.Password = val
}

// Password configuration settings for the remote access of the container volume.
type ContainerVolumeRemoteAccessPassword struct {
	// The hashing algorithm used to has the password.
	Algorithm ContainerVolumeRemoteAccessPasswordAlgorithm `json:"algorithm"`
	// The raw or hashed password.
	Data string `json:"data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *ContainerVolumeRemoteAccessPassword) GetAlgorithm() ContainerVolumeRemoteAccessPasswordAlgorithm {
	return s.Algorithm
}

// GetData returns the value of Data.
func (s *ContainerVolumeRemoteAccessPassword) GetData() string {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *ContainerVolumeRemoteAccessPassword) SetAlgorithm(val ContainerVolumeRemoteAccessPasswordAlgorithm) {
	s.Algorithm = val
}

// SetData sets the value of Data.
func (s *ContainerVolumeRemoteAccessPassword) SetData(val string) {
	s.Data = val
}

// The hashing algorithm used to has the password.
type ContainerVolumeRemoteAccessPasswordAlgorithm string

const (
	ContainerVolumeRemoteAccessPasswordAlgorithmRaw    ContainerVolumeRemoteAccessPasswordAlgorithm = "raw"
	ContainerVolumeRemoteAccessPasswordAlgorithmSha512 ContainerVolumeRemoteAccessPasswordAlgorithm = "sha512"
	ContainerVolumeRemoteAccessPasswordAlgorithmMD5    ContainerVolumeRemoteAccessPasswordAlgorithm = "md5"
)

// AllValues returns all ContainerVolumeRemoteAccessPasswordAlgorithm values.
func (ContainerVolumeRemoteAccessPasswordAlgorithm) AllValues() []ContainerVolumeRemoteAccessPasswordAlgorithm {
	return []ContainerVolumeRemoteAccessPasswordAlgorithm{
		ContainerVolumeRemoteAccessPasswordAlgorithmRaw,
		ContainerVolumeRemoteAccessPasswordAlgorithmSha512,
		ContainerVolumeRemoteAccessPasswordAlgorithmMD5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContainerVolumeRemoteAccessPasswordAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case ContainerVolumeRemoteAccessPasswordAlgorithmRaw:
		return []byte(s), nil
	case ContainerVolumeRemoteAccessPasswordAlgorithmSha512:
		return []byte(s), nil
	case ContainerVolumeRemoteAccessPasswordAlgorithmMD5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContainerVolumeRemoteAccessPasswordAlgorithm) UnmarshalText(data []byte) error {
	switch ContainerVolumeRemoteAccessPasswordAlgorithm(data) {
	case ContainerVolumeRemoteAccessPasswordAlgorithmRaw:
		*s = ContainerVolumeRemoteAccessPasswordAlgorithmRaw
		return nil
	case ContainerVolumeRemoteAccessPasswordAlgorithmSha512:
		*s = ContainerVolumeRemoteAccessPasswordAlgorithmSha512
		return nil
	case ContainerVolumeRemoteAccessPasswordAlgorithmMD5:
		*s = ContainerVolumeRemoteAccessPasswordAlgorithmMD5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A resource thats associated with a contianer.
// Ref: #/components/schemas/ContainersIncludes
type ContainersIncludes map[string]Container

func (s *ContainersIncludes) init() ContainersIncludes {
	m := *s
	if m == nil {
		m = map[string]Container{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to a container.
// Ref: #/components/schemas/ContainersMeta
type ContainersMeta struct {
	InstancesCount OptStateCountSummary                 `json:"instances_count"`
	Domains        OptNilContainersMetaDomainsItemArray `json:"domains"`
	// An array of IP resources.
	Ips []IP `json:"ips"`
}

// GetInstancesCount returns the value of InstancesCount.
func (s *ContainersMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// GetDomains returns the value of Domains.
func (s *ContainersMeta) GetDomains() OptNilContainersMetaDomainsItemArray {
	return s.Domains
}

// GetIps returns the value of Ips.
func (s *ContainersMeta) GetIps() []IP {
	return s.Ips
}

// SetInstancesCount sets the value of InstancesCount.
func (s *ContainersMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// SetDomains sets the value of Domains.
func (s *ContainersMeta) SetDomains(val OptNilContainersMetaDomainsItemArray) {
	s.Domains = val
}

// SetIps sets the value of Ips.
func (s *ContainersMeta) SetIps(val []IP) {
	s.Ips = val
}

// Any associated Linked Records for this container, and their fully-qualified domain name (fqdn).
type ContainersMetaDomainsItem struct {
	// The fully qualified domain name.
	Fqdn   string    `json:"fqdn"`
	Record OptRecord `json:"record"`
}

// GetFqdn returns the value of Fqdn.
func (s *ContainersMetaDomainsItem) GetFqdn() string {
	return s.Fqdn
}

// GetRecord returns the value of Record.
func (s *ContainersMetaDomainsItem) GetRecord() OptRecord {
	return s.Record
}

// SetFqdn sets the value of Fqdn.
func (s *ContainersMetaDomainsItem) SetFqdn(val string) {
	s.Fqdn = val
}

// SetRecord sets the value of Record.
func (s *ContainersMetaDomainsItem) SetRecord(val OptRecord) {
	s.Record = val
}

// Optionally included resources for load balancer controllers.
// Ref: #/components/schemas/controllers
type Controllers struct {
	Creators    OptCreatorInclude      `json:"creators"`
	StackBuilds OptStackBuildIncludes  `json:"stack_builds"`
	Stacks      OptStackIncludes       `json:"stacks"`
	Sources     OptImageSourceIncludes `json:"sources"`
}

// GetCreators returns the value of Creators.
func (s *Controllers) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetStackBuilds returns the value of StackBuilds.
func (s *Controllers) GetStackBuilds() OptStackBuildIncludes {
	return s.StackBuilds
}

// GetStacks returns the value of Stacks.
func (s *Controllers) GetStacks() OptStackIncludes {
	return s.Stacks
}

// GetSources returns the value of Sources.
func (s *Controllers) GetSources() OptImageSourceIncludes {
	return s.Sources
}

// SetCreators sets the value of Creators.
func (s *Controllers) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetStackBuilds sets the value of StackBuilds.
func (s *Controllers) SetStackBuilds(val OptStackBuildIncludes) {
	s.StackBuilds = val
}

// SetStacks sets the value of Stacks.
func (s *Controllers) SetStacks(val OptStackIncludes) {
	s.Stacks = val
}

// SetSources sets the value of Sources.
func (s *Controllers) SetSources(val OptImageSourceIncludes) {
	s.Sources = val
}

type CreateApiKeyCreated struct {
	Data ApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateApiKeyCreated) GetData() ApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateApiKeyCreated) SetData(val ApiKey) {
	s.Data = val
}

type CreateApiKeyReq struct {
	// A name given to the API Key.
	Name        OptString      `json:"name"`
	Permissions OptPermissions `json:"permissions"`
	// An object defining the capabilities of the given API key.
	Capabilities OptCreateApiKeyReqCapabilities `json:"capabilities"`
	// An array of approved IPs from which this API Key can be used.
	Ips OptNilStringArray `json:"ips"`
}

// GetName returns the value of Name.
func (s *CreateApiKeyReq) GetName() OptString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *CreateApiKeyReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *CreateApiKeyReq) GetCapabilities() OptCreateApiKeyReqCapabilities {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *CreateApiKeyReq) GetIps() OptNilStringArray {
	return s.Ips
}

// SetName sets the value of Name.
func (s *CreateApiKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateApiKeyReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *CreateApiKeyReq) SetCapabilities(val OptCreateApiKeyReqCapabilities) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *CreateApiKeyReq) SetIps(val OptNilStringArray) {
	s.Ips = val
}

// An object defining the capabilities of the given API key.
type CreateApiKeyReqCapabilities struct {
	// A boolean where true is giving the key all grantable capabilities.
	All bool `json:"all"`
	// An array of capabilites.
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *CreateApiKeyReqCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *CreateApiKeyReqCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *CreateApiKeyReqCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *CreateApiKeyReqCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

type CreateAutoScaleGroupCreated struct {
	Data AutoScaleGroup `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateAutoScaleGroupCreated) GetData() AutoScaleGroup {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateAutoScaleGroupCreated) SetData(val AutoScaleGroup) {
	s.Data = val
}

type CreateAutoScaleGroupReq struct {
	Name           string                       `json:"name"`
	Identifier     string                       `json:"identifier"`
	Cluster        string                       `json:"cluster"`
	Scale          AutoScaleGroupScale          `json:"scale"`
	Infrastructure AutoScaleGroupInfrastructure `json:"infrastructure"`
}

// GetName returns the value of Name.
func (s *CreateAutoScaleGroupReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateAutoScaleGroupReq) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *CreateAutoScaleGroupReq) GetCluster() string {
	return s.Cluster
}

// GetScale returns the value of Scale.
func (s *CreateAutoScaleGroupReq) GetScale() AutoScaleGroupScale {
	return s.Scale
}

// GetInfrastructure returns the value of Infrastructure.
func (s *CreateAutoScaleGroupReq) GetInfrastructure() AutoScaleGroupInfrastructure {
	return s.Infrastructure
}

// SetName sets the value of Name.
func (s *CreateAutoScaleGroupReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateAutoScaleGroupReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *CreateAutoScaleGroupReq) SetCluster(val string) {
	s.Cluster = val
}

// SetScale sets the value of Scale.
func (s *CreateAutoScaleGroupReq) SetScale(val AutoScaleGroupScale) {
	s.Scale = val
}

// SetInfrastructure sets the value of Infrastructure.
func (s *CreateAutoScaleGroupReq) SetInfrastructure(val AutoScaleGroupInfrastructure) {
	s.Infrastructure = val
}

type CreateBillingMethodCreated struct {
	Data Method `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateBillingMethodCreated) GetData() Method {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateBillingMethodCreated) SetData(val Method) {
	s.Data = val
}

type CreateBillingMethodReq struct {
	// A name for the billing method.
	Name string `json:"name"`
	// A boolean where true represents a billing method being primary.
	Primary    bool                             `json:"primary"`
	Address    Address                          `json:"address"`
	CreditCard CreateBillingMethodReqCreditCard `json:"credit_card"`
}

// GetName returns the value of Name.
func (s *CreateBillingMethodReq) GetName() string {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *CreateBillingMethodReq) GetPrimary() bool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *CreateBillingMethodReq) GetAddress() Address {
	return s.Address
}

// GetCreditCard returns the value of CreditCard.
func (s *CreateBillingMethodReq) GetCreditCard() CreateBillingMethodReqCreditCard {
	return s.CreditCard
}

// SetName sets the value of Name.
func (s *CreateBillingMethodReq) SetName(val string) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *CreateBillingMethodReq) SetPrimary(val bool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *CreateBillingMethodReq) SetAddress(val Address) {
	s.Address = val
}

// SetCreditCard sets the value of CreditCard.
func (s *CreateBillingMethodReq) SetCreditCard(val CreateBillingMethodReqCreditCard) {
	s.CreditCard = val
}

type CreateBillingMethodReqCreditCard struct {
	Name       string                                     `json:"name"`
	Number     string                                     `json:"number"`
	Cvv        string                                     `json:"cvv"`
	Expiration CreateBillingMethodReqCreditCardExpiration `json:"expiration"`
}

// GetName returns the value of Name.
func (s *CreateBillingMethodReqCreditCard) GetName() string {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *CreateBillingMethodReqCreditCard) GetNumber() string {
	return s.Number
}

// GetCvv returns the value of Cvv.
func (s *CreateBillingMethodReqCreditCard) GetCvv() string {
	return s.Cvv
}

// GetExpiration returns the value of Expiration.
func (s *CreateBillingMethodReqCreditCard) GetExpiration() CreateBillingMethodReqCreditCardExpiration {
	return s.Expiration
}

// SetName sets the value of Name.
func (s *CreateBillingMethodReqCreditCard) SetName(val string) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *CreateBillingMethodReqCreditCard) SetNumber(val string) {
	s.Number = val
}

// SetCvv sets the value of Cvv.
func (s *CreateBillingMethodReqCreditCard) SetCvv(val string) {
	s.Cvv = val
}

// SetExpiration sets the value of Expiration.
func (s *CreateBillingMethodReqCreditCard) SetExpiration(val CreateBillingMethodReqCreditCardExpiration) {
	s.Expiration = val
}

type CreateBillingMethodReqCreditCardExpiration struct {
	Month float64 `json:"month"`
	Year  float64 `json:"year"`
}

// GetMonth returns the value of Month.
func (s *CreateBillingMethodReqCreditCardExpiration) GetMonth() float64 {
	return s.Month
}

// GetYear returns the value of Year.
func (s *CreateBillingMethodReqCreditCardExpiration) GetYear() float64 {
	return s.Year
}

// SetMonth sets the value of Month.
func (s *CreateBillingMethodReqCreditCardExpiration) SetMonth(val float64) {
	s.Month = val
}

// SetYear sets the value of Year.
func (s *CreateBillingMethodReqCreditCardExpiration) SetYear(val float64) {
	s.Year = val
}

type CreateContainerBackupJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerBackupJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerBackupJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateContainerBackupJobReq struct {
	// The action to take.
	Action CreateContainerBackupJobReqAction `json:"action"`
	// Additional information the platform needs to create this Job.
	Contents CreateContainerBackupJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateContainerBackupJobReq) GetAction() CreateContainerBackupJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateContainerBackupJobReq) GetContents() CreateContainerBackupJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateContainerBackupJobReq) SetAction(val CreateContainerBackupJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateContainerBackupJobReq) SetContents(val CreateContainerBackupJobReqContents) {
	s.Contents = val
}

// The action to take.
type CreateContainerBackupJobReqAction string

const (
	CreateContainerBackupJobReqActionRestore CreateContainerBackupJobReqAction = "restore"
)

// AllValues returns all CreateContainerBackupJobReqAction values.
func (CreateContainerBackupJobReqAction) AllValues() []CreateContainerBackupJobReqAction {
	return []CreateContainerBackupJobReqAction{
		CreateContainerBackupJobReqActionRestore,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateContainerBackupJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateContainerBackupJobReqActionRestore:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateContainerBackupJobReqAction) UnmarshalText(data []byte) error {
	switch CreateContainerBackupJobReqAction(data) {
	case CreateContainerBackupJobReqActionRestore:
		*s = CreateContainerBackupJobReqActionRestore
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information the platform needs to create this Job.
type CreateContainerBackupJobReqContents struct {
	// The ID of the instance this Container Backup is being restored to.
	InstanceID string `json:"instance_id"`
}

// GetInstanceID returns the value of InstanceID.
func (s *CreateContainerBackupJobReqContents) GetInstanceID() string {
	return s.InstanceID
}

// SetInstanceID sets the value of InstanceID.
func (s *CreateContainerBackupJobReqContents) SetInstanceID(val string) {
	s.InstanceID = val
}

type CreateContainerCreated struct {
	Data OptContainer `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerCreated) GetData() OptContainer {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerCreated) SetData(val OptContainer) {
	s.Data = val
}

type CreateContainerJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateContainerJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateContainerJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateContainerJobReq represents sum type.
type CreateContainerJobReq struct {
	Type                 CreateContainerJobReqType // switch on this field
	ContainerStartAction ContainerStartAction
	ContainerStopAction  ContainerStopAction
	ReconfigureContainer ReconfigureContainer
	ReconfigureVolumes   ReconfigureVolumes
	Reimage              Reimage
	Scale                Scale
}

// CreateContainerJobReqType is oneOf type of CreateContainerJobReq.
type CreateContainerJobReqType string

// Possible values for CreateContainerJobReqType.
const (
	ContainerStartActionCreateContainerJobReq CreateContainerJobReqType = "start"
	ContainerStopActionCreateContainerJobReq  CreateContainerJobReqType = "stop"
	ReconfigureContainerCreateContainerJobReq CreateContainerJobReqType = "reconfigure"
	ReconfigureVolumesCreateContainerJobReq   CreateContainerJobReqType = "volumes.reconfigure"
	ReimageCreateContainerJobReq              CreateContainerJobReqType = "reimage"
	ScaleCreateContainerJobReq                CreateContainerJobReqType = "scale"
)

// IsContainerStartAction reports whether CreateContainerJobReq is ContainerStartAction.
func (s CreateContainerJobReq) IsContainerStartAction() bool {
	return s.Type == ContainerStartActionCreateContainerJobReq
}

// IsContainerStopAction reports whether CreateContainerJobReq is ContainerStopAction.
func (s CreateContainerJobReq) IsContainerStopAction() bool {
	return s.Type == ContainerStopActionCreateContainerJobReq
}

// IsReconfigureContainer reports whether CreateContainerJobReq is ReconfigureContainer.
func (s CreateContainerJobReq) IsReconfigureContainer() bool {
	return s.Type == ReconfigureContainerCreateContainerJobReq
}

// IsReconfigureVolumes reports whether CreateContainerJobReq is ReconfigureVolumes.
func (s CreateContainerJobReq) IsReconfigureVolumes() bool {
	return s.Type == ReconfigureVolumesCreateContainerJobReq
}

// IsReimage reports whether CreateContainerJobReq is Reimage.
func (s CreateContainerJobReq) IsReimage() bool { return s.Type == ReimageCreateContainerJobReq }

// IsScale reports whether CreateContainerJobReq is Scale.
func (s CreateContainerJobReq) IsScale() bool { return s.Type == ScaleCreateContainerJobReq }

// SetContainerStartAction sets CreateContainerJobReq to ContainerStartAction.
func (s *CreateContainerJobReq) SetContainerStartAction(v ContainerStartAction) {
	s.Type = ContainerStartActionCreateContainerJobReq
	s.ContainerStartAction = v
}

// GetContainerStartAction returns ContainerStartAction and true boolean if CreateContainerJobReq is ContainerStartAction.
func (s CreateContainerJobReq) GetContainerStartAction() (v ContainerStartAction, ok bool) {
	if !s.IsContainerStartAction() {
		return v, false
	}
	return s.ContainerStartAction, true
}

// NewContainerStartActionCreateContainerJobReq returns new CreateContainerJobReq from ContainerStartAction.
func NewContainerStartActionCreateContainerJobReq(v ContainerStartAction) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetContainerStartAction(v)
	return s
}

// SetContainerStopAction sets CreateContainerJobReq to ContainerStopAction.
func (s *CreateContainerJobReq) SetContainerStopAction(v ContainerStopAction) {
	s.Type = ContainerStopActionCreateContainerJobReq
	s.ContainerStopAction = v
}

// GetContainerStopAction returns ContainerStopAction and true boolean if CreateContainerJobReq is ContainerStopAction.
func (s CreateContainerJobReq) GetContainerStopAction() (v ContainerStopAction, ok bool) {
	if !s.IsContainerStopAction() {
		return v, false
	}
	return s.ContainerStopAction, true
}

// NewContainerStopActionCreateContainerJobReq returns new CreateContainerJobReq from ContainerStopAction.
func NewContainerStopActionCreateContainerJobReq(v ContainerStopAction) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetContainerStopAction(v)
	return s
}

// SetReconfigureContainer sets CreateContainerJobReq to ReconfigureContainer.
func (s *CreateContainerJobReq) SetReconfigureContainer(v ReconfigureContainer) {
	s.Type = ReconfigureContainerCreateContainerJobReq
	s.ReconfigureContainer = v
}

// GetReconfigureContainer returns ReconfigureContainer and true boolean if CreateContainerJobReq is ReconfigureContainer.
func (s CreateContainerJobReq) GetReconfigureContainer() (v ReconfigureContainer, ok bool) {
	if !s.IsReconfigureContainer() {
		return v, false
	}
	return s.ReconfigureContainer, true
}

// NewReconfigureContainerCreateContainerJobReq returns new CreateContainerJobReq from ReconfigureContainer.
func NewReconfigureContainerCreateContainerJobReq(v ReconfigureContainer) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetReconfigureContainer(v)
	return s
}

// SetReconfigureVolumes sets CreateContainerJobReq to ReconfigureVolumes.
func (s *CreateContainerJobReq) SetReconfigureVolumes(v ReconfigureVolumes) {
	s.Type = ReconfigureVolumesCreateContainerJobReq
	s.ReconfigureVolumes = v
}

// GetReconfigureVolumes returns ReconfigureVolumes and true boolean if CreateContainerJobReq is ReconfigureVolumes.
func (s CreateContainerJobReq) GetReconfigureVolumes() (v ReconfigureVolumes, ok bool) {
	if !s.IsReconfigureVolumes() {
		return v, false
	}
	return s.ReconfigureVolumes, true
}

// NewReconfigureVolumesCreateContainerJobReq returns new CreateContainerJobReq from ReconfigureVolumes.
func NewReconfigureVolumesCreateContainerJobReq(v ReconfigureVolumes) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetReconfigureVolumes(v)
	return s
}

// SetReimage sets CreateContainerJobReq to Reimage.
func (s *CreateContainerJobReq) SetReimage(v Reimage) {
	s.Type = ReimageCreateContainerJobReq
	s.Reimage = v
}

// GetReimage returns Reimage and true boolean if CreateContainerJobReq is Reimage.
func (s CreateContainerJobReq) GetReimage() (v Reimage, ok bool) {
	if !s.IsReimage() {
		return v, false
	}
	return s.Reimage, true
}

// NewReimageCreateContainerJobReq returns new CreateContainerJobReq from Reimage.
func NewReimageCreateContainerJobReq(v Reimage) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetReimage(v)
	return s
}

// SetScale sets CreateContainerJobReq to Scale.
func (s *CreateContainerJobReq) SetScale(v Scale) {
	s.Type = ScaleCreateContainerJobReq
	s.Scale = v
}

// GetScale returns Scale and true boolean if CreateContainerJobReq is Scale.
func (s CreateContainerJobReq) GetScale() (v Scale, ok bool) {
	if !s.IsScale() {
		return v, false
	}
	return s.Scale, true
}

// NewScaleCreateContainerJobReq returns new CreateContainerJobReq from Scale.
func NewScaleCreateContainerJobReq(v Scale) CreateContainerJobReq {
	var s CreateContainerJobReq
	s.SetScale(v)
	return s
}

type CreateContainerReq struct {
	// A user defined name for the Container.
	Name       string       `json:"name"`
	Identifier OptNilString `json:"identifier"`
	// An identifier for the Environment this Container will be deployed to.
	EnvironmentID string `json:"environment_id"`
	// An identifier for the Image used to create this Container.
	ImageID string `json:"image_id"`
	// A boolean where true represents this Container is stateful.
	Stateful bool   `json:"stateful"`
	Config   Config `json:"config"`
	// When set to true, prevents this Container from being deleted.
	Lock       OptBool                            `json:"lock"`
	Deployment OptNilCreateContainerReqDeployment `json:"deployment"`
	Volumes    []ContainerVolume                  `json:"volumes"`
	// Custom meta data. Not utilized by Cycle.
	Annotations OptNilCreateContainerReqAnnotations `json:"annotations"`
}

// GetName returns the value of Name.
func (s *CreateContainerReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateContainerReq) GetIdentifier() OptNilString {
	return s.Identifier
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *CreateContainerReq) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetImageID returns the value of ImageID.
func (s *CreateContainerReq) GetImageID() string {
	return s.ImageID
}

// GetStateful returns the value of Stateful.
func (s *CreateContainerReq) GetStateful() bool {
	return s.Stateful
}

// GetConfig returns the value of Config.
func (s *CreateContainerReq) GetConfig() Config {
	return s.Config
}

// GetLock returns the value of Lock.
func (s *CreateContainerReq) GetLock() OptBool {
	return s.Lock
}

// GetDeployment returns the value of Deployment.
func (s *CreateContainerReq) GetDeployment() OptNilCreateContainerReqDeployment {
	return s.Deployment
}

// GetVolumes returns the value of Volumes.
func (s *CreateContainerReq) GetVolumes() []ContainerVolume {
	return s.Volumes
}

// GetAnnotations returns the value of Annotations.
func (s *CreateContainerReq) GetAnnotations() OptNilCreateContainerReqAnnotations {
	return s.Annotations
}

// SetName sets the value of Name.
func (s *CreateContainerReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateContainerReq) SetIdentifier(val OptNilString) {
	s.Identifier = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *CreateContainerReq) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetImageID sets the value of ImageID.
func (s *CreateContainerReq) SetImageID(val string) {
	s.ImageID = val
}

// SetStateful sets the value of Stateful.
func (s *CreateContainerReq) SetStateful(val bool) {
	s.Stateful = val
}

// SetConfig sets the value of Config.
func (s *CreateContainerReq) SetConfig(val Config) {
	s.Config = val
}

// SetLock sets the value of Lock.
func (s *CreateContainerReq) SetLock(val OptBool) {
	s.Lock = val
}

// SetDeployment sets the value of Deployment.
func (s *CreateContainerReq) SetDeployment(val OptNilCreateContainerReqDeployment) {
	s.Deployment = val
}

// SetVolumes sets the value of Volumes.
func (s *CreateContainerReq) SetVolumes(val []ContainerVolume) {
	s.Volumes = val
}

// SetAnnotations sets the value of Annotations.
func (s *CreateContainerReq) SetAnnotations(val OptNilCreateContainerReqAnnotations) {
	s.Annotations = val
}

// Custom meta data. Not utilized by Cycle.
type CreateContainerReqAnnotations map[string]jx.Raw

func (s *CreateContainerReqAnnotations) init() CreateContainerReqAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type CreateContainerReqDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *CreateContainerReqDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *CreateContainerReqDeployment) SetVersion(val Version) {
	s.Version = val
}

type CreateDNSZoneCreated struct {
	Data Zone `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSZoneCreated) GetData() Zone {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSZoneCreated) SetData(val Zone) {
	s.Data = val
}

type CreateDNSZoneJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSZoneJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSZoneJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateDNSZoneJobReq struct {
	// The action that the job will take.
	Action CreateDNSZoneJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateDNSZoneJobReq) GetAction() CreateDNSZoneJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateDNSZoneJobReq) SetAction(val CreateDNSZoneJobReqAction) {
	s.Action = val
}

// The action that the job will take.
type CreateDNSZoneJobReqAction string

const (
	CreateDNSZoneJobReqActionVerify CreateDNSZoneJobReqAction = "verify"
)

// AllValues returns all CreateDNSZoneJobReqAction values.
func (CreateDNSZoneJobReqAction) AllValues() []CreateDNSZoneJobReqAction {
	return []CreateDNSZoneJobReqAction{
		CreateDNSZoneJobReqActionVerify,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateDNSZoneJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateDNSZoneJobReqActionVerify:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateDNSZoneJobReqAction) UnmarshalText(data []byte) error {
	switch CreateDNSZoneJobReqAction(data) {
	case CreateDNSZoneJobReqActionVerify:
		*s = CreateDNSZoneJobReqActionVerify
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDNSZoneRecordCreated struct {
	Data Record `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSZoneRecordCreated) GetData() Record {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSZoneRecordCreated) SetData(val Record) {
	s.Data = val
}

type CreateDNSZoneRecordJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDNSZoneRecordJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDNSZoneRecordJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateDNSZoneRecordJobReq struct {
	// The action that the job will take.
	Action CreateDNSZoneRecordJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateDNSZoneRecordJobReq) GetAction() CreateDNSZoneRecordJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateDNSZoneRecordJobReq) SetAction(val CreateDNSZoneRecordJobReqAction) {
	s.Action = val
}

// The action that the job will take.
type CreateDNSZoneRecordJobReqAction string

const (
	CreateDNSZoneRecordJobReqActionGenerateCert CreateDNSZoneRecordJobReqAction = "generateCert"
)

// AllValues returns all CreateDNSZoneRecordJobReqAction values.
func (CreateDNSZoneRecordJobReqAction) AllValues() []CreateDNSZoneRecordJobReqAction {
	return []CreateDNSZoneRecordJobReqAction{
		CreateDNSZoneRecordJobReqActionGenerateCert,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateDNSZoneRecordJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateDNSZoneRecordJobReqActionGenerateCert:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateDNSZoneRecordJobReqAction) UnmarshalText(data []byte) error {
	switch CreateDNSZoneRecordJobReqAction(data) {
	case CreateDNSZoneRecordJobReqActionGenerateCert:
		*s = CreateDNSZoneRecordJobReqActionGenerateCert
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDNSZoneRecordReq struct {
	Type RecordTypes `json:"type"`
	// A name for the given record where `@` represents the desire to use the root of the origin.
	Name string `json:"name"`
}

// GetType returns the value of Type.
func (s *CreateDNSZoneRecordReq) GetType() RecordTypes {
	return s.Type
}

// GetName returns the value of Name.
func (s *CreateDNSZoneRecordReq) GetName() string {
	return s.Name
}

// SetType sets the value of Type.
func (s *CreateDNSZoneRecordReq) SetType(val RecordTypes) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *CreateDNSZoneRecordReq) SetName(val string) {
	s.Name = val
}

type CreateDNSZoneReq struct {
	// A boolean where true represents the desire for the origin to be of the type `hosted`.
	Hosted bool `json:"hosted"`
	// The origin that will be created.
	Origin string `json:"origin"`
}

// GetHosted returns the value of Hosted.
func (s *CreateDNSZoneReq) GetHosted() bool {
	return s.Hosted
}

// GetOrigin returns the value of Origin.
func (s *CreateDNSZoneReq) GetOrigin() string {
	return s.Origin
}

// SetHosted sets the value of Hosted.
func (s *CreateDNSZoneReq) SetHosted(val bool) {
	s.Hosted = val
}

// SetOrigin sets the value of Origin.
func (s *CreateDNSZoneReq) SetOrigin(val string) {
	s.Origin = val
}

type CreateDiscoveryServiceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateDiscoveryServiceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateDiscoveryServiceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateDiscoveryServiceJobReq struct {
	// The name of the action to perform.
	Action   CreateDiscoveryServiceJobReqAction   `json:"action"`
	Contents CreateDiscoveryServiceJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateDiscoveryServiceJobReq) GetAction() CreateDiscoveryServiceJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateDiscoveryServiceJobReq) GetContents() CreateDiscoveryServiceJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateDiscoveryServiceJobReq) SetAction(val CreateDiscoveryServiceJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateDiscoveryServiceJobReq) SetContents(val CreateDiscoveryServiceJobReqContents) {
	s.Contents = val
}

// The name of the action to perform.
type CreateDiscoveryServiceJobReqAction string

const (
	CreateDiscoveryServiceJobReqActionReconfigure CreateDiscoveryServiceJobReqAction = "reconfigure"
)

// AllValues returns all CreateDiscoveryServiceJobReqAction values.
func (CreateDiscoveryServiceJobReqAction) AllValues() []CreateDiscoveryServiceJobReqAction {
	return []CreateDiscoveryServiceJobReqAction{
		CreateDiscoveryServiceJobReqActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateDiscoveryServiceJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateDiscoveryServiceJobReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateDiscoveryServiceJobReqAction) UnmarshalText(data []byte) error {
	switch CreateDiscoveryServiceJobReqAction(data) {
	case CreateDiscoveryServiceJobReqActionReconfigure:
		*s = CreateDiscoveryServiceJobReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDiscoveryServiceJobReqContents struct {
	Config OptNilCreateDiscoveryServiceJobReqContentsConfig `json:"config"`
	// A boolean where `true` represents the desire to run the environment discovery service in high
	// availability mode.
	HighAvailability OptNilBool `json:"high_availability"`
	// A boolean where `true` represents the desire to automatically update the environment discovery
	// service.
	AutoUpdate OptNilBool `json:"auto_update"`
}

// GetConfig returns the value of Config.
func (s *CreateDiscoveryServiceJobReqContents) GetConfig() OptNilCreateDiscoveryServiceJobReqContentsConfig {
	return s.Config
}

// GetHighAvailability returns the value of HighAvailability.
func (s *CreateDiscoveryServiceJobReqContents) GetHighAvailability() OptNilBool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *CreateDiscoveryServiceJobReqContents) GetAutoUpdate() OptNilBool {
	return s.AutoUpdate
}

// SetConfig sets the value of Config.
func (s *CreateDiscoveryServiceJobReqContents) SetConfig(val OptNilCreateDiscoveryServiceJobReqContentsConfig) {
	s.Config = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *CreateDiscoveryServiceJobReqContents) SetHighAvailability(val OptNilBool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *CreateDiscoveryServiceJobReqContents) SetAutoUpdate(val OptNilBool) {
	s.AutoUpdate = val
}

// The config object for the discovery service.
type CreateDiscoveryServiceJobReqContentsConfig struct {
	// A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom
	// /etc/resolv.conf file that works environment wide.
	Hosts OptNilCreateDiscoveryServiceJobReqContentsConfigHosts `json:"hosts"`
}

// GetHosts returns the value of Hosts.
func (s *CreateDiscoveryServiceJobReqContentsConfig) GetHosts() OptNilCreateDiscoveryServiceJobReqContentsConfigHosts {
	return s.Hosts
}

// SetHosts sets the value of Hosts.
func (s *CreateDiscoveryServiceJobReqContentsConfig) SetHosts(val OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) {
	s.Hosts = val
}

// A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom
// /etc/resolv.conf file that works environment wide.
type CreateDiscoveryServiceJobReqContentsConfigHosts map[string]CreateDiscoveryServiceJobReqContentsConfigHostsItem

func (s *CreateDiscoveryServiceJobReqContentsConfigHosts) init() CreateDiscoveryServiceJobReqContentsConfigHosts {
	m := *s
	if m == nil {
		m = map[string]CreateDiscoveryServiceJobReqContentsConfigHostsItem{}
		*s = m
	}
	return m
}

type CreateDiscoveryServiceJobReqContentsConfigHostsItem struct {
	// The IPv4 address the discovery server should return to any container instance requesting this
	// hostname.
	Ipv4 OptNilStringArray `json:"ipv4"`
	// The IPv6 address the discovery server should return to any container instance requesting this
	// hostname.
	Ipv6 OptNilStringArray `json:"ipv6"`
}

// GetIpv4 returns the value of Ipv4.
func (s *CreateDiscoveryServiceJobReqContentsConfigHostsItem) GetIpv4() OptNilStringArray {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *CreateDiscoveryServiceJobReqContentsConfigHostsItem) GetIpv6() OptNilStringArray {
	return s.Ipv6
}

// SetIpv4 sets the value of Ipv4.
func (s *CreateDiscoveryServiceJobReqContentsConfigHostsItem) SetIpv4(val OptNilStringArray) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *CreateDiscoveryServiceJobReqContentsConfigHostsItem) SetIpv6(val OptNilStringArray) {
	s.Ipv6 = val
}

type CreateEnvironmentCreated struct {
	Data Environment `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateEnvironmentCreated) GetData() Environment {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateEnvironmentCreated) SetData(val Environment) {
	s.Data = val
}

type CreateEnvironmentJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateEnvironmentJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateEnvironmentJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateEnvironmentJobReq represents sum type.
type CreateEnvironmentJobReq struct {
	Type                                    CreateEnvironmentJobReqType // switch on this field
	EnvironmentStartAction                  EnvironmentStartAction
	EnvironmentStopAction                   EnvironmentStopAction
	EnvironmentInitializeAction             EnvironmentInitializeAction
	EnvironmentReconfigureDeploymentsAction EnvironmentReconfigureDeploymentsAction
}

// CreateEnvironmentJobReqType is oneOf type of CreateEnvironmentJobReq.
type CreateEnvironmentJobReqType string

// Possible values for CreateEnvironmentJobReqType.
const (
	EnvironmentStartActionCreateEnvironmentJobReq                  CreateEnvironmentJobReqType = "start"
	EnvironmentStopActionCreateEnvironmentJobReq                   CreateEnvironmentJobReqType = "stop"
	EnvironmentInitializeActionCreateEnvironmentJobReq             CreateEnvironmentJobReqType = "initialize"
	EnvironmentReconfigureDeploymentsActionCreateEnvironmentJobReq CreateEnvironmentJobReqType = "deployments.reconfigure"
)

// IsEnvironmentStartAction reports whether CreateEnvironmentJobReq is EnvironmentStartAction.
func (s CreateEnvironmentJobReq) IsEnvironmentStartAction() bool {
	return s.Type == EnvironmentStartActionCreateEnvironmentJobReq
}

// IsEnvironmentStopAction reports whether CreateEnvironmentJobReq is EnvironmentStopAction.
func (s CreateEnvironmentJobReq) IsEnvironmentStopAction() bool {
	return s.Type == EnvironmentStopActionCreateEnvironmentJobReq
}

// IsEnvironmentInitializeAction reports whether CreateEnvironmentJobReq is EnvironmentInitializeAction.
func (s CreateEnvironmentJobReq) IsEnvironmentInitializeAction() bool {
	return s.Type == EnvironmentInitializeActionCreateEnvironmentJobReq
}

// IsEnvironmentReconfigureDeploymentsAction reports whether CreateEnvironmentJobReq is EnvironmentReconfigureDeploymentsAction.
func (s CreateEnvironmentJobReq) IsEnvironmentReconfigureDeploymentsAction() bool {
	return s.Type == EnvironmentReconfigureDeploymentsActionCreateEnvironmentJobReq
}

// SetEnvironmentStartAction sets CreateEnvironmentJobReq to EnvironmentStartAction.
func (s *CreateEnvironmentJobReq) SetEnvironmentStartAction(v EnvironmentStartAction) {
	s.Type = EnvironmentStartActionCreateEnvironmentJobReq
	s.EnvironmentStartAction = v
}

// GetEnvironmentStartAction returns EnvironmentStartAction and true boolean if CreateEnvironmentJobReq is EnvironmentStartAction.
func (s CreateEnvironmentJobReq) GetEnvironmentStartAction() (v EnvironmentStartAction, ok bool) {
	if !s.IsEnvironmentStartAction() {
		return v, false
	}
	return s.EnvironmentStartAction, true
}

// NewEnvironmentStartActionCreateEnvironmentJobReq returns new CreateEnvironmentJobReq from EnvironmentStartAction.
func NewEnvironmentStartActionCreateEnvironmentJobReq(v EnvironmentStartAction) CreateEnvironmentJobReq {
	var s CreateEnvironmentJobReq
	s.SetEnvironmentStartAction(v)
	return s
}

// SetEnvironmentStopAction sets CreateEnvironmentJobReq to EnvironmentStopAction.
func (s *CreateEnvironmentJobReq) SetEnvironmentStopAction(v EnvironmentStopAction) {
	s.Type = EnvironmentStopActionCreateEnvironmentJobReq
	s.EnvironmentStopAction = v
}

// GetEnvironmentStopAction returns EnvironmentStopAction and true boolean if CreateEnvironmentJobReq is EnvironmentStopAction.
func (s CreateEnvironmentJobReq) GetEnvironmentStopAction() (v EnvironmentStopAction, ok bool) {
	if !s.IsEnvironmentStopAction() {
		return v, false
	}
	return s.EnvironmentStopAction, true
}

// NewEnvironmentStopActionCreateEnvironmentJobReq returns new CreateEnvironmentJobReq from EnvironmentStopAction.
func NewEnvironmentStopActionCreateEnvironmentJobReq(v EnvironmentStopAction) CreateEnvironmentJobReq {
	var s CreateEnvironmentJobReq
	s.SetEnvironmentStopAction(v)
	return s
}

// SetEnvironmentInitializeAction sets CreateEnvironmentJobReq to EnvironmentInitializeAction.
func (s *CreateEnvironmentJobReq) SetEnvironmentInitializeAction(v EnvironmentInitializeAction) {
	s.Type = EnvironmentInitializeActionCreateEnvironmentJobReq
	s.EnvironmentInitializeAction = v
}

// GetEnvironmentInitializeAction returns EnvironmentInitializeAction and true boolean if CreateEnvironmentJobReq is EnvironmentInitializeAction.
func (s CreateEnvironmentJobReq) GetEnvironmentInitializeAction() (v EnvironmentInitializeAction, ok bool) {
	if !s.IsEnvironmentInitializeAction() {
		return v, false
	}
	return s.EnvironmentInitializeAction, true
}

// NewEnvironmentInitializeActionCreateEnvironmentJobReq returns new CreateEnvironmentJobReq from EnvironmentInitializeAction.
func NewEnvironmentInitializeActionCreateEnvironmentJobReq(v EnvironmentInitializeAction) CreateEnvironmentJobReq {
	var s CreateEnvironmentJobReq
	s.SetEnvironmentInitializeAction(v)
	return s
}

// SetEnvironmentReconfigureDeploymentsAction sets CreateEnvironmentJobReq to EnvironmentReconfigureDeploymentsAction.
func (s *CreateEnvironmentJobReq) SetEnvironmentReconfigureDeploymentsAction(v EnvironmentReconfigureDeploymentsAction) {
	s.Type = EnvironmentReconfigureDeploymentsActionCreateEnvironmentJobReq
	s.EnvironmentReconfigureDeploymentsAction = v
}

// GetEnvironmentReconfigureDeploymentsAction returns EnvironmentReconfigureDeploymentsAction and true boolean if CreateEnvironmentJobReq is EnvironmentReconfigureDeploymentsAction.
func (s CreateEnvironmentJobReq) GetEnvironmentReconfigureDeploymentsAction() (v EnvironmentReconfigureDeploymentsAction, ok bool) {
	if !s.IsEnvironmentReconfigureDeploymentsAction() {
		return v, false
	}
	return s.EnvironmentReconfigureDeploymentsAction, true
}

// NewEnvironmentReconfigureDeploymentsActionCreateEnvironmentJobReq returns new CreateEnvironmentJobReq from EnvironmentReconfigureDeploymentsAction.
func NewEnvironmentReconfigureDeploymentsActionCreateEnvironmentJobReq(v EnvironmentReconfigureDeploymentsAction) CreateEnvironmentJobReq {
	var s CreateEnvironmentJobReq
	s.SetEnvironmentReconfigureDeploymentsAction(v)
	return s
}

type CreateEnvironmentReq struct {
	// A user defined name for the Environment.
	Name       string        `json:"name"`
	Identifier OptIdentifier `json:"identifier"`
	// The cluster this Environment is associated with.
	Cluster string `json:"cluster"`
	// Contains details regarding the Environment.
	About    CreateEnvironmentReqAbout `json:"about"`
	Features Features                  `json:"features"`
}

// GetName returns the value of Name.
func (s *CreateEnvironmentReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateEnvironmentReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *CreateEnvironmentReq) GetCluster() string {
	return s.Cluster
}

// GetAbout returns the value of About.
func (s *CreateEnvironmentReq) GetAbout() CreateEnvironmentReqAbout {
	return s.About
}

// GetFeatures returns the value of Features.
func (s *CreateEnvironmentReq) GetFeatures() Features {
	return s.Features
}

// SetName sets the value of Name.
func (s *CreateEnvironmentReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateEnvironmentReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *CreateEnvironmentReq) SetCluster(val string) {
	s.Cluster = val
}

// SetAbout sets the value of About.
func (s *CreateEnvironmentReq) SetAbout(val CreateEnvironmentReqAbout) {
	s.About = val
}

// SetFeatures sets the value of Features.
func (s *CreateEnvironmentReq) SetFeatures(val Features) {
	s.Features = val
}

// Contains details regarding the Environment.
type CreateEnvironmentReqAbout struct {
	// A custom description for this Environment.
	Description string `json:"description"`
}

// GetDescription returns the value of Description.
func (s *CreateEnvironmentReqAbout) GetDescription() string {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *CreateEnvironmentReqAbout) SetDescription(val string) {
	s.Description = val
}

type CreateHubInviteCreated struct {
	Data HubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateHubInviteCreated) GetData() HubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateHubInviteCreated) SetData(val HubMembership) {
	s.Data = val
}

type CreateHubInviteReq struct {
	// The email address of the invitee.
	Recipient OptString `json:"recipient"`
	RoleID    OptID     `json:"role_id"`
	// The Environment permissions the invitee will have.
	Permissions OptCreateHubInviteReqPermissions `json:"permissions"`
}

// GetRecipient returns the value of Recipient.
func (s *CreateHubInviteReq) GetRecipient() OptString {
	return s.Recipient
}

// GetRoleID returns the value of RoleID.
func (s *CreateHubInviteReq) GetRoleID() OptID {
	return s.RoleID
}

// GetPermissions returns the value of Permissions.
func (s *CreateHubInviteReq) GetPermissions() OptCreateHubInviteReqPermissions {
	return s.Permissions
}

// SetRecipient sets the value of Recipient.
func (s *CreateHubInviteReq) SetRecipient(val OptString) {
	s.Recipient = val
}

// SetRoleID sets the value of RoleID.
func (s *CreateHubInviteReq) SetRoleID(val OptID) {
	s.RoleID = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateHubInviteReq) SetPermissions(val OptCreateHubInviteReqPermissions) {
	s.Permissions = val
}

// The Environment permissions the invitee will have.
type CreateHubInviteReqPermissions struct {
	// Boolean value that indicates the user has access to all Environments.
	AllEnvironments bool `json:"all_environments"`
	// A list of objects that describe the specific environments the invitee will have access to.
	Environments []CreateHubInviteReqPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *CreateHubInviteReqPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *CreateHubInviteReqPermissions) GetEnvironments() []CreateHubInviteReqPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *CreateHubInviteReqPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *CreateHubInviteReqPermissions) SetEnvironments(val []CreateHubInviteReqPermissionsEnvironmentsItem) {
	s.Environments = val
}

type CreateHubInviteReqPermissionsEnvironmentsItem struct {
	// The ID of the Environment.
	ID string `json:"id"`
	// Boolean indicating the invitee has manage rights to Environment.
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) GetID() string {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) SetID(val string) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *CreateHubInviteReqPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

type CreateHubOK struct {
	Data Hub `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateHubOK) GetData() Hub {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateHubOK) SetData(val Hub) {
	s.Data = val
}

type CreateHubReq struct {
	// A name for the Hub.
	Name       OptString      `json:"name"`
	Identifier OptIdentifier  `json:"identifier"`
	Webhooks   OptHubWebhooks `json:"webhooks"`
}

// GetName returns the value of Name.
func (s *CreateHubReq) GetName() OptString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateHubReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetWebhooks returns the value of Webhooks.
func (s *CreateHubReq) GetWebhooks() OptHubWebhooks {
	return s.Webhooks
}

// SetName sets the value of Name.
func (s *CreateHubReq) SetName(val OptString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateHubReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetWebhooks sets the value of Webhooks.
func (s *CreateHubReq) SetWebhooks(val OptHubWebhooks) {
	s.Webhooks = val
}

type CreateImageCreated struct {
	Data Image `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImageCreated) GetData() Image {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImageCreated) SetData(val Image) {
	s.Data = val
}

type CreateImageJobOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImageJobOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImageJobOK) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateImageJobReq struct {
	Action CreateImageJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateImageJobReq) GetAction() CreateImageJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateImageJobReq) SetAction(val CreateImageJobReqAction) {
	s.Action = val
}

type CreateImageJobReqAction string

const (
	CreateImageJobReqActionImport CreateImageJobReqAction = "import"
)

// AllValues returns all CreateImageJobReqAction values.
func (CreateImageJobReqAction) AllValues() []CreateImageJobReqAction {
	return []CreateImageJobReqAction{
		CreateImageJobReqActionImport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageJobReqActionImport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageJobReqAction) UnmarshalText(data []byte) error {
	switch CreateImageJobReqAction(data) {
	case CreateImageJobReqActionImport:
		*s = CreateImageJobReqActionImport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateImageReq struct {
	// A name for the Image.
	Name OptString `json:"name"`
	// The ID for the Image source to be used.
	SourceID string `json:"source_id"`
	// A build object, holding information important to the Image build.
	Build OptCreateImageReqBuild `json:"build"`
	// An override object to be used for a single Image create request.
	Override OptCreateImageReqOverride `json:"override"`
}

// GetName returns the value of Name.
func (s *CreateImageReq) GetName() OptString {
	return s.Name
}

// GetSourceID returns the value of SourceID.
func (s *CreateImageReq) GetSourceID() string {
	return s.SourceID
}

// GetBuild returns the value of Build.
func (s *CreateImageReq) GetBuild() OptCreateImageReqBuild {
	return s.Build
}

// GetOverride returns the value of Override.
func (s *CreateImageReq) GetOverride() OptCreateImageReqOverride {
	return s.Override
}

// SetName sets the value of Name.
func (s *CreateImageReq) SetName(val OptString) {
	s.Name = val
}

// SetSourceID sets the value of SourceID.
func (s *CreateImageReq) SetSourceID(val string) {
	s.SourceID = val
}

// SetBuild sets the value of Build.
func (s *CreateImageReq) SetBuild(val OptCreateImageReqBuild) {
	s.Build = val
}

// SetOverride sets the value of Override.
func (s *CreateImageReq) SetOverride(val OptCreateImageReqOverride) {
	s.Override = val
}

// A build object, holding information important to the Image build.
type CreateImageReqBuild struct {
	// An object holding key value build time arguments needed for the Image during build time.
	Args OptCreateImageReqBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *CreateImageReqBuild) GetArgs() OptCreateImageReqBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *CreateImageReqBuild) SetArgs(val OptCreateImageReqBuildArgs) {
	s.Args = val
}

// An object holding key value build time arguments needed for the Image during build time.
type CreateImageReqBuildArgs map[string]string

func (s *CreateImageReqBuildArgs) init() CreateImageReqBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// An override object to be used for a single Image create request.
type CreateImageReqOverride struct {
	// For Image sources with `docker-hub` or `docker-registry` origin types. A target to be used for
	// overridding the default target - should include an Image and a tag.
	Target OptString `json:"target"`
	// For Image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with
	// a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
	TargzURL OptString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *CreateImageReqOverride) GetTarget() OptString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *CreateImageReqOverride) GetTargzURL() OptString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *CreateImageReqOverride) SetTarget(val OptString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *CreateImageReqOverride) SetTargzURL(val OptString) {
	s.TargzURL = val
}

type CreateImageSourceCreated struct {
	Data ImageSource `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImageSourceCreated) GetData() ImageSource {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImageSourceCreated) SetData(val ImageSource) {
	s.Data = val
}

type CreateImageSourceReq struct {
	// A name for the Image Source.
	Name       OptString                         `json:"name"`
	Identifier OptIdentifier                     `json:"identifier"`
	Builder    OptNilCreateImageSourceReqBuilder `json:"builder"`
	Type       ImageSourceType                   `json:"type"`
	Origin     ImageOrigin                       `json:"origin"`
	// User defined information about the Image Source.
	About OptCreateImageSourceReqAbout `json:"about"`
}

// GetName returns the value of Name.
func (s *CreateImageSourceReq) GetName() OptString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateImageSourceReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetBuilder returns the value of Builder.
func (s *CreateImageSourceReq) GetBuilder() OptNilCreateImageSourceReqBuilder {
	return s.Builder
}

// GetType returns the value of Type.
func (s *CreateImageSourceReq) GetType() ImageSourceType {
	return s.Type
}

// GetOrigin returns the value of Origin.
func (s *CreateImageSourceReq) GetOrigin() ImageOrigin {
	return s.Origin
}

// GetAbout returns the value of About.
func (s *CreateImageSourceReq) GetAbout() OptCreateImageSourceReqAbout {
	return s.About
}

// SetName sets the value of Name.
func (s *CreateImageSourceReq) SetName(val OptString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateImageSourceReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetBuilder sets the value of Builder.
func (s *CreateImageSourceReq) SetBuilder(val OptNilCreateImageSourceReqBuilder) {
	s.Builder = val
}

// SetType sets the value of Type.
func (s *CreateImageSourceReq) SetType(val ImageSourceType) {
	s.Type = val
}

// SetOrigin sets the value of Origin.
func (s *CreateImageSourceReq) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

// SetAbout sets the value of About.
func (s *CreateImageSourceReq) SetAbout(val OptCreateImageSourceReqAbout) {
	s.About = val
}

// User defined information about the Image Source.
type CreateImageSourceReqAbout struct {
	// A description of the Image Source.
	Description NilString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *CreateImageSourceReqAbout) GetDescription() NilString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *CreateImageSourceReqAbout) SetDescription(val NilString) {
	s.Description = val
}

type CreateImageSourceReqBuilder struct {
	IntegrationID HybridIdentifier `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *CreateImageSourceReqBuilder) GetIntegrationID() HybridIdentifier {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *CreateImageSourceReqBuilder) SetIntegrationID(val HybridIdentifier) {
	s.IntegrationID = val
}

type CreateImagesJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateImagesJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateImagesJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateImagesJobReq struct {
	// The action is the Job type to create.
	Action CreateImagesJobReqAction `json:"action"`
	// Additional contents needed by the platform to create the Job.
	Contents CreateImagesJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateImagesJobReq) GetAction() CreateImagesJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateImagesJobReq) GetContents() CreateImagesJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateImagesJobReq) SetAction(val CreateImagesJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateImagesJobReq) SetContents(val CreateImagesJobReqContents) {
	s.Contents = val
}

// The action is the Job type to create.
type CreateImagesJobReqAction string

const (
	CreateImagesJobReqActionPrune CreateImagesJobReqAction = "prune"
)

// AllValues returns all CreateImagesJobReqAction values.
func (CreateImagesJobReqAction) AllValues() []CreateImagesJobReqAction {
	return []CreateImagesJobReqAction{
		CreateImagesJobReqActionPrune,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImagesJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateImagesJobReqActionPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImagesJobReqAction) UnmarshalText(data []byte) error {
	switch CreateImagesJobReqAction(data) {
	case CreateImagesJobReqActionPrune:
		*s = CreateImagesJobReqActionPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional contents needed by the platform to create the Job.
type CreateImagesJobReqContents struct {
	// A list of IDs to be pruned.
	SourceIds []string `json:"source_ids"`
}

// GetSourceIds returns the value of SourceIds.
func (s *CreateImagesJobReqContents) GetSourceIds() []string {
	return s.SourceIds
}

// SetSourceIds sets the value of SourceIds.
func (s *CreateImagesJobReqContents) SetSourceIds(val []string) {
	s.SourceIds = val
}

type CreateInstanceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateInstanceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateInstanceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateInstanceJobReq represents sum type.
type CreateInstanceJobReq struct {
	Type            CreateInstanceJobReqType // switch on this field
	RevertMigration RevertMigration
	Migrate         Migrate
}

// CreateInstanceJobReqType is oneOf type of CreateInstanceJobReq.
type CreateInstanceJobReqType string

// Possible values for CreateInstanceJobReqType.
const (
	RevertMigrationCreateInstanceJobReq CreateInstanceJobReqType = "migrate_revert"
	MigrateCreateInstanceJobReq         CreateInstanceJobReqType = "migrate"
)

// IsRevertMigration reports whether CreateInstanceJobReq is RevertMigration.
func (s CreateInstanceJobReq) IsRevertMigration() bool {
	return s.Type == RevertMigrationCreateInstanceJobReq
}

// IsMigrate reports whether CreateInstanceJobReq is Migrate.
func (s CreateInstanceJobReq) IsMigrate() bool { return s.Type == MigrateCreateInstanceJobReq }

// SetRevertMigration sets CreateInstanceJobReq to RevertMigration.
func (s *CreateInstanceJobReq) SetRevertMigration(v RevertMigration) {
	s.Type = RevertMigrationCreateInstanceJobReq
	s.RevertMigration = v
}

// GetRevertMigration returns RevertMigration and true boolean if CreateInstanceJobReq is RevertMigration.
func (s CreateInstanceJobReq) GetRevertMigration() (v RevertMigration, ok bool) {
	if !s.IsRevertMigration() {
		return v, false
	}
	return s.RevertMigration, true
}

// NewRevertMigrationCreateInstanceJobReq returns new CreateInstanceJobReq from RevertMigration.
func NewRevertMigrationCreateInstanceJobReq(v RevertMigration) CreateInstanceJobReq {
	var s CreateInstanceJobReq
	s.SetRevertMigration(v)
	return s
}

// SetMigrate sets CreateInstanceJobReq to Migrate.
func (s *CreateInstanceJobReq) SetMigrate(v Migrate) {
	s.Type = MigrateCreateInstanceJobReq
	s.Migrate = v
}

// GetMigrate returns Migrate and true boolean if CreateInstanceJobReq is Migrate.
func (s CreateInstanceJobReq) GetMigrate() (v Migrate, ok bool) {
	if !s.IsMigrate() {
		return v, false
	}
	return s.Migrate, true
}

// NewMigrateCreateInstanceJobReq returns new CreateInstanceJobReq from Migrate.
func NewMigrateCreateInstanceJobReq(v Migrate) CreateInstanceJobReq {
	var s CreateInstanceJobReq
	s.SetMigrate(v)
	return s
}

type CreateInstancesAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateInstancesAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateInstancesAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateInstancesReqItem struct {
	// The ID of the Server the new Instance(s) should be deployed to.
	ServerID string `json:"server_id"`
	// The number of new Instances to be created on the given Server.
	NewInstances int `json:"new_instances"`
}

// GetServerID returns the value of ServerID.
func (s *CreateInstancesReqItem) GetServerID() string {
	return s.ServerID
}

// GetNewInstances returns the value of NewInstances.
func (s *CreateInstancesReqItem) GetNewInstances() int {
	return s.NewInstances
}

// SetServerID sets the value of ServerID.
func (s *CreateInstancesReqItem) SetServerID(val string) {
	s.ServerID = val
}

// SetNewInstances sets the value of NewInstances.
func (s *CreateInstancesReqItem) SetNewInstances(val int) {
	s.NewInstances = val
}

type CreateIntegrationCreated struct {
	Data Integration `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateIntegrationCreated) GetData() Integration {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateIntegrationCreated) SetData(val Integration) {
	s.Data = val
}

type CreateIntegrationJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateIntegrationJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateIntegrationJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateIntegrationJobReq struct {
	// The type of Job/selected Job action to create.
	Action CreateIntegrationJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateIntegrationJobReq) GetAction() CreateIntegrationJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateIntegrationJobReq) SetAction(val CreateIntegrationJobReqAction) {
	s.Action = val
}

// The type of Job/selected Job action to create.
type CreateIntegrationJobReqAction string

const (
	CreateIntegrationJobReqActionVerify CreateIntegrationJobReqAction = "verify"
)

// AllValues returns all CreateIntegrationJobReqAction values.
func (CreateIntegrationJobReqAction) AllValues() []CreateIntegrationJobReqAction {
	return []CreateIntegrationJobReqAction{
		CreateIntegrationJobReqActionVerify,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateIntegrationJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateIntegrationJobReqActionVerify:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateIntegrationJobReqAction) UnmarshalText(data []byte) error {
	switch CreateIntegrationJobReqAction(data) {
	case CreateIntegrationJobReqActionVerify:
		*s = CreateIntegrationJobReqActionVerify
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateIntegrationMetaItem string

const (
	CreateIntegrationMetaItemDefinition CreateIntegrationMetaItem = "definition"
)

// AllValues returns all CreateIntegrationMetaItem values.
func (CreateIntegrationMetaItem) AllValues() []CreateIntegrationMetaItem {
	return []CreateIntegrationMetaItem{
		CreateIntegrationMetaItemDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateIntegrationMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateIntegrationMetaItemDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateIntegrationMetaItem) UnmarshalText(data []byte) error {
	switch CreateIntegrationMetaItem(data) {
	case CreateIntegrationMetaItemDefinition:
		*s = CreateIntegrationMetaItemDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateIntegrationReq struct {
	// A name for the Integration.
	Name OptNilString `json:"name"`
	// Unique vendor for the Integration, subject to validation.
	Vendor     string        `json:"vendor"`
	Identifier OptIdentifier `json:"identifier"`
	// Authentication information for the Integration.
	Auth OptCreateIntegrationReqAuth `json:"auth"`
	// Additional key-value pairs associated with the Integration.
	Extra OptCreateIntegrationReqExtra `json:"extra"`
}

// GetName returns the value of Name.
func (s *CreateIntegrationReq) GetName() OptNilString {
	return s.Name
}

// GetVendor returns the value of Vendor.
func (s *CreateIntegrationReq) GetVendor() string {
	return s.Vendor
}

// GetIdentifier returns the value of Identifier.
func (s *CreateIntegrationReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *CreateIntegrationReq) GetAuth() OptCreateIntegrationReqAuth {
	return s.Auth
}

// GetExtra returns the value of Extra.
func (s *CreateIntegrationReq) GetExtra() OptCreateIntegrationReqExtra {
	return s.Extra
}

// SetName sets the value of Name.
func (s *CreateIntegrationReq) SetName(val OptNilString) {
	s.Name = val
}

// SetVendor sets the value of Vendor.
func (s *CreateIntegrationReq) SetVendor(val string) {
	s.Vendor = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateIntegrationReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *CreateIntegrationReq) SetAuth(val OptCreateIntegrationReqAuth) {
	s.Auth = val
}

// SetExtra sets the value of Extra.
func (s *CreateIntegrationReq) SetExtra(val OptCreateIntegrationReqExtra) {
	s.Extra = val
}

// Authentication information for the Integration.
type CreateIntegrationReqAuth struct {
	// The region associated with the Integration.
	Region OptNilString `json:"region"`
	// The namespace associated with the Integration.
	Namespace OptNilString `json:"namespace"`
	// API key for accessing the Integration.
	APIKey OptNilString `json:"api_key"`
	// Key ID for accessing the Integration.
	KeyID OptNilString `json:"key_id"`
	// Secret for accessing the Integration.
	Secret OptNilString `json:"secret"`
	// Subscription ID for the Integration.
	SubscriptionID OptNilString `json:"subscription_id"`
	// Client ID for the Integration.
	ClientID OptNilString `json:"client_id"`
	// Base64 encoded configuration for the Integration.
	Base64Config OptNilString `json:"base64_config"`
}

// GetRegion returns the value of Region.
func (s *CreateIntegrationReqAuth) GetRegion() OptNilString {
	return s.Region
}

// GetNamespace returns the value of Namespace.
func (s *CreateIntegrationReqAuth) GetNamespace() OptNilString {
	return s.Namespace
}

// GetAPIKey returns the value of APIKey.
func (s *CreateIntegrationReqAuth) GetAPIKey() OptNilString {
	return s.APIKey
}

// GetKeyID returns the value of KeyID.
func (s *CreateIntegrationReqAuth) GetKeyID() OptNilString {
	return s.KeyID
}

// GetSecret returns the value of Secret.
func (s *CreateIntegrationReqAuth) GetSecret() OptNilString {
	return s.Secret
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *CreateIntegrationReqAuth) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetClientID returns the value of ClientID.
func (s *CreateIntegrationReqAuth) GetClientID() OptNilString {
	return s.ClientID
}

// GetBase64Config returns the value of Base64Config.
func (s *CreateIntegrationReqAuth) GetBase64Config() OptNilString {
	return s.Base64Config
}

// SetRegion sets the value of Region.
func (s *CreateIntegrationReqAuth) SetRegion(val OptNilString) {
	s.Region = val
}

// SetNamespace sets the value of Namespace.
func (s *CreateIntegrationReqAuth) SetNamespace(val OptNilString) {
	s.Namespace = val
}

// SetAPIKey sets the value of APIKey.
func (s *CreateIntegrationReqAuth) SetAPIKey(val OptNilString) {
	s.APIKey = val
}

// SetKeyID sets the value of KeyID.
func (s *CreateIntegrationReqAuth) SetKeyID(val OptNilString) {
	s.KeyID = val
}

// SetSecret sets the value of Secret.
func (s *CreateIntegrationReqAuth) SetSecret(val OptNilString) {
	s.Secret = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *CreateIntegrationReqAuth) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetClientID sets the value of ClientID.
func (s *CreateIntegrationReqAuth) SetClientID(val OptNilString) {
	s.ClientID = val
}

// SetBase64Config sets the value of Base64Config.
func (s *CreateIntegrationReqAuth) SetBase64Config(val OptNilString) {
	s.Base64Config = val
}

// Additional key-value pairs associated with the Integration.
type CreateIntegrationReqExtra map[string]string

func (s *CreateIntegrationReqExtra) init() CreateIntegrationReqExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CreateInvoiceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateInvoiceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateInvoiceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateInvoiceJobReq struct {
	// The name of the action to perform.
	Action CreateInvoiceJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateInvoiceJobReq) GetAction() CreateInvoiceJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateInvoiceJobReq) SetAction(val CreateInvoiceJobReqAction) {
	s.Action = val
}

// The name of the action to perform.
type CreateInvoiceJobReqAction string

const (
	CreateInvoiceJobReqActionPay CreateInvoiceJobReqAction = "pay"
)

// AllValues returns all CreateInvoiceJobReqAction values.
func (CreateInvoiceJobReqAction) AllValues() []CreateInvoiceJobReqAction {
	return []CreateInvoiceJobReqAction{
		CreateInvoiceJobReqActionPay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateInvoiceJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateInvoiceJobReqActionPay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateInvoiceJobReqAction) UnmarshalText(data []byte) error {
	switch CreateInvoiceJobReqAction(data) {
	case CreateInvoiceJobReqActionPay:
		*s = CreateInvoiceJobReqActionPay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateLoadBalancerServiceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateLoadBalancerServiceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateLoadBalancerServiceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateLoadBalancerServiceJobReq struct {
	// The name of the action to perform.
	Action   CreateLoadBalancerServiceJobReqAction   `json:"action"`
	Contents CreateLoadBalancerServiceJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateLoadBalancerServiceJobReq) GetAction() CreateLoadBalancerServiceJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateLoadBalancerServiceJobReq) GetContents() CreateLoadBalancerServiceJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateLoadBalancerServiceJobReq) SetAction(val CreateLoadBalancerServiceJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateLoadBalancerServiceJobReq) SetContents(val CreateLoadBalancerServiceJobReqContents) {
	s.Contents = val
}

// The name of the action to perform.
type CreateLoadBalancerServiceJobReqAction string

const (
	CreateLoadBalancerServiceJobReqActionReconfigure CreateLoadBalancerServiceJobReqAction = "reconfigure"
)

// AllValues returns all CreateLoadBalancerServiceJobReqAction values.
func (CreateLoadBalancerServiceJobReqAction) AllValues() []CreateLoadBalancerServiceJobReqAction {
	return []CreateLoadBalancerServiceJobReqAction{
		CreateLoadBalancerServiceJobReqActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateLoadBalancerServiceJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateLoadBalancerServiceJobReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateLoadBalancerServiceJobReqAction) UnmarshalText(data []byte) error {
	switch CreateLoadBalancerServiceJobReqAction(data) {
	case CreateLoadBalancerServiceJobReqActionReconfigure:
		*s = CreateLoadBalancerServiceJobReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateLoadBalancerServiceJobReqContents struct {
	// A boolean where `true` represents the desire to run the environment load balancer service in high
	// availability mode.
	HighAvailability OptNilBool `json:"high_availability"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptNilBool                                          `json:"auto_update"`
	Config     OptNilCreateLoadBalancerServiceJobReqContentsConfig `json:"config"`
}

// GetHighAvailability returns the value of HighAvailability.
func (s *CreateLoadBalancerServiceJobReqContents) GetHighAvailability() OptNilBool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *CreateLoadBalancerServiceJobReqContents) GetAutoUpdate() OptNilBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *CreateLoadBalancerServiceJobReqContents) GetConfig() OptNilCreateLoadBalancerServiceJobReqContentsConfig {
	return s.Config
}

// SetHighAvailability sets the value of HighAvailability.
func (s *CreateLoadBalancerServiceJobReqContents) SetHighAvailability(val OptNilBool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *CreateLoadBalancerServiceJobReqContents) SetAutoUpdate(val OptNilBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *CreateLoadBalancerServiceJobReqContents) SetConfig(val OptNilCreateLoadBalancerServiceJobReqContentsConfig) {
	s.Config = val
}

// The config object for the loadbalancer service.
type CreateLoadBalancerServiceJobReqContentsConfig struct {
	OneOf CreateLoadBalancerServiceJobReqContentsConfigSum
}

// GetOneOf returns the value of OneOf.
func (s *CreateLoadBalancerServiceJobReqContentsConfig) GetOneOf() CreateLoadBalancerServiceJobReqContentsConfigSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *CreateLoadBalancerServiceJobReqContentsConfig) SetOneOf(val CreateLoadBalancerServiceJobReqContentsConfigSum) {
	s.OneOf = val
}

// CreateLoadBalancerServiceJobReqContentsConfigSum represents sum type.
type CreateLoadBalancerServiceJobReqContentsConfigSum struct {
	Type          CreateLoadBalancerServiceJobReqContentsConfigSumType // switch on this field
	V1LbType      V1LbType
	HaProxyLbType HaProxyLbType
	DefaultLbType DefaultLbType
}

// CreateLoadBalancerServiceJobReqContentsConfigSumType is oneOf type of CreateLoadBalancerServiceJobReqContentsConfigSum.
type CreateLoadBalancerServiceJobReqContentsConfigSumType string

// Possible values for CreateLoadBalancerServiceJobReqContentsConfigSumType.
const (
	V1LbTypeCreateLoadBalancerServiceJobReqContentsConfigSum      CreateLoadBalancerServiceJobReqContentsConfigSumType = "v1"
	HaProxyLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum CreateLoadBalancerServiceJobReqContentsConfigSumType = "haproxy"
	DefaultLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum CreateLoadBalancerServiceJobReqContentsConfigSumType = "default"
)

// IsV1LbType reports whether CreateLoadBalancerServiceJobReqContentsConfigSum is V1LbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) IsV1LbType() bool {
	return s.Type == V1LbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
}

// IsHaProxyLbType reports whether CreateLoadBalancerServiceJobReqContentsConfigSum is HaProxyLbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) IsHaProxyLbType() bool {
	return s.Type == HaProxyLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
}

// IsDefaultLbType reports whether CreateLoadBalancerServiceJobReqContentsConfigSum is DefaultLbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) IsDefaultLbType() bool {
	return s.Type == DefaultLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
}

// SetV1LbType sets CreateLoadBalancerServiceJobReqContentsConfigSum to V1LbType.
func (s *CreateLoadBalancerServiceJobReqContentsConfigSum) SetV1LbType(v V1LbType) {
	s.Type = V1LbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
	s.V1LbType = v
}

// GetV1LbType returns V1LbType and true boolean if CreateLoadBalancerServiceJobReqContentsConfigSum is V1LbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) GetV1LbType() (v V1LbType, ok bool) {
	if !s.IsV1LbType() {
		return v, false
	}
	return s.V1LbType, true
}

// NewV1LbTypeCreateLoadBalancerServiceJobReqContentsConfigSum returns new CreateLoadBalancerServiceJobReqContentsConfigSum from V1LbType.
func NewV1LbTypeCreateLoadBalancerServiceJobReqContentsConfigSum(v V1LbType) CreateLoadBalancerServiceJobReqContentsConfigSum {
	var s CreateLoadBalancerServiceJobReqContentsConfigSum
	s.SetV1LbType(v)
	return s
}

// SetHaProxyLbType sets CreateLoadBalancerServiceJobReqContentsConfigSum to HaProxyLbType.
func (s *CreateLoadBalancerServiceJobReqContentsConfigSum) SetHaProxyLbType(v HaProxyLbType) {
	s.Type = HaProxyLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
	s.HaProxyLbType = v
}

// GetHaProxyLbType returns HaProxyLbType and true boolean if CreateLoadBalancerServiceJobReqContentsConfigSum is HaProxyLbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) GetHaProxyLbType() (v HaProxyLbType, ok bool) {
	if !s.IsHaProxyLbType() {
		return v, false
	}
	return s.HaProxyLbType, true
}

// NewHaProxyLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum returns new CreateLoadBalancerServiceJobReqContentsConfigSum from HaProxyLbType.
func NewHaProxyLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum(v HaProxyLbType) CreateLoadBalancerServiceJobReqContentsConfigSum {
	var s CreateLoadBalancerServiceJobReqContentsConfigSum
	s.SetHaProxyLbType(v)
	return s
}

// SetDefaultLbType sets CreateLoadBalancerServiceJobReqContentsConfigSum to DefaultLbType.
func (s *CreateLoadBalancerServiceJobReqContentsConfigSum) SetDefaultLbType(v DefaultLbType) {
	s.Type = DefaultLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum
	s.DefaultLbType = v
}

// GetDefaultLbType returns DefaultLbType and true boolean if CreateLoadBalancerServiceJobReqContentsConfigSum is DefaultLbType.
func (s CreateLoadBalancerServiceJobReqContentsConfigSum) GetDefaultLbType() (v DefaultLbType, ok bool) {
	if !s.IsDefaultLbType() {
		return v, false
	}
	return s.DefaultLbType, true
}

// NewDefaultLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum returns new CreateLoadBalancerServiceJobReqContentsConfigSum from DefaultLbType.
func NewDefaultLbTypeCreateLoadBalancerServiceJobReqContentsConfigSum(v DefaultLbType) CreateLoadBalancerServiceJobReqContentsConfigSum {
	var s CreateLoadBalancerServiceJobReqContentsConfigSum
	s.SetDefaultLbType(v)
	return s
}

type CreateNetworkCreated struct {
	Data     Network            `json:"data"`
	Includes OptNetworkIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *CreateNetworkCreated) GetData() Network {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *CreateNetworkCreated) GetIncludes() OptNetworkIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *CreateNetworkCreated) SetData(val Network) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *CreateNetworkCreated) SetIncludes(val OptNetworkIncludes) {
	s.Includes = val
}

type CreateNetworkIncludeItem string

const (
	CreateNetworkIncludeItemCreators     CreateNetworkIncludeItem = "creators"
	CreateNetworkIncludeItemEnvironments CreateNetworkIncludeItem = "environments"
)

// AllValues returns all CreateNetworkIncludeItem values.
func (CreateNetworkIncludeItem) AllValues() []CreateNetworkIncludeItem {
	return []CreateNetworkIncludeItem{
		CreateNetworkIncludeItemCreators,
		CreateNetworkIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateNetworkIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateNetworkIncludeItemCreators:
		return []byte(s), nil
	case CreateNetworkIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNetworkIncludeItem) UnmarshalText(data []byte) error {
	switch CreateNetworkIncludeItem(data) {
	case CreateNetworkIncludeItemCreators:
		*s = CreateNetworkIncludeItemCreators
		return nil
	case CreateNetworkIncludeItemEnvironments:
		*s = CreateNetworkIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateNetworkJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateNetworkJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateNetworkJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateNetworkJobReq struct {
	// The Job to do.
	Action CreateNetworkJobReqAction `json:"action"`
	// Additional information needed for the Job.
	Contents CreateNetworkJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateNetworkJobReq) GetAction() CreateNetworkJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateNetworkJobReq) GetContents() CreateNetworkJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateNetworkJobReq) SetAction(val CreateNetworkJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateNetworkJobReq) SetContents(val CreateNetworkJobReqContents) {
	s.Contents = val
}

// The Job to do.
type CreateNetworkJobReqAction string

const (
	CreateNetworkJobReqActionReconfigure CreateNetworkJobReqAction = "reconfigure"
)

// AllValues returns all CreateNetworkJobReqAction values.
func (CreateNetworkJobReqAction) AllValues() []CreateNetworkJobReqAction {
	return []CreateNetworkJobReqAction{
		CreateNetworkJobReqActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateNetworkJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateNetworkJobReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateNetworkJobReqAction) UnmarshalText(data []byte) error {
	switch CreateNetworkJobReqAction(data) {
	case CreateNetworkJobReqActionReconfigure:
		*s = CreateNetworkJobReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed for the Job.
type CreateNetworkJobReqContents struct {
	// An array of environment identifiers for the Network.
	EnvironmentIds []string `json:"environment_ids"`
}

// GetEnvironmentIds returns the value of EnvironmentIds.
func (s *CreateNetworkJobReqContents) GetEnvironmentIds() []string {
	return s.EnvironmentIds
}

// SetEnvironmentIds sets the value of EnvironmentIds.
func (s *CreateNetworkJobReqContents) SetEnvironmentIds(val []string) {
	s.EnvironmentIds = val
}

type CreateNetworkReq struct {
	// The name of the Network.
	Name string `json:"name"`
	// A Network identifier used to construct http calls that specifically use this Network over another.
	Identifier string `json:"identifier"`
	// The infrastructure Cluster the Environments belonging to this Network belong to.
	Cluster string `json:"cluster"`
	// An array of Environment Ids.
	Environments []string `json:"environments"`
}

// GetName returns the value of Name.
func (s *CreateNetworkReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateNetworkReq) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *CreateNetworkReq) GetCluster() string {
	return s.Cluster
}

// GetEnvironments returns the value of Environments.
func (s *CreateNetworkReq) GetEnvironments() []string {
	return s.Environments
}

// SetName sets the value of Name.
func (s *CreateNetworkReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateNetworkReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *CreateNetworkReq) SetCluster(val string) {
	s.Cluster = val
}

// SetEnvironments sets the value of Environments.
func (s *CreateNetworkReq) SetEnvironments(val []string) {
	s.Environments = val
}

type CreateOrderCreated struct {
	Data     BillingOrder            `json:"data"`
	Includes OptBillingOrderIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *CreateOrderCreated) GetData() BillingOrder {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *CreateOrderCreated) GetIncludes() OptBillingOrderIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *CreateOrderCreated) SetData(val BillingOrder) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *CreateOrderCreated) SetIncludes(val OptBillingOrderIncludes) {
	s.Includes = val
}

type CreateOrderIncludeItem string

const (
	CreateOrderIncludeItemPromoCodes CreateOrderIncludeItem = "promo_codes"
)

// AllValues returns all CreateOrderIncludeItem values.
func (CreateOrderIncludeItem) AllValues() []CreateOrderIncludeItem {
	return []CreateOrderIncludeItem{
		CreateOrderIncludeItemPromoCodes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderIncludeItemPromoCodes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderIncludeItem) UnmarshalText(data []byte) error {
	switch CreateOrderIncludeItem(data) {
	case CreateOrderIncludeItemPromoCodes:
		*s = CreateOrderIncludeItemPromoCodes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateOrderJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateOrderJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateOrderJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateOrderJobReq struct {
	// The name of the action to perform.
	Action CreateOrderJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateOrderJobReq) GetAction() CreateOrderJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateOrderJobReq) SetAction(val CreateOrderJobReqAction) {
	s.Action = val
}

// The name of the action to perform.
type CreateOrderJobReqAction string

const (
	CreateOrderJobReqActionConfirm CreateOrderJobReqAction = "confirm"
)

// AllValues returns all CreateOrderJobReqAction values.
func (CreateOrderJobReqAction) AllValues() []CreateOrderJobReqAction {
	return []CreateOrderJobReqAction{
		CreateOrderJobReqActionConfirm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderJobReqActionConfirm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderJobReqAction) UnmarshalText(data []byte) error {
	switch CreateOrderJobReqAction(data) {
	case CreateOrderJobReqActionConfirm:
		*s = CreateOrderJobReqActionConfirm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateOrderMetaItem string

const (
	CreateOrderMetaItemDue CreateOrderMetaItem = "due"
)

// AllValues returns all CreateOrderMetaItem values.
func (CreateOrderMetaItem) AllValues() []CreateOrderMetaItem {
	return []CreateOrderMetaItem{
		CreateOrderMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderMetaItem) UnmarshalText(data []byte) error {
	switch CreateOrderMetaItem(data) {
	case CreateOrderMetaItemDue:
		*s = CreateOrderMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateOrderReq struct {
	// ID associated with the tier plan.
	TierPlanID OptString `json:"tier_plan_id"`
	// ID associated with the support plan.
	SupportPlanID OptString `json:"support_plan_id"`
	// String that defines term length.
	TermLength OptCreateOrderReqTermLength `json:"term_length"`
	// String that defines a promo code.
	PromoCode OptString `json:"promo_code"`
}

// GetTierPlanID returns the value of TierPlanID.
func (s *CreateOrderReq) GetTierPlanID() OptString {
	return s.TierPlanID
}

// GetSupportPlanID returns the value of SupportPlanID.
func (s *CreateOrderReq) GetSupportPlanID() OptString {
	return s.SupportPlanID
}

// GetTermLength returns the value of TermLength.
func (s *CreateOrderReq) GetTermLength() OptCreateOrderReqTermLength {
	return s.TermLength
}

// GetPromoCode returns the value of PromoCode.
func (s *CreateOrderReq) GetPromoCode() OptString {
	return s.PromoCode
}

// SetTierPlanID sets the value of TierPlanID.
func (s *CreateOrderReq) SetTierPlanID(val OptString) {
	s.TierPlanID = val
}

// SetSupportPlanID sets the value of SupportPlanID.
func (s *CreateOrderReq) SetSupportPlanID(val OptString) {
	s.SupportPlanID = val
}

// SetTermLength sets the value of TermLength.
func (s *CreateOrderReq) SetTermLength(val OptCreateOrderReqTermLength) {
	s.TermLength = val
}

// SetPromoCode sets the value of PromoCode.
func (s *CreateOrderReq) SetPromoCode(val OptString) {
	s.PromoCode = val
}

// String that defines term length.
type CreateOrderReqTermLength string

const (
	CreateOrderReqTermLengthOnce    CreateOrderReqTermLength = "once"
	CreateOrderReqTermLengthMonthly CreateOrderReqTermLength = "monthly"
	CreateOrderReqTermLengthYearly  CreateOrderReqTermLength = "yearly"
)

// AllValues returns all CreateOrderReqTermLength values.
func (CreateOrderReqTermLength) AllValues() []CreateOrderReqTermLength {
	return []CreateOrderReqTermLength{
		CreateOrderReqTermLengthOnce,
		CreateOrderReqTermLengthMonthly,
		CreateOrderReqTermLengthYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateOrderReqTermLength) MarshalText() ([]byte, error) {
	switch s {
	case CreateOrderReqTermLengthOnce:
		return []byte(s), nil
	case CreateOrderReqTermLengthMonthly:
		return []byte(s), nil
	case CreateOrderReqTermLengthYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateOrderReqTermLength) UnmarshalText(data []byte) error {
	switch CreateOrderReqTermLength(data) {
	case CreateOrderReqTermLengthOnce:
		*s = CreateOrderReqTermLengthOnce
		return nil
	case CreateOrderReqTermLengthMonthly:
		*s = CreateOrderReqTermLengthMonthly
		return nil
	case CreateOrderReqTermLengthYearly:
		*s = CreateOrderReqTermLengthYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePipelineCreated struct {
	Data Pipeline `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePipelineCreated) GetData() Pipeline {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePipelineCreated) SetData(val Pipeline) {
	s.Data = val
}

type CreatePipelineJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePipelineJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePipelineJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreatePipelineJobReq struct {
	// The requested action to perform.
	Action   CreatePipelineJobReqAction      `json:"action"`
	Contents OptCreatePipelineJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreatePipelineJobReq) GetAction() CreatePipelineJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreatePipelineJobReq) GetContents() OptCreatePipelineJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreatePipelineJobReq) SetAction(val CreatePipelineJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreatePipelineJobReq) SetContents(val OptCreatePipelineJobReqContents) {
	s.Contents = val
}

// The requested action to perform.
type CreatePipelineJobReqAction string

const (
	CreatePipelineJobReqActionTrigger CreatePipelineJobReqAction = "trigger"
)

// AllValues returns all CreatePipelineJobReqAction values.
func (CreatePipelineJobReqAction) AllValues() []CreatePipelineJobReqAction {
	return []CreatePipelineJobReqAction{
		CreatePipelineJobReqActionTrigger,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePipelineJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreatePipelineJobReqActionTrigger:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePipelineJobReqAction) UnmarshalText(data []byte) error {
	switch CreatePipelineJobReqAction(data) {
	case CreatePipelineJobReqActionTrigger:
		*s = CreatePipelineJobReqActionTrigger
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePipelineJobReqContents struct {
	// A map of variables to pass into the Pipeline when it runs.
	Variables OptCreatePipelineJobReqContentsVariables `json:"variables"`
}

// GetVariables returns the value of Variables.
func (s *CreatePipelineJobReqContents) GetVariables() OptCreatePipelineJobReqContentsVariables {
	return s.Variables
}

// SetVariables sets the value of Variables.
func (s *CreatePipelineJobReqContents) SetVariables(val OptCreatePipelineJobReqContentsVariables) {
	s.Variables = val
}

// A map of variables to pass into the Pipeline when it runs.
type CreatePipelineJobReqContentsVariables map[string]string

func (s *CreatePipelineJobReqContentsVariables) init() CreatePipelineJobReqContentsVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CreatePipelineReq struct {
	// A name for the Pipeline.
	Name       string        `json:"name"`
	Identifier OptIdentifier `json:"identifier"`
	// Setting to true enables variable and other advanced logic support on this Pipeline. This is a
	// one-way toggle. Once set to true, it cannot be set back to false.
	Dynamic OptBool `json:"dynamic"`
	// An array of stages.
	Stages []PipelineStage `json:"stages"`
	// A boolean where true signifies the Pipeline is disabled.
	Disable OptBool `json:"disable"`
}

// GetName returns the value of Name.
func (s *CreatePipelineReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreatePipelineReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetDynamic returns the value of Dynamic.
func (s *CreatePipelineReq) GetDynamic() OptBool {
	return s.Dynamic
}

// GetStages returns the value of Stages.
func (s *CreatePipelineReq) GetStages() []PipelineStage {
	return s.Stages
}

// GetDisable returns the value of Disable.
func (s *CreatePipelineReq) GetDisable() OptBool {
	return s.Disable
}

// SetName sets the value of Name.
func (s *CreatePipelineReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreatePipelineReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetDynamic sets the value of Dynamic.
func (s *CreatePipelineReq) SetDynamic(val OptBool) {
	s.Dynamic = val
}

// SetStages sets the value of Stages.
func (s *CreatePipelineReq) SetStages(val []PipelineStage) {
	s.Stages = val
}

// SetDisable sets the value of Disable.
func (s *CreatePipelineReq) SetDisable(val OptBool) {
	s.Disable = val
}

type CreatePipelineTriggerKeyCreated struct {
	Data TriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *CreatePipelineTriggerKeyCreated) GetData() TriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreatePipelineTriggerKeyCreated) SetData(val TriggerKey) {
	s.Data = val
}

type CreatePipelineTriggerKeyReq struct {
	// A name for the Trigger Key.
	Name OptString `json:"name"`
	// An array of ips this Trigger Key is usable from.
	Ips []string `json:"ips"`
}

// GetName returns the value of Name.
func (s *CreatePipelineTriggerKeyReq) GetName() OptString {
	return s.Name
}

// GetIps returns the value of Ips.
func (s *CreatePipelineTriggerKeyReq) GetIps() []string {
	return s.Ips
}

// SetName sets the value of Name.
func (s *CreatePipelineTriggerKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetIps sets the value of Ips.
func (s *CreatePipelineTriggerKeyReq) SetIps(val []string) {
	s.Ips = val
}

type CreateRoleCreated struct {
	Data Role `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateRoleCreated) GetData() Role {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateRoleCreated) SetData(val Role) {
	s.Data = val
}

type CreateRoleReq struct {
	// A name given to the Role.
	Name       OptNilString `json:"name"`
	Identifier string       `json:"identifier"`
	// The list of platform level capabilities assigned to this Role.
	Capabilities OptNilCreateRoleReqCapabilities `json:"capabilities"`
	// An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role
	// that is less than their rank. The 'owner' Role is rank 10.
	Rank int `json:"rank"`
	// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
	Extra OptNilCreateRoleReqExtra `json:"extra"`
}

// GetName returns the value of Name.
func (s *CreateRoleReq) GetName() OptNilString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateRoleReq) GetIdentifier() string {
	return s.Identifier
}

// GetCapabilities returns the value of Capabilities.
func (s *CreateRoleReq) GetCapabilities() OptNilCreateRoleReqCapabilities {
	return s.Capabilities
}

// GetRank returns the value of Rank.
func (s *CreateRoleReq) GetRank() int {
	return s.Rank
}

// GetExtra returns the value of Extra.
func (s *CreateRoleReq) GetExtra() OptNilCreateRoleReqExtra {
	return s.Extra
}

// SetName sets the value of Name.
func (s *CreateRoleReq) SetName(val OptNilString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateRoleReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCapabilities sets the value of Capabilities.
func (s *CreateRoleReq) SetCapabilities(val OptNilCreateRoleReqCapabilities) {
	s.Capabilities = val
}

// SetRank sets the value of Rank.
func (s *CreateRoleReq) SetRank(val int) {
	s.Rank = val
}

// SetExtra sets the value of Extra.
func (s *CreateRoleReq) SetExtra(val OptNilCreateRoleReqExtra) {
	s.Extra = val
}

// The list of platform level capabilities assigned to this Role.
type CreateRoleReqCapabilities struct {
	All      bool         `json:"all"`
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *CreateRoleReqCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *CreateRoleReqCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *CreateRoleReqCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *CreateRoleReqCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
type CreateRoleReqExtra map[string]string

func (s *CreateRoleReqExtra) init() CreateRoleReqExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CreateSchedulerServiceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateSchedulerServiceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateSchedulerServiceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateSchedulerServiceJobReq struct {
	// The name of the action to perform.
	Action   CreateSchedulerServiceJobReqAction   `json:"action"`
	Contents CreateSchedulerServiceJobReqContents `json:"contents"`
}

// GetAction returns the value of Action.
func (s *CreateSchedulerServiceJobReq) GetAction() CreateSchedulerServiceJobReqAction {
	return s.Action
}

// GetContents returns the value of Contents.
func (s *CreateSchedulerServiceJobReq) GetContents() CreateSchedulerServiceJobReqContents {
	return s.Contents
}

// SetAction sets the value of Action.
func (s *CreateSchedulerServiceJobReq) SetAction(val CreateSchedulerServiceJobReqAction) {
	s.Action = val
}

// SetContents sets the value of Contents.
func (s *CreateSchedulerServiceJobReq) SetContents(val CreateSchedulerServiceJobReqContents) {
	s.Contents = val
}

// The name of the action to perform.
type CreateSchedulerServiceJobReqAction string

const (
	CreateSchedulerServiceJobReqActionReconfigure CreateSchedulerServiceJobReqAction = "reconfigure"
)

// AllValues returns all CreateSchedulerServiceJobReqAction values.
func (CreateSchedulerServiceJobReqAction) AllValues() []CreateSchedulerServiceJobReqAction {
	return []CreateSchedulerServiceJobReqAction{
		CreateSchedulerServiceJobReqActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateSchedulerServiceJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateSchedulerServiceJobReqActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateSchedulerServiceJobReqAction) UnmarshalText(data []byte) error {
	switch CreateSchedulerServiceJobReqAction(data) {
	case CreateSchedulerServiceJobReqActionReconfigure:
		*s = CreateSchedulerServiceJobReqActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateSchedulerServiceJobReqContents struct {
	Config OptNilCreateSchedulerServiceJobReqContentsConfig `json:"config"`
	// A boolean where `true` represents the desire to automatically update the environment scheduler
	// service.
	AutoUpdate OptNilBool `json:"auto_update"`
}

// GetConfig returns the value of Config.
func (s *CreateSchedulerServiceJobReqContents) GetConfig() OptNilCreateSchedulerServiceJobReqContentsConfig {
	return s.Config
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *CreateSchedulerServiceJobReqContents) GetAutoUpdate() OptNilBool {
	return s.AutoUpdate
}

// SetConfig sets the value of Config.
func (s *CreateSchedulerServiceJobReqContents) SetConfig(val OptNilCreateSchedulerServiceJobReqContentsConfig) {
	s.Config = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *CreateSchedulerServiceJobReqContents) SetAutoUpdate(val OptNilBool) {
	s.AutoUpdate = val
}

// Configuration options for the scheduler Environment service.
type CreateSchedulerServiceJobReqContentsConfig struct {
	// If true, the scheduler service API will be exposed publicly via the load balancer. This is useful
	// for allowing external services spin up function containers using custom logic.
	Public     bool                 `json:"public"`
	AccessKeys []SchedulerAccessKey `json:"access_keys"`
}

// GetPublic returns the value of Public.
func (s *CreateSchedulerServiceJobReqContentsConfig) GetPublic() bool {
	return s.Public
}

// GetAccessKeys returns the value of AccessKeys.
func (s *CreateSchedulerServiceJobReqContentsConfig) GetAccessKeys() []SchedulerAccessKey {
	return s.AccessKeys
}

// SetPublic sets the value of Public.
func (s *CreateSchedulerServiceJobReqContentsConfig) SetPublic(val bool) {
	s.Public = val
}

// SetAccessKeys sets the value of AccessKeys.
func (s *CreateSchedulerServiceJobReqContentsConfig) SetAccessKeys(val []SchedulerAccessKey) {
	s.AccessKeys = val
}

type CreateScopedVariableCreated struct {
	Data ScopedVariable `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateScopedVariableCreated) GetData() ScopedVariable {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateScopedVariableCreated) SetData(val ScopedVariable) {
	s.Data = val
}

type CreateScopedVariableReq struct {
	// An identifier for this Scoped Variable.
	Identifier string                  `json:"identifier"`
	Scope      ScopedVariableScope     `json:"scope"`
	Access     OptScopedVariableAccess `json:"access"`
	// The source or value of the Scoped Variable.
	Source CreateScopedVariableReqSource `json:"source"`
}

// GetIdentifier returns the value of Identifier.
func (s *CreateScopedVariableReq) GetIdentifier() string {
	return s.Identifier
}

// GetScope returns the value of Scope.
func (s *CreateScopedVariableReq) GetScope() ScopedVariableScope {
	return s.Scope
}

// GetAccess returns the value of Access.
func (s *CreateScopedVariableReq) GetAccess() OptScopedVariableAccess {
	return s.Access
}

// GetSource returns the value of Source.
func (s *CreateScopedVariableReq) GetSource() CreateScopedVariableReqSource {
	return s.Source
}

// SetIdentifier sets the value of Identifier.
func (s *CreateScopedVariableReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetScope sets the value of Scope.
func (s *CreateScopedVariableReq) SetScope(val ScopedVariableScope) {
	s.Scope = val
}

// SetAccess sets the value of Access.
func (s *CreateScopedVariableReq) SetAccess(val OptScopedVariableAccess) {
	s.Access = val
}

// SetSource sets the value of Source.
func (s *CreateScopedVariableReq) SetSource(val CreateScopedVariableReqSource) {
	s.Source = val
}

// The source or value of the Scoped Variable.
type CreateScopedVariableReqSource struct {
	OneOf CreateScopedVariableReqSourceSum
}

// GetOneOf returns the value of OneOf.
func (s *CreateScopedVariableReqSource) GetOneOf() CreateScopedVariableReqSourceSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *CreateScopedVariableReqSource) SetOneOf(val CreateScopedVariableReqSourceSum) {
	s.OneOf = val
}

// CreateScopedVariableReqSourceSum represents sum type.
type CreateScopedVariableReqSourceSum struct {
	Type      CreateScopedVariableReqSourceSumType // switch on this field
	RawSource RawSource
	URLSource URLSource
}

// CreateScopedVariableReqSourceSumType is oneOf type of CreateScopedVariableReqSourceSum.
type CreateScopedVariableReqSourceSumType string

// Possible values for CreateScopedVariableReqSourceSumType.
const (
	RawSourceCreateScopedVariableReqSourceSum CreateScopedVariableReqSourceSumType = "raw"
	URLSourceCreateScopedVariableReqSourceSum CreateScopedVariableReqSourceSumType = "url"
)

// IsRawSource reports whether CreateScopedVariableReqSourceSum is RawSource.
func (s CreateScopedVariableReqSourceSum) IsRawSource() bool {
	return s.Type == RawSourceCreateScopedVariableReqSourceSum
}

// IsURLSource reports whether CreateScopedVariableReqSourceSum is URLSource.
func (s CreateScopedVariableReqSourceSum) IsURLSource() bool {
	return s.Type == URLSourceCreateScopedVariableReqSourceSum
}

// SetRawSource sets CreateScopedVariableReqSourceSum to RawSource.
func (s *CreateScopedVariableReqSourceSum) SetRawSource(v RawSource) {
	s.Type = RawSourceCreateScopedVariableReqSourceSum
	s.RawSource = v
}

// GetRawSource returns RawSource and true boolean if CreateScopedVariableReqSourceSum is RawSource.
func (s CreateScopedVariableReqSourceSum) GetRawSource() (v RawSource, ok bool) {
	if !s.IsRawSource() {
		return v, false
	}
	return s.RawSource, true
}

// NewRawSourceCreateScopedVariableReqSourceSum returns new CreateScopedVariableReqSourceSum from RawSource.
func NewRawSourceCreateScopedVariableReqSourceSum(v RawSource) CreateScopedVariableReqSourceSum {
	var s CreateScopedVariableReqSourceSum
	s.SetRawSource(v)
	return s
}

// SetURLSource sets CreateScopedVariableReqSourceSum to URLSource.
func (s *CreateScopedVariableReqSourceSum) SetURLSource(v URLSource) {
	s.Type = URLSourceCreateScopedVariableReqSourceSum
	s.URLSource = v
}

// GetURLSource returns URLSource and true boolean if CreateScopedVariableReqSourceSum is URLSource.
func (s CreateScopedVariableReqSourceSum) GetURLSource() (v URLSource, ok bool) {
	if !s.IsURLSource() {
		return v, false
	}
	return s.URLSource, true
}

// NewURLSourceCreateScopedVariableReqSourceSum returns new CreateScopedVariableReqSourceSum from URLSource.
func NewURLSourceCreateScopedVariableReqSourceSum(v URLSource) CreateScopedVariableReqSourceSum {
	var s CreateScopedVariableReqSourceSum
	s.SetURLSource(v)
	return s
}

type CreateServerAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateServerAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateServerAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateServerJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateServerJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateServerJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateServerJobReq represents sum type.
type CreateServerJobReq struct {
	Type                  CreateServerJobReqType // switch on this field
	ReconfigureSharedFs   ReconfigureSharedFs
	ReconfigureServer     ReconfigureServer
	RestartServer         RestartServer
	RestartCompute        RestartCompute
	RestartComputeSpawner RestartComputeSpawner
}

// CreateServerJobReqType is oneOf type of CreateServerJobReq.
type CreateServerJobReqType string

// Possible values for CreateServerJobReqType.
const (
	ReconfigureSharedFsCreateServerJobReq   CreateServerJobReqType = "sharedfs.reconfigure"
	ReconfigureServerCreateServerJobReq     CreateServerJobReqType = "features.reconfigure"
	RestartServerCreateServerJobReq         CreateServerJobReqType = "restart"
	RestartComputeCreateServerJobReq        CreateServerJobReqType = "compute.restart"
	RestartComputeSpawnerCreateServerJobReq CreateServerJobReqType = "compute.spawner.restart"
)

// IsReconfigureSharedFs reports whether CreateServerJobReq is ReconfigureSharedFs.
func (s CreateServerJobReq) IsReconfigureSharedFs() bool {
	return s.Type == ReconfigureSharedFsCreateServerJobReq
}

// IsReconfigureServer reports whether CreateServerJobReq is ReconfigureServer.
func (s CreateServerJobReq) IsReconfigureServer() bool {
	return s.Type == ReconfigureServerCreateServerJobReq
}

// IsRestartServer reports whether CreateServerJobReq is RestartServer.
func (s CreateServerJobReq) IsRestartServer() bool { return s.Type == RestartServerCreateServerJobReq }

// IsRestartCompute reports whether CreateServerJobReq is RestartCompute.
func (s CreateServerJobReq) IsRestartCompute() bool {
	return s.Type == RestartComputeCreateServerJobReq
}

// IsRestartComputeSpawner reports whether CreateServerJobReq is RestartComputeSpawner.
func (s CreateServerJobReq) IsRestartComputeSpawner() bool {
	return s.Type == RestartComputeSpawnerCreateServerJobReq
}

// SetReconfigureSharedFs sets CreateServerJobReq to ReconfigureSharedFs.
func (s *CreateServerJobReq) SetReconfigureSharedFs(v ReconfigureSharedFs) {
	s.Type = ReconfigureSharedFsCreateServerJobReq
	s.ReconfigureSharedFs = v
}

// GetReconfigureSharedFs returns ReconfigureSharedFs and true boolean if CreateServerJobReq is ReconfigureSharedFs.
func (s CreateServerJobReq) GetReconfigureSharedFs() (v ReconfigureSharedFs, ok bool) {
	if !s.IsReconfigureSharedFs() {
		return v, false
	}
	return s.ReconfigureSharedFs, true
}

// NewReconfigureSharedFsCreateServerJobReq returns new CreateServerJobReq from ReconfigureSharedFs.
func NewReconfigureSharedFsCreateServerJobReq(v ReconfigureSharedFs) CreateServerJobReq {
	var s CreateServerJobReq
	s.SetReconfigureSharedFs(v)
	return s
}

// SetReconfigureServer sets CreateServerJobReq to ReconfigureServer.
func (s *CreateServerJobReq) SetReconfigureServer(v ReconfigureServer) {
	s.Type = ReconfigureServerCreateServerJobReq
	s.ReconfigureServer = v
}

// GetReconfigureServer returns ReconfigureServer and true boolean if CreateServerJobReq is ReconfigureServer.
func (s CreateServerJobReq) GetReconfigureServer() (v ReconfigureServer, ok bool) {
	if !s.IsReconfigureServer() {
		return v, false
	}
	return s.ReconfigureServer, true
}

// NewReconfigureServerCreateServerJobReq returns new CreateServerJobReq from ReconfigureServer.
func NewReconfigureServerCreateServerJobReq(v ReconfigureServer) CreateServerJobReq {
	var s CreateServerJobReq
	s.SetReconfigureServer(v)
	return s
}

// SetRestartServer sets CreateServerJobReq to RestartServer.
func (s *CreateServerJobReq) SetRestartServer(v RestartServer) {
	s.Type = RestartServerCreateServerJobReq
	s.RestartServer = v
}

// GetRestartServer returns RestartServer and true boolean if CreateServerJobReq is RestartServer.
func (s CreateServerJobReq) GetRestartServer() (v RestartServer, ok bool) {
	if !s.IsRestartServer() {
		return v, false
	}
	return s.RestartServer, true
}

// NewRestartServerCreateServerJobReq returns new CreateServerJobReq from RestartServer.
func NewRestartServerCreateServerJobReq(v RestartServer) CreateServerJobReq {
	var s CreateServerJobReq
	s.SetRestartServer(v)
	return s
}

// SetRestartCompute sets CreateServerJobReq to RestartCompute.
func (s *CreateServerJobReq) SetRestartCompute(v RestartCompute) {
	s.Type = RestartComputeCreateServerJobReq
	s.RestartCompute = v
}

// GetRestartCompute returns RestartCompute and true boolean if CreateServerJobReq is RestartCompute.
func (s CreateServerJobReq) GetRestartCompute() (v RestartCompute, ok bool) {
	if !s.IsRestartCompute() {
		return v, false
	}
	return s.RestartCompute, true
}

// NewRestartComputeCreateServerJobReq returns new CreateServerJobReq from RestartCompute.
func NewRestartComputeCreateServerJobReq(v RestartCompute) CreateServerJobReq {
	var s CreateServerJobReq
	s.SetRestartCompute(v)
	return s
}

// SetRestartComputeSpawner sets CreateServerJobReq to RestartComputeSpawner.
func (s *CreateServerJobReq) SetRestartComputeSpawner(v RestartComputeSpawner) {
	s.Type = RestartComputeSpawnerCreateServerJobReq
	s.RestartComputeSpawner = v
}

// GetRestartComputeSpawner returns RestartComputeSpawner and true boolean if CreateServerJobReq is RestartComputeSpawner.
func (s CreateServerJobReq) GetRestartComputeSpawner() (v RestartComputeSpawner, ok bool) {
	if !s.IsRestartComputeSpawner() {
		return v, false
	}
	return s.RestartComputeSpawner, true
}

// NewRestartComputeSpawnerCreateServerJobReq returns new CreateServerJobReq from RestartComputeSpawner.
func NewRestartComputeSpawnerCreateServerJobReq(v RestartComputeSpawner) CreateServerJobReq {
	var s CreateServerJobReq
	s.SetRestartComputeSpawner(v)
	return s
}

type CreateServerReq struct {
	// The existing or new cluster this infrastructure should be provisioned in.
	Cluster string `json:"cluster"`
	// An array of servers to provision.
	Servers []CreateServerReqServersItem `json:"servers"`
}

// GetCluster returns the value of Cluster.
func (s *CreateServerReq) GetCluster() string {
	return s.Cluster
}

// GetServers returns the value of Servers.
func (s *CreateServerReq) GetServers() []CreateServerReqServersItem {
	return s.Servers
}

// SetCluster sets the value of Cluster.
func (s *CreateServerReq) SetCluster(val string) {
	s.Cluster = val
}

// SetServers sets the value of Servers.
func (s *CreateServerReq) SetServers(val []CreateServerReqServersItem) {
	s.Servers = val
}

type CreateServerReqServersItem struct {
	IntegrationID ID `json:"integration_id"`
	// The model ID of the Server.
	ModelID string `json:"model_id"`
	// The location ID of the Server.
	LocationID string `json:"location_id"`
	// The number of this Server at this location to deploy.
	Quantity int `json:"quantity"`
	// An array of hostnames for the given servers.
	Hostnames []string                                 `json:"hostnames"`
	Advanced  []CreateServerReqServersItemAdvancedItem `json:"advanced"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *CreateServerReqServersItem) GetIntegrationID() ID {
	return s.IntegrationID
}

// GetModelID returns the value of ModelID.
func (s *CreateServerReqServersItem) GetModelID() string {
	return s.ModelID
}

// GetLocationID returns the value of LocationID.
func (s *CreateServerReqServersItem) GetLocationID() string {
	return s.LocationID
}

// GetQuantity returns the value of Quantity.
func (s *CreateServerReqServersItem) GetQuantity() int {
	return s.Quantity
}

// GetHostnames returns the value of Hostnames.
func (s *CreateServerReqServersItem) GetHostnames() []string {
	return s.Hostnames
}

// GetAdvanced returns the value of Advanced.
func (s *CreateServerReqServersItem) GetAdvanced() []CreateServerReqServersItemAdvancedItem {
	return s.Advanced
}

// SetIntegrationID sets the value of IntegrationID.
func (s *CreateServerReqServersItem) SetIntegrationID(val ID) {
	s.IntegrationID = val
}

// SetModelID sets the value of ModelID.
func (s *CreateServerReqServersItem) SetModelID(val string) {
	s.ModelID = val
}

// SetLocationID sets the value of LocationID.
func (s *CreateServerReqServersItem) SetLocationID(val string) {
	s.LocationID = val
}

// SetQuantity sets the value of Quantity.
func (s *CreateServerReqServersItem) SetQuantity(val int) {
	s.Quantity = val
}

// SetHostnames sets the value of Hostnames.
func (s *CreateServerReqServersItem) SetHostnames(val []string) {
	s.Hostnames = val
}

// SetAdvanced sets the value of Advanced.
func (s *CreateServerReqServersItem) SetAdvanced(val []CreateServerReqServersItemAdvancedItem) {
	s.Advanced = val
}

type CreateServerReqServersItemAdvancedItem struct {
	ProvisionOptions OptCreateServerReqServersItemAdvancedItemProvisionOptions `json:"provision_options"`
	Zone             OptString                                                 `json:"zone"`
}

// GetProvisionOptions returns the value of ProvisionOptions.
func (s *CreateServerReqServersItemAdvancedItem) GetProvisionOptions() OptCreateServerReqServersItemAdvancedItemProvisionOptions {
	return s.ProvisionOptions
}

// GetZone returns the value of Zone.
func (s *CreateServerReqServersItemAdvancedItem) GetZone() OptString {
	return s.Zone
}

// SetProvisionOptions sets the value of ProvisionOptions.
func (s *CreateServerReqServersItemAdvancedItem) SetProvisionOptions(val OptCreateServerReqServersItemAdvancedItemProvisionOptions) {
	s.ProvisionOptions = val
}

// SetZone sets the value of Zone.
func (s *CreateServerReqServersItemAdvancedItem) SetZone(val OptString) {
	s.Zone = val
}

type CreateServerReqServersItemAdvancedItemProvisionOptions struct {
	AttachedStorageSize OptFloat64 `json:"attached_storage_size"`
	ReservationID       OptString  `json:"reservation_id"`
}

// GetAttachedStorageSize returns the value of AttachedStorageSize.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) GetAttachedStorageSize() OptFloat64 {
	return s.AttachedStorageSize
}

// GetReservationID returns the value of ReservationID.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) GetReservationID() OptString {
	return s.ReservationID
}

// SetAttachedStorageSize sets the value of AttachedStorageSize.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) SetAttachedStorageSize(val OptFloat64) {
	s.AttachedStorageSize = val
}

// SetReservationID sets the value of ReservationID.
func (s *CreateServerReqServersItemAdvancedItemProvisionOptions) SetReservationID(val OptString) {
	s.ReservationID = val
}

type CreateStackBuildCreated struct {
	Data StackBuild `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackBuildCreated) GetData() StackBuild {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackBuildCreated) SetData(val StackBuild) {
	s.Data = val
}

type CreateStackBuildJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackBuildJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackBuildJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateStackBuildJobReq represents sum type.
type CreateStackBuildJobReq struct {
	Type                     CreateStackBuildJobReqType // switch on this field
	GenerateStackBuildAction GenerateStackBuildAction
	DeployStackBuildAction   DeployStackBuildAction
}

// CreateStackBuildJobReqType is oneOf type of CreateStackBuildJobReq.
type CreateStackBuildJobReqType string

// Possible values for CreateStackBuildJobReqType.
const (
	GenerateStackBuildActionCreateStackBuildJobReq CreateStackBuildJobReqType = "generate"
	DeployStackBuildActionCreateStackBuildJobReq   CreateStackBuildJobReqType = "deploy"
)

// IsGenerateStackBuildAction reports whether CreateStackBuildJobReq is GenerateStackBuildAction.
func (s CreateStackBuildJobReq) IsGenerateStackBuildAction() bool {
	return s.Type == GenerateStackBuildActionCreateStackBuildJobReq
}

// IsDeployStackBuildAction reports whether CreateStackBuildJobReq is DeployStackBuildAction.
func (s CreateStackBuildJobReq) IsDeployStackBuildAction() bool {
	return s.Type == DeployStackBuildActionCreateStackBuildJobReq
}

// SetGenerateStackBuildAction sets CreateStackBuildJobReq to GenerateStackBuildAction.
func (s *CreateStackBuildJobReq) SetGenerateStackBuildAction(v GenerateStackBuildAction) {
	s.Type = GenerateStackBuildActionCreateStackBuildJobReq
	s.GenerateStackBuildAction = v
}

// GetGenerateStackBuildAction returns GenerateStackBuildAction and true boolean if CreateStackBuildJobReq is GenerateStackBuildAction.
func (s CreateStackBuildJobReq) GetGenerateStackBuildAction() (v GenerateStackBuildAction, ok bool) {
	if !s.IsGenerateStackBuildAction() {
		return v, false
	}
	return s.GenerateStackBuildAction, true
}

// NewGenerateStackBuildActionCreateStackBuildJobReq returns new CreateStackBuildJobReq from GenerateStackBuildAction.
func NewGenerateStackBuildActionCreateStackBuildJobReq(v GenerateStackBuildAction) CreateStackBuildJobReq {
	var s CreateStackBuildJobReq
	s.SetGenerateStackBuildAction(v)
	return s
}

// SetDeployStackBuildAction sets CreateStackBuildJobReq to DeployStackBuildAction.
func (s *CreateStackBuildJobReq) SetDeployStackBuildAction(v DeployStackBuildAction) {
	s.Type = DeployStackBuildActionCreateStackBuildJobReq
	s.DeployStackBuildAction = v
}

// GetDeployStackBuildAction returns DeployStackBuildAction and true boolean if CreateStackBuildJobReq is DeployStackBuildAction.
func (s CreateStackBuildJobReq) GetDeployStackBuildAction() (v DeployStackBuildAction, ok bool) {
	if !s.IsDeployStackBuildAction() {
		return v, false
	}
	return s.DeployStackBuildAction, true
}

// NewDeployStackBuildActionCreateStackBuildJobReq returns new CreateStackBuildJobReq from DeployStackBuildAction.
func NewDeployStackBuildActionCreateStackBuildJobReq(v DeployStackBuildAction) CreateStackBuildJobReq {
	var s CreateStackBuildJobReq
	s.SetDeployStackBuildAction(v)
	return s
}

type CreateStackBuildReq struct {
	About        OptStackBuildAbout               `json:"about"`
	Instructions OptStackBuildInstructionsDetails `json:"instructions"`
}

// GetAbout returns the value of About.
func (s *CreateStackBuildReq) GetAbout() OptStackBuildAbout {
	return s.About
}

// GetInstructions returns the value of Instructions.
func (s *CreateStackBuildReq) GetInstructions() OptStackBuildInstructionsDetails {
	return s.Instructions
}

// SetAbout sets the value of About.
func (s *CreateStackBuildReq) SetAbout(val OptStackBuildAbout) {
	s.About = val
}

// SetInstructions sets the value of Instructions.
func (s *CreateStackBuildReq) SetInstructions(val OptStackBuildInstructionsDetails) {
	s.Instructions = val
}

type CreateStackCreated struct {
	Data Stack `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackCreated) GetData() Stack {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackCreated) SetData(val Stack) {
	s.Data = val
}

type CreateStackJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateStackJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateStackJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type CreateStackJobReq struct {
	// The Job to do.
	Action CreateStackJobReqAction `json:"action"`
}

// GetAction returns the value of Action.
func (s *CreateStackJobReq) GetAction() CreateStackJobReqAction {
	return s.Action
}

// SetAction sets the value of Action.
func (s *CreateStackJobReq) SetAction(val CreateStackJobReqAction) {
	s.Action = val
}

// The Job to do.
type CreateStackJobReqAction string

const (
	CreateStackJobReqActionPrune CreateStackJobReqAction = "prune"
)

// AllValues returns all CreateStackJobReqAction values.
func (CreateStackJobReqAction) AllValues() []CreateStackJobReqAction {
	return []CreateStackJobReqAction{
		CreateStackJobReqActionPrune,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateStackJobReqAction) MarshalText() ([]byte, error) {
	switch s {
	case CreateStackJobReqActionPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateStackJobReqAction) UnmarshalText(data []byte) error {
	switch CreateStackJobReqAction(data) {
	case CreateStackJobReqActionPrune:
		*s = CreateStackJobReqActionPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateStackReq struct {
	// A name for the Stack.
	Name       string        `json:"name"`
	Identifier OptIdentifier `json:"identifier"`
	// A map of default variable values used when building this Stack. A variable can be added anywhere
	// in a Stack using the format `{{var}}` where `var` would be a key in this map.
	Variables OptCreateStackReqVariables `json:"variables"`
	Source    StackSource                `json:"source"`
}

// GetName returns the value of Name.
func (s *CreateStackReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *CreateStackReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetVariables returns the value of Variables.
func (s *CreateStackReq) GetVariables() OptCreateStackReqVariables {
	return s.Variables
}

// GetSource returns the value of Source.
func (s *CreateStackReq) GetSource() StackSource {
	return s.Source
}

// SetName sets the value of Name.
func (s *CreateStackReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *CreateStackReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetVariables sets the value of Variables.
func (s *CreateStackReq) SetVariables(val OptCreateStackReqVariables) {
	s.Variables = val
}

// SetSource sets the value of Source.
func (s *CreateStackReq) SetSource(val StackSource) {
	s.Source = val
}

// A map of default variable values used when building this Stack. A variable can be added anywhere
// in a Stack using the format `{{var}}` where `var` would be a key in this map.
type CreateStackReqVariables map[string]string

func (s *CreateStackReqVariables) init() CreateStackReqVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type CreateVPNServiceJobAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVPNServiceJobAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVPNServiceJobAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

// CreateVPNServiceJobReq represents sum type.
type CreateVPNServiceJobReq struct {
	Type               CreateVPNServiceJobReqType // switch on this field
	VpnResetTask       VpnResetTask
	VpnReconfigureTask VpnReconfigureTask
}

// CreateVPNServiceJobReqType is oneOf type of CreateVPNServiceJobReq.
type CreateVPNServiceJobReqType string

// Possible values for CreateVPNServiceJobReqType.
const (
	VpnResetTaskCreateVPNServiceJobReq       CreateVPNServiceJobReqType = "reset"
	VpnReconfigureTaskCreateVPNServiceJobReq CreateVPNServiceJobReqType = "reconfigure"
)

// IsVpnResetTask reports whether CreateVPNServiceJobReq is VpnResetTask.
func (s CreateVPNServiceJobReq) IsVpnResetTask() bool {
	return s.Type == VpnResetTaskCreateVPNServiceJobReq
}

// IsVpnReconfigureTask reports whether CreateVPNServiceJobReq is VpnReconfigureTask.
func (s CreateVPNServiceJobReq) IsVpnReconfigureTask() bool {
	return s.Type == VpnReconfigureTaskCreateVPNServiceJobReq
}

// SetVpnResetTask sets CreateVPNServiceJobReq to VpnResetTask.
func (s *CreateVPNServiceJobReq) SetVpnResetTask(v VpnResetTask) {
	s.Type = VpnResetTaskCreateVPNServiceJobReq
	s.VpnResetTask = v
}

// GetVpnResetTask returns VpnResetTask and true boolean if CreateVPNServiceJobReq is VpnResetTask.
func (s CreateVPNServiceJobReq) GetVpnResetTask() (v VpnResetTask, ok bool) {
	if !s.IsVpnResetTask() {
		return v, false
	}
	return s.VpnResetTask, true
}

// NewVpnResetTaskCreateVPNServiceJobReq returns new CreateVPNServiceJobReq from VpnResetTask.
func NewVpnResetTaskCreateVPNServiceJobReq(v VpnResetTask) CreateVPNServiceJobReq {
	var s CreateVPNServiceJobReq
	s.SetVpnResetTask(v)
	return s
}

// SetVpnReconfigureTask sets CreateVPNServiceJobReq to VpnReconfigureTask.
func (s *CreateVPNServiceJobReq) SetVpnReconfigureTask(v VpnReconfigureTask) {
	s.Type = VpnReconfigureTaskCreateVPNServiceJobReq
	s.VpnReconfigureTask = v
}

// GetVpnReconfigureTask returns VpnReconfigureTask and true boolean if CreateVPNServiceJobReq is VpnReconfigureTask.
func (s CreateVPNServiceJobReq) GetVpnReconfigureTask() (v VpnReconfigureTask, ok bool) {
	if !s.IsVpnReconfigureTask() {
		return v, false
	}
	return s.VpnReconfigureTask, true
}

// NewVpnReconfigureTaskCreateVPNServiceJobReq returns new CreateVPNServiceJobReq from VpnReconfigureTask.
func NewVpnReconfigureTaskCreateVPNServiceJobReq(v VpnReconfigureTask) CreateVPNServiceJobReq {
	var s CreateVPNServiceJobReq
	s.SetVpnReconfigureTask(v)
	return s
}

type CreateVPNUserCreated struct {
	Data VPNUsers `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateVPNUserCreated) GetData() VPNUsers {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateVPNUserCreated) SetData(val VPNUsers) {
	s.Data = val
}

type CreateVPNUserReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *CreateVPNUserReq) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *CreateVPNUserReq) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *CreateVPNUserReq) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *CreateVPNUserReq) SetPassword(val string) {
	s.Password = val
}

// An identity that created a resource.
// Ref: #/components/schemas/CreatorInclude
type CreatorInclude struct {
	// Included creators that are public accounts, keyed by ID.
	Accounts OptCreatorIncludeAccounts `json:"accounts"`
	// Included creators that are employees of Cycle, keyed by ID.
	Employees OptCreatorIncludeEmployees `json:"employees"`
	// Included creators that are not Cycle accounts, keyed by ID.
	Visitors OptCreatorIncludeVisitors `json:"visitors"`
	// Included creators that are Cycle environments (usually automatically created resources), keyed by
	// ID.
	Environments OptCreatorIncludeEnvironments `json:"environments"`
	// Included creators that are Cycle API Keys, keyed by ID.
	APIKeys OptCreatorIncludeAPIKeys `json:"api_keys"`
}

// GetAccounts returns the value of Accounts.
func (s *CreatorInclude) GetAccounts() OptCreatorIncludeAccounts {
	return s.Accounts
}

// GetEmployees returns the value of Employees.
func (s *CreatorInclude) GetEmployees() OptCreatorIncludeEmployees {
	return s.Employees
}

// GetVisitors returns the value of Visitors.
func (s *CreatorInclude) GetVisitors() OptCreatorIncludeVisitors {
	return s.Visitors
}

// GetEnvironments returns the value of Environments.
func (s *CreatorInclude) GetEnvironments() OptCreatorIncludeEnvironments {
	return s.Environments
}

// GetAPIKeys returns the value of APIKeys.
func (s *CreatorInclude) GetAPIKeys() OptCreatorIncludeAPIKeys {
	return s.APIKeys
}

// SetAccounts sets the value of Accounts.
func (s *CreatorInclude) SetAccounts(val OptCreatorIncludeAccounts) {
	s.Accounts = val
}

// SetEmployees sets the value of Employees.
func (s *CreatorInclude) SetEmployees(val OptCreatorIncludeEmployees) {
	s.Employees = val
}

// SetVisitors sets the value of Visitors.
func (s *CreatorInclude) SetVisitors(val OptCreatorIncludeVisitors) {
	s.Visitors = val
}

// SetEnvironments sets the value of Environments.
func (s *CreatorInclude) SetEnvironments(val OptCreatorIncludeEnvironments) {
	s.Environments = val
}

// SetAPIKeys sets the value of APIKeys.
func (s *CreatorInclude) SetAPIKeys(val OptCreatorIncludeAPIKeys) {
	s.APIKeys = val
}

// Included creators that are Cycle API Keys, keyed by ID.
type CreatorIncludeAPIKeys map[string]ApiKeyCreator

func (s *CreatorIncludeAPIKeys) init() CreatorIncludeAPIKeys {
	m := *s
	if m == nil {
		m = map[string]ApiKeyCreator{}
		*s = m
	}
	return m
}

// Included creators that are public accounts, keyed by ID.
type CreatorIncludeAccounts map[string]PublicAccount

func (s *CreatorIncludeAccounts) init() CreatorIncludeAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// Included creators that are employees of Cycle, keyed by ID.
type CreatorIncludeEmployees map[string]PublicAccount

func (s *CreatorIncludeEmployees) init() CreatorIncludeEmployees {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// Included creators that are Cycle environments (usually automatically created resources), keyed by
// ID.
type CreatorIncludeEnvironments map[string]Environment

func (s *CreatorIncludeEnvironments) init() CreatorIncludeEnvironments {
	m := *s
	if m == nil {
		m = map[string]Environment{}
		*s = m
	}
	return m
}

// Included creators that are not Cycle accounts, keyed by ID.
type CreatorIncludeVisitors map[string]PublicAccount

func (s *CreatorIncludeVisitors) init() CreatorIncludeVisitors {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// The creator scope is embedded in resource objects to describe who created them.
// Ref: #/components/schemas/CreatorScope
type CreatorScope struct {
	ID   ID               `json:"id"`
	Type CreatorScopeType `json:"type"`
}

// GetID returns the value of ID.
func (s *CreatorScope) GetID() ID {
	return s.ID
}

// GetType returns the value of Type.
func (s *CreatorScope) GetType() CreatorScopeType {
	return s.Type
}

// SetID sets the value of ID.
func (s *CreatorScope) SetID(val ID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *CreatorScope) SetType(val CreatorScopeType) {
	s.Type = val
}

type CreatorScopeType string

const (
	CreatorScopeTypeAccount          CreatorScopeType = "account"
	CreatorScopeTypeEnvironment      CreatorScopeType = "environment"
	CreatorScopeTypePlatform         CreatorScopeType = "platform"
	CreatorScopeTypePlatformPipeline CreatorScopeType = "platform-pipeline"
	CreatorScopeTypeEmployee         CreatorScopeType = "employee"
	CreatorScopeTypeAPIKey           CreatorScopeType = "api-key"
	CreatorScopeTypeVisitor          CreatorScopeType = "visitor"
)

// AllValues returns all CreatorScopeType values.
func (CreatorScopeType) AllValues() []CreatorScopeType {
	return []CreatorScopeType{
		CreatorScopeTypeAccount,
		CreatorScopeTypeEnvironment,
		CreatorScopeTypePlatform,
		CreatorScopeTypePlatformPipeline,
		CreatorScopeTypeEmployee,
		CreatorScopeTypeAPIKey,
		CreatorScopeTypeVisitor,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatorScopeType) MarshalText() ([]byte, error) {
	switch s {
	case CreatorScopeTypeAccount:
		return []byte(s), nil
	case CreatorScopeTypeEnvironment:
		return []byte(s), nil
	case CreatorScopeTypePlatform:
		return []byte(s), nil
	case CreatorScopeTypePlatformPipeline:
		return []byte(s), nil
	case CreatorScopeTypeEmployee:
		return []byte(s), nil
	case CreatorScopeTypeAPIKey:
		return []byte(s), nil
	case CreatorScopeTypeVisitor:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatorScopeType) UnmarshalText(data []byte) error {
	switch CreatorScopeType(data) {
	case CreatorScopeTypeAccount:
		*s = CreatorScopeTypeAccount
		return nil
	case CreatorScopeTypeEnvironment:
		*s = CreatorScopeTypeEnvironment
		return nil
	case CreatorScopeTypePlatform:
		*s = CreatorScopeTypePlatform
		return nil
	case CreatorScopeTypePlatformPipeline:
		*s = CreatorScopeTypePlatformPipeline
		return nil
	case CreatorScopeTypeEmployee:
		*s = CreatorScopeTypeEmployee
		return nil
	case CreatorScopeTypeAPIKey:
		*s = CreatorScopeTypeAPIKey
		return nil
	case CreatorScopeTypeVisitor:
		*s = CreatorScopeTypeVisitor
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CredentialsHTTP
type CredentialsHTTP struct {
	// Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
	Credentials CredentialsHTTPCredentials `json:"credentials"`
}

// GetCredentials returns the value of Credentials.
func (s *CredentialsHTTP) GetCredentials() CredentialsHTTPCredentials {
	return s.Credentials
}

// SetCredentials sets the value of Credentials.
func (s *CredentialsHTTP) SetCredentials(val CredentialsHTTPCredentials) {
	s.Credentials = val
}

// Authentication credentails for the Dockerfile image source type when authenticating over HTTP.
type CredentialsHTTPCredentials struct {
	// For authentication, the username.
	Username string `json:"username"`
	// For authentication, the password.
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *CredentialsHTTPCredentials) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *CredentialsHTTPCredentials) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *CredentialsHTTPCredentials) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *CredentialsHTTPCredentials) SetPassword(val string) {
	s.Password = val
}

type CredentialsHTTPType string

const (
	CredentialsHTTPTypeHTTP CredentialsHTTPType = "http"
)

// AllValues returns all CredentialsHTTPType values.
func (CredentialsHTTPType) AllValues() []CredentialsHTTPType {
	return []CredentialsHTTPType{
		CredentialsHTTPTypeHTTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CredentialsHTTPType) MarshalText() ([]byte, error) {
	switch s {
	case CredentialsHTTPTypeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CredentialsHTTPType) UnmarshalText(data []byte) error {
	switch CredentialsHTTPType(data) {
	case CredentialsHTTPTypeHTTP:
		*s = CredentialsHTTPTypeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CredentialsSSH
type CredentialsSSH struct {
	// Authentication credentials for the Dockerfile image source type when authenticating with SSH.
	Credentials CredentialsSSHCredentials `json:"credentials"`
}

// GetCredentials returns the value of Credentials.
func (s *CredentialsSSH) GetCredentials() CredentialsSSHCredentials {
	return s.Credentials
}

// SetCredentials sets the value of Credentials.
func (s *CredentialsSSH) SetCredentials(val CredentialsSSHCredentials) {
	s.Credentials = val
}

// Authentication credentials for the Dockerfile image source type when authenticating with SSH.
type CredentialsSSHCredentials struct {
	// The username for the repo service, that is used to authenticate an ssh key.
	Username string `json:"username"`
	// The passphrase used for the key.
	Passphrase string `json:"passphrase"`
	// A pem encoded private key.
	PrivateKey string `json:"private_key"`
}

// GetUsername returns the value of Username.
func (s *CredentialsSSHCredentials) GetUsername() string {
	return s.Username
}

// GetPassphrase returns the value of Passphrase.
func (s *CredentialsSSHCredentials) GetPassphrase() string {
	return s.Passphrase
}

// GetPrivateKey returns the value of PrivateKey.
func (s *CredentialsSSHCredentials) GetPrivateKey() string {
	return s.PrivateKey
}

// SetUsername sets the value of Username.
func (s *CredentialsSSHCredentials) SetUsername(val string) {
	s.Username = val
}

// SetPassphrase sets the value of Passphrase.
func (s *CredentialsSSHCredentials) SetPassphrase(val string) {
	s.Passphrase = val
}

// SetPrivateKey sets the value of PrivateKey.
func (s *CredentialsSSHCredentials) SetPrivateKey(val string) {
	s.PrivateKey = val
}

type CredentialsSSHType string

const (
	CredentialsSSHTypeSSH CredentialsSSHType = "ssh"
)

// AllValues returns all CredentialsSSHType values.
func (CredentialsSSHType) AllValues() []CredentialsSSHType {
	return []CredentialsSSHType{
		CredentialsSSHTypeSSH,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CredentialsSSHType) MarshalText() ([]byte, error) {
	switch s {
	case CredentialsSSHTypeSSH:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CredentialsSSHType) UnmarshalText(data []byte) error {
	switch CredentialsSSHType(data) {
	case CredentialsSSHTypeSSH:
		*s = CredentialsSSHTypeSSH
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information about a billing credit.
// Ref: #/components/schemas/Credit
type Credit struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// Some extra information about the billing credit.
	Description string `json:"description"`
	// The account the credit was issued to.
	AccountID string `json:"account_id"`
	// The amount of credit.
	Amount int `json:"amount"`
	// The amount of the credit that remains after being applied to invoices.
	AmountRemaining int `json:"amount_remaining"`
	// Information on when the billing credit expires.
	Expires NilCreditExpires `json:"expires"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events CreditEvents `json:"events"`
	State  CreditState  `json:"state"`
}

// GetID returns the value of ID.
func (s *Credit) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Credit) GetHubID() HubID {
	return s.HubID
}

// GetDescription returns the value of Description.
func (s *Credit) GetDescription() string {
	return s.Description
}

// GetAccountID returns the value of AccountID.
func (s *Credit) GetAccountID() string {
	return s.AccountID
}

// GetAmount returns the value of Amount.
func (s *Credit) GetAmount() int {
	return s.Amount
}

// GetAmountRemaining returns the value of AmountRemaining.
func (s *Credit) GetAmountRemaining() int {
	return s.AmountRemaining
}

// GetExpires returns the value of Expires.
func (s *Credit) GetExpires() NilCreditExpires {
	return s.Expires
}

// GetEvents returns the value of Events.
func (s *Credit) GetEvents() CreditEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Credit) GetState() CreditState {
	return s.State
}

// SetID sets the value of ID.
func (s *Credit) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Credit) SetHubID(val HubID) {
	s.HubID = val
}

// SetDescription sets the value of Description.
func (s *Credit) SetDescription(val string) {
	s.Description = val
}

// SetAccountID sets the value of AccountID.
func (s *Credit) SetAccountID(val string) {
	s.AccountID = val
}

// SetAmount sets the value of Amount.
func (s *Credit) SetAmount(val int) {
	s.Amount = val
}

// SetAmountRemaining sets the value of AmountRemaining.
func (s *Credit) SetAmountRemaining(val int) {
	s.AmountRemaining = val
}

// SetExpires sets the value of Expires.
func (s *Credit) SetExpires(val NilCreditExpires) {
	s.Expires = val
}

// SetEvents sets the value of Events.
func (s *Credit) SetEvents(val CreditEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Credit) SetState(val CreditState) {
	s.State = val
}

// Information about a credit card.
// Ref: #/components/schemas/CreditCard
type CreditCard struct {
	// A name associated with the credit cards usage.
	Name string `json:"name"`
	// The brand of card - ex VISA.
	Brand      string                  `json:"brand"`
	Expiration BillingMethodExpiration `json:"expiration"`
	// The last 4 digits of the card.
	Last4 string `json:"last_4"`
}

// GetName returns the value of Name.
func (s *CreditCard) GetName() string {
	return s.Name
}

// GetBrand returns the value of Brand.
func (s *CreditCard) GetBrand() string {
	return s.Brand
}

// GetExpiration returns the value of Expiration.
func (s *CreditCard) GetExpiration() BillingMethodExpiration {
	return s.Expiration
}

// GetLast4 returns the value of Last4.
func (s *CreditCard) GetLast4() string {
	return s.Last4
}

// SetName sets the value of Name.
func (s *CreditCard) SetName(val string) {
	s.Name = val
}

// SetBrand sets the value of Brand.
func (s *CreditCard) SetBrand(val string) {
	s.Brand = val
}

// SetExpiration sets the value of Expiration.
func (s *CreditCard) SetExpiration(val BillingMethodExpiration) {
	s.Expiration = val
}

// SetLast4 sets the value of Last4.
func (s *CreditCard) SetLast4(val string) {
	s.Last4 = val
}

// A collection of timestamps for each event in the billing order's lifetime.
type CreditEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *CreditEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreditEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *CreditEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *CreditEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreditEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *CreditEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information on when the billing credit expires.
type CreditExpires struct {
	Date OptDateTime `json:"date"`
}

// GetDate returns the value of Date.
func (s *CreditExpires) GetDate() OptDateTime {
	return s.Date
}

// SetDate sets the value of Date.
func (s *CreditExpires) SetDate(val OptDateTime) {
	s.Date = val
}

// Merged schema.
type CreditState struct {
	// The current state of the credit.
	Current CreditStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptCreditStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *CreditState) GetCurrent() CreditStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *CreditState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *CreditState) GetError() OptCreditStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *CreditState) SetCurrent(val CreditStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *CreditState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *CreditState) SetError(val OptCreditStateError) {
	s.Error = val
}

// The current state of the credit.
type CreditStateCurrent string

const (
	CreditStateCurrentNew     CreditStateCurrent = "new"
	CreditStateCurrentLive    CreditStateCurrent = "live"
	CreditStateCurrentExpired CreditStateCurrent = "expired"
)

// AllValues returns all CreditStateCurrent values.
func (CreditStateCurrent) AllValues() []CreditStateCurrent {
	return []CreditStateCurrent{
		CreditStateCurrentNew,
		CreditStateCurrentLive,
		CreditStateCurrentExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreditStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case CreditStateCurrentNew:
		return []byte(s), nil
	case CreditStateCurrentLive:
		return []byte(s), nil
	case CreditStateCurrentExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreditStateCurrent) UnmarshalText(data []byte) error {
	switch CreditStateCurrent(data) {
	case CreditStateCurrentNew:
		*s = CreditStateCurrentNew
		return nil
	case CreditStateCurrentLive:
		*s = CreditStateCurrentLive
		return nil
	case CreditStateCurrentExpired:
		*s = CreditStateCurrentExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type CreditStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *CreditStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *CreditStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *CreditStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *CreditStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An image origin that references an image source on Cycle.
// This origin will never be embedded in an image source. It is for use in stacks, describing an
// image which is already a part of an image source on Cycle.
// Ref: #/components/schemas/CycleSourceOrigin
type CycleSourceOrigin struct {
	Details CycleSourceOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *CycleSourceOrigin) GetDetails() CycleSourceOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *CycleSourceOrigin) SetDetails(val CycleSourceOriginDetails) {
	s.Details = val
}

type CycleSourceOriginDetails struct {
	SourceID ID `json:"source_id"`
}

// GetSourceID returns the value of SourceID.
func (s *CycleSourceOriginDetails) GetSourceID() ID {
	return s.SourceID
}

// SetSourceID sets the value of SourceID.
func (s *CycleSourceOriginDetails) SetSourceID(val ID) {
	s.SourceID = val
}

type CycleSourceOriginType string

const (
	CycleSourceOriginTypeCycleSource CycleSourceOriginType = "cycle-source"
)

// AllValues returns all CycleSourceOriginType values.
func (CycleSourceOriginType) AllValues() []CycleSourceOriginType {
	return []CycleSourceOriginType{
		CycleSourceOriginTypeCycleSource,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CycleSourceOriginType) MarshalText() ([]byte, error) {
	switch s {
	case CycleSourceOriginTypeCycleSource:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CycleSourceOriginType) UnmarshalText(data []byte) error {
	switch CycleSourceOriginType(data) {
	case CycleSourceOriginTypeCycleSource:
		*s = CycleSourceOriginTypeCycleSource
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An image origin where the image is pushed directly to the factory, bypassing the need for a
// registry or external source.
// In order to utilize this image origin type, a tar file of an OCI compliant image will need to be
// generated and pushed directly to the factory. The authentication token is generated when this
// image is created, and expires at the provided time.
// Once you have a token, it can be uploaded as multipart form data under the key `file.tar`,
// directly to the factory at `https://factory.cycle.io:9414/v1/images/<IMAGE ID>/upload?hub-id=<HUB
// ID>&token=<TOKEN>`.
// Ref: #/components/schemas/CycleUploadOrigin
type CycleUploadOrigin struct {
	Details OptCycleUploadOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *CycleUploadOrigin) GetDetails() OptCycleUploadOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *CycleUploadOrigin) SetDetails(val OptCycleUploadOriginDetails) {
	s.Details = val
}

type CycleUploadOriginDetails struct {
	Expires DateTime `json:"expires"`
	// The token that is required by the factory to accept an upload for this image.
	Token string `json:"token"`
}

// GetExpires returns the value of Expires.
func (s *CycleUploadOriginDetails) GetExpires() DateTime {
	return s.Expires
}

// GetToken returns the value of Token.
func (s *CycleUploadOriginDetails) GetToken() string {
	return s.Token
}

// SetExpires sets the value of Expires.
func (s *CycleUploadOriginDetails) SetExpires(val DateTime) {
	s.Expires = val
}

// SetToken sets the value of Token.
func (s *CycleUploadOriginDetails) SetToken(val string) {
	s.Token = val
}

type CycleUploadOriginType string

const (
	CycleUploadOriginTypeCycleUpload CycleUploadOriginType = "cycle-upload"
)

// AllValues returns all CycleUploadOriginType values.
func (CycleUploadOriginType) AllValues() []CycleUploadOriginType {
	return []CycleUploadOriginType{
		CycleUploadOriginTypeCycleUpload,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CycleUploadOriginType) MarshalText() ([]byte, error) {
	switch s {
	case CycleUploadOriginTypeCycleUpload:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CycleUploadOriginType) UnmarshalText(data []byte) error {
	switch CycleUploadOriginType(data) {
	case CycleUploadOriginTypeCycleUpload:
		*s = CycleUploadOriginTypeCycleUpload
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DateTime time.Time

// DefaultErrorStatusCode wraps ErrorEnvelope with StatusCode.
type DefaultErrorStatusCode struct {
	StatusCode int
	Response   ErrorEnvelope
}

// GetStatusCode returns the value of StatusCode.
func (s *DefaultErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *DefaultErrorStatusCode) GetResponse() ErrorEnvelope {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *DefaultErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *DefaultErrorStatusCode) SetResponse(val ErrorEnvelope) {
	s.Response = val
}

// Ref: #/components/schemas/DefaultLbType
type DefaultLbType struct {
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 bool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6    bool                    `json:"ipv6"`
	Details NilDefaultLbTypeDetails `json:"details"`
}

// GetIpv4 returns the value of Ipv4.
func (s *DefaultLbType) GetIpv4() bool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *DefaultLbType) GetIpv6() bool {
	return s.Ipv6
}

// GetDetails returns the value of Details.
func (s *DefaultLbType) GetDetails() NilDefaultLbTypeDetails {
	return s.Details
}

// SetIpv4 sets the value of Ipv4.
func (s *DefaultLbType) SetIpv4(val bool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *DefaultLbType) SetIpv6(val bool) {
	s.Ipv6 = val
}

// SetDetails sets the value of Details.
func (s *DefaultLbType) SetDetails(val NilDefaultLbTypeDetails) {
	s.Details = val
}

type DefaultLbTypeDetails struct {
	OneOf DefaultLbTypeDetailsSum
}

// GetOneOf returns the value of OneOf.
func (s *DefaultLbTypeDetails) GetOneOf() DefaultLbTypeDetailsSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *DefaultLbTypeDetails) SetOneOf(val DefaultLbTypeDetailsSum) {
	s.OneOf = val
}

// DefaultLbTypeDetailsSum represents sum type.
type DefaultLbTypeDetailsSum struct {
	Type          DefaultLbTypeDetailsSumType // switch on this field
	HaProxyConfig HaProxyConfig
	V1LbConfig    V1LbConfig
}

// DefaultLbTypeDetailsSumType is oneOf type of DefaultLbTypeDetailsSum.
type DefaultLbTypeDetailsSumType string

// Possible values for DefaultLbTypeDetailsSumType.
const (
	HaProxyConfigDefaultLbTypeDetailsSum DefaultLbTypeDetailsSumType = "HaProxyConfig"
	V1LbConfigDefaultLbTypeDetailsSum    DefaultLbTypeDetailsSumType = "V1LbConfig"
)

// IsHaProxyConfig reports whether DefaultLbTypeDetailsSum is HaProxyConfig.
func (s DefaultLbTypeDetailsSum) IsHaProxyConfig() bool {
	return s.Type == HaProxyConfigDefaultLbTypeDetailsSum
}

// IsV1LbConfig reports whether DefaultLbTypeDetailsSum is V1LbConfig.
func (s DefaultLbTypeDetailsSum) IsV1LbConfig() bool {
	return s.Type == V1LbConfigDefaultLbTypeDetailsSum
}

// SetHaProxyConfig sets DefaultLbTypeDetailsSum to HaProxyConfig.
func (s *DefaultLbTypeDetailsSum) SetHaProxyConfig(v HaProxyConfig) {
	s.Type = HaProxyConfigDefaultLbTypeDetailsSum
	s.HaProxyConfig = v
}

// GetHaProxyConfig returns HaProxyConfig and true boolean if DefaultLbTypeDetailsSum is HaProxyConfig.
func (s DefaultLbTypeDetailsSum) GetHaProxyConfig() (v HaProxyConfig, ok bool) {
	if !s.IsHaProxyConfig() {
		return v, false
	}
	return s.HaProxyConfig, true
}

// NewHaProxyConfigDefaultLbTypeDetailsSum returns new DefaultLbTypeDetailsSum from HaProxyConfig.
func NewHaProxyConfigDefaultLbTypeDetailsSum(v HaProxyConfig) DefaultLbTypeDetailsSum {
	var s DefaultLbTypeDetailsSum
	s.SetHaProxyConfig(v)
	return s
}

// SetV1LbConfig sets DefaultLbTypeDetailsSum to V1LbConfig.
func (s *DefaultLbTypeDetailsSum) SetV1LbConfig(v V1LbConfig) {
	s.Type = V1LbConfigDefaultLbTypeDetailsSum
	s.V1LbConfig = v
}

// GetV1LbConfig returns V1LbConfig and true boolean if DefaultLbTypeDetailsSum is V1LbConfig.
func (s DefaultLbTypeDetailsSum) GetV1LbConfig() (v V1LbConfig, ok bool) {
	if !s.IsV1LbConfig() {
		return v, false
	}
	return s.V1LbConfig, true
}

// NewV1LbConfigDefaultLbTypeDetailsSum returns new DefaultLbTypeDetailsSum from V1LbConfig.
func NewV1LbConfigDefaultLbTypeDetailsSum(v V1LbConfig) DefaultLbTypeDetailsSum {
	var s DefaultLbTypeDetailsSum
	s.SetV1LbConfig(v)
	return s
}

type DefaultLbTypeType string

const (
	DefaultLbTypeTypeDefault DefaultLbTypeType = "default"
)

// AllValues returns all DefaultLbTypeType values.
func (DefaultLbTypeType) AllValues() []DefaultLbTypeType {
	return []DefaultLbTypeType{
		DefaultLbTypeTypeDefault,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DefaultLbTypeType) MarshalText() ([]byte, error) {
	switch s {
	case DefaultLbTypeTypeDefault:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DefaultLbTypeType) UnmarshalText(data []byte) error {
	switch DefaultLbTypeType(data) {
	case DefaultLbTypeTypeDefault:
		*s = DefaultLbTypeTypeDefault
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DeleteAPIKeyOK struct {
	Data ApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteAPIKeyOK) GetData() ApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteAPIKeyOK) SetData(val ApiKey) {
	s.Data = val
}

type DeleteAccountAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteAccountAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteAccountAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteAutoScaleGroupAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteAutoScaleGroupAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteAutoScaleGroupAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteBillingMethodAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteBillingMethodAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteBillingMethodAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteContainerAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteContainerAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteContainerAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteContainerBackupAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteContainerBackupAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteContainerBackupAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteContainerInstancesAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteContainerInstancesAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteContainerInstancesAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteDNSZoneAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteDNSZoneAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteDNSZoneAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteDNSZoneRecordAccepted struct {
	Data OptJobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteDNSZoneRecordAccepted) GetData() OptJobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteDNSZoneRecordAccepted) SetData(val OptJobDescriptor) {
	s.Data = val
}

type DeleteEnvironmentAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteEnvironmentAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteEnvironmentAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteHubAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteHubAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteHubAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteHubInviteOK struct {
	Data HubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteHubInviteOK) GetData() HubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteHubInviteOK) SetData(val HubMembership) {
	s.Data = val
}

type DeleteHubMemberAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteHubMemberAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteHubMemberAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteIPPoolAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteIPPoolAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteIPPoolAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteImageOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteImageOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteImageOK) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteImageSourceAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteImageSourceAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteImageSourceAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteInstanceAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteInstanceAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteInstanceAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteIntegrationAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteIntegrationAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteIntegrationAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteNetworkAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteNetworkAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteNetworkAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeletePipelineOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeletePipelineOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeletePipelineOK) SetData(val JobDescriptor) {
	s.Data = val
}

type DeletePipelineTriggerKeyAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeletePipelineTriggerKeyAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeletePipelineTriggerKeyAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteRoleAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteRoleAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteRoleAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteScopedVariableAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteScopedVariableAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteScopedVariableAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteServerOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteServerOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteServerOK) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteServerOptions map[string]string

func (s *DeleteServerOptions) init() DeleteServerOptions {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type DeleteStackAccepted struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteStackAccepted) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteStackAccepted) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteStackBuildOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteStackBuildOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteStackBuildOK) SetData(val JobDescriptor) {
	s.Data = val
}

type DeleteVPNUserOK struct {
	Data string `json:"data"`
}

// GetData returns the value of Data.
func (s *DeleteVPNUserOK) GetData() string {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeleteVPNUserOK) SetData(val string) {
	s.Data = val
}

// Ref: #/components/schemas/DeployStackBuildAction
type DeployStackBuildAction struct {
	// Additional information needed for the job.
	Contents DeployStackBuildActionContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *DeployStackBuildAction) GetContents() DeployStackBuildActionContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *DeployStackBuildAction) SetContents(val DeployStackBuildActionContents) {
	s.Contents = val
}

// The action the job takes.
type DeployStackBuildActionAction string

const (
	DeployStackBuildActionActionDeploy DeployStackBuildActionAction = "deploy"
)

// AllValues returns all DeployStackBuildActionAction values.
func (DeployStackBuildActionAction) AllValues() []DeployStackBuildActionAction {
	return []DeployStackBuildActionAction{
		DeployStackBuildActionActionDeploy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeployStackBuildActionAction) MarshalText() ([]byte, error) {
	switch s {
	case DeployStackBuildActionActionDeploy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeployStackBuildActionAction) UnmarshalText(data []byte) error {
	switch DeployStackBuildActionAction(data) {
	case DeployStackBuildActionActionDeploy:
		*s = DeployStackBuildActionActionDeploy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed for the job.
type DeployStackBuildActionContents struct {
	// The ID for the environment this stack build will be deployed to.
	EnvironmentID string                                         `json:"environment_id"`
	Deployment    OptNilDeployStackBuildActionContentsDeployment `json:"deployment"`
	Update        OptNilDeployStackBuildActionContentsUpdate     `json:"update"`
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *DeployStackBuildActionContents) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetDeployment returns the value of Deployment.
func (s *DeployStackBuildActionContents) GetDeployment() OptNilDeployStackBuildActionContentsDeployment {
	return s.Deployment
}

// GetUpdate returns the value of Update.
func (s *DeployStackBuildActionContents) GetUpdate() OptNilDeployStackBuildActionContentsUpdate {
	return s.Update
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *DeployStackBuildActionContents) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetDeployment sets the value of Deployment.
func (s *DeployStackBuildActionContents) SetDeployment(val OptNilDeployStackBuildActionContentsDeployment) {
	s.Deployment = val
}

// SetUpdate sets the value of Update.
func (s *DeployStackBuildActionContents) SetUpdate(val OptNilDeployStackBuildActionContentsUpdate) {
	s.Update = val
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type DeployStackBuildActionContentsDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *DeployStackBuildActionContentsDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *DeployStackBuildActionContentsDeployment) SetVersion(val Version) {
	s.Version = val
}

// Optional update object used to specify specific params to update from the stack build.
type DeployStackBuildActionContentsUpdate struct {
	// A map of the container names to update within the environment.
	Containers DeployStackBuildActionContentsUpdateContainers `json:"containers"`
	// An object that describes configuration options for scoped variables on stack build.
	ScopedVariables NilDeployStackBuildActionContentsUpdateScopedVariables `json:"scoped_variables"`
}

// GetContainers returns the value of Containers.
func (s *DeployStackBuildActionContentsUpdate) GetContainers() DeployStackBuildActionContentsUpdateContainers {
	return s.Containers
}

// GetScopedVariables returns the value of ScopedVariables.
func (s *DeployStackBuildActionContentsUpdate) GetScopedVariables() NilDeployStackBuildActionContentsUpdateScopedVariables {
	return s.ScopedVariables
}

// SetContainers sets the value of Containers.
func (s *DeployStackBuildActionContentsUpdate) SetContainers(val DeployStackBuildActionContentsUpdateContainers) {
	s.Containers = val
}

// SetScopedVariables sets the value of ScopedVariables.
func (s *DeployStackBuildActionContentsUpdate) SetScopedVariables(val NilDeployStackBuildActionContentsUpdateScopedVariables) {
	s.ScopedVariables = val
}

// A map of the container names to update within the environment.
type DeployStackBuildActionContentsUpdateContainers map[string]StackDeployContainersObject

func (s *DeployStackBuildActionContentsUpdateContainers) init() DeployStackBuildActionContentsUpdateContainers {
	m := *s
	if m == nil {
		m = map[string]StackDeployContainersObject{}
		*s = m
	}
	return m
}

// An object that describes configuration options for scoped variables on stack build.
type DeployStackBuildActionContentsUpdateScopedVariables struct {
	// Add new scoped variables defined in the stack.
	AddNew bool `json:"add_new"`
	// Replace all scoped variables with those defined in the stack.
	ReplaceExisting bool `json:"replace_existing"`
}

// GetAddNew returns the value of AddNew.
func (s *DeployStackBuildActionContentsUpdateScopedVariables) GetAddNew() bool {
	return s.AddNew
}

// GetReplaceExisting returns the value of ReplaceExisting.
func (s *DeployStackBuildActionContentsUpdateScopedVariables) GetReplaceExisting() bool {
	return s.ReplaceExisting
}

// SetAddNew sets the value of AddNew.
func (s *DeployStackBuildActionContentsUpdateScopedVariables) SetAddNew(val bool) {
	s.AddNew = val
}

// SetReplaceExisting sets the value of ReplaceExisting.
func (s *DeployStackBuildActionContentsUpdateScopedVariables) SetReplaceExisting(val bool) {
	s.ReplaceExisting = val
}

// A deployed volume resource.
// Ref: #/components/schemas/DeployedVolume
type DeployedVolume struct {
	// The ID of the server the instance is deployed to.
	ServerID string `json:"server_id"`
	// The ID of the container the instance was created from.
	ContainerID string `json:"container_id"`
	// The ID for the volume withing the context of the container.
	ContainerVolumeID string `json:"container_volume_id"`
	// The ID for the container instance this volume is attached to.
	InstanceID string `json:"instance_id"`
	// A hash used as part of the identification mechanisms for the platform and API.
	Hash string `json:"hash"`
	// The path where the volume is mounted on the instnace filesystem.
	Path string `json:"path"`
	// Storage information for the volume.
	Storage DeployedVolumeStorage `json:"storage"`
}

// GetServerID returns the value of ServerID.
func (s *DeployedVolume) GetServerID() string {
	return s.ServerID
}

// GetContainerID returns the value of ContainerID.
func (s *DeployedVolume) GetContainerID() string {
	return s.ContainerID
}

// GetContainerVolumeID returns the value of ContainerVolumeID.
func (s *DeployedVolume) GetContainerVolumeID() string {
	return s.ContainerVolumeID
}

// GetInstanceID returns the value of InstanceID.
func (s *DeployedVolume) GetInstanceID() string {
	return s.InstanceID
}

// GetHash returns the value of Hash.
func (s *DeployedVolume) GetHash() string {
	return s.Hash
}

// GetPath returns the value of Path.
func (s *DeployedVolume) GetPath() string {
	return s.Path
}

// GetStorage returns the value of Storage.
func (s *DeployedVolume) GetStorage() DeployedVolumeStorage {
	return s.Storage
}

// SetServerID sets the value of ServerID.
func (s *DeployedVolume) SetServerID(val string) {
	s.ServerID = val
}

// SetContainerID sets the value of ContainerID.
func (s *DeployedVolume) SetContainerID(val string) {
	s.ContainerID = val
}

// SetContainerVolumeID sets the value of ContainerVolumeID.
func (s *DeployedVolume) SetContainerVolumeID(val string) {
	s.ContainerVolumeID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *DeployedVolume) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetHash sets the value of Hash.
func (s *DeployedVolume) SetHash(val string) {
	s.Hash = val
}

// SetPath sets the value of Path.
func (s *DeployedVolume) SetPath(val string) {
	s.Path = val
}

// SetStorage sets the value of Storage.
func (s *DeployedVolume) SetStorage(val DeployedVolumeStorage) {
	s.Storage = val
}

// Storage information for the volume.
type DeployedVolumeStorage struct {
	// The amount of volume storage used, in MB's.
	Used int `json:"used"`
	// The total amount of volume storage available, in MB's.
	Total int `json:"total"`
}

// GetUsed returns the value of Used.
func (s *DeployedVolumeStorage) GetUsed() int {
	return s.Used
}

// GetTotal returns the value of Total.
func (s *DeployedVolumeStorage) GetTotal() int {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *DeployedVolumeStorage) SetUsed(val int) {
	s.Used = val
}

// SetTotal sets the value of Total.
func (s *DeployedVolumeStorage) SetTotal(val int) {
	s.Total = val
}

// Information about supported container deployment strategies.
// Ref: #/components/schemas/DeploymentStrategy
type DeploymentStrategy struct {
	// The human-friendly name of the deployment strategy.
	Name string `json:"name"`
	// A boolean where true signifies a strategy is either not yet or no longer available.
	Disabled bool `json:"disabled"`
	// A description for the deployment strategy.
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *DeploymentStrategy) GetName() string {
	return s.Name
}

// GetDisabled returns the value of Disabled.
func (s *DeploymentStrategy) GetDisabled() bool {
	return s.Disabled
}

// GetDescription returns the value of Description.
func (s *DeploymentStrategy) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *DeploymentStrategy) SetName(val string) {
	s.Name = val
}

// SetDisabled sets the value of Disabled.
func (s *DeploymentStrategy) SetDisabled(val bool) {
	s.Disabled = val
}

// SetDescription sets the value of Description.
func (s *DeploymentStrategy) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/schemas/DeploymentStrategyName
type DeploymentStrategyName string

const (
	DeploymentStrategyNameResourceDensity  DeploymentStrategyName = "resource-density"
	DeploymentStrategyNameHighAvailability DeploymentStrategyName = "high-availability"
	DeploymentStrategyNameFirstAvailable   DeploymentStrategyName = "first-available"
	DeploymentStrategyNameNode             DeploymentStrategyName = "node"
	DeploymentStrategyNameEdge             DeploymentStrategyName = "edge"
	DeploymentStrategyNameManual           DeploymentStrategyName = "manual"
	DeploymentStrategyNameFunction         DeploymentStrategyName = "function"
)

// AllValues returns all DeploymentStrategyName values.
func (DeploymentStrategyName) AllValues() []DeploymentStrategyName {
	return []DeploymentStrategyName{
		DeploymentStrategyNameResourceDensity,
		DeploymentStrategyNameHighAvailability,
		DeploymentStrategyNameFirstAvailable,
		DeploymentStrategyNameNode,
		DeploymentStrategyNameEdge,
		DeploymentStrategyNameManual,
		DeploymentStrategyNameFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeploymentStrategyName) MarshalText() ([]byte, error) {
	switch s {
	case DeploymentStrategyNameResourceDensity:
		return []byte(s), nil
	case DeploymentStrategyNameHighAvailability:
		return []byte(s), nil
	case DeploymentStrategyNameFirstAvailable:
		return []byte(s), nil
	case DeploymentStrategyNameNode:
		return []byte(s), nil
	case DeploymentStrategyNameEdge:
		return []byte(s), nil
	case DeploymentStrategyNameManual:
		return []byte(s), nil
	case DeploymentStrategyNameFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeploymentStrategyName) UnmarshalText(data []byte) error {
	switch DeploymentStrategyName(data) {
	case DeploymentStrategyNameResourceDensity:
		*s = DeploymentStrategyNameResourceDensity
		return nil
	case DeploymentStrategyNameHighAvailability:
		*s = DeploymentStrategyNameHighAvailability
		return nil
	case DeploymentStrategyNameFirstAvailable:
		*s = DeploymentStrategyNameFirstAvailable
		return nil
	case DeploymentStrategyNameNode:
		*s = DeploymentStrategyNameNode
		return nil
	case DeploymentStrategyNameEdge:
		*s = DeploymentStrategyNameEdge
		return nil
	case DeploymentStrategyNameManual:
		*s = DeploymentStrategyNameManual
		return nil
	case DeploymentStrategyNameFunction:
		*s = DeploymentStrategyNameFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DirectImageSourceType
type DirectImageSourceType struct {
	Details  OptDirectImageSourceTypeDetails  `json:"details"`
	Override OptDirectImageSourceTypeOverride `json:"override"`
}

// GetDetails returns the value of Details.
func (s *DirectImageSourceType) GetDetails() OptDirectImageSourceTypeDetails {
	return s.Details
}

// GetOverride returns the value of Override.
func (s *DirectImageSourceType) GetOverride() OptDirectImageSourceTypeOverride {
	return s.Override
}

// SetDetails sets the value of Details.
func (s *DirectImageSourceType) SetDetails(val OptDirectImageSourceTypeDetails) {
	s.Details = val
}

// SetOverride sets the value of Override.
func (s *DirectImageSourceType) SetOverride(val OptDirectImageSourceTypeOverride) {
	s.Override = val
}

type DirectImageSourceTypeDetails struct {
	ID     string      `json:"id"`
	Origin ImageOrigin `json:"origin"`
}

// GetID returns the value of ID.
func (s *DirectImageSourceTypeDetails) GetID() string {
	return s.ID
}

// GetOrigin returns the value of Origin.
func (s *DirectImageSourceTypeDetails) GetOrigin() ImageOrigin {
	return s.Origin
}

// SetID sets the value of ID.
func (s *DirectImageSourceTypeDetails) SetID(val string) {
	s.ID = val
}

// SetOrigin sets the value of Origin.
func (s *DirectImageSourceTypeDetails) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

type DirectImageSourceTypeOverride struct {
	Target   OptString `json:"target"`
	TargzURL OptString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *DirectImageSourceTypeOverride) GetTarget() OptString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *DirectImageSourceTypeOverride) GetTargzURL() OptString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *DirectImageSourceTypeOverride) SetTarget(val OptString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *DirectImageSourceTypeOverride) SetTargzURL(val OptString) {
	s.TargzURL = val
}

type DirectImageSourceTypeType string

const (
	DirectImageSourceTypeTypeDirect DirectImageSourceTypeType = "direct"
)

// AllValues returns all DirectImageSourceTypeType values.
func (DirectImageSourceTypeType) AllValues() []DirectImageSourceTypeType {
	return []DirectImageSourceTypeType{
		DirectImageSourceTypeTypeDirect,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DirectImageSourceTypeType) MarshalText() ([]byte, error) {
	switch s {
	case DirectImageSourceTypeTypeDirect:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DirectImageSourceTypeType) UnmarshalText(data []byte) error {
	switch DirectImageSourceTypeType(data) {
	case DirectImageSourceTypeTypeDirect:
		*s = DirectImageSourceTypeTypeDirect
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DisableTwoFactorAuthOK struct {
	Data Account `json:"data"`
}

// GetData returns the value of Data.
func (s *DisableTwoFactorAuthOK) GetData() Account {
	return s.Data
}

// SetData sets the value of Data.
func (s *DisableTwoFactorAuthOK) SetData(val Account) {
	s.Data = val
}

type DisableTwoFactorAuthReq struct {
	// A valid existing two-factor auth token, for verification.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *DisableTwoFactorAuthReq) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *DisableTwoFactorAuthReq) SetToken(val string) {
	s.Token = val
}

// A DNS TLS certificate.
// Ref: #/components/schemas/DnsTlsCertificate
type DnsTlsCertificate struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A list of domains associated with the certificate.
	Domains []string `json:"domains"`
	// A collection of timestamps for each event in the certificate's lifetime.
	Events DnsTlsCertificateEvents `json:"events"`
	// The certificate bundle.
	Bundle string `json:"bundle"`
	// The private key for the certificate.
	PrivateKey string `json:"private_key"`
}

// GetID returns the value of ID.
func (s *DnsTlsCertificate) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *DnsTlsCertificate) GetHubID() HubID {
	return s.HubID
}

// GetDomains returns the value of Domains.
func (s *DnsTlsCertificate) GetDomains() []string {
	return s.Domains
}

// GetEvents returns the value of Events.
func (s *DnsTlsCertificate) GetEvents() DnsTlsCertificateEvents {
	return s.Events
}

// GetBundle returns the value of Bundle.
func (s *DnsTlsCertificate) GetBundle() string {
	return s.Bundle
}

// GetPrivateKey returns the value of PrivateKey.
func (s *DnsTlsCertificate) GetPrivateKey() string {
	return s.PrivateKey
}

// SetID sets the value of ID.
func (s *DnsTlsCertificate) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *DnsTlsCertificate) SetHubID(val HubID) {
	s.HubID = val
}

// SetDomains sets the value of Domains.
func (s *DnsTlsCertificate) SetDomains(val []string) {
	s.Domains = val
}

// SetEvents sets the value of Events.
func (s *DnsTlsCertificate) SetEvents(val DnsTlsCertificateEvents) {
	s.Events = val
}

// SetBundle sets the value of Bundle.
func (s *DnsTlsCertificate) SetBundle(val string) {
	s.Bundle = val
}

// SetPrivateKey sets the value of PrivateKey.
func (s *DnsTlsCertificate) SetPrivateKey(val string) {
	s.PrivateKey = val
}

// A collection of timestamps for each event in the certificate's lifetime.
type DnsTlsCertificateEvents struct {
	Created   OptDateTime `json:"created"`
	Updated   OptDateTime `json:"updated"`
	Deleted   OptDateTime `json:"deleted"`
	Generated OptDateTime `json:"generated"`
}

// GetCreated returns the value of Created.
func (s *DnsTlsCertificateEvents) GetCreated() OptDateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *DnsTlsCertificateEvents) GetUpdated() OptDateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *DnsTlsCertificateEvents) GetDeleted() OptDateTime {
	return s.Deleted
}

// GetGenerated returns the value of Generated.
func (s *DnsTlsCertificateEvents) GetGenerated() OptDateTime {
	return s.Generated
}

// SetCreated sets the value of Created.
func (s *DnsTlsCertificateEvents) SetCreated(val OptDateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *DnsTlsCertificateEvents) SetUpdated(val OptDateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *DnsTlsCertificateEvents) SetDeleted(val OptDateTime) {
	s.Deleted = val
}

// SetGenerated sets the value of Generated.
func (s *DnsTlsCertificateEvents) SetGenerated(val OptDateTime) {
	s.Generated = val
}

// An image origin where the image is built from a Dockerfile located in a git repository.
// Ref: #/components/schemas/DockerFileOrigin
type DockerFileOrigin struct {
	Details DockerFileOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *DockerFileOrigin) GetDetails() DockerFileOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *DockerFileOrigin) SetDetails(val DockerFileOriginDetails) {
	s.Details = val
}

type DockerFileOriginDetails struct {
	Existing OptNilDockerFileOriginDetailsExisting `json:"existing"`
	Repo     OptNilDockerFileOriginDetailsRepo     `json:"repo"`
	// An endpoint that serves the tar file.
	TargzURL OptNilString `json:"targz_url"`
	// The path to the directory to use as the context when building the image.
	ContextDir OptNilString `json:"context_dir"`
	// The path to the Dockerfile to be used for buiding the image.
	BuildFile   OptNilString                                      `json:"build_file"`
	Credentials OptNilDockerFileOriginDetailsCredentialsItemArray `json:"credentials"`
}

// GetExisting returns the value of Existing.
func (s *DockerFileOriginDetails) GetExisting() OptNilDockerFileOriginDetailsExisting {
	return s.Existing
}

// GetRepo returns the value of Repo.
func (s *DockerFileOriginDetails) GetRepo() OptNilDockerFileOriginDetailsRepo {
	return s.Repo
}

// GetTargzURL returns the value of TargzURL.
func (s *DockerFileOriginDetails) GetTargzURL() OptNilString {
	return s.TargzURL
}

// GetContextDir returns the value of ContextDir.
func (s *DockerFileOriginDetails) GetContextDir() OptNilString {
	return s.ContextDir
}

// GetBuildFile returns the value of BuildFile.
func (s *DockerFileOriginDetails) GetBuildFile() OptNilString {
	return s.BuildFile
}

// GetCredentials returns the value of Credentials.
func (s *DockerFileOriginDetails) GetCredentials() OptNilDockerFileOriginDetailsCredentialsItemArray {
	return s.Credentials
}

// SetExisting sets the value of Existing.
func (s *DockerFileOriginDetails) SetExisting(val OptNilDockerFileOriginDetailsExisting) {
	s.Existing = val
}

// SetRepo sets the value of Repo.
func (s *DockerFileOriginDetails) SetRepo(val OptNilDockerFileOriginDetailsRepo) {
	s.Repo = val
}

// SetTargzURL sets the value of TargzURL.
func (s *DockerFileOriginDetails) SetTargzURL(val OptNilString) {
	s.TargzURL = val
}

// SetContextDir sets the value of ContextDir.
func (s *DockerFileOriginDetails) SetContextDir(val OptNilString) {
	s.ContextDir = val
}

// SetBuildFile sets the value of BuildFile.
func (s *DockerFileOriginDetails) SetBuildFile(val OptNilString) {
	s.BuildFile = val
}

// SetCredentials sets the value of Credentials.
func (s *DockerFileOriginDetails) SetCredentials(val OptNilDockerFileOriginDetailsCredentialsItemArray) {
	s.Credentials = val
}

// Credentials object used for authentication of indirect resources such as private parent images.
type DockerFileOriginDetailsCredentialsItem struct {
	// The url the resource is located at.
	URL OptString `json:"url"`
	// A username for authentication.
	Username OptString `json:"username"`
	// A token for authentication.
	Token OptString `json:"token"`
}

// GetURL returns the value of URL.
func (s *DockerFileOriginDetailsCredentialsItem) GetURL() OptString {
	return s.URL
}

// GetUsername returns the value of Username.
func (s *DockerFileOriginDetailsCredentialsItem) GetUsername() OptString {
	return s.Username
}

// GetToken returns the value of Token.
func (s *DockerFileOriginDetailsCredentialsItem) GetToken() OptString {
	return s.Token
}

// SetURL sets the value of URL.
func (s *DockerFileOriginDetailsCredentialsItem) SetURL(val OptString) {
	s.URL = val
}

// SetUsername sets the value of Username.
func (s *DockerFileOriginDetailsCredentialsItem) SetUsername(val OptString) {
	s.Username = val
}

// SetToken sets the value of Token.
func (s *DockerFileOriginDetailsCredentialsItem) SetToken(val OptString) {
	s.Token = val
}

// In a stack, specifies an image source ID from which Cycle will derive any values not specified in
// the stack file. This is useful for avoiding direct placement of credentials in a stack file, for
// example.
type DockerFileOriginDetailsExisting struct {
	SourceID OptID `json:"source_id"`
}

// GetSourceID returns the value of SourceID.
func (s *DockerFileOriginDetailsExisting) GetSourceID() OptID {
	return s.SourceID
}

// SetSourceID sets the value of SourceID.
func (s *DockerFileOriginDetailsExisting) SetSourceID(val OptID) {
	s.SourceID = val
}

// Information about the repostiory.
type DockerFileOriginDetailsRepo struct {
	// The URL of the repository.
	URL string `json:"url"`
	// An optional branch arguement.  Default value is `master`.
	Branch OptString `json:"branch"`
	// Authentication information for the repository.
	Auth OptNilDockerFileOriginDetailsRepoAuth `json:"auth"`
	// Repository reference information.
	Ref OptNilDockerFileOriginDetailsRepoRef `json:"ref"`
}

// GetURL returns the value of URL.
func (s *DockerFileOriginDetailsRepo) GetURL() string {
	return s.URL
}

// GetBranch returns the value of Branch.
func (s *DockerFileOriginDetailsRepo) GetBranch() OptString {
	return s.Branch
}

// GetAuth returns the value of Auth.
func (s *DockerFileOriginDetailsRepo) GetAuth() OptNilDockerFileOriginDetailsRepoAuth {
	return s.Auth
}

// GetRef returns the value of Ref.
func (s *DockerFileOriginDetailsRepo) GetRef() OptNilDockerFileOriginDetailsRepoRef {
	return s.Ref
}

// SetURL sets the value of URL.
func (s *DockerFileOriginDetailsRepo) SetURL(val string) {
	s.URL = val
}

// SetBranch sets the value of Branch.
func (s *DockerFileOriginDetailsRepo) SetBranch(val OptString) {
	s.Branch = val
}

// SetAuth sets the value of Auth.
func (s *DockerFileOriginDetailsRepo) SetAuth(val OptNilDockerFileOriginDetailsRepoAuth) {
	s.Auth = val
}

// SetRef sets the value of Ref.
func (s *DockerFileOriginDetailsRepo) SetRef(val OptNilDockerFileOriginDetailsRepoRef) {
	s.Ref = val
}

// Authentication information for the repository.
type DockerFileOriginDetailsRepoAuth struct {
	OneOf DockerFileOriginDetailsRepoAuthSum
}

// GetOneOf returns the value of OneOf.
func (s *DockerFileOriginDetailsRepoAuth) GetOneOf() DockerFileOriginDetailsRepoAuthSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *DockerFileOriginDetailsRepoAuth) SetOneOf(val DockerFileOriginDetailsRepoAuthSum) {
	s.OneOf = val
}

// DockerFileOriginDetailsRepoAuthSum represents sum type.
type DockerFileOriginDetailsRepoAuthSum struct {
	Type            DockerFileOriginDetailsRepoAuthSumType // switch on this field
	CredentialsHTTP CredentialsHTTP
	CredentialsSSH  CredentialsSSH
}

// DockerFileOriginDetailsRepoAuthSumType is oneOf type of DockerFileOriginDetailsRepoAuthSum.
type DockerFileOriginDetailsRepoAuthSumType string

// Possible values for DockerFileOriginDetailsRepoAuthSumType.
const (
	CredentialsHTTPDockerFileOriginDetailsRepoAuthSum DockerFileOriginDetailsRepoAuthSumType = "http"
	CredentialsSSHDockerFileOriginDetailsRepoAuthSum  DockerFileOriginDetailsRepoAuthSumType = "ssh"
)

// IsCredentialsHTTP reports whether DockerFileOriginDetailsRepoAuthSum is CredentialsHTTP.
func (s DockerFileOriginDetailsRepoAuthSum) IsCredentialsHTTP() bool {
	return s.Type == CredentialsHTTPDockerFileOriginDetailsRepoAuthSum
}

// IsCredentialsSSH reports whether DockerFileOriginDetailsRepoAuthSum is CredentialsSSH.
func (s DockerFileOriginDetailsRepoAuthSum) IsCredentialsSSH() bool {
	return s.Type == CredentialsSSHDockerFileOriginDetailsRepoAuthSum
}

// SetCredentialsHTTP sets DockerFileOriginDetailsRepoAuthSum to CredentialsHTTP.
func (s *DockerFileOriginDetailsRepoAuthSum) SetCredentialsHTTP(v CredentialsHTTP) {
	s.Type = CredentialsHTTPDockerFileOriginDetailsRepoAuthSum
	s.CredentialsHTTP = v
}

// GetCredentialsHTTP returns CredentialsHTTP and true boolean if DockerFileOriginDetailsRepoAuthSum is CredentialsHTTP.
func (s DockerFileOriginDetailsRepoAuthSum) GetCredentialsHTTP() (v CredentialsHTTP, ok bool) {
	if !s.IsCredentialsHTTP() {
		return v, false
	}
	return s.CredentialsHTTP, true
}

// NewCredentialsHTTPDockerFileOriginDetailsRepoAuthSum returns new DockerFileOriginDetailsRepoAuthSum from CredentialsHTTP.
func NewCredentialsHTTPDockerFileOriginDetailsRepoAuthSum(v CredentialsHTTP) DockerFileOriginDetailsRepoAuthSum {
	var s DockerFileOriginDetailsRepoAuthSum
	s.SetCredentialsHTTP(v)
	return s
}

// SetCredentialsSSH sets DockerFileOriginDetailsRepoAuthSum to CredentialsSSH.
func (s *DockerFileOriginDetailsRepoAuthSum) SetCredentialsSSH(v CredentialsSSH) {
	s.Type = CredentialsSSHDockerFileOriginDetailsRepoAuthSum
	s.CredentialsSSH = v
}

// GetCredentialsSSH returns CredentialsSSH and true boolean if DockerFileOriginDetailsRepoAuthSum is CredentialsSSH.
func (s DockerFileOriginDetailsRepoAuthSum) GetCredentialsSSH() (v CredentialsSSH, ok bool) {
	if !s.IsCredentialsSSH() {
		return v, false
	}
	return s.CredentialsSSH, true
}

// NewCredentialsSSHDockerFileOriginDetailsRepoAuthSum returns new DockerFileOriginDetailsRepoAuthSum from CredentialsSSH.
func NewCredentialsSSHDockerFileOriginDetailsRepoAuthSum(v CredentialsSSH) DockerFileOriginDetailsRepoAuthSum {
	var s DockerFileOriginDetailsRepoAuthSum
	s.SetCredentialsSSH(v)
	return s
}

// Repository reference information.
type DockerFileOriginDetailsRepoRef struct {
	// The type of reference being used.
	Type string `json:"type"`
	// The value for the given reference type.
	Value string `json:"value"`
}

// GetType returns the value of Type.
func (s *DockerFileOriginDetailsRepoRef) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *DockerFileOriginDetailsRepoRef) GetValue() string {
	return s.Value
}

// SetType sets the value of Type.
func (s *DockerFileOriginDetailsRepoRef) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *DockerFileOriginDetailsRepoRef) SetValue(val string) {
	s.Value = val
}

type DockerFileOriginType string

const (
	DockerFileOriginTypeDockerFile DockerFileOriginType = "docker-file"
)

// AllValues returns all DockerFileOriginType values.
func (DockerFileOriginType) AllValues() []DockerFileOriginType {
	return []DockerFileOriginType{
		DockerFileOriginTypeDockerFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DockerFileOriginType) MarshalText() ([]byte, error) {
	switch s {
	case DockerFileOriginTypeDockerFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DockerFileOriginType) UnmarshalText(data []byte) error {
	switch DockerFileOriginType(data) {
	case DockerFileOriginTypeDockerFile:
		*s = DockerFileOriginTypeDockerFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An image origin where the image is pulled from DockerHub.
// Ref: #/components/schemas/DockerHubOrigin
type DockerHubOrigin struct {
	Details DockerHubOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *DockerHubOrigin) GetDetails() DockerHubOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *DockerHubOrigin) SetDetails(val DockerHubOriginDetails) {
	s.Details = val
}

type DockerHubOriginDetails struct {
	Existing OptNilDockerHubOriginDetailsExisting `json:"existing"`
	// The DockerHub target string. ex - `mysql:5.7`.
	Target string `json:"target"`
	// For authentication, a username.
	Username OptString `json:"username"`
	// For authentication, a token.
	Token OptString `json:"token"`
}

// GetExisting returns the value of Existing.
func (s *DockerHubOriginDetails) GetExisting() OptNilDockerHubOriginDetailsExisting {
	return s.Existing
}

// GetTarget returns the value of Target.
func (s *DockerHubOriginDetails) GetTarget() string {
	return s.Target
}

// GetUsername returns the value of Username.
func (s *DockerHubOriginDetails) GetUsername() OptString {
	return s.Username
}

// GetToken returns the value of Token.
func (s *DockerHubOriginDetails) GetToken() OptString {
	return s.Token
}

// SetExisting sets the value of Existing.
func (s *DockerHubOriginDetails) SetExisting(val OptNilDockerHubOriginDetailsExisting) {
	s.Existing = val
}

// SetTarget sets the value of Target.
func (s *DockerHubOriginDetails) SetTarget(val string) {
	s.Target = val
}

// SetUsername sets the value of Username.
func (s *DockerHubOriginDetails) SetUsername(val OptString) {
	s.Username = val
}

// SetToken sets the value of Token.
func (s *DockerHubOriginDetails) SetToken(val OptString) {
	s.Token = val
}

// In a stack, specifies an image source ID from which Cycle will derive any values not specified in
// the stack file. This is useful for avoiding direct placement of credentials in a stack file, for
// example.
type DockerHubOriginDetailsExisting struct {
	SourceID OptID `json:"source_id"`
}

// GetSourceID returns the value of SourceID.
func (s *DockerHubOriginDetailsExisting) GetSourceID() OptID {
	return s.SourceID
}

// SetSourceID sets the value of SourceID.
func (s *DockerHubOriginDetailsExisting) SetSourceID(val OptID) {
	s.SourceID = val
}

type DockerHubOriginType string

const (
	DockerHubOriginTypeDockerHub DockerHubOriginType = "docker-hub"
)

// AllValues returns all DockerHubOriginType values.
func (DockerHubOriginType) AllValues() []DockerHubOriginType {
	return []DockerHubOriginType{
		DockerHubOriginTypeDockerHub,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DockerHubOriginType) MarshalText() ([]byte, error) {
	switch s {
	case DockerHubOriginTypeDockerHub:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DockerHubOriginType) UnmarshalText(data []byte) error {
	switch DockerHubOriginType(data) {
	case DockerHubOriginTypeDockerHub:
		*s = DockerHubOriginTypeDockerHub
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An image origin where the image is pulled from a private Docker registry.
// Ref: #/components/schemas/DockerRegistryOrigin
type DockerRegistryOrigin struct {
	Details DockerRegistryOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *DockerRegistryOrigin) GetDetails() DockerRegistryOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *DockerRegistryOrigin) SetDetails(val DockerRegistryOriginDetails) {
	s.Details = val
}

type DockerRegistryOriginDetails struct {
	Existing OptExistingSource `json:"existing"`
	// The image name on the registry.
	Target string `json:"target"`
	// The url of the remote registry.
	URL string `json:"url"`
	// For authentication, a username.
	Username OptString `json:"username"`
	// For authentication, a token.
	Token OptString `json:"token"`
	// For authentication, a password.
	Password OptString `json:"password"`
}

// GetExisting returns the value of Existing.
func (s *DockerRegistryOriginDetails) GetExisting() OptExistingSource {
	return s.Existing
}

// GetTarget returns the value of Target.
func (s *DockerRegistryOriginDetails) GetTarget() string {
	return s.Target
}

// GetURL returns the value of URL.
func (s *DockerRegistryOriginDetails) GetURL() string {
	return s.URL
}

// GetUsername returns the value of Username.
func (s *DockerRegistryOriginDetails) GetUsername() OptString {
	return s.Username
}

// GetToken returns the value of Token.
func (s *DockerRegistryOriginDetails) GetToken() OptString {
	return s.Token
}

// GetPassword returns the value of Password.
func (s *DockerRegistryOriginDetails) GetPassword() OptString {
	return s.Password
}

// SetExisting sets the value of Existing.
func (s *DockerRegistryOriginDetails) SetExisting(val OptExistingSource) {
	s.Existing = val
}

// SetTarget sets the value of Target.
func (s *DockerRegistryOriginDetails) SetTarget(val string) {
	s.Target = val
}

// SetURL sets the value of URL.
func (s *DockerRegistryOriginDetails) SetURL(val string) {
	s.URL = val
}

// SetUsername sets the value of Username.
func (s *DockerRegistryOriginDetails) SetUsername(val OptString) {
	s.Username = val
}

// SetToken sets the value of Token.
func (s *DockerRegistryOriginDetails) SetToken(val OptString) {
	s.Token = val
}

// SetPassword sets the value of Password.
func (s *DockerRegistryOriginDetails) SetPassword(val OptString) {
	s.Password = val
}

type DockerRegistryOriginType string

const (
	DockerRegistryOriginTypeDockerRegistry DockerRegistryOriginType = "docker-registry"
)

// AllValues returns all DockerRegistryOriginType values.
func (DockerRegistryOriginType) AllValues() []DockerRegistryOriginType {
	return []DockerRegistryOriginType{
		DockerRegistryOriginTypeDockerRegistry,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DockerRegistryOriginType) MarshalText() ([]byte, error) {
	switch s {
	case DockerRegistryOriginTypeDockerRegistry:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DockerRegistryOriginType) UnmarshalText(data []byte) error {
	switch DockerRegistryOriginType(data) {
	case DockerRegistryOriginTypeDockerRegistry:
		*s = DockerRegistryOriginTypeDockerRegistry
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Duration string

type EnableTwoFactorAuthOK struct {
	Data TwoFactorAuthRecovery `json:"data"`
}

// GetData returns the value of Data.
func (s *EnableTwoFactorAuthOK) GetData() TwoFactorAuthRecovery {
	return s.Data
}

// SetData sets the value of Data.
func (s *EnableTwoFactorAuthOK) SetData(val TwoFactorAuthRecovery) {
	s.Data = val
}

type EnableTwoFactorAuthReq struct {
	// The token used to authenticate the two-factor setup.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *EnableTwoFactorAuthReq) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *EnableTwoFactorAuthReq) SetToken(val string) {
	s.Token = val
}

// Environments are groups of containers with a private network built between them. For more
// information on environments, see the [main docs](https://docs.cycle.io/environments/overview/).
// Ref: #/components/schemas/Environment
type Environment struct {
	ID         ID         `json:"id"`
	Identifier Identifier `json:"identifier"`
	// A user defined name for the environment resource.
	Name string `json:"name"`
	// The cluster this environment is associated with.
	Cluster string           `json:"cluster"`
	About   EnvironmentAbout `json:"about"`
	Creator CreatorScope     `json:"creator"`
	HubID   HubID            `json:"hub_id"`
	State   EnvironmentState `json:"state"`
	// A collection of timestamps for each event in the environment's lifetime.
	Events         EnvironmentEvents               `json:"events"`
	Features       Features                        `json:"features"`
	Services       EnvironmentServices             `json:"services"`
	PrivateNetwork OptNilEnvironmentPrivateNetwork `json:"private_network"`
	// A map of custom tags to deployment versions.
	Deployments OptNilEnvironmentDeployments `json:"deployments"`
	Meta        OptEnvironmentMeta           `json:"meta"`
}

// GetID returns the value of ID.
func (s *Environment) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *Environment) GetIdentifier() Identifier {
	return s.Identifier
}

// GetName returns the value of Name.
func (s *Environment) GetName() string {
	return s.Name
}

// GetCluster returns the value of Cluster.
func (s *Environment) GetCluster() string {
	return s.Cluster
}

// GetAbout returns the value of About.
func (s *Environment) GetAbout() EnvironmentAbout {
	return s.About
}

// GetCreator returns the value of Creator.
func (s *Environment) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Environment) GetHubID() HubID {
	return s.HubID
}

// GetState returns the value of State.
func (s *Environment) GetState() EnvironmentState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Environment) GetEvents() EnvironmentEvents {
	return s.Events
}

// GetFeatures returns the value of Features.
func (s *Environment) GetFeatures() Features {
	return s.Features
}

// GetServices returns the value of Services.
func (s *Environment) GetServices() EnvironmentServices {
	return s.Services
}

// GetPrivateNetwork returns the value of PrivateNetwork.
func (s *Environment) GetPrivateNetwork() OptNilEnvironmentPrivateNetwork {
	return s.PrivateNetwork
}

// GetDeployments returns the value of Deployments.
func (s *Environment) GetDeployments() OptNilEnvironmentDeployments {
	return s.Deployments
}

// GetMeta returns the value of Meta.
func (s *Environment) GetMeta() OptEnvironmentMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Environment) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *Environment) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetName sets the value of Name.
func (s *Environment) SetName(val string) {
	s.Name = val
}

// SetCluster sets the value of Cluster.
func (s *Environment) SetCluster(val string) {
	s.Cluster = val
}

// SetAbout sets the value of About.
func (s *Environment) SetAbout(val EnvironmentAbout) {
	s.About = val
}

// SetCreator sets the value of Creator.
func (s *Environment) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Environment) SetHubID(val HubID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *Environment) SetState(val EnvironmentState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Environment) SetEvents(val EnvironmentEvents) {
	s.Events = val
}

// SetFeatures sets the value of Features.
func (s *Environment) SetFeatures(val Features) {
	s.Features = val
}

// SetServices sets the value of Services.
func (s *Environment) SetServices(val EnvironmentServices) {
	s.Services = val
}

// SetPrivateNetwork sets the value of PrivateNetwork.
func (s *Environment) SetPrivateNetwork(val OptNilEnvironmentPrivateNetwork) {
	s.PrivateNetwork = val
}

// SetDeployments sets the value of Deployments.
func (s *Environment) SetDeployments(val OptNilEnvironmentDeployments) {
	s.Deployments = val
}

// SetMeta sets the value of Meta.
func (s *Environment) SetMeta(val OptEnvironmentMeta) {
	s.Meta = val
}

// Contains details regarding the environment.
// Ref: #/components/schemas/EnvironmentAbout
type EnvironmentAbout struct {
	// A custom description for this environment.
	Description string `json:"description"`
	// If true, this environment has been marked as a favorite.
	Favorite bool `json:"favorite"`
}

// GetDescription returns the value of Description.
func (s *EnvironmentAbout) GetDescription() string {
	return s.Description
}

// GetFavorite returns the value of Favorite.
func (s *EnvironmentAbout) GetFavorite() bool {
	return s.Favorite
}

// SetDescription sets the value of Description.
func (s *EnvironmentAbout) SetDescription(val string) {
	s.Description = val
}

// SetFavorite sets the value of Favorite.
func (s *EnvironmentAbout) SetFavorite(val bool) {
	s.Favorite = val
}

// Settings for creating an environment in a pipeline.
// Ref: #/components/schemas/EnvironmentCreateStep
type EnvironmentCreateStep struct {
	// An identifier for the step.
	Identifier OptString                       `json:"identifier"`
	Options    OptEnvironmentCreateStepOptions `json:"options"`
	Details    EnvironmentCreateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentCreateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentCreateStep) GetOptions() OptEnvironmentCreateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentCreateStep) GetDetails() EnvironmentCreateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentCreateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentCreateStep) SetOptions(val OptEnvironmentCreateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentCreateStep) SetDetails(val EnvironmentCreateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentCreateStepAction string

const (
	EnvironmentCreateStepActionEnvironmentCreate EnvironmentCreateStepAction = "environment.create"
)

// AllValues returns all EnvironmentCreateStepAction values.
func (EnvironmentCreateStepAction) AllValues() []EnvironmentCreateStepAction {
	return []EnvironmentCreateStepAction{
		EnvironmentCreateStepActionEnvironmentCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentCreateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentCreateStepActionEnvironmentCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentCreateStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentCreateStepAction(data) {
	case EnvironmentCreateStepActionEnvironmentCreate:
		*s = EnvironmentCreateStepActionEnvironmentCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentCreateStepDetails struct {
	Name     string                                  `json:"name"`
	About    OptNilEnvironmentCreateStepDetailsAbout `json:"about"`
	Cluster  string                                  `json:"cluster"`
	Features Features                                `json:"features"`
}

// GetName returns the value of Name.
func (s *EnvironmentCreateStepDetails) GetName() string {
	return s.Name
}

// GetAbout returns the value of About.
func (s *EnvironmentCreateStepDetails) GetAbout() OptNilEnvironmentCreateStepDetailsAbout {
	return s.About
}

// GetCluster returns the value of Cluster.
func (s *EnvironmentCreateStepDetails) GetCluster() string {
	return s.Cluster
}

// GetFeatures returns the value of Features.
func (s *EnvironmentCreateStepDetails) GetFeatures() Features {
	return s.Features
}

// SetName sets the value of Name.
func (s *EnvironmentCreateStepDetails) SetName(val string) {
	s.Name = val
}

// SetAbout sets the value of About.
func (s *EnvironmentCreateStepDetails) SetAbout(val OptNilEnvironmentCreateStepDetailsAbout) {
	s.About = val
}

// SetCluster sets the value of Cluster.
func (s *EnvironmentCreateStepDetails) SetCluster(val string) {
	s.Cluster = val
}

// SetFeatures sets the value of Features.
func (s *EnvironmentCreateStepDetails) SetFeatures(val Features) {
	s.Features = val
}

// Contains details regarding the environment.
type EnvironmentCreateStepDetailsAbout struct {
	// A custom description for this environment.
	Description string `json:"description"`
	// If true, this environment has been marked as a favorite.
	Favorite bool `json:"favorite"`
}

// GetDescription returns the value of Description.
func (s *EnvironmentCreateStepDetailsAbout) GetDescription() string {
	return s.Description
}

// GetFavorite returns the value of Favorite.
func (s *EnvironmentCreateStepDetailsAbout) GetFavorite() bool {
	return s.Favorite
}

// SetDescription sets the value of Description.
func (s *EnvironmentCreateStepDetailsAbout) SetDescription(val string) {
	s.Description = val
}

// SetFavorite sets the value of Favorite.
func (s *EnvironmentCreateStepDetailsAbout) SetFavorite(val bool) {
	s.Favorite = val
}

type EnvironmentCreateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentCreateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentCreateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Settings for deleting an environment in a pipeline.
// Ref: #/components/schemas/EnvironmentDeleteStep
type EnvironmentDeleteStep struct {
	// An identifier for the step.
	Identifier OptString                       `json:"identifier"`
	Options    OptEnvironmentDeleteStepOptions `json:"options"`
	Details    EnvironmentDeleteStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeleteStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeleteStep) GetOptions() OptEnvironmentDeleteStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeleteStep) GetDetails() EnvironmentDeleteStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeleteStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeleteStep) SetOptions(val OptEnvironmentDeleteStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeleteStep) SetDetails(val EnvironmentDeleteStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeleteStepAction string

const (
	EnvironmentDeleteStepActionEnvironmentDelete EnvironmentDeleteStepAction = "environment.delete"
)

// AllValues returns all EnvironmentDeleteStepAction values.
func (EnvironmentDeleteStepAction) AllValues() []EnvironmentDeleteStepAction {
	return []EnvironmentDeleteStepAction{
		EnvironmentDeleteStepActionEnvironmentDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeleteStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeleteStepActionEnvironmentDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeleteStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeleteStepAction(data) {
	case EnvironmentDeleteStepActionEnvironmentDelete:
		*s = EnvironmentDeleteStepActionEnvironmentDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeleteStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeleteStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeleteStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

type EnvironmentDeleteStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeleteStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeleteStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Waits for a deployment to be considered 'healthy' before allowing the pipeline to continue.
// A deployement is considered 'healthy' when all instances of all containers that have had a state
// change in the last 15 minutes
// that have health checks defined, become healthy.
// Ref: #/components/schemas/EnvironmentDeploymentHealthyWatchStep
type EnvironmentDeploymentHealthyWatchStep struct {
	// An identifier for the step.
	Identifier OptString                                       `json:"identifier"`
	Options    OptEnvironmentDeploymentHealthyWatchStepOptions `json:"options"`
	Details    EnvironmentDeploymentHealthyWatchStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeploymentHealthyWatchStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeploymentHealthyWatchStep) GetOptions() OptEnvironmentDeploymentHealthyWatchStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeploymentHealthyWatchStep) GetDetails() EnvironmentDeploymentHealthyWatchStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeploymentHealthyWatchStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeploymentHealthyWatchStep) SetOptions(val OptEnvironmentDeploymentHealthyWatchStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeploymentHealthyWatchStep) SetDetails(val EnvironmentDeploymentHealthyWatchStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeploymentHealthyWatchStepAction string

const (
	EnvironmentDeploymentHealthyWatchStepActionEnvironmentDeploymentHealthyWatch EnvironmentDeploymentHealthyWatchStepAction = "environment.deployment.healthy.watch"
)

// AllValues returns all EnvironmentDeploymentHealthyWatchStepAction values.
func (EnvironmentDeploymentHealthyWatchStepAction) AllValues() []EnvironmentDeploymentHealthyWatchStepAction {
	return []EnvironmentDeploymentHealthyWatchStepAction{
		EnvironmentDeploymentHealthyWatchStepActionEnvironmentDeploymentHealthyWatch,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeploymentHealthyWatchStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeploymentHealthyWatchStepActionEnvironmentDeploymentHealthyWatch:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeploymentHealthyWatchStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeploymentHealthyWatchStepAction(data) {
	case EnvironmentDeploymentHealthyWatchStepActionEnvironmentDeploymentHealthyWatch:
		*s = EnvironmentDeploymentHealthyWatchStepActionEnvironmentDeploymentHealthyWatch
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeploymentHealthyWatchStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
	Tag         OptNilString    `json:"tag"`
	Version     OptNilString    `json:"version"`
	// The maximum amount of time to wait for the deployment to become healthy before failing this step.
	MaxWait OptNilString `json:"max_wait"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetTag returns the value of Tag.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) GetTag() OptNilString {
	return s.Tag
}

// GetVersion returns the value of Version.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) GetVersion() OptNilString {
	return s.Version
}

// GetMaxWait returns the value of MaxWait.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) GetMaxWait() OptNilString {
	return s.MaxWait
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetTag sets the value of Tag.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) SetTag(val OptNilString) {
	s.Tag = val
}

// SetVersion sets the value of Version.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) SetVersion(val OptNilString) {
	s.Version = val
}

// SetMaxWait sets the value of MaxWait.
func (s *EnvironmentDeploymentHealthyWatchStepDetails) SetMaxWait(val OptNilString) {
	s.MaxWait = val
}

type EnvironmentDeploymentHealthyWatchStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeploymentHealthyWatchStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeploymentHealthyWatchStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Start all containers with a specific deployment version/tag within an environment.
// Ref: #/components/schemas/EnvironmentDeploymentStartStep
type EnvironmentDeploymentStartStep struct {
	// An identifier for the step.
	Identifier OptString                                `json:"identifier"`
	Options    OptEnvironmentDeploymentStartStepOptions `json:"options"`
	Details    EnvironmentDeploymentStartStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeploymentStartStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeploymentStartStep) GetOptions() OptEnvironmentDeploymentStartStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeploymentStartStep) GetDetails() EnvironmentDeploymentStartStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeploymentStartStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeploymentStartStep) SetOptions(val OptEnvironmentDeploymentStartStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeploymentStartStep) SetDetails(val EnvironmentDeploymentStartStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeploymentStartStepAction string

const (
	EnvironmentDeploymentStartStepActionEnvironmentDeploymentStart EnvironmentDeploymentStartStepAction = "environment.deployment.start"
)

// AllValues returns all EnvironmentDeploymentStartStepAction values.
func (EnvironmentDeploymentStartStepAction) AllValues() []EnvironmentDeploymentStartStepAction {
	return []EnvironmentDeploymentStartStepAction{
		EnvironmentDeploymentStartStepActionEnvironmentDeploymentStart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeploymentStartStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeploymentStartStepActionEnvironmentDeploymentStart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeploymentStartStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeploymentStartStepAction(data) {
	case EnvironmentDeploymentStartStepActionEnvironmentDeploymentStart:
		*s = EnvironmentDeploymentStartStepActionEnvironmentDeploymentStart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeploymentStartStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
	Tag         OptNilString    `json:"tag"`
	Version     OptNilString    `json:"version"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeploymentStartStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetTag returns the value of Tag.
func (s *EnvironmentDeploymentStartStepDetails) GetTag() OptNilString {
	return s.Tag
}

// GetVersion returns the value of Version.
func (s *EnvironmentDeploymentStartStepDetails) GetVersion() OptNilString {
	return s.Version
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeploymentStartStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetTag sets the value of Tag.
func (s *EnvironmentDeploymentStartStepDetails) SetTag(val OptNilString) {
	s.Tag = val
}

// SetVersion sets the value of Version.
func (s *EnvironmentDeploymentStartStepDetails) SetVersion(val OptNilString) {
	s.Version = val
}

type EnvironmentDeploymentStartStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeploymentStartStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeploymentStartStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Stop all containers with a specific deployment version/tag within an environment.
// Ref: #/components/schemas/EnvironmentDeploymentStopStep
type EnvironmentDeploymentStopStep struct {
	// An identifier for the step.
	Identifier OptString                               `json:"identifier"`
	Options    OptEnvironmentDeploymentStopStepOptions `json:"options"`
	Details    EnvironmentDeploymentStopStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeploymentStopStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeploymentStopStep) GetOptions() OptEnvironmentDeploymentStopStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeploymentStopStep) GetDetails() EnvironmentDeploymentStopStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeploymentStopStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeploymentStopStep) SetOptions(val OptEnvironmentDeploymentStopStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeploymentStopStep) SetDetails(val EnvironmentDeploymentStopStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeploymentStopStepAction string

const (
	EnvironmentDeploymentStopStepActionEnvironmentDeploymentStop EnvironmentDeploymentStopStepAction = "environment.deployment.stop"
)

// AllValues returns all EnvironmentDeploymentStopStepAction values.
func (EnvironmentDeploymentStopStepAction) AllValues() []EnvironmentDeploymentStopStepAction {
	return []EnvironmentDeploymentStopStepAction{
		EnvironmentDeploymentStopStepActionEnvironmentDeploymentStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeploymentStopStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeploymentStopStepActionEnvironmentDeploymentStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeploymentStopStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeploymentStopStepAction(data) {
	case EnvironmentDeploymentStopStepActionEnvironmentDeploymentStop:
		*s = EnvironmentDeploymentStopStepActionEnvironmentDeploymentStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeploymentStopStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
	Tag         OptNilString    `json:"tag"`
	Version     OptNilString    `json:"version"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeploymentStopStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetTag returns the value of Tag.
func (s *EnvironmentDeploymentStopStepDetails) GetTag() OptNilString {
	return s.Tag
}

// GetVersion returns the value of Version.
func (s *EnvironmentDeploymentStopStepDetails) GetVersion() OptNilString {
	return s.Version
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeploymentStopStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetTag sets the value of Tag.
func (s *EnvironmentDeploymentStopStepDetails) SetTag(val OptNilString) {
	s.Tag = val
}

// SetVersion sets the value of Version.
func (s *EnvironmentDeploymentStopStepDetails) SetVersion(val OptNilString) {
	s.Version = val
}

type EnvironmentDeploymentStopStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeploymentStopStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeploymentStopStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A map of custom tags to deployment versions. Allows for defining a custom, persistent tag with a
// changing version number.
// For example, `dev -> v1.2.3-dev`. This is useful when dealing with DNS LINKED records, where you
// always want dev.example.com to point to the
// `dev` version of your app within an environment, where you can continuously deploy and update it
// without needing to change the record. It is
// even more useful when you have multiple LINKED records, and you update i.e. `prod“ tag to point
// to a new version, all records using the `prod` tag
// are switched at once.
// Ref: #/components/schemas/EnvironmentDeploymentTags
type EnvironmentDeploymentTags map[string]Version

func (s *EnvironmentDeploymentTags) init() EnvironmentDeploymentTags {
	m := *s
	if m == nil {
		m = map[string]Version{}
		*s = m
	}
	return m
}

// A map of custom tags to deployment versions.
type EnvironmentDeployments struct {
	Tags EnvironmentDeploymentTags `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *EnvironmentDeployments) GetTags() EnvironmentDeploymentTags {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *EnvironmentDeployments) SetTags(val EnvironmentDeploymentTags) {
	s.Tags = val
}

// Remove any containers that are part of a deployment that does NOT have a tag associated with it.
// Ref: #/components/schemas/EnvironmentDeploymentsPruneStep
type EnvironmentDeploymentsPruneStep struct {
	// An identifier for the step.
	Identifier OptString                                 `json:"identifier"`
	Options    OptEnvironmentDeploymentsPruneStepOptions `json:"options"`
	Details    EnvironmentDeploymentsPruneStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeploymentsPruneStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeploymentsPruneStep) GetOptions() OptEnvironmentDeploymentsPruneStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeploymentsPruneStep) GetDetails() EnvironmentDeploymentsPruneStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeploymentsPruneStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeploymentsPruneStep) SetOptions(val OptEnvironmentDeploymentsPruneStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeploymentsPruneStep) SetDetails(val EnvironmentDeploymentsPruneStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeploymentsPruneStepAction string

const (
	EnvironmentDeploymentsPruneStepActionEnvironmentDeploymentsPrune EnvironmentDeploymentsPruneStepAction = "environment.deployments.prune"
)

// AllValues returns all EnvironmentDeploymentsPruneStepAction values.
func (EnvironmentDeploymentsPruneStepAction) AllValues() []EnvironmentDeploymentsPruneStepAction {
	return []EnvironmentDeploymentsPruneStepAction{
		EnvironmentDeploymentsPruneStepActionEnvironmentDeploymentsPrune,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeploymentsPruneStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeploymentsPruneStepActionEnvironmentDeploymentsPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeploymentsPruneStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeploymentsPruneStepAction(data) {
	case EnvironmentDeploymentsPruneStepActionEnvironmentDeploymentsPrune:
		*s = EnvironmentDeploymentsPruneStepActionEnvironmentDeploymentsPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeploymentsPruneStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeploymentsPruneStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeploymentsPruneStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

type EnvironmentDeploymentsPruneStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeploymentsPruneStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeploymentsPruneStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Settings for updating a deployment tag to another deployment version.
// Ref: #/components/schemas/EnvironmentDeploymentsTagStep
type EnvironmentDeploymentsTagStep struct {
	// An identifier for the step.
	Identifier OptString                               `json:"identifier"`
	Options    OptEnvironmentDeploymentsTagStepOptions `json:"options"`
	Details    EnvironmentDeploymentsTagStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentDeploymentsTagStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentDeploymentsTagStep) GetOptions() OptEnvironmentDeploymentsTagStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentDeploymentsTagStep) GetDetails() EnvironmentDeploymentsTagStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentDeploymentsTagStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentDeploymentsTagStep) SetOptions(val OptEnvironmentDeploymentsTagStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentDeploymentsTagStep) SetDetails(val EnvironmentDeploymentsTagStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentDeploymentsTagStepAction string

const (
	EnvironmentDeploymentsTagStepActionEnvironmentDeploymentsTag EnvironmentDeploymentsTagStepAction = "environment.deployments.tag"
)

// AllValues returns all EnvironmentDeploymentsTagStepAction values.
func (EnvironmentDeploymentsTagStepAction) AllValues() []EnvironmentDeploymentsTagStepAction {
	return []EnvironmentDeploymentsTagStepAction{
		EnvironmentDeploymentsTagStepActionEnvironmentDeploymentsTag,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentDeploymentsTagStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentDeploymentsTagStepActionEnvironmentDeploymentsTag:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentDeploymentsTagStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentDeploymentsTagStepAction(data) {
	case EnvironmentDeploymentsTagStepActionEnvironmentDeploymentsTag:
		*s = EnvironmentDeploymentsTagStepActionEnvironmentDeploymentsTag
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentDeploymentsTagStepDetails struct {
	Environment FluidIdentifier                                `json:"environment"`
	Tag         Identifier                                     `json:"tag"`
	Deployment  EnvironmentDeploymentsTagStepDetailsDeployment `json:"deployment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentDeploymentsTagStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetTag returns the value of Tag.
func (s *EnvironmentDeploymentsTagStepDetails) GetTag() Identifier {
	return s.Tag
}

// GetDeployment returns the value of Deployment.
func (s *EnvironmentDeploymentsTagStepDetails) GetDeployment() EnvironmentDeploymentsTagStepDetailsDeployment {
	return s.Deployment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentDeploymentsTagStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetTag sets the value of Tag.
func (s *EnvironmentDeploymentsTagStepDetails) SetTag(val Identifier) {
	s.Tag = val
}

// SetDeployment sets the value of Deployment.
func (s *EnvironmentDeploymentsTagStepDetails) SetDeployment(val EnvironmentDeploymentsTagStepDetailsDeployment) {
	s.Deployment = val
}

type EnvironmentDeploymentsTagStepDetailsDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *EnvironmentDeploymentsTagStepDetailsDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *EnvironmentDeploymentsTagStepDetailsDeployment) SetVersion(val Version) {
	s.Version = val
}

type EnvironmentDeploymentsTagStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentDeploymentsTagStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentDeploymentsTagStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A collection of timestamps for each event in the environment's lifetime.
type EnvironmentEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *EnvironmentEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *EnvironmentEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *EnvironmentEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *EnvironmentEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *EnvironmentEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *EnvironmentEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// An identity that is associated with an environment.
// Ref: #/components/schemas/EnvironmentIncludes
type EnvironmentIncludes map[string]Environment

func (s *EnvironmentIncludes) init() EnvironmentIncludes {
	m := *s
	if m == nil {
		m = map[string]Environment{}
		*s = m
	}
	return m
}

// A task to initialize an environment.
// Ref: #/components/schemas/EnvironmentInitializeAction
type EnvironmentInitializeAction struct{}

// The name of the action to perform.
type EnvironmentInitializeActionAction string

const (
	EnvironmentInitializeActionActionInitialize EnvironmentInitializeActionAction = "initialize"
)

// AllValues returns all EnvironmentInitializeActionAction values.
func (EnvironmentInitializeActionAction) AllValues() []EnvironmentInitializeActionAction {
	return []EnvironmentInitializeActionAction{
		EnvironmentInitializeActionActionInitialize,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentInitializeActionAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentInitializeActionActionInitialize:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentInitializeActionAction) UnmarshalText(data []byte) error {
	switch EnvironmentInitializeActionAction(data) {
	case EnvironmentInitializeActionActionInitialize:
		*s = EnvironmentInitializeActionActionInitialize
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of meta fields that can be applied to this environment.
// Ref: #/components/schemas/EnvironmentMeta
type EnvironmentMeta struct {
	ContainersCount OptStateCountSummary            `json:"containers_count"`
	InstancesCount  OptStateCountSummary            `json:"instances_count"`
	Containers      []EnvironmentMetaContainersItem `json:"containers"`
}

// GetContainersCount returns the value of ContainersCount.
func (s *EnvironmentMeta) GetContainersCount() OptStateCountSummary {
	return s.ContainersCount
}

// GetInstancesCount returns the value of InstancesCount.
func (s *EnvironmentMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// GetContainers returns the value of Containers.
func (s *EnvironmentMeta) GetContainers() []EnvironmentMetaContainersItem {
	return s.Containers
}

// SetContainersCount sets the value of ContainersCount.
func (s *EnvironmentMeta) SetContainersCount(val OptStateCountSummary) {
	s.ContainersCount = val
}

// SetInstancesCount sets the value of InstancesCount.
func (s *EnvironmentMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// SetContainers sets the value of Containers.
func (s *EnvironmentMeta) SetContainers(val []EnvironmentMetaContainersItem) {
	s.Containers = val
}

type EnvironmentMetaContainersItem struct {
	ID ID `json:"id"`
	// A user defined name for the container resource.
	Name        string                      `json:"name"`
	State       ContainerState              `json:"state"`
	Image       ContainerImageSummary       `json:"image"`
	Environment ContainerEnvironmentSummary `json:"environment"`
}

// GetID returns the value of ID.
func (s *EnvironmentMetaContainersItem) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *EnvironmentMetaContainersItem) GetName() string {
	return s.Name
}

// GetState returns the value of State.
func (s *EnvironmentMetaContainersItem) GetState() ContainerState {
	return s.State
}

// GetImage returns the value of Image.
func (s *EnvironmentMetaContainersItem) GetImage() ContainerImageSummary {
	return s.Image
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentMetaContainersItem) GetEnvironment() ContainerEnvironmentSummary {
	return s.Environment
}

// SetID sets the value of ID.
func (s *EnvironmentMetaContainersItem) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *EnvironmentMetaContainersItem) SetName(val string) {
	s.Name = val
}

// SetState sets the value of State.
func (s *EnvironmentMetaContainersItem) SetState(val ContainerState) {
	s.State = val
}

// SetImage sets the value of Image.
func (s *EnvironmentMetaContainersItem) SetImage(val ContainerImageSummary) {
	s.Image = val
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentMetaContainersItem) SetEnvironment(val ContainerEnvironmentSummary) {
	s.Environment = val
}

// Details about the environment network this instance is a member of.
// Ref: #/components/schemas/EnvironmentNetworkSummary
type EnvironmentNetworkSummary struct {
	ID            ID                                 `json:"id"`
	NetworkSubnet string                             `json:"network_subnet"`
	Subnet        string                             `json:"subnet"`
	Ipv6          NilEnvironmentNetworkSummaryIpv6   `json:"ipv6"`
	Legacy        NilEnvironmentNetworkSummaryLegacy `json:"legacy"`
	MACAddr       string                             `json:"mac_addr"`
	VxlanTag      int                                `json:"vxlan_tag"`
}

// GetID returns the value of ID.
func (s *EnvironmentNetworkSummary) GetID() ID {
	return s.ID
}

// GetNetworkSubnet returns the value of NetworkSubnet.
func (s *EnvironmentNetworkSummary) GetNetworkSubnet() string {
	return s.NetworkSubnet
}

// GetSubnet returns the value of Subnet.
func (s *EnvironmentNetworkSummary) GetSubnet() string {
	return s.Subnet
}

// GetIpv6 returns the value of Ipv6.
func (s *EnvironmentNetworkSummary) GetIpv6() NilEnvironmentNetworkSummaryIpv6 {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *EnvironmentNetworkSummary) GetLegacy() NilEnvironmentNetworkSummaryLegacy {
	return s.Legacy
}

// GetMACAddr returns the value of MACAddr.
func (s *EnvironmentNetworkSummary) GetMACAddr() string {
	return s.MACAddr
}

// GetVxlanTag returns the value of VxlanTag.
func (s *EnvironmentNetworkSummary) GetVxlanTag() int {
	return s.VxlanTag
}

// SetID sets the value of ID.
func (s *EnvironmentNetworkSummary) SetID(val ID) {
	s.ID = val
}

// SetNetworkSubnet sets the value of NetworkSubnet.
func (s *EnvironmentNetworkSummary) SetNetworkSubnet(val string) {
	s.NetworkSubnet = val
}

// SetSubnet sets the value of Subnet.
func (s *EnvironmentNetworkSummary) SetSubnet(val string) {
	s.Subnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *EnvironmentNetworkSummary) SetIpv6(val NilEnvironmentNetworkSummaryIpv6) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *EnvironmentNetworkSummary) SetLegacy(val NilEnvironmentNetworkSummaryLegacy) {
	s.Legacy = val
}

// SetMACAddr sets the value of MACAddr.
func (s *EnvironmentNetworkSummary) SetMACAddr(val string) {
	s.MACAddr = val
}

// SetVxlanTag sets the value of VxlanTag.
func (s *EnvironmentNetworkSummary) SetVxlanTag(val int) {
	s.VxlanTag = val
}

type EnvironmentNetworkSummaryIpv6 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *EnvironmentNetworkSummaryIpv6) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *EnvironmentNetworkSummaryIpv6) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *EnvironmentNetworkSummaryIpv6) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *EnvironmentNetworkSummaryIpv6) SetCidr(val string) {
	s.Cidr = val
}

type EnvironmentNetworkSummaryLegacy struct {
	Host   int                                    `json:"host"`
	Subnet int                                    `json:"subnet"`
	Ipv4   NilEnvironmentNetworkSummaryLegacyIpv4 `json:"ipv4"`
}

// GetHost returns the value of Host.
func (s *EnvironmentNetworkSummaryLegacy) GetHost() int {
	return s.Host
}

// GetSubnet returns the value of Subnet.
func (s *EnvironmentNetworkSummaryLegacy) GetSubnet() int {
	return s.Subnet
}

// GetIpv4 returns the value of Ipv4.
func (s *EnvironmentNetworkSummaryLegacy) GetIpv4() NilEnvironmentNetworkSummaryLegacyIpv4 {
	return s.Ipv4
}

// SetHost sets the value of Host.
func (s *EnvironmentNetworkSummaryLegacy) SetHost(val int) {
	s.Host = val
}

// SetSubnet sets the value of Subnet.
func (s *EnvironmentNetworkSummaryLegacy) SetSubnet(val int) {
	s.Subnet = val
}

// SetIpv4 sets the value of Ipv4.
func (s *EnvironmentNetworkSummaryLegacy) SetIpv4(val NilEnvironmentNetworkSummaryLegacyIpv4) {
	s.Ipv4 = val
}

type EnvironmentNetworkSummaryLegacyIpv4 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *EnvironmentNetworkSummaryLegacyIpv4) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *EnvironmentNetworkSummaryLegacyIpv4) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *EnvironmentNetworkSummaryLegacyIpv4) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *EnvironmentNetworkSummaryLegacyIpv4) SetCidr(val string) {
	s.Cidr = val
}

type EnvironmentPrivateNetwork struct {
	// The vxlan tag added to each packet to help identify the network.
	VxlanTag int `json:"vxlan_tag"`
	// The subnet ID.
	Subnet string                             `json:"subnet"`
	Ipv6   EnvironmentPrivateNetworkIpv6      `json:"ipv6"`
	Legacy NilEnvironmentPrivateNetworkLegacy `json:"legacy"`
}

// GetVxlanTag returns the value of VxlanTag.
func (s *EnvironmentPrivateNetwork) GetVxlanTag() int {
	return s.VxlanTag
}

// GetSubnet returns the value of Subnet.
func (s *EnvironmentPrivateNetwork) GetSubnet() string {
	return s.Subnet
}

// GetIpv6 returns the value of Ipv6.
func (s *EnvironmentPrivateNetwork) GetIpv6() EnvironmentPrivateNetworkIpv6 {
	return s.Ipv6
}

// GetLegacy returns the value of Legacy.
func (s *EnvironmentPrivateNetwork) GetLegacy() NilEnvironmentPrivateNetworkLegacy {
	return s.Legacy
}

// SetVxlanTag sets the value of VxlanTag.
func (s *EnvironmentPrivateNetwork) SetVxlanTag(val int) {
	s.VxlanTag = val
}

// SetSubnet sets the value of Subnet.
func (s *EnvironmentPrivateNetwork) SetSubnet(val string) {
	s.Subnet = val
}

// SetIpv6 sets the value of Ipv6.
func (s *EnvironmentPrivateNetwork) SetIpv6(val EnvironmentPrivateNetworkIpv6) {
	s.Ipv6 = val
}

// SetLegacy sets the value of Legacy.
func (s *EnvironmentPrivateNetwork) SetLegacy(val NilEnvironmentPrivateNetworkLegacy) {
	s.Legacy = val
}

type EnvironmentPrivateNetworkIpv6 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *EnvironmentPrivateNetworkIpv6) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *EnvironmentPrivateNetworkIpv6) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *EnvironmentPrivateNetworkIpv6) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *EnvironmentPrivateNetworkIpv6) SetCidr(val string) {
	s.Cidr = val
}

// Legacy network information for an Environment.
type EnvironmentPrivateNetworkLegacy struct {
	// The IPv4 subnet Id.
	Subnet int `json:"subnet"`
	// IPv4 information available from environments using legacy networking.
	Ipv4 OptNilEnvironmentPrivateNetworkLegacyIpv4 `json:"ipv4"`
}

// GetSubnet returns the value of Subnet.
func (s *EnvironmentPrivateNetworkLegacy) GetSubnet() int {
	return s.Subnet
}

// GetIpv4 returns the value of Ipv4.
func (s *EnvironmentPrivateNetworkLegacy) GetIpv4() OptNilEnvironmentPrivateNetworkLegacyIpv4 {
	return s.Ipv4
}

// SetSubnet sets the value of Subnet.
func (s *EnvironmentPrivateNetworkLegacy) SetSubnet(val int) {
	s.Subnet = val
}

// SetIpv4 sets the value of Ipv4.
func (s *EnvironmentPrivateNetworkLegacy) SetIpv4(val OptNilEnvironmentPrivateNetworkLegacyIpv4) {
	s.Ipv4 = val
}

type EnvironmentPrivateNetworkLegacyIpv4 struct {
	// The IP address.
	IP string `json:"ip"`
	// The CIDR notation, describing the range of IP addresses.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *EnvironmentPrivateNetworkLegacyIpv4) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *EnvironmentPrivateNetworkLegacyIpv4) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *EnvironmentPrivateNetworkLegacyIpv4) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *EnvironmentPrivateNetworkLegacyIpv4) SetCidr(val string) {
	s.Cidr = val
}

// A task to reconfigure deployment mappings on an environment.
// Ref: #/components/schemas/EnvironmentReconfigureDeploymentsAction
type EnvironmentReconfigureDeploymentsAction struct {
	Contents EnvironmentReconfigureDeploymentsActionContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *EnvironmentReconfigureDeploymentsAction) GetContents() EnvironmentReconfigureDeploymentsActionContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *EnvironmentReconfigureDeploymentsAction) SetContents(val EnvironmentReconfigureDeploymentsActionContents) {
	s.Contents = val
}

// The action to take.
type EnvironmentReconfigureDeploymentsActionAction string

const (
	EnvironmentReconfigureDeploymentsActionActionDeploymentsReconfigure EnvironmentReconfigureDeploymentsActionAction = "deployments.reconfigure"
)

// AllValues returns all EnvironmentReconfigureDeploymentsActionAction values.
func (EnvironmentReconfigureDeploymentsActionAction) AllValues() []EnvironmentReconfigureDeploymentsActionAction {
	return []EnvironmentReconfigureDeploymentsActionAction{
		EnvironmentReconfigureDeploymentsActionActionDeploymentsReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentReconfigureDeploymentsActionAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentReconfigureDeploymentsActionActionDeploymentsReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentReconfigureDeploymentsActionAction) UnmarshalText(data []byte) error {
	switch EnvironmentReconfigureDeploymentsActionAction(data) {
	case EnvironmentReconfigureDeploymentsActionActionDeploymentsReconfigure:
		*s = EnvironmentReconfigureDeploymentsActionActionDeploymentsReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentReconfigureDeploymentsActionContents struct {
	Tags EnvironmentDeploymentTags `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *EnvironmentReconfigureDeploymentsActionContents) GetTags() EnvironmentDeploymentTags {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *EnvironmentReconfigureDeploymentsActionContents) SetTags(val EnvironmentDeploymentTags) {
	s.Tags = val
}

// Service containers run by this environment and their configurations.
// Ref: #/components/schemas/EnvironmentServices
type EnvironmentServices struct {
	Loadbalancer NilEnvironmentServicesLoadbalancer `json:"loadbalancer"`
	Discovery    OptNilEnvironmentServicesDiscovery `json:"discovery"`
	Vpn          OptNilEnvironmentServicesVpn       `json:"vpn"`
	Scheduler    OptNilEnvironmentServicesScheduler `json:"scheduler"`
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *EnvironmentServices) GetLoadbalancer() NilEnvironmentServicesLoadbalancer {
	return s.Loadbalancer
}

// GetDiscovery returns the value of Discovery.
func (s *EnvironmentServices) GetDiscovery() OptNilEnvironmentServicesDiscovery {
	return s.Discovery
}

// GetVpn returns the value of Vpn.
func (s *EnvironmentServices) GetVpn() OptNilEnvironmentServicesVpn {
	return s.Vpn
}

// GetScheduler returns the value of Scheduler.
func (s *EnvironmentServices) GetScheduler() OptNilEnvironmentServicesScheduler {
	return s.Scheduler
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *EnvironmentServices) SetLoadbalancer(val NilEnvironmentServicesLoadbalancer) {
	s.Loadbalancer = val
}

// SetDiscovery sets the value of Discovery.
func (s *EnvironmentServices) SetDiscovery(val OptNilEnvironmentServicesDiscovery) {
	s.Discovery = val
}

// SetVpn sets the value of Vpn.
func (s *EnvironmentServices) SetVpn(val OptNilEnvironmentServicesVpn) {
	s.Vpn = val
}

// SetScheduler sets the value of Scheduler.
func (s *EnvironmentServices) SetScheduler(val OptNilEnvironmentServicesScheduler) {
	s.Scheduler = val
}

// Information about the environments discovery service(s).
type EnvironmentServicesDiscovery struct {
	// Whether or not the discovery service is enabled.
	Enable bool `json:"enable"`
	// The ID of the discovery service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// A boolean where `true` represents the desire to automatically update the environment discovery
	// service.
	AutoUpdate OptBool `json:"auto_update"`
	// The config object for the discovery service.
	Config NilEnvironmentServicesDiscoveryConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentServicesDiscovery) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentServicesDiscovery) GetContainerID() string {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentServicesDiscovery) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentServicesDiscovery) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *EnvironmentServicesDiscovery) GetConfig() NilEnvironmentServicesDiscoveryConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *EnvironmentServicesDiscovery) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentServicesDiscovery) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentServicesDiscovery) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentServicesDiscovery) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *EnvironmentServicesDiscovery) SetConfig(val NilEnvironmentServicesDiscoveryConfig) {
	s.Config = val
}

// The config object for the discovery service.
type EnvironmentServicesDiscoveryConfig struct {
	// A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom
	// /etc/resolv.conf file that works environment wide.
	Hosts OptNilEnvironmentServicesDiscoveryConfigHosts `json:"hosts"`
}

// GetHosts returns the value of Hosts.
func (s *EnvironmentServicesDiscoveryConfig) GetHosts() OptNilEnvironmentServicesDiscoveryConfigHosts {
	return s.Hosts
}

// SetHosts sets the value of Hosts.
func (s *EnvironmentServicesDiscoveryConfig) SetHosts(val OptNilEnvironmentServicesDiscoveryConfigHosts) {
	s.Hosts = val
}

// A mapping of hostnames to IP addresses for custom internal resolutions. Acts as a custom
// /etc/resolv.conf file that works environment wide.
type EnvironmentServicesDiscoveryConfigHosts map[string]EnvironmentServicesDiscoveryConfigHostsItem

func (s *EnvironmentServicesDiscoveryConfigHosts) init() EnvironmentServicesDiscoveryConfigHosts {
	m := *s
	if m == nil {
		m = map[string]EnvironmentServicesDiscoveryConfigHostsItem{}
		*s = m
	}
	return m
}

type EnvironmentServicesDiscoveryConfigHostsItem struct {
	// The IPv4 address the discovery server should return to any container instance requesting this
	// hostname.
	Ipv4 OptNilStringArray `json:"ipv4"`
	// The IPv6 address the discovery server should return to any container instance requesting this
	// hostname.
	Ipv6 OptNilStringArray `json:"ipv6"`
}

// GetIpv4 returns the value of Ipv4.
func (s *EnvironmentServicesDiscoveryConfigHostsItem) GetIpv4() OptNilStringArray {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *EnvironmentServicesDiscoveryConfigHostsItem) GetIpv6() OptNilStringArray {
	return s.Ipv6
}

// SetIpv4 sets the value of Ipv4.
func (s *EnvironmentServicesDiscoveryConfigHostsItem) SetIpv4(val OptNilStringArray) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *EnvironmentServicesDiscoveryConfigHostsItem) SetIpv6(val OptNilStringArray) {
	s.Ipv6 = val
}

// Information about the environments loadbalancer service(s).
type EnvironmentServicesLoadbalancer struct {
	// Whether or not the loadbalancer service is enabled.
	Enable bool `json:"enable"`
	// The ID of the loadbalancer service container.
	ContainerID NilString `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptBool               `json:"auto_update"`
	Config     NilLoadBalancerConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentServicesLoadbalancer) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentServicesLoadbalancer) GetContainerID() NilString {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentServicesLoadbalancer) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentServicesLoadbalancer) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *EnvironmentServicesLoadbalancer) GetConfig() NilLoadBalancerConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *EnvironmentServicesLoadbalancer) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentServicesLoadbalancer) SetContainerID(val NilString) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentServicesLoadbalancer) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentServicesLoadbalancer) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *EnvironmentServicesLoadbalancer) SetConfig(val NilLoadBalancerConfig) {
	s.Config = val
}

// Information about the environments scheduler service. The scheduler is used by containers with a
// function deployment strategy to route requests to the correct instances.
type EnvironmentServicesScheduler struct {
	// Whether or not the scheduler service is enabled.
	Enable bool `json:"enable"`
	// The ID of the scheduler service container.
	ContainerID NilString `json:"container_id"`
	// A boolean representing if the scheduler service container is set to high availability. mode or not.
	//  As of Jan 2024, this will always be false because HA is not availiable for the scheduler service.
	HighAvailability OptBool `json:"high_availability"`
	// A boolean where `true` represents the desire to automatically update the environment scheduler
	// service.
	AutoUpdate OptBool                                  `json:"auto_update"`
	Config     OptNilEnvironmentServicesSchedulerConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentServicesScheduler) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentServicesScheduler) GetContainerID() NilString {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentServicesScheduler) GetHighAvailability() OptBool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentServicesScheduler) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *EnvironmentServicesScheduler) GetConfig() OptNilEnvironmentServicesSchedulerConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *EnvironmentServicesScheduler) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentServicesScheduler) SetContainerID(val NilString) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentServicesScheduler) SetHighAvailability(val OptBool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentServicesScheduler) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *EnvironmentServicesScheduler) SetConfig(val OptNilEnvironmentServicesSchedulerConfig) {
	s.Config = val
}

// Configuration options for the scheduler Environment service.
type EnvironmentServicesSchedulerConfig struct {
	// If true, the scheduler service API will be exposed publicly via the load balancer. This is useful
	// for allowing external services spin up function containers using custom logic.
	Public     bool                 `json:"public"`
	AccessKeys []SchedulerAccessKey `json:"access_keys"`
}

// GetPublic returns the value of Public.
func (s *EnvironmentServicesSchedulerConfig) GetPublic() bool {
	return s.Public
}

// GetAccessKeys returns the value of AccessKeys.
func (s *EnvironmentServicesSchedulerConfig) GetAccessKeys() []SchedulerAccessKey {
	return s.AccessKeys
}

// SetPublic sets the value of Public.
func (s *EnvironmentServicesSchedulerConfig) SetPublic(val bool) {
	s.Public = val
}

// SetAccessKeys sets the value of AccessKeys.
func (s *EnvironmentServicesSchedulerConfig) SetAccessKeys(val []SchedulerAccessKey) {
	s.AccessKeys = val
}

// Information about the environments vpn service(s).
type EnvironmentServicesVpn struct {
	// Whether or not the VPN service is enabled.
	Enable bool `json:"enable"`
	// The ID of the VPN service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptBool `json:"auto_update"`
	// The config object for the VPN service.
	Config NilEnvironmentServicesVpnConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentServicesVpn) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentServicesVpn) GetContainerID() string {
	return s.ContainerID
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentServicesVpn) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *EnvironmentServicesVpn) GetConfig() NilEnvironmentServicesVpnConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *EnvironmentServicesVpn) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentServicesVpn) SetContainerID(val string) {
	s.ContainerID = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentServicesVpn) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *EnvironmentServicesVpn) SetConfig(val NilEnvironmentServicesVpnConfig) {
	s.Config = val
}

// The config object for the VPN service.
type EnvironmentServicesVpnConfig struct {
	// If true, routes all traffic through the VPN, even non-Cycle traffic.
	AllowInternet bool `json:"allow_internet"`
	// Auth configuration for the VPN.
	Auth EnvironmentServicesVpnConfigAuth `json:"auth"`
}

// GetAllowInternet returns the value of AllowInternet.
func (s *EnvironmentServicesVpnConfig) GetAllowInternet() bool {
	return s.AllowInternet
}

// GetAuth returns the value of Auth.
func (s *EnvironmentServicesVpnConfig) GetAuth() EnvironmentServicesVpnConfigAuth {
	return s.Auth
}

// SetAllowInternet sets the value of AllowInternet.
func (s *EnvironmentServicesVpnConfig) SetAllowInternet(val bool) {
	s.AllowInternet = val
}

// SetAuth sets the value of Auth.
func (s *EnvironmentServicesVpnConfig) SetAuth(val EnvironmentServicesVpnConfigAuth) {
	s.Auth = val
}

// Auth configuration for the VPN.
type EnvironmentServicesVpnConfigAuth struct {
	// A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should
	// return a 200 status if the login is permitted.
	Webhook NilString `json:"webhook"`
	// If true, allows any Cycle account with access to the environment to log in to the VPN using their
	// Cycle email and password.
	CycleAccounts bool `json:"cycle_accounts"`
	// If true, allows the custom VPN accounts to log in to the VPN.
	VpnAccounts OptBool `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *EnvironmentServicesVpnConfigAuth) GetWebhook() NilString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *EnvironmentServicesVpnConfigAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *EnvironmentServicesVpnConfigAuth) GetVpnAccounts() OptBool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *EnvironmentServicesVpnConfigAuth) SetWebhook(val NilString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *EnvironmentServicesVpnConfigAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *EnvironmentServicesVpnConfigAuth) SetVpnAccounts(val OptBool) {
	s.VpnAccounts = val
}

// A task to start an environment.
// Ref: #/components/schemas/EnvironmentStartAction
type EnvironmentStartAction struct{}

// The name of the action to perform.
type EnvironmentStartActionAction string

const (
	EnvironmentStartActionActionStart EnvironmentStartActionAction = "start"
)

// AllValues returns all EnvironmentStartActionAction values.
func (EnvironmentStartActionAction) AllValues() []EnvironmentStartActionAction {
	return []EnvironmentStartActionAction{
		EnvironmentStartActionActionStart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStartActionAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStartActionActionStart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStartActionAction) UnmarshalText(data []byte) error {
	switch EnvironmentStartActionAction(data) {
	case EnvironmentStartActionActionStart:
		*s = EnvironmentStartActionActionStart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Settings for starting an environment in a pipeline.
// Ref: #/components/schemas/EnvironmentStartStep
type EnvironmentStartStep struct {
	// An identifier for the step.
	Identifier OptString                      `json:"identifier"`
	Options    OptEnvironmentStartStepOptions `json:"options"`
	Details    EnvironmentStartStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentStartStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentStartStep) GetOptions() OptEnvironmentStartStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentStartStep) GetDetails() EnvironmentStartStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentStartStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentStartStep) SetOptions(val OptEnvironmentStartStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentStartStep) SetDetails(val EnvironmentStartStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentStartStepAction string

const (
	EnvironmentStartStepActionEnvironmentStart EnvironmentStartStepAction = "environment.start"
)

// AllValues returns all EnvironmentStartStepAction values.
func (EnvironmentStartStepAction) AllValues() []EnvironmentStartStepAction {
	return []EnvironmentStartStepAction{
		EnvironmentStartStepActionEnvironmentStart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStartStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStartStepActionEnvironmentStart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStartStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentStartStepAction(data) {
	case EnvironmentStartStepActionEnvironmentStart:
		*s = EnvironmentStartStepActionEnvironmentStart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentStartStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentStartStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentStartStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

type EnvironmentStartStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentStartStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentStartStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Merged schema.
// Ref: #/components/schemas/EnvironmentState
type EnvironmentState struct {
	// The current state of the environment.
	Current EnvironmentStateCurrent `json:"current"`
	Changed DateTime                `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptEnvironmentStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *EnvironmentState) GetCurrent() EnvironmentStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *EnvironmentState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *EnvironmentState) GetError() OptEnvironmentStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *EnvironmentState) SetCurrent(val EnvironmentStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *EnvironmentState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *EnvironmentState) SetError(val OptEnvironmentStateError) {
	s.Error = val
}

// The current state of the environment.
type EnvironmentStateCurrent string

const (
	EnvironmentStateCurrentNew      EnvironmentStateCurrent = "new"
	EnvironmentStateCurrentLive     EnvironmentStateCurrent = "live"
	EnvironmentStateCurrentCloning  EnvironmentStateCurrent = "cloning"
	EnvironmentStateCurrentDeleting EnvironmentStateCurrent = "deleting"
	EnvironmentStateCurrentDeleted  EnvironmentStateCurrent = "deleted"
)

// AllValues returns all EnvironmentStateCurrent values.
func (EnvironmentStateCurrent) AllValues() []EnvironmentStateCurrent {
	return []EnvironmentStateCurrent{
		EnvironmentStateCurrentNew,
		EnvironmentStateCurrentLive,
		EnvironmentStateCurrentCloning,
		EnvironmentStateCurrentDeleting,
		EnvironmentStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStateCurrentNew:
		return []byte(s), nil
	case EnvironmentStateCurrentLive:
		return []byte(s), nil
	case EnvironmentStateCurrentCloning:
		return []byte(s), nil
	case EnvironmentStateCurrentDeleting:
		return []byte(s), nil
	case EnvironmentStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStateCurrent) UnmarshalText(data []byte) error {
	switch EnvironmentStateCurrent(data) {
	case EnvironmentStateCurrentNew:
		*s = EnvironmentStateCurrentNew
		return nil
	case EnvironmentStateCurrentLive:
		*s = EnvironmentStateCurrentLive
		return nil
	case EnvironmentStateCurrentCloning:
		*s = EnvironmentStateCurrentCloning
		return nil
	case EnvironmentStateCurrentDeleting:
		*s = EnvironmentStateCurrentDeleting
		return nil
	case EnvironmentStateCurrentDeleted:
		*s = EnvironmentStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type EnvironmentStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *EnvironmentStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *EnvironmentStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *EnvironmentStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *EnvironmentStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A task to stop an environment.
// Ref: #/components/schemas/EnvironmentStopAction
type EnvironmentStopAction struct{}

// The name of the action to perform.
type EnvironmentStopActionAction string

const (
	EnvironmentStopActionActionStop EnvironmentStopActionAction = "stop"
)

// AllValues returns all EnvironmentStopActionAction values.
func (EnvironmentStopActionAction) AllValues() []EnvironmentStopActionAction {
	return []EnvironmentStopActionAction{
		EnvironmentStopActionActionStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStopActionAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStopActionActionStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStopActionAction) UnmarshalText(data []byte) error {
	switch EnvironmentStopActionAction(data) {
	case EnvironmentStopActionActionStop:
		*s = EnvironmentStopActionActionStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Settings for stopping an environment in a pipeline.
// Ref: #/components/schemas/EnvironmentStopStep
type EnvironmentStopStep struct {
	// An identifier for the step.
	Identifier OptString                     `json:"identifier"`
	Options    OptEnvironmentStopStepOptions `json:"options"`
	Details    EnvironmentStopStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *EnvironmentStopStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *EnvironmentStopStep) GetOptions() OptEnvironmentStopStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *EnvironmentStopStep) GetDetails() EnvironmentStopStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *EnvironmentStopStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *EnvironmentStopStep) SetOptions(val OptEnvironmentStopStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *EnvironmentStopStep) SetDetails(val EnvironmentStopStepDetails) {
	s.Details = val
}

// The action that the step takes.
type EnvironmentStopStepAction string

const (
	EnvironmentStopStepActionEnvironmentStop EnvironmentStopStepAction = "environment.stop"
)

// AllValues returns all EnvironmentStopStepAction values.
func (EnvironmentStopStepAction) AllValues() []EnvironmentStopStepAction {
	return []EnvironmentStopStepAction{
		EnvironmentStopStepActionEnvironmentStop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EnvironmentStopStepAction) MarshalText() ([]byte, error) {
	switch s {
	case EnvironmentStopStepActionEnvironmentStop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnvironmentStopStepAction) UnmarshalText(data []byte) error {
	switch EnvironmentStopStepAction(data) {
	case EnvironmentStopStepActionEnvironmentStop:
		*s = EnvironmentStopStepActionEnvironmentStop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EnvironmentStopStepDetails struct {
	Environment FluidIdentifier `json:"environment"`
}

// GetEnvironment returns the value of Environment.
func (s *EnvironmentStopStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// SetEnvironment sets the value of Environment.
func (s *EnvironmentStopStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

type EnvironmentStopStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *EnvironmentStopStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *EnvironmentStopStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Contains useful and relevant data/statistics for an environment that would otherwise be several
// separate API calls.
// Ref: #/components/schemas/EnvironmentSummary
type EnvironmentSummary struct {
	ID    ID               `json:"id"`
	State EnvironmentState `json:"state"`
	// An object containing information about the service containers associated with this container. Each
	// key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
	Services EnvironmentSummaryServices `json:"services"`
	// Statistics about the containers and instances associated with this environment.
	Stats EnvironmentSummaryStats `json:"stats"`
}

// GetID returns the value of ID.
func (s *EnvironmentSummary) GetID() ID {
	return s.ID
}

// GetState returns the value of State.
func (s *EnvironmentSummary) GetState() EnvironmentState {
	return s.State
}

// GetServices returns the value of Services.
func (s *EnvironmentSummary) GetServices() EnvironmentSummaryServices {
	return s.Services
}

// GetStats returns the value of Stats.
func (s *EnvironmentSummary) GetStats() EnvironmentSummaryStats {
	return s.Stats
}

// SetID sets the value of ID.
func (s *EnvironmentSummary) SetID(val ID) {
	s.ID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummary) SetState(val EnvironmentState) {
	s.State = val
}

// SetServices sets the value of Services.
func (s *EnvironmentSummary) SetServices(val EnvironmentSummaryServices) {
	s.Services = val
}

// SetStats sets the value of Stats.
func (s *EnvironmentSummary) SetStats(val EnvironmentSummaryStats) {
	s.Stats = val
}

// An object containing information about the service containers associated with this container. Each
// key is the name of a service, one of `discovery`, `vpn`, or `loadbalancer`.
type EnvironmentSummaryServices struct {
	Loadbalancer OptNilEnvironmentSummaryServicesLoadbalancer `json:"loadbalancer"`
	Discovery    OptNilEnvironmentSummaryServicesDiscovery    `json:"discovery"`
	Vpn          OptNilEnvironmentSummaryServicesVpn          `json:"vpn"`
	Scheduler    OptNilEnvironmentSummaryServicesScheduler    `json:"scheduler"`
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *EnvironmentSummaryServices) GetLoadbalancer() OptNilEnvironmentSummaryServicesLoadbalancer {
	return s.Loadbalancer
}

// GetDiscovery returns the value of Discovery.
func (s *EnvironmentSummaryServices) GetDiscovery() OptNilEnvironmentSummaryServicesDiscovery {
	return s.Discovery
}

// GetVpn returns the value of Vpn.
func (s *EnvironmentSummaryServices) GetVpn() OptNilEnvironmentSummaryServicesVpn {
	return s.Vpn
}

// GetScheduler returns the value of Scheduler.
func (s *EnvironmentSummaryServices) GetScheduler() OptNilEnvironmentSummaryServicesScheduler {
	return s.Scheduler
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *EnvironmentSummaryServices) SetLoadbalancer(val OptNilEnvironmentSummaryServicesLoadbalancer) {
	s.Loadbalancer = val
}

// SetDiscovery sets the value of Discovery.
func (s *EnvironmentSummaryServices) SetDiscovery(val OptNilEnvironmentSummaryServicesDiscovery) {
	s.Discovery = val
}

// SetVpn sets the value of Vpn.
func (s *EnvironmentSummaryServices) SetVpn(val OptNilEnvironmentSummaryServicesVpn) {
	s.Vpn = val
}

// SetScheduler sets the value of Scheduler.
func (s *EnvironmentSummaryServices) SetScheduler(val OptNilEnvironmentSummaryServicesScheduler) {
	s.Scheduler = val
}

// An object containing information about a service container associated with this environment.
type EnvironmentSummaryServicesDiscovery struct {
	// Whether or not the service is enabled.
	Enable      bool           `json:"enable"`
	ContainerID OptNilString   `json:"container_id"`
	State       ContainerState `json:"state"`
	// Whether or not the service is deployed in high availability.
	HighAvailability bool `json:"high_availability"`
	// Whether or not the service will be automatically updated as new versions are released. Otherwise,
	// the service will need to be restarted manually.
	AutoUpdate OptBool `json:"auto_update"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentSummaryServicesDiscovery) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentSummaryServicesDiscovery) GetContainerID() OptNilString {
	return s.ContainerID
}

// GetState returns the value of State.
func (s *EnvironmentSummaryServicesDiscovery) GetState() ContainerState {
	return s.State
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentSummaryServicesDiscovery) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentSummaryServicesDiscovery) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// SetEnable sets the value of Enable.
func (s *EnvironmentSummaryServicesDiscovery) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentSummaryServicesDiscovery) SetContainerID(val OptNilString) {
	s.ContainerID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummaryServicesDiscovery) SetState(val ContainerState) {
	s.State = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentSummaryServicesDiscovery) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentSummaryServicesDiscovery) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// An object containing information about a service container associated with this environment.
type EnvironmentSummaryServicesLoadbalancer struct {
	// Whether or not the service is enabled.
	Enable      bool           `json:"enable"`
	ContainerID OptNilString   `json:"container_id"`
	State       ContainerState `json:"state"`
	// Whether or not the service is deployed in high availability.
	HighAvailability bool `json:"high_availability"`
	// Whether or not the service will be automatically updated as new versions are released. Otherwise,
	// the service will need to be restarted manually.
	AutoUpdate OptBool `json:"auto_update"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentSummaryServicesLoadbalancer) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentSummaryServicesLoadbalancer) GetContainerID() OptNilString {
	return s.ContainerID
}

// GetState returns the value of State.
func (s *EnvironmentSummaryServicesLoadbalancer) GetState() ContainerState {
	return s.State
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentSummaryServicesLoadbalancer) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentSummaryServicesLoadbalancer) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// SetEnable sets the value of Enable.
func (s *EnvironmentSummaryServicesLoadbalancer) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentSummaryServicesLoadbalancer) SetContainerID(val OptNilString) {
	s.ContainerID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummaryServicesLoadbalancer) SetState(val ContainerState) {
	s.State = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentSummaryServicesLoadbalancer) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentSummaryServicesLoadbalancer) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// An object containing information about a service container associated with this environment.
type EnvironmentSummaryServicesScheduler struct {
	// Whether or not the service is enabled.
	Enable      bool           `json:"enable"`
	ContainerID OptNilString   `json:"container_id"`
	State       ContainerState `json:"state"`
	// Whether or not the service is deployed in high availability.
	HighAvailability bool `json:"high_availability"`
	// Whether or not the service will be automatically updated as new versions are released. Otherwise,
	// the service will need to be restarted manually.
	AutoUpdate OptBool `json:"auto_update"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentSummaryServicesScheduler) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentSummaryServicesScheduler) GetContainerID() OptNilString {
	return s.ContainerID
}

// GetState returns the value of State.
func (s *EnvironmentSummaryServicesScheduler) GetState() ContainerState {
	return s.State
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentSummaryServicesScheduler) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentSummaryServicesScheduler) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// SetEnable sets the value of Enable.
func (s *EnvironmentSummaryServicesScheduler) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentSummaryServicesScheduler) SetContainerID(val OptNilString) {
	s.ContainerID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummaryServicesScheduler) SetState(val ContainerState) {
	s.State = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentSummaryServicesScheduler) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentSummaryServicesScheduler) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// An object containing information about a service container associated with this environment.
type EnvironmentSummaryServicesVpn struct {
	// Whether or not the service is enabled.
	Enable      bool           `json:"enable"`
	ContainerID OptNilString   `json:"container_id"`
	State       ContainerState `json:"state"`
	// Whether or not the service is deployed in high availability.
	HighAvailability bool `json:"high_availability"`
	// Whether or not the service will be automatically updated as new versions are released. Otherwise,
	// the service will need to be restarted manually.
	AutoUpdate OptBool `json:"auto_update"`
}

// GetEnable returns the value of Enable.
func (s *EnvironmentSummaryServicesVpn) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *EnvironmentSummaryServicesVpn) GetContainerID() OptNilString {
	return s.ContainerID
}

// GetState returns the value of State.
func (s *EnvironmentSummaryServicesVpn) GetState() ContainerState {
	return s.State
}

// GetHighAvailability returns the value of HighAvailability.
func (s *EnvironmentSummaryServicesVpn) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *EnvironmentSummaryServicesVpn) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// SetEnable sets the value of Enable.
func (s *EnvironmentSummaryServicesVpn) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *EnvironmentSummaryServicesVpn) SetContainerID(val OptNilString) {
	s.ContainerID = val
}

// SetState sets the value of State.
func (s *EnvironmentSummaryServicesVpn) SetState(val ContainerState) {
	s.State = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *EnvironmentSummaryServicesVpn) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *EnvironmentSummaryServicesVpn) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// Statistics about the containers and instances associated with this environment.
type EnvironmentSummaryStats struct {
	Containers StateCountSummary `json:"containers"`
	Instances  StateCountSummary `json:"instances"`
}

// GetContainers returns the value of Containers.
func (s *EnvironmentSummaryStats) GetContainers() StateCountSummary {
	return s.Containers
}

// GetInstances returns the value of Instances.
func (s *EnvironmentSummaryStats) GetInstances() StateCountSummary {
	return s.Instances
}

// SetContainers sets the value of Containers.
func (s *EnvironmentSummaryStats) SetContainers(val StateCountSummary) {
	s.Containers = val
}

// SetInstances sets the value of Instances.
func (s *EnvironmentSummaryStats) SetInstances(val StateCountSummary) {
	s.Instances = val
}

// The Cycle API uses standard HTTP response codes to indicate the success or failure of an API
// request. Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate a request
// that failed due to input, and codes in the `5xx` range indicate an error on Cycle's part (rare).
// There are two types of error response objects. Errors with authentication are formatted to follow
// the OAuth spec, while all other errors follow the same convention. If you're using one of our API
// Libraries, they will standardize OAuth errors to fit the general convention.
// Ref: #/components/schemas/Error
type Error struct {
	// The HTTP response code.
	Status OptErrorStatus `json:"status"`
	// A Cycle standard error code.
	Code OptErrorCode `json:"code"`
	// The main text describing the error.
	Title OptString `json:"title"`
	// A more detailed description of the error.
	Detail OptString `json:"detail"`
	// A [JSON pointer](https://tools.ietf.org/html/rfc6901/) describing the source of an error.
	Source OptString `json:"source"`
	// Additional entries on the error object to provide extra details.
	Extra OptErrorExtra `json:"extra"`
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() OptErrorStatus {
	return s.Status
}

// GetCode returns the value of Code.
func (s *Error) GetCode() OptErrorCode {
	return s.Code
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() OptString {
	return s.Title
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() OptString {
	return s.Detail
}

// GetSource returns the value of Source.
func (s *Error) GetSource() OptString {
	return s.Source
}

// GetExtra returns the value of Extra.
func (s *Error) GetExtra() OptErrorExtra {
	return s.Extra
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val OptErrorStatus) {
	s.Status = val
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val OptErrorCode) {
	s.Code = val
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val OptString) {
	s.Title = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val OptString) {
	s.Detail = val
}

// SetSource sets the value of Source.
func (s *Error) SetSource(val OptString) {
	s.Source = val
}

// SetExtra sets the value of Extra.
func (s *Error) SetExtra(val OptErrorExtra) {
	s.Extra = val
}

// A Cycle standard error code.
type ErrorCode string

const (
	ErrorCode400InvalidSyntax              ErrorCode = "400.invalid_syntax"
	ErrorCode401AuthInvalid                ErrorCode = "401.auth_invalid"
	ErrorCode401AuthExpired                ErrorCode = "401.auth_expired"
	ErrorCode401NoCookie                   ErrorCode = "401.no_cookie"
	ErrorCode401UnauthorizedApplication    ErrorCode = "401.unauthorized_application"
	ErrorCode403Mismatch                   ErrorCode = "403.mismatch"
	ErrorCode403WrongHub                   ErrorCode = "403.wrong_hub"
	ErrorCode403NotReady                   ErrorCode = "403.not_ready"
	ErrorCode403Expired                    ErrorCode = "403.expired"
	ErrorCode403RestrictedPortal           ErrorCode = "403.restricted_portal"
	ErrorCode403Permissions                ErrorCode = "403.permissions"
	ErrorCode403WrongScope                 ErrorCode = "403.wrong_scope"
	ErrorCode403InvalidIP                  ErrorCode = "403.invalid_ip"
	ErrorCode403InvalidState               ErrorCode = "403.invalid_state"
	ErrorCode403NotApproved                ErrorCode = "403.not_approved"
	ErrorCode403NotAllowed                 ErrorCode = "403.not_allowed"
	ErrorCode403PlatformDisabled           ErrorCode = "403.platform_disabled"
	ErrorCode4032FARequired                ErrorCode = "403.2fa_required"
	ErrorCode4032FAFailed                  ErrorCode = "403.2fa_failed"
	ErrorCode403NewApplicationCapabilities ErrorCode = "403.new_application_capabilities"
	ErrorCode403TierRestricted             ErrorCode = "403.tier_restricted"
	ErrorCode404Hub                        ErrorCode = "404.hub"
	ErrorCode404HubInvitation              ErrorCode = "404.hub.invitation"
	ErrorCode404SdnNetwork                 ErrorCode = "404.sdn_network"
	ErrorCode404Environment                ErrorCode = "404.environment"
	ErrorCode404EnvironmentScopedVariable  ErrorCode = "404.environment.scoped-variable"
	ErrorCode404HubAPIKey                  ErrorCode = "404.hub.api_key"
	ErrorCode404HubProvider                ErrorCode = "404.hub.provider"
	ErrorCode404HubIntegration             ErrorCode = "404.hub.integration"
	ErrorCode404URI                        ErrorCode = "404.uri"
	ErrorCode404Provider                   ErrorCode = "404.provider"
	ErrorCode404Stack                      ErrorCode = "404.stack"
	ErrorCode404Survey                     ErrorCode = "404.survey"
	ErrorCode404SurveyResponse             ErrorCode = "404.survey_response"
	ErrorCode404Notification               ErrorCode = "404.notification"
	ErrorCode404StackBuild                 ErrorCode = "404.stack_build"
	ErrorCode404Image                      ErrorCode = "404.image"
	ErrorCode404ImageSource                ErrorCode = "404.image.source"
	ErrorCode404ImageBuildLog              ErrorCode = "404.image.build_log"
	ErrorCode404Job                        ErrorCode = "404.job"
	ErrorCode404BillingOrder               ErrorCode = "404.billing.order"
	ErrorCode404BillingService             ErrorCode = "404.billing.service"
	ErrorCode404BillingCredit              ErrorCode = "404.billing.credit"
	ErrorCode404BillingInvoice             ErrorCode = "404.billing.invoice"
	ErrorCode404BillingTier                ErrorCode = "404.billing.tier"
	ErrorCode404BillingSupport             ErrorCode = "404.billing.support"
	ErrorCode404BillingPaymentMethod       ErrorCode = "404.billing.payment_method"
	ErrorCode404BillingPromoCode           ErrorCode = "404.billing.promo_code"
	ErrorCode404Node                       ErrorCode = "404.node"
	ErrorCode404InfrastructureLocation     ErrorCode = "404.infrastructure.location"
	ErrorCode404InfrastructureIpsPool      ErrorCode = "404.infrastructure.ips.pool"
	ErrorCode404InfrastructureProvider     ErrorCode = "404.infrastructure.provider"
	ErrorCode404InfrastructureServer       ErrorCode = "404.infrastructure.server"
	ErrorCode404InfrastructureModel        ErrorCode = "404.infrastructure.model"
	ErrorCode404Account                    ErrorCode = "404.account"
	ErrorCode404Container                  ErrorCode = "404.container"
	ErrorCode404ContainerBackup            ErrorCode = "404.container.backup"
	ErrorCode404VpnAccount                 ErrorCode = "404.vpn_account"
	ErrorCode404Instance                   ErrorCode = "404.instance"
	ErrorCode404Pipeline                   ErrorCode = "404.pipeline"
	ErrorCode404PipelineRun                ErrorCode = "404.pipeline.run"
	ErrorCode404PipelineKey                ErrorCode = "404.pipeline.key"
	ErrorCode404DNSZone                    ErrorCode = "404.dns.zone"
	ErrorCode404DNSRecord                  ErrorCode = "404.dns.record"
	ErrorCode404Cluster                    ErrorCode = "404.cluster"
	ErrorCode404PlatformBuild              ErrorCode = "404.platform_build"
	ErrorCode404CycleosBuild               ErrorCode = "404.cycleos_build"
	ErrorCode404EmailVerification          ErrorCode = "404.email_verification"
	ErrorCode404HubMembership              ErrorCode = "404.hub.membership"
	ErrorCode404Announcement               ErrorCode = "404.announcement"
	ErrorCode404HaServiceSession           ErrorCode = "404.ha_service_session"
	ErrorCode404SalesLead                  ErrorCode = "404.sales_lead"
	ErrorCode409DuplicateFound             ErrorCode = "409.duplicate_found"
	ErrorCode415InvalidContentType         ErrorCode = "415.invalid_content_type"
	ErrorCode422MissingArgument            ErrorCode = "422.missing_argument"
	ErrorCode422InvalidArgument            ErrorCode = "422.invalid_argument"
	ErrorCode422InvalidInput               ErrorCode = "422.invalid_input"
	ErrorCode422MaxExceeded                ErrorCode = "422.max_exceeded"
	ErrorCode422NotCompatible              ErrorCode = "422.not_compatible"
	ErrorCode422AlreadyExists              ErrorCode = "422.already_exists"
	ErrorCode429RateLimiting               ErrorCode = "429.rate_limiting"
	ErrorCode500Database                   ErrorCode = "500.database"
	ErrorCode500DatabaseInsert             ErrorCode = "500.database_insert"
	ErrorCode500DatabaseUpdate             ErrorCode = "500.database_update"
	ErrorCode500DatabaseRemove             ErrorCode = "500.database_remove"
	ErrorCode500Jobd                       ErrorCode = "500.jobd"
	ErrorCode500Unknown                    ErrorCode = "500.unknown"
	ErrorCode500Dev                        ErrorCode = "500.dev"
	ErrorCode500Email                      ErrorCode = "500.email"
	ErrorCode500PaymentGateway             ErrorCode = "500.payment_gateway"
	ErrorCode503NotReady                   ErrorCode = "503.not_ready"
	ErrorCode503NotEnabled                 ErrorCode = "503.not_enabled"
	ErrorCode503DependencyNotEnabled       ErrorCode = "503.dependency_not_enabled"
)

// AllValues returns all ErrorCode values.
func (ErrorCode) AllValues() []ErrorCode {
	return []ErrorCode{
		ErrorCode400InvalidSyntax,
		ErrorCode401AuthInvalid,
		ErrorCode401AuthExpired,
		ErrorCode401NoCookie,
		ErrorCode401UnauthorizedApplication,
		ErrorCode403Mismatch,
		ErrorCode403WrongHub,
		ErrorCode403NotReady,
		ErrorCode403Expired,
		ErrorCode403RestrictedPortal,
		ErrorCode403Permissions,
		ErrorCode403WrongScope,
		ErrorCode403InvalidIP,
		ErrorCode403InvalidState,
		ErrorCode403NotApproved,
		ErrorCode403NotAllowed,
		ErrorCode403PlatformDisabled,
		ErrorCode4032FARequired,
		ErrorCode4032FAFailed,
		ErrorCode403NewApplicationCapabilities,
		ErrorCode403TierRestricted,
		ErrorCode404Hub,
		ErrorCode404HubInvitation,
		ErrorCode404SdnNetwork,
		ErrorCode404Environment,
		ErrorCode404EnvironmentScopedVariable,
		ErrorCode404HubAPIKey,
		ErrorCode404HubProvider,
		ErrorCode404HubIntegration,
		ErrorCode404URI,
		ErrorCode404Provider,
		ErrorCode404Stack,
		ErrorCode404Survey,
		ErrorCode404SurveyResponse,
		ErrorCode404Notification,
		ErrorCode404StackBuild,
		ErrorCode404Image,
		ErrorCode404ImageSource,
		ErrorCode404ImageBuildLog,
		ErrorCode404Job,
		ErrorCode404BillingOrder,
		ErrorCode404BillingService,
		ErrorCode404BillingCredit,
		ErrorCode404BillingInvoice,
		ErrorCode404BillingTier,
		ErrorCode404BillingSupport,
		ErrorCode404BillingPaymentMethod,
		ErrorCode404BillingPromoCode,
		ErrorCode404Node,
		ErrorCode404InfrastructureLocation,
		ErrorCode404InfrastructureIpsPool,
		ErrorCode404InfrastructureProvider,
		ErrorCode404InfrastructureServer,
		ErrorCode404InfrastructureModel,
		ErrorCode404Account,
		ErrorCode404Container,
		ErrorCode404ContainerBackup,
		ErrorCode404VpnAccount,
		ErrorCode404Instance,
		ErrorCode404Pipeline,
		ErrorCode404PipelineRun,
		ErrorCode404PipelineKey,
		ErrorCode404DNSZone,
		ErrorCode404DNSRecord,
		ErrorCode404Cluster,
		ErrorCode404PlatformBuild,
		ErrorCode404CycleosBuild,
		ErrorCode404EmailVerification,
		ErrorCode404HubMembership,
		ErrorCode404Announcement,
		ErrorCode404HaServiceSession,
		ErrorCode404SalesLead,
		ErrorCode409DuplicateFound,
		ErrorCode415InvalidContentType,
		ErrorCode422MissingArgument,
		ErrorCode422InvalidArgument,
		ErrorCode422InvalidInput,
		ErrorCode422MaxExceeded,
		ErrorCode422NotCompatible,
		ErrorCode422AlreadyExists,
		ErrorCode429RateLimiting,
		ErrorCode500Database,
		ErrorCode500DatabaseInsert,
		ErrorCode500DatabaseUpdate,
		ErrorCode500DatabaseRemove,
		ErrorCode500Jobd,
		ErrorCode500Unknown,
		ErrorCode500Dev,
		ErrorCode500Email,
		ErrorCode500PaymentGateway,
		ErrorCode503NotReady,
		ErrorCode503NotEnabled,
		ErrorCode503DependencyNotEnabled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case ErrorCode400InvalidSyntax:
		return []byte(s), nil
	case ErrorCode401AuthInvalid:
		return []byte(s), nil
	case ErrorCode401AuthExpired:
		return []byte(s), nil
	case ErrorCode401NoCookie:
		return []byte(s), nil
	case ErrorCode401UnauthorizedApplication:
		return []byte(s), nil
	case ErrorCode403Mismatch:
		return []byte(s), nil
	case ErrorCode403WrongHub:
		return []byte(s), nil
	case ErrorCode403NotReady:
		return []byte(s), nil
	case ErrorCode403Expired:
		return []byte(s), nil
	case ErrorCode403RestrictedPortal:
		return []byte(s), nil
	case ErrorCode403Permissions:
		return []byte(s), nil
	case ErrorCode403WrongScope:
		return []byte(s), nil
	case ErrorCode403InvalidIP:
		return []byte(s), nil
	case ErrorCode403InvalidState:
		return []byte(s), nil
	case ErrorCode403NotApproved:
		return []byte(s), nil
	case ErrorCode403NotAllowed:
		return []byte(s), nil
	case ErrorCode403PlatformDisabled:
		return []byte(s), nil
	case ErrorCode4032FARequired:
		return []byte(s), nil
	case ErrorCode4032FAFailed:
		return []byte(s), nil
	case ErrorCode403NewApplicationCapabilities:
		return []byte(s), nil
	case ErrorCode403TierRestricted:
		return []byte(s), nil
	case ErrorCode404Hub:
		return []byte(s), nil
	case ErrorCode404HubInvitation:
		return []byte(s), nil
	case ErrorCode404SdnNetwork:
		return []byte(s), nil
	case ErrorCode404Environment:
		return []byte(s), nil
	case ErrorCode404EnvironmentScopedVariable:
		return []byte(s), nil
	case ErrorCode404HubAPIKey:
		return []byte(s), nil
	case ErrorCode404HubProvider:
		return []byte(s), nil
	case ErrorCode404HubIntegration:
		return []byte(s), nil
	case ErrorCode404URI:
		return []byte(s), nil
	case ErrorCode404Provider:
		return []byte(s), nil
	case ErrorCode404Stack:
		return []byte(s), nil
	case ErrorCode404Survey:
		return []byte(s), nil
	case ErrorCode404SurveyResponse:
		return []byte(s), nil
	case ErrorCode404Notification:
		return []byte(s), nil
	case ErrorCode404StackBuild:
		return []byte(s), nil
	case ErrorCode404Image:
		return []byte(s), nil
	case ErrorCode404ImageSource:
		return []byte(s), nil
	case ErrorCode404ImageBuildLog:
		return []byte(s), nil
	case ErrorCode404Job:
		return []byte(s), nil
	case ErrorCode404BillingOrder:
		return []byte(s), nil
	case ErrorCode404BillingService:
		return []byte(s), nil
	case ErrorCode404BillingCredit:
		return []byte(s), nil
	case ErrorCode404BillingInvoice:
		return []byte(s), nil
	case ErrorCode404BillingTier:
		return []byte(s), nil
	case ErrorCode404BillingSupport:
		return []byte(s), nil
	case ErrorCode404BillingPaymentMethod:
		return []byte(s), nil
	case ErrorCode404BillingPromoCode:
		return []byte(s), nil
	case ErrorCode404Node:
		return []byte(s), nil
	case ErrorCode404InfrastructureLocation:
		return []byte(s), nil
	case ErrorCode404InfrastructureIpsPool:
		return []byte(s), nil
	case ErrorCode404InfrastructureProvider:
		return []byte(s), nil
	case ErrorCode404InfrastructureServer:
		return []byte(s), nil
	case ErrorCode404InfrastructureModel:
		return []byte(s), nil
	case ErrorCode404Account:
		return []byte(s), nil
	case ErrorCode404Container:
		return []byte(s), nil
	case ErrorCode404ContainerBackup:
		return []byte(s), nil
	case ErrorCode404VpnAccount:
		return []byte(s), nil
	case ErrorCode404Instance:
		return []byte(s), nil
	case ErrorCode404Pipeline:
		return []byte(s), nil
	case ErrorCode404PipelineRun:
		return []byte(s), nil
	case ErrorCode404PipelineKey:
		return []byte(s), nil
	case ErrorCode404DNSZone:
		return []byte(s), nil
	case ErrorCode404DNSRecord:
		return []byte(s), nil
	case ErrorCode404Cluster:
		return []byte(s), nil
	case ErrorCode404PlatformBuild:
		return []byte(s), nil
	case ErrorCode404CycleosBuild:
		return []byte(s), nil
	case ErrorCode404EmailVerification:
		return []byte(s), nil
	case ErrorCode404HubMembership:
		return []byte(s), nil
	case ErrorCode404Announcement:
		return []byte(s), nil
	case ErrorCode404HaServiceSession:
		return []byte(s), nil
	case ErrorCode404SalesLead:
		return []byte(s), nil
	case ErrorCode409DuplicateFound:
		return []byte(s), nil
	case ErrorCode415InvalidContentType:
		return []byte(s), nil
	case ErrorCode422MissingArgument:
		return []byte(s), nil
	case ErrorCode422InvalidArgument:
		return []byte(s), nil
	case ErrorCode422InvalidInput:
		return []byte(s), nil
	case ErrorCode422MaxExceeded:
		return []byte(s), nil
	case ErrorCode422NotCompatible:
		return []byte(s), nil
	case ErrorCode422AlreadyExists:
		return []byte(s), nil
	case ErrorCode429RateLimiting:
		return []byte(s), nil
	case ErrorCode500Database:
		return []byte(s), nil
	case ErrorCode500DatabaseInsert:
		return []byte(s), nil
	case ErrorCode500DatabaseUpdate:
		return []byte(s), nil
	case ErrorCode500DatabaseRemove:
		return []byte(s), nil
	case ErrorCode500Jobd:
		return []byte(s), nil
	case ErrorCode500Unknown:
		return []byte(s), nil
	case ErrorCode500Dev:
		return []byte(s), nil
	case ErrorCode500Email:
		return []byte(s), nil
	case ErrorCode500PaymentGateway:
		return []byte(s), nil
	case ErrorCode503NotReady:
		return []byte(s), nil
	case ErrorCode503NotEnabled:
		return []byte(s), nil
	case ErrorCode503DependencyNotEnabled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ErrorCode) UnmarshalText(data []byte) error {
	switch ErrorCode(data) {
	case ErrorCode400InvalidSyntax:
		*s = ErrorCode400InvalidSyntax
		return nil
	case ErrorCode401AuthInvalid:
		*s = ErrorCode401AuthInvalid
		return nil
	case ErrorCode401AuthExpired:
		*s = ErrorCode401AuthExpired
		return nil
	case ErrorCode401NoCookie:
		*s = ErrorCode401NoCookie
		return nil
	case ErrorCode401UnauthorizedApplication:
		*s = ErrorCode401UnauthorizedApplication
		return nil
	case ErrorCode403Mismatch:
		*s = ErrorCode403Mismatch
		return nil
	case ErrorCode403WrongHub:
		*s = ErrorCode403WrongHub
		return nil
	case ErrorCode403NotReady:
		*s = ErrorCode403NotReady
		return nil
	case ErrorCode403Expired:
		*s = ErrorCode403Expired
		return nil
	case ErrorCode403RestrictedPortal:
		*s = ErrorCode403RestrictedPortal
		return nil
	case ErrorCode403Permissions:
		*s = ErrorCode403Permissions
		return nil
	case ErrorCode403WrongScope:
		*s = ErrorCode403WrongScope
		return nil
	case ErrorCode403InvalidIP:
		*s = ErrorCode403InvalidIP
		return nil
	case ErrorCode403InvalidState:
		*s = ErrorCode403InvalidState
		return nil
	case ErrorCode403NotApproved:
		*s = ErrorCode403NotApproved
		return nil
	case ErrorCode403NotAllowed:
		*s = ErrorCode403NotAllowed
		return nil
	case ErrorCode403PlatformDisabled:
		*s = ErrorCode403PlatformDisabled
		return nil
	case ErrorCode4032FARequired:
		*s = ErrorCode4032FARequired
		return nil
	case ErrorCode4032FAFailed:
		*s = ErrorCode4032FAFailed
		return nil
	case ErrorCode403NewApplicationCapabilities:
		*s = ErrorCode403NewApplicationCapabilities
		return nil
	case ErrorCode403TierRestricted:
		*s = ErrorCode403TierRestricted
		return nil
	case ErrorCode404Hub:
		*s = ErrorCode404Hub
		return nil
	case ErrorCode404HubInvitation:
		*s = ErrorCode404HubInvitation
		return nil
	case ErrorCode404SdnNetwork:
		*s = ErrorCode404SdnNetwork
		return nil
	case ErrorCode404Environment:
		*s = ErrorCode404Environment
		return nil
	case ErrorCode404EnvironmentScopedVariable:
		*s = ErrorCode404EnvironmentScopedVariable
		return nil
	case ErrorCode404HubAPIKey:
		*s = ErrorCode404HubAPIKey
		return nil
	case ErrorCode404HubProvider:
		*s = ErrorCode404HubProvider
		return nil
	case ErrorCode404HubIntegration:
		*s = ErrorCode404HubIntegration
		return nil
	case ErrorCode404URI:
		*s = ErrorCode404URI
		return nil
	case ErrorCode404Provider:
		*s = ErrorCode404Provider
		return nil
	case ErrorCode404Stack:
		*s = ErrorCode404Stack
		return nil
	case ErrorCode404Survey:
		*s = ErrorCode404Survey
		return nil
	case ErrorCode404SurveyResponse:
		*s = ErrorCode404SurveyResponse
		return nil
	case ErrorCode404Notification:
		*s = ErrorCode404Notification
		return nil
	case ErrorCode404StackBuild:
		*s = ErrorCode404StackBuild
		return nil
	case ErrorCode404Image:
		*s = ErrorCode404Image
		return nil
	case ErrorCode404ImageSource:
		*s = ErrorCode404ImageSource
		return nil
	case ErrorCode404ImageBuildLog:
		*s = ErrorCode404ImageBuildLog
		return nil
	case ErrorCode404Job:
		*s = ErrorCode404Job
		return nil
	case ErrorCode404BillingOrder:
		*s = ErrorCode404BillingOrder
		return nil
	case ErrorCode404BillingService:
		*s = ErrorCode404BillingService
		return nil
	case ErrorCode404BillingCredit:
		*s = ErrorCode404BillingCredit
		return nil
	case ErrorCode404BillingInvoice:
		*s = ErrorCode404BillingInvoice
		return nil
	case ErrorCode404BillingTier:
		*s = ErrorCode404BillingTier
		return nil
	case ErrorCode404BillingSupport:
		*s = ErrorCode404BillingSupport
		return nil
	case ErrorCode404BillingPaymentMethod:
		*s = ErrorCode404BillingPaymentMethod
		return nil
	case ErrorCode404BillingPromoCode:
		*s = ErrorCode404BillingPromoCode
		return nil
	case ErrorCode404Node:
		*s = ErrorCode404Node
		return nil
	case ErrorCode404InfrastructureLocation:
		*s = ErrorCode404InfrastructureLocation
		return nil
	case ErrorCode404InfrastructureIpsPool:
		*s = ErrorCode404InfrastructureIpsPool
		return nil
	case ErrorCode404InfrastructureProvider:
		*s = ErrorCode404InfrastructureProvider
		return nil
	case ErrorCode404InfrastructureServer:
		*s = ErrorCode404InfrastructureServer
		return nil
	case ErrorCode404InfrastructureModel:
		*s = ErrorCode404InfrastructureModel
		return nil
	case ErrorCode404Account:
		*s = ErrorCode404Account
		return nil
	case ErrorCode404Container:
		*s = ErrorCode404Container
		return nil
	case ErrorCode404ContainerBackup:
		*s = ErrorCode404ContainerBackup
		return nil
	case ErrorCode404VpnAccount:
		*s = ErrorCode404VpnAccount
		return nil
	case ErrorCode404Instance:
		*s = ErrorCode404Instance
		return nil
	case ErrorCode404Pipeline:
		*s = ErrorCode404Pipeline
		return nil
	case ErrorCode404PipelineRun:
		*s = ErrorCode404PipelineRun
		return nil
	case ErrorCode404PipelineKey:
		*s = ErrorCode404PipelineKey
		return nil
	case ErrorCode404DNSZone:
		*s = ErrorCode404DNSZone
		return nil
	case ErrorCode404DNSRecord:
		*s = ErrorCode404DNSRecord
		return nil
	case ErrorCode404Cluster:
		*s = ErrorCode404Cluster
		return nil
	case ErrorCode404PlatformBuild:
		*s = ErrorCode404PlatformBuild
		return nil
	case ErrorCode404CycleosBuild:
		*s = ErrorCode404CycleosBuild
		return nil
	case ErrorCode404EmailVerification:
		*s = ErrorCode404EmailVerification
		return nil
	case ErrorCode404HubMembership:
		*s = ErrorCode404HubMembership
		return nil
	case ErrorCode404Announcement:
		*s = ErrorCode404Announcement
		return nil
	case ErrorCode404HaServiceSession:
		*s = ErrorCode404HaServiceSession
		return nil
	case ErrorCode404SalesLead:
		*s = ErrorCode404SalesLead
		return nil
	case ErrorCode409DuplicateFound:
		*s = ErrorCode409DuplicateFound
		return nil
	case ErrorCode415InvalidContentType:
		*s = ErrorCode415InvalidContentType
		return nil
	case ErrorCode422MissingArgument:
		*s = ErrorCode422MissingArgument
		return nil
	case ErrorCode422InvalidArgument:
		*s = ErrorCode422InvalidArgument
		return nil
	case ErrorCode422InvalidInput:
		*s = ErrorCode422InvalidInput
		return nil
	case ErrorCode422MaxExceeded:
		*s = ErrorCode422MaxExceeded
		return nil
	case ErrorCode422NotCompatible:
		*s = ErrorCode422NotCompatible
		return nil
	case ErrorCode422AlreadyExists:
		*s = ErrorCode422AlreadyExists
		return nil
	case ErrorCode429RateLimiting:
		*s = ErrorCode429RateLimiting
		return nil
	case ErrorCode500Database:
		*s = ErrorCode500Database
		return nil
	case ErrorCode500DatabaseInsert:
		*s = ErrorCode500DatabaseInsert
		return nil
	case ErrorCode500DatabaseUpdate:
		*s = ErrorCode500DatabaseUpdate
		return nil
	case ErrorCode500DatabaseRemove:
		*s = ErrorCode500DatabaseRemove
		return nil
	case ErrorCode500Jobd:
		*s = ErrorCode500Jobd
		return nil
	case ErrorCode500Unknown:
		*s = ErrorCode500Unknown
		return nil
	case ErrorCode500Dev:
		*s = ErrorCode500Dev
		return nil
	case ErrorCode500Email:
		*s = ErrorCode500Email
		return nil
	case ErrorCode500PaymentGateway:
		*s = ErrorCode500PaymentGateway
		return nil
	case ErrorCode503NotReady:
		*s = ErrorCode503NotReady
		return nil
	case ErrorCode503NotEnabled:
		*s = ErrorCode503NotEnabled
		return nil
	case ErrorCode503DependencyNotEnabled:
		*s = ErrorCode503DependencyNotEnabled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error response.
// Ref: #/components/schemas/ErrorEnvelope
type ErrorEnvelope struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorEnvelope) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorEnvelope) SetError(val Error) {
	s.Error = val
}

// Additional entries on the error object to provide extra details.
type ErrorExtra struct {
	Capability OptCapability `json:"capability"`
}

// GetCapability returns the value of Capability.
func (s *ErrorExtra) GetCapability() OptCapability {
	return s.Capability
}

// SetCapability sets the value of Capability.
func (s *ErrorExtra) SetCapability(val OptCapability) {
	s.Capability = val
}

// The HTTP response code.
type ErrorStatus int

const (
	ErrorStatus400 ErrorStatus = 400
	ErrorStatus401 ErrorStatus = 401
	ErrorStatus403 ErrorStatus = 403
	ErrorStatus404 ErrorStatus = 404
	ErrorStatus409 ErrorStatus = 409
	ErrorStatus415 ErrorStatus = 415
	ErrorStatus422 ErrorStatus = 422
	ErrorStatus500 ErrorStatus = 500
)

// AllValues returns all ErrorStatus values.
func (ErrorStatus) AllValues() []ErrorStatus {
	return []ErrorStatus{
		ErrorStatus400,
		ErrorStatus401,
		ErrorStatus403,
		ErrorStatus404,
		ErrorStatus409,
		ErrorStatus415,
		ErrorStatus422,
		ErrorStatus500,
	}
}

// Describes the date and time at which certain events occurred in the lifetime of this resource.
// Ref: #/components/schemas/Events
type Events map[string]DateTime

func (s *Events) init() Events {
	m := *s
	if m == nil {
		m = map[string]DateTime{}
		*s = m
	}
	return m
}

// In a stack, specifies an image source ID from which Cycle will derive any values not specified in
// the stack file. This is useful for avoiding direct placement of credentials in a stack file, for
// example.
// Ref: #/components/schemas/ExistingSource
type ExistingSource struct {
	SourceID OptID `json:"source_id"`
}

// GetSourceID returns the value of SourceID.
func (s *ExistingSource) GetSourceID() OptID {
	return s.SourceID
}

// SetSourceID sets the value of SourceID.
func (s *ExistingSource) SetSourceID(val OptID) {
	s.SourceID = val
}

type ExpireInstanceSSHCredentialsOK struct {
	// The number of tokens expired.
	Data ExpireInstanceSSHCredentialsOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ExpireInstanceSSHCredentialsOK) GetData() ExpireInstanceSSHCredentialsOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ExpireInstanceSSHCredentialsOK) SetData(val ExpireInstanceSSHCredentialsOKData) {
	s.Data = val
}

// The number of tokens expired.
type ExpireInstanceSSHCredentialsOKData struct {
	// The number of tokens expired.
	Tokens int `json:"tokens"`
}

// GetTokens returns the value of Tokens.
func (s *ExpireInstanceSSHCredentialsOKData) GetTokens() int {
	return s.Tokens
}

// SetTokens sets the value of Tokens.
func (s *ExpireInstanceSSHCredentialsOKData) SetTokens(val int) {
	s.Tokens = val
}

// An object representing specialized features configured for this environment.
// Ref: #/components/schemas/Features
type Features struct {
	// Whether or not legacy networking mode is enabled on this environment.
	LegacyNetworking bool `json:"legacy_networking"`
}

// GetLegacyNetworking returns the value of LegacyNetworking.
func (s *Features) GetLegacyNetworking() bool {
	return s.LegacyNetworking
}

// SetLegacyNetworking sets the value of LegacyNetworking.
func (s *Features) SetLegacyNetworking(val bool) {
	s.LegacyNetworking = val
}

// The spec for server features.
// Ref: #/components/schemas/FeaturesSpec
type FeaturesSpec struct {
	// The type of RAID supported, if any.
	Raid NilString `json:"raid"`
	// Features specific to AWS.
	AWS OptFeaturesSpecAWS `json:"aws"`
}

// GetRaid returns the value of Raid.
func (s *FeaturesSpec) GetRaid() NilString {
	return s.Raid
}

// GetAWS returns the value of AWS.
func (s *FeaturesSpec) GetAWS() OptFeaturesSpecAWS {
	return s.AWS
}

// SetRaid sets the value of Raid.
func (s *FeaturesSpec) SetRaid(val NilString) {
	s.Raid = val
}

// SetAWS sets the value of AWS.
func (s *FeaturesSpec) SetAWS(val OptFeaturesSpecAWS) {
	s.AWS = val
}

// Features specific to AWS.
type FeaturesSpecAWS struct {
	// A boolean where true indicates this is a machine that can support a much higher networking
	// throughput.
	EnaSupport bool `json:"ena_support"`
	// A boolean where true indicates this is a machine that can support higher storage throughput.
	EbsOptimized bool `json:"ebs_optimized"`
}

// GetEnaSupport returns the value of EnaSupport.
func (s *FeaturesSpecAWS) GetEnaSupport() bool {
	return s.EnaSupport
}

// GetEbsOptimized returns the value of EbsOptimized.
func (s *FeaturesSpecAWS) GetEbsOptimized() bool {
	return s.EbsOptimized
}

// SetEnaSupport sets the value of EnaSupport.
func (s *FeaturesSpecAWS) SetEnaSupport(val bool) {
	s.EnaSupport = val
}

// SetEbsOptimized sets the value of EbsOptimized.
func (s *FeaturesSpecAWS) SetEbsOptimized(val bool) {
	s.EbsOptimized = val
}

type FluidIdentifier string

// Information about a given servers GPU resources.
// Ref: #/components/schemas/GPUSpec
type GPUSpec struct {
	// The number of GPUs.
	Count int `json:"count"`
	// The number of cores.
	Cores OptInt `json:"cores"`
	// The amount of virtaul RAM for the GPU.
	VramGB OptInt `json:"vram_gb"`
	// The type of the GPU.
	Type string `json:"type"`
	// A boolean where true represents the GPU is shared.
	Shared OptBool `json:"shared"`
	// Extra information about the GPU if there is any.
	Extra OptGPUSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *GPUSpec) GetCount() int {
	return s.Count
}

// GetCores returns the value of Cores.
func (s *GPUSpec) GetCores() OptInt {
	return s.Cores
}

// GetVramGB returns the value of VramGB.
func (s *GPUSpec) GetVramGB() OptInt {
	return s.VramGB
}

// GetType returns the value of Type.
func (s *GPUSpec) GetType() string {
	return s.Type
}

// GetShared returns the value of Shared.
func (s *GPUSpec) GetShared() OptBool {
	return s.Shared
}

// GetExtra returns the value of Extra.
func (s *GPUSpec) GetExtra() OptGPUSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *GPUSpec) SetCount(val int) {
	s.Count = val
}

// SetCores sets the value of Cores.
func (s *GPUSpec) SetCores(val OptInt) {
	s.Cores = val
}

// SetVramGB sets the value of VramGB.
func (s *GPUSpec) SetVramGB(val OptInt) {
	s.VramGB = val
}

// SetType sets the value of Type.
func (s *GPUSpec) SetType(val string) {
	s.Type = val
}

// SetShared sets the value of Shared.
func (s *GPUSpec) SetShared(val OptBool) {
	s.Shared = val
}

// SetExtra sets the value of Extra.
func (s *GPUSpec) SetExtra(val OptGPUSpecExtra) {
	s.Extra = val
}

// Extra information about the GPU if there is any.
type GPUSpecExtra map[string]string

func (s *GPUSpecExtra) init() GPUSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GenerateInstanceSSHCredentialsOK struct {
	Data SSHResponse `json:"data"`
}

// GetData returns the value of Data.
func (s *GenerateInstanceSSHCredentialsOK) GetData() SSHResponse {
	return s.Data
}

// SetData sets the value of Data.
func (s *GenerateInstanceSSHCredentialsOK) SetData(val SSHResponse) {
	s.Data = val
}

// Ref: #/components/schemas/GenerateStackBuildAction
type GenerateStackBuildAction struct{}

// The job to do.
type GenerateStackBuildActionAction string

const (
	GenerateStackBuildActionActionGenerate GenerateStackBuildActionAction = "generate"
)

// AllValues returns all GenerateStackBuildActionAction values.
func (GenerateStackBuildActionAction) AllValues() []GenerateStackBuildActionAction {
	return []GenerateStackBuildActionAction{
		GenerateStackBuildActionActionGenerate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateStackBuildActionAction) MarshalText() ([]byte, error) {
	switch s {
	case GenerateStackBuildActionActionGenerate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateStackBuildActionAction) UnmarshalText(data []byte) error {
	switch GenerateStackBuildActionAction(data) {
	case GenerateStackBuildActionActionGenerate:
		*s = GenerateStackBuildActionActionGenerate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAPIKeyOK struct {
	Data OptApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAPIKeyOK) GetData() OptApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAPIKeyOK) SetData(val OptApiKey) {
	s.Data = val
}

type GetAccountInvitesFilter struct{}

type GetAccountInvitesIncludeItem string

const (
	GetAccountInvitesIncludeItemSenders  GetAccountInvitesIncludeItem = "senders"
	GetAccountInvitesIncludeItemHubs     GetAccountInvitesIncludeItem = "hubs"
	GetAccountInvitesIncludeItemAccounts GetAccountInvitesIncludeItem = "accounts"
	GetAccountInvitesIncludeItemRoles    GetAccountInvitesIncludeItem = "roles"
)

// AllValues returns all GetAccountInvitesIncludeItem values.
func (GetAccountInvitesIncludeItem) AllValues() []GetAccountInvitesIncludeItem {
	return []GetAccountInvitesIncludeItem{
		GetAccountInvitesIncludeItemSenders,
		GetAccountInvitesIncludeItemHubs,
		GetAccountInvitesIncludeItemAccounts,
		GetAccountInvitesIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountInvitesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountInvitesIncludeItemSenders:
		return []byte(s), nil
	case GetAccountInvitesIncludeItemHubs:
		return []byte(s), nil
	case GetAccountInvitesIncludeItemAccounts:
		return []byte(s), nil
	case GetAccountInvitesIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountInvitesIncludeItem) UnmarshalText(data []byte) error {
	switch GetAccountInvitesIncludeItem(data) {
	case GetAccountInvitesIncludeItemSenders:
		*s = GetAccountInvitesIncludeItemSenders
		return nil
	case GetAccountInvitesIncludeItemHubs:
		*s = GetAccountInvitesIncludeItemHubs
		return nil
	case GetAccountInvitesIncludeItemAccounts:
		*s = GetAccountInvitesIncludeItemAccounts
		return nil
	case GetAccountInvitesIncludeItemRoles:
		*s = GetAccountInvitesIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAccountInvitesMetaItem string

const (
	GetAccountInvitesMetaItemCapabilities GetAccountInvitesMetaItem = "capabilities"
)

// AllValues returns all GetAccountInvitesMetaItem values.
func (GetAccountInvitesMetaItem) AllValues() []GetAccountInvitesMetaItem {
	return []GetAccountInvitesMetaItem{
		GetAccountInvitesMetaItemCapabilities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountInvitesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountInvitesMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountInvitesMetaItem) UnmarshalText(data []byte) error {
	switch GetAccountInvitesMetaItem(data) {
	case GetAccountInvitesMetaItemCapabilities:
		*s = GetAccountInvitesMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAccountInvitesOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetAccountInvitesOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetAccountInvitesOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetAccountInvitesOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetAccountInvitesOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetAccountInvitesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAccountInvitesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAccountInvitesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAccountInvitesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAccountInvitesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAccountLoginsFilter struct{}

type GetAccountLoginsOK struct {
	Data []GetAccountLoginsOKDataItem `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAccountLoginsOK) GetData() []GetAccountLoginsOKDataItem {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAccountLoginsOK) SetData(val []GetAccountLoginsOKDataItem) {
	s.Data = val
}

// GetAccountLoginsOKDataItem represents sum type.
type GetAccountLoginsOKDataItem struct {
	Type                 GetAccountLoginsOKDataItemType // switch on this field
	AccountEmployeeLogin AccountEmployeeLogin
	AccountPasswordLogin AccountPasswordLogin
}

// GetAccountLoginsOKDataItemType is oneOf type of GetAccountLoginsOKDataItem.
type GetAccountLoginsOKDataItemType string

// Possible values for GetAccountLoginsOKDataItemType.
const (
	AccountEmployeeLoginGetAccountLoginsOKDataItem GetAccountLoginsOKDataItemType = "AccountEmployeeLogin"
	AccountPasswordLoginGetAccountLoginsOKDataItem GetAccountLoginsOKDataItemType = "AccountPasswordLogin"
)

// IsAccountEmployeeLogin reports whether GetAccountLoginsOKDataItem is AccountEmployeeLogin.
func (s GetAccountLoginsOKDataItem) IsAccountEmployeeLogin() bool {
	return s.Type == AccountEmployeeLoginGetAccountLoginsOKDataItem
}

// IsAccountPasswordLogin reports whether GetAccountLoginsOKDataItem is AccountPasswordLogin.
func (s GetAccountLoginsOKDataItem) IsAccountPasswordLogin() bool {
	return s.Type == AccountPasswordLoginGetAccountLoginsOKDataItem
}

// SetAccountEmployeeLogin sets GetAccountLoginsOKDataItem to AccountEmployeeLogin.
func (s *GetAccountLoginsOKDataItem) SetAccountEmployeeLogin(v AccountEmployeeLogin) {
	s.Type = AccountEmployeeLoginGetAccountLoginsOKDataItem
	s.AccountEmployeeLogin = v
}

// GetAccountEmployeeLogin returns AccountEmployeeLogin and true boolean if GetAccountLoginsOKDataItem is AccountEmployeeLogin.
func (s GetAccountLoginsOKDataItem) GetAccountEmployeeLogin() (v AccountEmployeeLogin, ok bool) {
	if !s.IsAccountEmployeeLogin() {
		return v, false
	}
	return s.AccountEmployeeLogin, true
}

// NewAccountEmployeeLoginGetAccountLoginsOKDataItem returns new GetAccountLoginsOKDataItem from AccountEmployeeLogin.
func NewAccountEmployeeLoginGetAccountLoginsOKDataItem(v AccountEmployeeLogin) GetAccountLoginsOKDataItem {
	var s GetAccountLoginsOKDataItem
	s.SetAccountEmployeeLogin(v)
	return s
}

// SetAccountPasswordLogin sets GetAccountLoginsOKDataItem to AccountPasswordLogin.
func (s *GetAccountLoginsOKDataItem) SetAccountPasswordLogin(v AccountPasswordLogin) {
	s.Type = AccountPasswordLoginGetAccountLoginsOKDataItem
	s.AccountPasswordLogin = v
}

// GetAccountPasswordLogin returns AccountPasswordLogin and true boolean if GetAccountLoginsOKDataItem is AccountPasswordLogin.
func (s GetAccountLoginsOKDataItem) GetAccountPasswordLogin() (v AccountPasswordLogin, ok bool) {
	if !s.IsAccountPasswordLogin() {
		return v, false
	}
	return s.AccountPasswordLogin, true
}

// NewAccountPasswordLoginGetAccountLoginsOKDataItem returns new GetAccountLoginsOKDataItem from AccountPasswordLogin.
func NewAccountPasswordLoginGetAccountLoginsOKDataItem(v AccountPasswordLogin) GetAccountLoginsOKDataItem {
	var s GetAccountLoginsOKDataItem
	s.SetAccountPasswordLogin(v)
	return s
}

type GetAccountLoginsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAccountLoginsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAccountLoginsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAccountLoginsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAccountLoginsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAccountMembershipsFilter struct{}

type GetAccountMembershipsIncludeItem string

const (
	GetAccountMembershipsIncludeItemSenders  GetAccountMembershipsIncludeItem = "senders"
	GetAccountMembershipsIncludeItemHubs     GetAccountMembershipsIncludeItem = "hubs"
	GetAccountMembershipsIncludeItemAccounts GetAccountMembershipsIncludeItem = "accounts"
	GetAccountMembershipsIncludeItemRoles    GetAccountMembershipsIncludeItem = "roles"
)

// AllValues returns all GetAccountMembershipsIncludeItem values.
func (GetAccountMembershipsIncludeItem) AllValues() []GetAccountMembershipsIncludeItem {
	return []GetAccountMembershipsIncludeItem{
		GetAccountMembershipsIncludeItemSenders,
		GetAccountMembershipsIncludeItemHubs,
		GetAccountMembershipsIncludeItemAccounts,
		GetAccountMembershipsIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountMembershipsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountMembershipsIncludeItemSenders:
		return []byte(s), nil
	case GetAccountMembershipsIncludeItemHubs:
		return []byte(s), nil
	case GetAccountMembershipsIncludeItemAccounts:
		return []byte(s), nil
	case GetAccountMembershipsIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountMembershipsIncludeItem) UnmarshalText(data []byte) error {
	switch GetAccountMembershipsIncludeItem(data) {
	case GetAccountMembershipsIncludeItemSenders:
		*s = GetAccountMembershipsIncludeItemSenders
		return nil
	case GetAccountMembershipsIncludeItemHubs:
		*s = GetAccountMembershipsIncludeItemHubs
		return nil
	case GetAccountMembershipsIncludeItemAccounts:
		*s = GetAccountMembershipsIncludeItemAccounts
		return nil
	case GetAccountMembershipsIncludeItemRoles:
		*s = GetAccountMembershipsIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAccountMembershipsOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetAccountMembershipsOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetAccountMembershipsOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetAccountMembershipsOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetAccountMembershipsOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetAccountMembershipsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAccountMembershipsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAccountMembershipsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAccountMembershipsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAccountMembershipsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAccountOK struct {
	Data OptAccount `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAccountOK) GetData() OptAccount {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAccountOK) SetData(val OptAccount) {
	s.Data = val
}

type GetAnnouncementsFilter struct {
	// Get only Announcements that have been resolved, or only those that have not.
	Resolved OptGetAnnouncementsFilterResolved `json:"resolved"`
	// The start date from when to fetch the Announcements.
	Range OptGetAnnouncementsFilterRange `json:"range"`
}

// GetResolved returns the value of Resolved.
func (s *GetAnnouncementsFilter) GetResolved() OptGetAnnouncementsFilterResolved {
	return s.Resolved
}

// GetRange returns the value of Range.
func (s *GetAnnouncementsFilter) GetRange() OptGetAnnouncementsFilterRange {
	return s.Range
}

// SetResolved sets the value of Resolved.
func (s *GetAnnouncementsFilter) SetResolved(val OptGetAnnouncementsFilterResolved) {
	s.Resolved = val
}

// SetRange sets the value of Range.
func (s *GetAnnouncementsFilter) SetRange(val OptGetAnnouncementsFilterRange) {
	s.Range = val
}

// The start date from when to fetch the Announcements.
type GetAnnouncementsFilterRange string

const (
	GetAnnouncementsFilterRangeHour  GetAnnouncementsFilterRange = "hour"
	GetAnnouncementsFilterRangeDay   GetAnnouncementsFilterRange = "day"
	GetAnnouncementsFilterRangeWeek  GetAnnouncementsFilterRange = "week"
	GetAnnouncementsFilterRangeMonth GetAnnouncementsFilterRange = "month"
	GetAnnouncementsFilterRangeYear  GetAnnouncementsFilterRange = "year"
)

// AllValues returns all GetAnnouncementsFilterRange values.
func (GetAnnouncementsFilterRange) AllValues() []GetAnnouncementsFilterRange {
	return []GetAnnouncementsFilterRange{
		GetAnnouncementsFilterRangeHour,
		GetAnnouncementsFilterRangeDay,
		GetAnnouncementsFilterRangeWeek,
		GetAnnouncementsFilterRangeMonth,
		GetAnnouncementsFilterRangeYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAnnouncementsFilterRange) MarshalText() ([]byte, error) {
	switch s {
	case GetAnnouncementsFilterRangeHour:
		return []byte(s), nil
	case GetAnnouncementsFilterRangeDay:
		return []byte(s), nil
	case GetAnnouncementsFilterRangeWeek:
		return []byte(s), nil
	case GetAnnouncementsFilterRangeMonth:
		return []byte(s), nil
	case GetAnnouncementsFilterRangeYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAnnouncementsFilterRange) UnmarshalText(data []byte) error {
	switch GetAnnouncementsFilterRange(data) {
	case GetAnnouncementsFilterRangeHour:
		*s = GetAnnouncementsFilterRangeHour
		return nil
	case GetAnnouncementsFilterRangeDay:
		*s = GetAnnouncementsFilterRangeDay
		return nil
	case GetAnnouncementsFilterRangeWeek:
		*s = GetAnnouncementsFilterRangeWeek
		return nil
	case GetAnnouncementsFilterRangeMonth:
		*s = GetAnnouncementsFilterRangeMonth
		return nil
	case GetAnnouncementsFilterRangeYear:
		*s = GetAnnouncementsFilterRangeYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Get only Announcements that have been resolved, or only those that have not.
type GetAnnouncementsFilterResolved string

const (
	GetAnnouncementsFilterResolvedTrue  GetAnnouncementsFilterResolved = "true"
	GetAnnouncementsFilterResolvedFalse GetAnnouncementsFilterResolved = "false"
)

// AllValues returns all GetAnnouncementsFilterResolved values.
func (GetAnnouncementsFilterResolved) AllValues() []GetAnnouncementsFilterResolved {
	return []GetAnnouncementsFilterResolved{
		GetAnnouncementsFilterResolvedTrue,
		GetAnnouncementsFilterResolvedFalse,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAnnouncementsFilterResolved) MarshalText() ([]byte, error) {
	switch s {
	case GetAnnouncementsFilterResolvedTrue:
		return []byte(s), nil
	case GetAnnouncementsFilterResolvedFalse:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAnnouncementsFilterResolved) UnmarshalText(data []byte) error {
	switch GetAnnouncementsFilterResolved(data) {
	case GetAnnouncementsFilterResolvedTrue:
		*s = GetAnnouncementsFilterResolvedTrue
		return nil
	case GetAnnouncementsFilterResolvedFalse:
		*s = GetAnnouncementsFilterResolvedFalse
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAnnouncementsOK struct {
	Data []Announcement `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAnnouncementsOK) GetData() []Announcement {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAnnouncementsOK) SetData(val []Announcement) {
	s.Data = val
}

type GetAnnouncementsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAnnouncementsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAnnouncementsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAnnouncementsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAnnouncementsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetApiKeysFilter struct{}

type GetApiKeysOK struct {
	Data []ApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetApiKeysOK) GetData() []ApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetApiKeysOK) SetData(val []ApiKey) {
	s.Data = val
}

type GetApiKeysPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetApiKeysPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetApiKeysPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetApiKeysPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetApiKeysPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAutoScaleGroupIncludeItem string

const (
	GetAutoScaleGroupIncludeItemIntegrations GetAutoScaleGroupIncludeItem = "integrations"
	GetAutoScaleGroupIncludeItemModels       GetAutoScaleGroupIncludeItem = "models"
	GetAutoScaleGroupIncludeItemLocations    GetAutoScaleGroupIncludeItem = "locations"
)

// AllValues returns all GetAutoScaleGroupIncludeItem values.
func (GetAutoScaleGroupIncludeItem) AllValues() []GetAutoScaleGroupIncludeItem {
	return []GetAutoScaleGroupIncludeItem{
		GetAutoScaleGroupIncludeItemIntegrations,
		GetAutoScaleGroupIncludeItemModels,
		GetAutoScaleGroupIncludeItemLocations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAutoScaleGroupIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAutoScaleGroupIncludeItemIntegrations:
		return []byte(s), nil
	case GetAutoScaleGroupIncludeItemModels:
		return []byte(s), nil
	case GetAutoScaleGroupIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAutoScaleGroupIncludeItem) UnmarshalText(data []byte) error {
	switch GetAutoScaleGroupIncludeItem(data) {
	case GetAutoScaleGroupIncludeItemIntegrations:
		*s = GetAutoScaleGroupIncludeItemIntegrations
		return nil
	case GetAutoScaleGroupIncludeItemModels:
		*s = GetAutoScaleGroupIncludeItemModels
		return nil
	case GetAutoScaleGroupIncludeItemLocations:
		*s = GetAutoScaleGroupIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAutoScaleGroupOK struct {
	Data     AutoScaleGroup            `json:"data"`
	Includes OptAutoScaleGroupIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetAutoScaleGroupOK) GetData() AutoScaleGroup {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetAutoScaleGroupOK) GetIncludes() OptAutoScaleGroupIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetAutoScaleGroupOK) SetData(val AutoScaleGroup) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetAutoScaleGroupOK) SetIncludes(val OptAutoScaleGroupIncludes) {
	s.Includes = val
}

type GetAutoScaleGroupsFilter struct {
	// `filter[search]=value` search for a value associated with a field on the given auto-scale group(s).
	Search OptString `json:"search"`
	// `filter[cluster]=value` return a list of auto-scale groups that are associated with the specified
	// cluster.
	Cluster OptString `json:"cluster"`
	// `filter[identifier]=value` list only those auto-scale groups matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current
	// state.
	State OptString `json:"state"`
}

// GetSearch returns the value of Search.
func (s *GetAutoScaleGroupsFilter) GetSearch() OptString {
	return s.Search
}

// GetCluster returns the value of Cluster.
func (s *GetAutoScaleGroupsFilter) GetCluster() OptString {
	return s.Cluster
}

// GetIdentifier returns the value of Identifier.
func (s *GetAutoScaleGroupsFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetState returns the value of State.
func (s *GetAutoScaleGroupsFilter) GetState() OptString {
	return s.State
}

// SetSearch sets the value of Search.
func (s *GetAutoScaleGroupsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetCluster sets the value of Cluster.
func (s *GetAutoScaleGroupsFilter) SetCluster(val OptString) {
	s.Cluster = val
}

// SetIdentifier sets the value of Identifier.
func (s *GetAutoScaleGroupsFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetState sets the value of State.
func (s *GetAutoScaleGroupsFilter) SetState(val OptString) {
	s.State = val
}

type GetAutoScaleGroupsIncludeItem string

const (
	GetAutoScaleGroupsIncludeItemIntegrations GetAutoScaleGroupsIncludeItem = "integrations"
	GetAutoScaleGroupsIncludeItemModels       GetAutoScaleGroupsIncludeItem = "models"
	GetAutoScaleGroupsIncludeItemLocations    GetAutoScaleGroupsIncludeItem = "locations"
)

// AllValues returns all GetAutoScaleGroupsIncludeItem values.
func (GetAutoScaleGroupsIncludeItem) AllValues() []GetAutoScaleGroupsIncludeItem {
	return []GetAutoScaleGroupsIncludeItem{
		GetAutoScaleGroupsIncludeItemIntegrations,
		GetAutoScaleGroupsIncludeItemModels,
		GetAutoScaleGroupsIncludeItemLocations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAutoScaleGroupsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetAutoScaleGroupsIncludeItemIntegrations:
		return []byte(s), nil
	case GetAutoScaleGroupsIncludeItemModels:
		return []byte(s), nil
	case GetAutoScaleGroupsIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAutoScaleGroupsIncludeItem) UnmarshalText(data []byte) error {
	switch GetAutoScaleGroupsIncludeItem(data) {
	case GetAutoScaleGroupsIncludeItemIntegrations:
		*s = GetAutoScaleGroupsIncludeItemIntegrations
		return nil
	case GetAutoScaleGroupsIncludeItemModels:
		*s = GetAutoScaleGroupsIncludeItemModels
		return nil
	case GetAutoScaleGroupsIncludeItemLocations:
		*s = GetAutoScaleGroupsIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAutoScaleGroupsOK struct {
	Data     []AutoScaleGroup          `json:"data"`
	Includes OptAutoScaleGroupIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetAutoScaleGroupsOK) GetData() []AutoScaleGroup {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetAutoScaleGroupsOK) GetIncludes() OptAutoScaleGroupIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetAutoScaleGroupsOK) SetData(val []AutoScaleGroup) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetAutoScaleGroupsOK) SetIncludes(val OptAutoScaleGroupIncludes) {
	s.Includes = val
}

type GetAutoScaleGroupsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetAutoScaleGroupsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetAutoScaleGroupsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetAutoScaleGroupsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetAutoScaleGroupsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetAvailableIntegrationsOK struct {
	Data GetAvailableIntegrationsOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAvailableIntegrationsOK) GetData() GetAvailableIntegrationsOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAvailableIntegrationsOK) SetData(val GetAvailableIntegrationsOKData) {
	s.Data = val
}

type GetAvailableIntegrationsOKData struct {
	ImageMinusBuilders                 OptNilIntegrationDefinitionArray `json:"image-builders"`
	ObjectMinusStorage                 OptNilIntegrationDefinitionArray `json:"object-storage"`
	TLSMinusCertificateMinusGeneration OptNilIntegrationDefinitionArray `json:"tls-certificate-generation"`
	InfrastructureMinusProvider        OptNilIntegrationDefinitionArray `json:"infrastructure-provider"`
	Billing                            OptNilIntegrationDefinitionArray `json:"billing"`
}

// GetImageMinusBuilders returns the value of ImageMinusBuilders.
func (s *GetAvailableIntegrationsOKData) GetImageMinusBuilders() OptNilIntegrationDefinitionArray {
	return s.ImageMinusBuilders
}

// GetObjectMinusStorage returns the value of ObjectMinusStorage.
func (s *GetAvailableIntegrationsOKData) GetObjectMinusStorage() OptNilIntegrationDefinitionArray {
	return s.ObjectMinusStorage
}

// GetTLSMinusCertificateMinusGeneration returns the value of TLSMinusCertificateMinusGeneration.
func (s *GetAvailableIntegrationsOKData) GetTLSMinusCertificateMinusGeneration() OptNilIntegrationDefinitionArray {
	return s.TLSMinusCertificateMinusGeneration
}

// GetInfrastructureMinusProvider returns the value of InfrastructureMinusProvider.
func (s *GetAvailableIntegrationsOKData) GetInfrastructureMinusProvider() OptNilIntegrationDefinitionArray {
	return s.InfrastructureMinusProvider
}

// GetBilling returns the value of Billing.
func (s *GetAvailableIntegrationsOKData) GetBilling() OptNilIntegrationDefinitionArray {
	return s.Billing
}

// SetImageMinusBuilders sets the value of ImageMinusBuilders.
func (s *GetAvailableIntegrationsOKData) SetImageMinusBuilders(val OptNilIntegrationDefinitionArray) {
	s.ImageMinusBuilders = val
}

// SetObjectMinusStorage sets the value of ObjectMinusStorage.
func (s *GetAvailableIntegrationsOKData) SetObjectMinusStorage(val OptNilIntegrationDefinitionArray) {
	s.ObjectMinusStorage = val
}

// SetTLSMinusCertificateMinusGeneration sets the value of TLSMinusCertificateMinusGeneration.
func (s *GetAvailableIntegrationsOKData) SetTLSMinusCertificateMinusGeneration(val OptNilIntegrationDefinitionArray) {
	s.TLSMinusCertificateMinusGeneration = val
}

// SetInfrastructureMinusProvider sets the value of InfrastructureMinusProvider.
func (s *GetAvailableIntegrationsOKData) SetInfrastructureMinusProvider(val OptNilIntegrationDefinitionArray) {
	s.InfrastructureMinusProvider = val
}

// SetBilling sets the value of Billing.
func (s *GetAvailableIntegrationsOKData) SetBilling(val OptNilIntegrationDefinitionArray) {
	s.Billing = val
}

type GetBillingMethodOK struct {
	Data Method `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingMethodOK) GetData() Method {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingMethodOK) SetData(val Method) {
	s.Data = val
}

type GetBillingMethodsFilter struct{}

type GetBillingMethodsOK struct {
	Data []Method `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingMethodsOK) GetData() []Method {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingMethodsOK) SetData(val []Method) {
	s.Data = val
}

type GetBillingMethodsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingMethodsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingMethodsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingMethodsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingMethodsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingOrderIncludeItem string

const (
	GetBillingOrderIncludeItemPromoCodes GetBillingOrderIncludeItem = "promo_codes"
)

// AllValues returns all GetBillingOrderIncludeItem values.
func (GetBillingOrderIncludeItem) AllValues() []GetBillingOrderIncludeItem {
	return []GetBillingOrderIncludeItem{
		GetBillingOrderIncludeItemPromoCodes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetBillingOrderIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetBillingOrderIncludeItemPromoCodes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetBillingOrderIncludeItem) UnmarshalText(data []byte) error {
	switch GetBillingOrderIncludeItem(data) {
	case GetBillingOrderIncludeItemPromoCodes:
		*s = GetBillingOrderIncludeItemPromoCodes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetBillingOrderMetaItem string

const (
	GetBillingOrderMetaItemDue GetBillingOrderMetaItem = "due"
)

// AllValues returns all GetBillingOrderMetaItem values.
func (GetBillingOrderMetaItem) AllValues() []GetBillingOrderMetaItem {
	return []GetBillingOrderMetaItem{
		GetBillingOrderMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetBillingOrderMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetBillingOrderMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetBillingOrderMetaItem) UnmarshalText(data []byte) error {
	switch GetBillingOrderMetaItem(data) {
	case GetBillingOrderMetaItemDue:
		*s = GetBillingOrderMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetBillingOrderOK struct {
	Data     Order                   `json:"data"`
	Includes OptBillingOrderIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetBillingOrderOK) GetData() Order {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetBillingOrderOK) GetIncludes() OptBillingOrderIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetBillingOrderOK) SetData(val Order) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetBillingOrderOK) SetIncludes(val OptBillingOrderIncludes) {
	s.Includes = val
}

type GetBillingOveragesFilter struct{}

type GetBillingOveragesOK struct {
	Data []Overage `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingOveragesOK) GetData() []Overage {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingOveragesOK) SetData(val []Overage) {
	s.Data = val
}

type GetBillingOveragesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingOveragesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingOveragesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingOveragesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingOveragesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingServiceOK struct {
	Data Service `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingServiceOK) GetData() Service {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingServiceOK) SetData(val Service) {
	s.Data = val
}

type GetBillingServicesFilter struct{}

type GetBillingServicesOK struct {
	Data []Service `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingServicesOK) GetData() []Service {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingServicesOK) SetData(val []Service) {
	s.Data = val
}

type GetBillingServicesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingServicesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingServicesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingServicesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingServicesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingSupportPlansFilter struct{}

type GetBillingSupportPlansOK struct {
	Data []SupportPlan `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingSupportPlansOK) GetData() []SupportPlan {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingSupportPlansOK) SetData(val []SupportPlan) {
	s.Data = val
}

type GetBillingSupportPlansPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetBillingSupportPlansPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetBillingSupportPlansPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetBillingSupportPlansPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetBillingSupportPlansPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetBillingTiersOK struct {
	Data []TierPlan `json:"data"`
}

// GetData returns the value of Data.
func (s *GetBillingTiersOK) GetData() []TierPlan {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetBillingTiersOK) SetData(val []TierPlan) {
	s.Data = val
}

type GetClustersOK struct {
	Data []string `json:"data"`
}

// GetData returns the value of Data.
func (s *GetClustersOK) GetData() []string {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetClustersOK) SetData(val []string) {
	s.Data = val
}

type GetCompatibleImagesOK struct {
	Data []Image `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCompatibleImagesOK) GetData() []Image {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCompatibleImagesOK) SetData(val []Image) {
	s.Data = val
}

type GetCompatibleImagesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetCompatibleImagesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetCompatibleImagesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetCompatibleImagesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetCompatibleImagesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetCompatibleServersIncludeItem string

const (
	GetCompatibleServersIncludeItemLocation     GetCompatibleServersIncludeItem = "location"
	GetCompatibleServersIncludeItemModels       GetCompatibleServersIncludeItem = "models"
	GetCompatibleServersIncludeItemIntegrations GetCompatibleServersIncludeItem = "integrations"
)

// AllValues returns all GetCompatibleServersIncludeItem values.
func (GetCompatibleServersIncludeItem) AllValues() []GetCompatibleServersIncludeItem {
	return []GetCompatibleServersIncludeItem{
		GetCompatibleServersIncludeItemLocation,
		GetCompatibleServersIncludeItemModels,
		GetCompatibleServersIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetCompatibleServersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetCompatibleServersIncludeItemLocation:
		return []byte(s), nil
	case GetCompatibleServersIncludeItemModels:
		return []byte(s), nil
	case GetCompatibleServersIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetCompatibleServersIncludeItem) UnmarshalText(data []byte) error {
	switch GetCompatibleServersIncludeItem(data) {
	case GetCompatibleServersIncludeItemLocation:
		*s = GetCompatibleServersIncludeItemLocation
		return nil
	case GetCompatibleServersIncludeItemModels:
		*s = GetCompatibleServersIncludeItemModels
		return nil
	case GetCompatibleServersIncludeItemIntegrations:
		*s = GetCompatibleServersIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetCompatibleServersMetaItem string

const (
	GetCompatibleServersMetaItemNode           GetCompatibleServersMetaItem = "node"
	GetCompatibleServersMetaItemInstancesCount GetCompatibleServersMetaItem = "instances_count"
)

// AllValues returns all GetCompatibleServersMetaItem values.
func (GetCompatibleServersMetaItem) AllValues() []GetCompatibleServersMetaItem {
	return []GetCompatibleServersMetaItem{
		GetCompatibleServersMetaItemNode,
		GetCompatibleServersMetaItemInstancesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetCompatibleServersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetCompatibleServersMetaItemNode:
		return []byte(s), nil
	case GetCompatibleServersMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetCompatibleServersMetaItem) UnmarshalText(data []byte) error {
	switch GetCompatibleServersMetaItem(data) {
	case GetCompatibleServersMetaItemNode:
		*s = GetCompatibleServersMetaItemNode
		return nil
	case GetCompatibleServersMetaItemInstancesCount:
		*s = GetCompatibleServersMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetCompatibleServersOK struct {
	Data     []InfraServer     `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetCompatibleServersOK) GetData() []InfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetCompatibleServersOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetCompatibleServersOK) SetData(val []InfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetCompatibleServersOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetCompatibleServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetCompatibleServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetCompatibleServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetCompatibleServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetCompatibleServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetContainerBackupIncludeItem string

const (
	GetContainerBackupIncludeItemIntegrations GetContainerBackupIncludeItem = "integrations"
)

// AllValues returns all GetContainerBackupIncludeItem values.
func (GetContainerBackupIncludeItem) AllValues() []GetContainerBackupIncludeItem {
	return []GetContainerBackupIncludeItem{
		GetContainerBackupIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerBackupIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerBackupIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerBackupIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainerBackupIncludeItem(data) {
	case GetContainerBackupIncludeItemIntegrations:
		*s = GetContainerBackupIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerBackupLogsOK struct {
	Data []ContainerBackupLogs `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerBackupLogsOK) GetData() []ContainerBackupLogs {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerBackupLogsOK) SetData(val []ContainerBackupLogs) {
	s.Data = val
}

type GetContainerBackupOK struct {
	Data     ContainerBackup            `json:"data"`
	Includes OptContainerBackupIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainerBackupOK) GetData() ContainerBackup {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainerBackupOK) GetIncludes() OptContainerBackupIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainerBackupOK) SetData(val ContainerBackup) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainerBackupOK) SetIncludes(val OptContainerBackupIncludes) {
	s.Includes = val
}

type GetContainerBackupsIncludeItem string

const (
	GetContainerBackupsIncludeItemIntegrations GetContainerBackupsIncludeItem = "integrations"
)

// AllValues returns all GetContainerBackupsIncludeItem values.
func (GetContainerBackupsIncludeItem) AllValues() []GetContainerBackupsIncludeItem {
	return []GetContainerBackupsIncludeItem{
		GetContainerBackupsIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerBackupsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerBackupsIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerBackupsIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainerBackupsIncludeItem(data) {
	case GetContainerBackupsIncludeItemIntegrations:
		*s = GetContainerBackupsIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerBackupsOK struct {
	Data     []ContainerBackup          `json:"data"`
	Includes OptContainerBackupIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainerBackupsOK) GetData() []ContainerBackup {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainerBackupsOK) GetIncludes() OptContainerBackupIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainerBackupsOK) SetData(val []ContainerBackup) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainerBackupsOK) SetIncludes(val OptContainerBackupIncludes) {
	s.Includes = val
}

type GetContainerBackupsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetContainerBackupsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetContainerBackupsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetContainerBackupsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetContainerBackupsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetContainerIncludeItem string

const (
	GetContainerIncludeItemCreators     GetContainerIncludeItem = "creators"
	GetContainerIncludeItemImages       GetContainerIncludeItem = "images"
	GetContainerIncludeItemStackBuilds  GetContainerIncludeItem = "stack_builds"
	GetContainerIncludeItemStacks       GetContainerIncludeItem = "stacks"
	GetContainerIncludeItemEnvironments GetContainerIncludeItem = "environments"
)

// AllValues returns all GetContainerIncludeItem values.
func (GetContainerIncludeItem) AllValues() []GetContainerIncludeItem {
	return []GetContainerIncludeItem{
		GetContainerIncludeItemCreators,
		GetContainerIncludeItemImages,
		GetContainerIncludeItemStackBuilds,
		GetContainerIncludeItemStacks,
		GetContainerIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerIncludeItemCreators:
		return []byte(s), nil
	case GetContainerIncludeItemImages:
		return []byte(s), nil
	case GetContainerIncludeItemStackBuilds:
		return []byte(s), nil
	case GetContainerIncludeItemStacks:
		return []byte(s), nil
	case GetContainerIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainerIncludeItem(data) {
	case GetContainerIncludeItemCreators:
		*s = GetContainerIncludeItemCreators
		return nil
	case GetContainerIncludeItemImages:
		*s = GetContainerIncludeItemImages
		return nil
	case GetContainerIncludeItemStackBuilds:
		*s = GetContainerIncludeItemStackBuilds
		return nil
	case GetContainerIncludeItemStacks:
		*s = GetContainerIncludeItemStacks
		return nil
	case GetContainerIncludeItemEnvironments:
		*s = GetContainerIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerInstancesTelemetryFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetContainerInstancesTelemetryFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetContainerInstancesTelemetryFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetContainerInstancesTelemetryFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetContainerInstancesTelemetryFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetContainerInstancesTelemetryOK struct {
	Data []InstanceTelemetryPoint `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerInstancesTelemetryOK) GetData() []InstanceTelemetryPoint {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerInstancesTelemetryOK) SetData(val []InstanceTelemetryPoint) {
	s.Data = val
}

type GetContainerMetaItem string

const (
	GetContainerMetaItemInstancesCount GetContainerMetaItem = "instances_count"
	GetContainerMetaItemDomains        GetContainerMetaItem = "domains"
	GetContainerMetaItemIps            GetContainerMetaItem = "ips"
)

// AllValues returns all GetContainerMetaItem values.
func (GetContainerMetaItem) AllValues() []GetContainerMetaItem {
	return []GetContainerMetaItem{
		GetContainerMetaItemInstancesCount,
		GetContainerMetaItemDomains,
		GetContainerMetaItemIps,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerMetaItemInstancesCount:
		return []byte(s), nil
	case GetContainerMetaItemDomains:
		return []byte(s), nil
	case GetContainerMetaItemIps:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerMetaItem) UnmarshalText(data []byte) error {
	switch GetContainerMetaItem(data) {
	case GetContainerMetaItemInstancesCount:
		*s = GetContainerMetaItemInstancesCount
		return nil
	case GetContainerMetaItemDomains:
		*s = GetContainerMetaItemDomains
		return nil
	case GetContainerMetaItemIps:
		*s = GetContainerMetaItemIps
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerOK struct {
	Data     Container            `json:"data"`
	Includes OptContainerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainerOK) GetData() Container {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainerOK) GetIncludes() OptContainerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainerOK) SetData(val Container) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainerOK) SetIncludes(val OptContainerIncludes) {
	s.Includes = val
}

type GetContainerServersMetaItem string

const (
	GetContainerServersMetaItemPrimaryIP GetContainerServersMetaItem = "primary_ip"
)

// AllValues returns all GetContainerServersMetaItem values.
func (GetContainerServersMetaItem) AllValues() []GetContainerServersMetaItem {
	return []GetContainerServersMetaItem{
		GetContainerServersMetaItemPrimaryIP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainerServersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainerServersMetaItemPrimaryIP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainerServersMetaItem) UnmarshalText(data []byte) error {
	switch GetContainerServersMetaItem(data) {
	case GetContainerServersMetaItemPrimaryIP:
		*s = GetContainerServersMetaItemPrimaryIP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainerServersOK struct {
	Data ServerInstancesSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerServersOK) GetData() ServerInstancesSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerServersOK) SetData(val ServerInstancesSummary) {
	s.Data = val
}

type GetContainerServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetContainerServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetContainerServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetContainerServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetContainerServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetContainerSummaryOK struct {
	// Contains useful and relevant data/statistics for a container that would otherwise be several
	// separate API calls.
	Data GetContainerSummaryOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContainerSummaryOK) GetData() GetContainerSummaryOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContainerSummaryOK) SetData(val GetContainerSummaryOKData) {
	s.Data = val
}

// Contains useful and relevant data/statistics for a container that would otherwise be several
// separate API calls.
type GetContainerSummaryOKData struct {
	ID    ID                                   `json:"id"`
	State ContainerState                       `json:"state"`
	Stats OptNilGetContainerSummaryOKDataStats `json:"stats"`
}

// GetID returns the value of ID.
func (s *GetContainerSummaryOKData) GetID() ID {
	return s.ID
}

// GetState returns the value of State.
func (s *GetContainerSummaryOKData) GetState() ContainerState {
	return s.State
}

// GetStats returns the value of Stats.
func (s *GetContainerSummaryOKData) GetStats() OptNilGetContainerSummaryOKDataStats {
	return s.Stats
}

// SetID sets the value of ID.
func (s *GetContainerSummaryOKData) SetID(val ID) {
	s.ID = val
}

// SetState sets the value of State.
func (s *GetContainerSummaryOKData) SetState(val ContainerState) {
	s.State = val
}

// SetStats sets the value of Stats.
func (s *GetContainerSummaryOKData) SetStats(val OptNilGetContainerSummaryOKDataStats) {
	s.Stats = val
}

// A summary of resources by state.
type GetContainerSummaryOKDataStats struct {
	// A count of this resource, grouped by state.
	State GetContainerSummaryOKDataStatsState `json:"state"`
	// The total number of this resource.
	Total int `json:"total"`
	// The total number of this resource available, less any deleted ones.
	Available int `json:"available"`
}

// GetState returns the value of State.
func (s *GetContainerSummaryOKDataStats) GetState() GetContainerSummaryOKDataStatsState {
	return s.State
}

// GetTotal returns the value of Total.
func (s *GetContainerSummaryOKDataStats) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *GetContainerSummaryOKDataStats) GetAvailable() int {
	return s.Available
}

// SetState sets the value of State.
func (s *GetContainerSummaryOKDataStats) SetState(val GetContainerSummaryOKDataStatsState) {
	s.State = val
}

// SetTotal sets the value of Total.
func (s *GetContainerSummaryOKDataStats) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *GetContainerSummaryOKDataStats) SetAvailable(val int) {
	s.Available = val
}

// A count of this resource, grouped by state.
type GetContainerSummaryOKDataStatsState map[string]int

func (s *GetContainerSummaryOKDataStatsState) init() GetContainerSummaryOKDataStatsState {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type GetContainersFilter struct {
	// `filter[creator]=account-ID` filter for containers matching a particular creator, such as
	// `account-ID` or `environment-ID`.
	Creator OptString `json:"creator"`
	// `filter[identifier]=value` List only those containers matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search containers for a value associated with a field on the given
	// container(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the container's current
	// state.
	State OptString `json:"state"`
	// `filter[service]=value` service filtering will allow you to filter by service type: `loadbalancer`,
	//  `discovery`, `vpn`.
	Service OptString `json:"service"`
	// `filter[public_network]=value` public network filtering will allow you to filter by the containers
	// network settings: `enabled`, `disabled`, `egress-only`.
	PublicNetwork OptString `json:"public_network"`
	// `filter[image]=ID` image filtering by ID.  Submit the ID of the image you wish to filter for and
	// the return will be any containers currently using the image.
	Image OptString `json:"image"`
	// `filter[environment]=ID` environment filtering by ID.  Submit the ID of the environment you wish
	// to filter for and the return will be any containers in that environment.
	Environment OptString `json:"environment"`
	// `filter[tags]=tagone,tagtwo,tagthree` container filtering using server tags. If the container has
	// the tags you submit it will be part of the return.
	Tags OptString `json:"tags"`
	// `filter[stack]=ID` stack filtering by ID.  Submit the ID of the stack you wish to filter for and
	// the return will be any containers deployed associated with 'containers' from the stack.
	Stack OptString `json:"stack"`
	// `filter[deployment]=v1,v2` filter containers by deployment(s).
	Deployment      OptString   `json:"deployment"`
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetCreator returns the value of Creator.
func (s *GetContainersFilter) GetCreator() OptString {
	return s.Creator
}

// GetIdentifier returns the value of Identifier.
func (s *GetContainersFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetContainersFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetContainersFilter) GetState() OptString {
	return s.State
}

// GetService returns the value of Service.
func (s *GetContainersFilter) GetService() OptString {
	return s.Service
}

// GetPublicNetwork returns the value of PublicNetwork.
func (s *GetContainersFilter) GetPublicNetwork() OptString {
	return s.PublicNetwork
}

// GetImage returns the value of Image.
func (s *GetContainersFilter) GetImage() OptString {
	return s.Image
}

// GetEnvironment returns the value of Environment.
func (s *GetContainersFilter) GetEnvironment() OptString {
	return s.Environment
}

// GetTags returns the value of Tags.
func (s *GetContainersFilter) GetTags() OptString {
	return s.Tags
}

// GetStack returns the value of Stack.
func (s *GetContainersFilter) GetStack() OptString {
	return s.Stack
}

// GetDeployment returns the value of Deployment.
func (s *GetContainersFilter) GetDeployment() OptString {
	return s.Deployment
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetContainersFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetContainersFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetCreator sets the value of Creator.
func (s *GetContainersFilter) SetCreator(val OptString) {
	s.Creator = val
}

// SetIdentifier sets the value of Identifier.
func (s *GetContainersFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetContainersFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetContainersFilter) SetState(val OptString) {
	s.State = val
}

// SetService sets the value of Service.
func (s *GetContainersFilter) SetService(val OptString) {
	s.Service = val
}

// SetPublicNetwork sets the value of PublicNetwork.
func (s *GetContainersFilter) SetPublicNetwork(val OptString) {
	s.PublicNetwork = val
}

// SetImage sets the value of Image.
func (s *GetContainersFilter) SetImage(val OptString) {
	s.Image = val
}

// SetEnvironment sets the value of Environment.
func (s *GetContainersFilter) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetTags sets the value of Tags.
func (s *GetContainersFilter) SetTags(val OptString) {
	s.Tags = val
}

// SetStack sets the value of Stack.
func (s *GetContainersFilter) SetStack(val OptString) {
	s.Stack = val
}

// SetDeployment sets the value of Deployment.
func (s *GetContainersFilter) SetDeployment(val OptString) {
	s.Deployment = val
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetContainersFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetContainersFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetContainersIncludeItem string

const (
	GetContainersIncludeItemCreators     GetContainersIncludeItem = "creators"
	GetContainersIncludeItemImages       GetContainersIncludeItem = "images"
	GetContainersIncludeItemStackBuilds  GetContainersIncludeItem = "stack_builds"
	GetContainersIncludeItemStacks       GetContainersIncludeItem = "stacks"
	GetContainersIncludeItemEnvironments GetContainersIncludeItem = "environments"
)

// AllValues returns all GetContainersIncludeItem values.
func (GetContainersIncludeItem) AllValues() []GetContainersIncludeItem {
	return []GetContainersIncludeItem{
		GetContainersIncludeItemCreators,
		GetContainersIncludeItemImages,
		GetContainersIncludeItemStackBuilds,
		GetContainersIncludeItemStacks,
		GetContainersIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainersIncludeItemCreators:
		return []byte(s), nil
	case GetContainersIncludeItemImages:
		return []byte(s), nil
	case GetContainersIncludeItemStackBuilds:
		return []byte(s), nil
	case GetContainersIncludeItemStacks:
		return []byte(s), nil
	case GetContainersIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainersIncludeItem) UnmarshalText(data []byte) error {
	switch GetContainersIncludeItem(data) {
	case GetContainersIncludeItemCreators:
		*s = GetContainersIncludeItemCreators
		return nil
	case GetContainersIncludeItemImages:
		*s = GetContainersIncludeItemImages
		return nil
	case GetContainersIncludeItemStackBuilds:
		*s = GetContainersIncludeItemStackBuilds
		return nil
	case GetContainersIncludeItemStacks:
		*s = GetContainersIncludeItemStacks
		return nil
	case GetContainersIncludeItemEnvironments:
		*s = GetContainersIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainersMetaItem string

const (
	GetContainersMetaItemInstancesCount GetContainersMetaItem = "instances_count"
	GetContainersMetaItemDomains        GetContainersMetaItem = "domains"
	GetContainersMetaItemIps            GetContainersMetaItem = "ips"
)

// AllValues returns all GetContainersMetaItem values.
func (GetContainersMetaItem) AllValues() []GetContainersMetaItem {
	return []GetContainersMetaItem{
		GetContainersMetaItemInstancesCount,
		GetContainersMetaItemDomains,
		GetContainersMetaItemIps,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetContainersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetContainersMetaItemInstancesCount:
		return []byte(s), nil
	case GetContainersMetaItemDomains:
		return []byte(s), nil
	case GetContainersMetaItemIps:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetContainersMetaItem) UnmarshalText(data []byte) error {
	switch GetContainersMetaItem(data) {
	case GetContainersMetaItemInstancesCount:
		*s = GetContainersMetaItemInstancesCount
		return nil
	case GetContainersMetaItemDomains:
		*s = GetContainersMetaItemDomains
		return nil
	case GetContainersMetaItemIps:
		*s = GetContainersMetaItemIps
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetContainersOK struct {
	Data     []Container          `json:"data"`
	Includes OptContainerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetContainersOK) GetData() []Container {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetContainersOK) GetIncludes() OptContainerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetContainersOK) SetData(val []Container) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetContainersOK) SetIncludes(val OptContainerIncludes) {
	s.Includes = val
}

type GetContainersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetContainersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetContainersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetContainersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetContainersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetCreditOK struct {
	Data Credit `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCreditOK) GetData() Credit {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCreditOK) SetData(val Credit) {
	s.Data = val
}

type GetCreditsFilter struct {
	// `filter[state]=value1,value2` state filtering will allow you to filter by the credit's current
	// state.
	State OptString `json:"state"`
	// Use a text-based search to filter the credits.
	Search OptString `json:"search"`
}

// GetState returns the value of State.
func (s *GetCreditsFilter) GetState() OptString {
	return s.State
}

// GetSearch returns the value of Search.
func (s *GetCreditsFilter) GetSearch() OptString {
	return s.Search
}

// SetState sets the value of State.
func (s *GetCreditsFilter) SetState(val OptString) {
	s.State = val
}

// SetSearch sets the value of Search.
func (s *GetCreditsFilter) SetSearch(val OptString) {
	s.Search = val
}

type GetCreditsOK struct {
	Data []Credit `json:"data"`
}

// GetData returns the value of Data.
func (s *GetCreditsOK) GetData() []Credit {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetCreditsOK) SetData(val []Credit) {
	s.Data = val
}

type GetCreditsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetCreditsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetCreditsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetCreditsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetCreditsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetDNSZoneOK struct {
	Data Zone `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDNSZoneOK) GetData() Zone {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDNSZoneOK) SetData(val Zone) {
	s.Data = val
}

type GetDNSZoneRecordsFilter struct {
	// `filter[state]=value1,value2` state filtering will allow you to filter by the DNS record's current
	// state.
	State OptString `json:"state"`
}

// GetState returns the value of State.
func (s *GetDNSZoneRecordsFilter) GetState() OptString {
	return s.State
}

// SetState sets the value of State.
func (s *GetDNSZoneRecordsFilter) SetState(val OptString) {
	s.State = val
}

type GetDNSZoneRecordsIncludeItem string

const (
	GetDNSZoneRecordsIncludeItemCreators   GetDNSZoneRecordsIncludeItem = "creators"
	GetDNSZoneRecordsIncludeItemContainers GetDNSZoneRecordsIncludeItem = "containers"
)

// AllValues returns all GetDNSZoneRecordsIncludeItem values.
func (GetDNSZoneRecordsIncludeItem) AllValues() []GetDNSZoneRecordsIncludeItem {
	return []GetDNSZoneRecordsIncludeItem{
		GetDNSZoneRecordsIncludeItemCreators,
		GetDNSZoneRecordsIncludeItemContainers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDNSZoneRecordsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetDNSZoneRecordsIncludeItemCreators:
		return []byte(s), nil
	case GetDNSZoneRecordsIncludeItemContainers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDNSZoneRecordsIncludeItem) UnmarshalText(data []byte) error {
	switch GetDNSZoneRecordsIncludeItem(data) {
	case GetDNSZoneRecordsIncludeItemCreators:
		*s = GetDNSZoneRecordsIncludeItemCreators
		return nil
	case GetDNSZoneRecordsIncludeItemContainers:
		*s = GetDNSZoneRecordsIncludeItemContainers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDNSZoneRecordsOK struct {
	Data     []Record          `json:"data"`
	Includes OptRecordIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetDNSZoneRecordsOK) GetData() []Record {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetDNSZoneRecordsOK) GetIncludes() OptRecordIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetDNSZoneRecordsOK) SetData(val []Record) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetDNSZoneRecordsOK) SetIncludes(val OptRecordIncludes) {
	s.Includes = val
}

type GetDNSZoneRecordsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetDNSZoneRecordsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetDNSZoneRecordsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetDNSZoneRecordsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetDNSZoneRecordsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetDNSZonesFilter struct {
	// `filter[state]=value1,value2` state filtering will allow you to filter by the DNS Zone's current
	// state.
	State OptString `json:"state"`
}

// GetState returns the value of State.
func (s *GetDNSZonesFilter) GetState() OptString {
	return s.State
}

// SetState sets the value of State.
func (s *GetDNSZonesFilter) SetState(val OptString) {
	s.State = val
}

type GetDNSZonesIncludeItem string

const (
	GetDNSZonesIncludeItemCreators GetDNSZonesIncludeItem = "creators"
)

// AllValues returns all GetDNSZonesIncludeItem values.
func (GetDNSZonesIncludeItem) AllValues() []GetDNSZonesIncludeItem {
	return []GetDNSZonesIncludeItem{
		GetDNSZonesIncludeItemCreators,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetDNSZonesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetDNSZonesIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetDNSZonesIncludeItem) UnmarshalText(data []byte) error {
	switch GetDNSZonesIncludeItem(data) {
	case GetDNSZonesIncludeItemCreators:
		*s = GetDNSZonesIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDNSZonesOK struct {
	Data     []Zone          `json:"data"`
	Includes OptZoneIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetDNSZonesOK) GetData() []Zone {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetDNSZonesOK) GetIncludes() OptZoneIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetDNSZonesOK) SetData(val []Zone) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetDNSZonesOK) SetIncludes(val OptZoneIncludes) {
	s.Includes = val
}

type GetDNSZonesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetDNSZonesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetDNSZonesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetDNSZonesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetDNSZonesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetDeploymentStrategiesOK struct {
	Data GetDeploymentStrategiesOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetDeploymentStrategiesOK) GetData() GetDeploymentStrategiesOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetDeploymentStrategiesOK) SetData(val GetDeploymentStrategiesOKData) {
	s.Data = val
}

type GetDeploymentStrategiesOKData struct {
	ResourceMinusDensity  OptDeploymentStrategy `json:"resource-density"`
	HighMinusAvailability OptDeploymentStrategy `json:"high-availability"`
	FirstMinusAvailable   OptDeploymentStrategy `json:"first-available"`
	Node                  OptDeploymentStrategy `json:"node"`
	Edge                  OptDeploymentStrategy `json:"edge"`
	Manual                OptDeploymentStrategy `json:"manual"`
	Function              OptDeploymentStrategy `json:"function"`
}

// GetResourceMinusDensity returns the value of ResourceMinusDensity.
func (s *GetDeploymentStrategiesOKData) GetResourceMinusDensity() OptDeploymentStrategy {
	return s.ResourceMinusDensity
}

// GetHighMinusAvailability returns the value of HighMinusAvailability.
func (s *GetDeploymentStrategiesOKData) GetHighMinusAvailability() OptDeploymentStrategy {
	return s.HighMinusAvailability
}

// GetFirstMinusAvailable returns the value of FirstMinusAvailable.
func (s *GetDeploymentStrategiesOKData) GetFirstMinusAvailable() OptDeploymentStrategy {
	return s.FirstMinusAvailable
}

// GetNode returns the value of Node.
func (s *GetDeploymentStrategiesOKData) GetNode() OptDeploymentStrategy {
	return s.Node
}

// GetEdge returns the value of Edge.
func (s *GetDeploymentStrategiesOKData) GetEdge() OptDeploymentStrategy {
	return s.Edge
}

// GetManual returns the value of Manual.
func (s *GetDeploymentStrategiesOKData) GetManual() OptDeploymentStrategy {
	return s.Manual
}

// GetFunction returns the value of Function.
func (s *GetDeploymentStrategiesOKData) GetFunction() OptDeploymentStrategy {
	return s.Function
}

// SetResourceMinusDensity sets the value of ResourceMinusDensity.
func (s *GetDeploymentStrategiesOKData) SetResourceMinusDensity(val OptDeploymentStrategy) {
	s.ResourceMinusDensity = val
}

// SetHighMinusAvailability sets the value of HighMinusAvailability.
func (s *GetDeploymentStrategiesOKData) SetHighMinusAvailability(val OptDeploymentStrategy) {
	s.HighMinusAvailability = val
}

// SetFirstMinusAvailable sets the value of FirstMinusAvailable.
func (s *GetDeploymentStrategiesOKData) SetFirstMinusAvailable(val OptDeploymentStrategy) {
	s.FirstMinusAvailable = val
}

// SetNode sets the value of Node.
func (s *GetDeploymentStrategiesOKData) SetNode(val OptDeploymentStrategy) {
	s.Node = val
}

// SetEdge sets the value of Edge.
func (s *GetDeploymentStrategiesOKData) SetEdge(val OptDeploymentStrategy) {
	s.Edge = val
}

// SetManual sets the value of Manual.
func (s *GetDeploymentStrategiesOKData) SetManual(val OptDeploymentStrategy) {
	s.Manual = val
}

// SetFunction sets the value of Function.
func (s *GetDeploymentStrategiesOKData) SetFunction(val OptDeploymentStrategy) {
	s.Function = val
}

type GetEnvironmentDeploymentsOK struct {
	Data GetEnvironmentDeploymentsOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentDeploymentsOK) GetData() GetEnvironmentDeploymentsOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetEnvironmentDeploymentsOK) SetData(val GetEnvironmentDeploymentsOKData) {
	s.Data = val
}

type GetEnvironmentDeploymentsOKData struct {
	// A map where the key is the version property of a deployment.
	Versions GetEnvironmentDeploymentsOKDataVersions `json:"versions"`
}

// GetVersions returns the value of Versions.
func (s *GetEnvironmentDeploymentsOKData) GetVersions() GetEnvironmentDeploymentsOKDataVersions {
	return s.Versions
}

// SetVersions sets the value of Versions.
func (s *GetEnvironmentDeploymentsOKData) SetVersions(val GetEnvironmentDeploymentsOKDataVersions) {
	s.Versions = val
}

// A map where the key is the version property of a deployment.
type GetEnvironmentDeploymentsOKDataVersions map[string]GetEnvironmentDeploymentsOKDataVersionsItem

func (s *GetEnvironmentDeploymentsOKDataVersions) init() GetEnvironmentDeploymentsOKDataVersions {
	m := *s
	if m == nil {
		m = map[string]GetEnvironmentDeploymentsOKDataVersionsItem{}
		*s = m
	}
	return m
}

type GetEnvironmentDeploymentsOKDataVersionsItem struct {
	// An array of all tags on this environment that point to this version.
	Tags []Identifier `json:"tags"`
	// The number of containers utilizing this version of this deployment.
	Containers int `json:"containers"`
}

// GetTags returns the value of Tags.
func (s *GetEnvironmentDeploymentsOKDataVersionsItem) GetTags() []Identifier {
	return s.Tags
}

// GetContainers returns the value of Containers.
func (s *GetEnvironmentDeploymentsOKDataVersionsItem) GetContainers() int {
	return s.Containers
}

// SetTags sets the value of Tags.
func (s *GetEnvironmentDeploymentsOKDataVersionsItem) SetTags(val []Identifier) {
	s.Tags = val
}

// SetContainers sets the value of Containers.
func (s *GetEnvironmentDeploymentsOKDataVersionsItem) SetContainers(val int) {
	s.Containers = val
}

type GetEnvironmentIncludeItem string

const (
	GetEnvironmentIncludeItemCreators GetEnvironmentIncludeItem = "creators"
	GetEnvironmentIncludeItemStacks   GetEnvironmentIncludeItem = "stacks"
)

// AllValues returns all GetEnvironmentIncludeItem values.
func (GetEnvironmentIncludeItem) AllValues() []GetEnvironmentIncludeItem {
	return []GetEnvironmentIncludeItem{
		GetEnvironmentIncludeItemCreators,
		GetEnvironmentIncludeItemStacks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentIncludeItemCreators:
		return []byte(s), nil
	case GetEnvironmentIncludeItemStacks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentIncludeItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentIncludeItem(data) {
	case GetEnvironmentIncludeItemCreators:
		*s = GetEnvironmentIncludeItemCreators
		return nil
	case GetEnvironmentIncludeItemStacks:
		*s = GetEnvironmentIncludeItemStacks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentInstancesTelemetryFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetEnvironmentInstancesTelemetryFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetEnvironmentInstancesTelemetryFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetEnvironmentInstancesTelemetryFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetEnvironmentInstancesTelemetryFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetEnvironmentInstancesTelemetryOK struct {
	Data []InstanceTelemetryPoint `json:"data"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentInstancesTelemetryOK) GetData() []InstanceTelemetryPoint {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetEnvironmentInstancesTelemetryOK) SetData(val []InstanceTelemetryPoint) {
	s.Data = val
}

type GetEnvironmentMetaItem string

const (
	GetEnvironmentMetaItemContainers      GetEnvironmentMetaItem = "containers"
	GetEnvironmentMetaItemContainersCount GetEnvironmentMetaItem = "containers_count"
	GetEnvironmentMetaItemInstancesCount  GetEnvironmentMetaItem = "instances_count"
)

// AllValues returns all GetEnvironmentMetaItem values.
func (GetEnvironmentMetaItem) AllValues() []GetEnvironmentMetaItem {
	return []GetEnvironmentMetaItem{
		GetEnvironmentMetaItemContainers,
		GetEnvironmentMetaItemContainersCount,
		GetEnvironmentMetaItemInstancesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentMetaItemContainers:
		return []byte(s), nil
	case GetEnvironmentMetaItemContainersCount:
		return []byte(s), nil
	case GetEnvironmentMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentMetaItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentMetaItem(data) {
	case GetEnvironmentMetaItemContainers:
		*s = GetEnvironmentMetaItemContainers
		return nil
	case GetEnvironmentMetaItemContainersCount:
		*s = GetEnvironmentMetaItemContainersCount
		return nil
	case GetEnvironmentMetaItemInstancesCount:
		*s = GetEnvironmentMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentOK struct {
	Data     Environment                 `json:"data"`
	Includes OptGetEnvironmentOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentOK) GetData() Environment {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetEnvironmentOK) GetIncludes() OptGetEnvironmentOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetEnvironmentOK) SetData(val Environment) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetEnvironmentOK) SetIncludes(val OptGetEnvironmentOKIncludes) {
	s.Includes = val
}

type GetEnvironmentOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetEnvironmentOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetEnvironmentOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetEnvironmentSummaryOK struct {
	Data EnvironmentSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentSummaryOK) GetData() EnvironmentSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetEnvironmentSummaryOK) SetData(val EnvironmentSummary) {
	s.Data = val
}

type GetEnvironmentsFilter struct {
	// `filter[creator]=account-ID` filter for environments matching a particular creator, such as
	// `account-ID`.
	Creator OptString `json:"creator"`
	// `filter[identifier]=value` List only those environments matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given environment(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the environment's
	// current state.
	State OptString `json:"state"`
	// `filter[stack_build]=ID` stack build filtering by ID.  Submit the ID of the stack build you wish
	// to filter for and the return sill be any environments that have the stack build deployed to them.
	StackBuild OptString `json:"stack_build"`
}

// GetCreator returns the value of Creator.
func (s *GetEnvironmentsFilter) GetCreator() OptString {
	return s.Creator
}

// GetIdentifier returns the value of Identifier.
func (s *GetEnvironmentsFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetEnvironmentsFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetEnvironmentsFilter) GetState() OptString {
	return s.State
}

// GetStackBuild returns the value of StackBuild.
func (s *GetEnvironmentsFilter) GetStackBuild() OptString {
	return s.StackBuild
}

// SetCreator sets the value of Creator.
func (s *GetEnvironmentsFilter) SetCreator(val OptString) {
	s.Creator = val
}

// SetIdentifier sets the value of Identifier.
func (s *GetEnvironmentsFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetEnvironmentsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetEnvironmentsFilter) SetState(val OptString) {
	s.State = val
}

// SetStackBuild sets the value of StackBuild.
func (s *GetEnvironmentsFilter) SetStackBuild(val OptString) {
	s.StackBuild = val
}

type GetEnvironmentsIncludeItem string

const (
	GetEnvironmentsIncludeItemCreators GetEnvironmentsIncludeItem = "creators"
	GetEnvironmentsIncludeItemStacks   GetEnvironmentsIncludeItem = "stacks"
)

// AllValues returns all GetEnvironmentsIncludeItem values.
func (GetEnvironmentsIncludeItem) AllValues() []GetEnvironmentsIncludeItem {
	return []GetEnvironmentsIncludeItem{
		GetEnvironmentsIncludeItemCreators,
		GetEnvironmentsIncludeItemStacks,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentsIncludeItemCreators:
		return []byte(s), nil
	case GetEnvironmentsIncludeItemStacks:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentsIncludeItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentsIncludeItem(data) {
	case GetEnvironmentsIncludeItemCreators:
		*s = GetEnvironmentsIncludeItemCreators
		return nil
	case GetEnvironmentsIncludeItemStacks:
		*s = GetEnvironmentsIncludeItemStacks
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentsMetaItem string

const (
	GetEnvironmentsMetaItemContainers      GetEnvironmentsMetaItem = "containers"
	GetEnvironmentsMetaItemContainersCount GetEnvironmentsMetaItem = "containers_count"
	GetEnvironmentsMetaItemInstancesCount  GetEnvironmentsMetaItem = "instances_count"
)

// AllValues returns all GetEnvironmentsMetaItem values.
func (GetEnvironmentsMetaItem) AllValues() []GetEnvironmentsMetaItem {
	return []GetEnvironmentsMetaItem{
		GetEnvironmentsMetaItemContainers,
		GetEnvironmentsMetaItemContainersCount,
		GetEnvironmentsMetaItemInstancesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetEnvironmentsMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetEnvironmentsMetaItemContainers:
		return []byte(s), nil
	case GetEnvironmentsMetaItemContainersCount:
		return []byte(s), nil
	case GetEnvironmentsMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetEnvironmentsMetaItem) UnmarshalText(data []byte) error {
	switch GetEnvironmentsMetaItem(data) {
	case GetEnvironmentsMetaItemContainers:
		*s = GetEnvironmentsMetaItemContainers
		return nil
	case GetEnvironmentsMetaItemContainersCount:
		*s = GetEnvironmentsMetaItemContainersCount
		return nil
	case GetEnvironmentsMetaItemInstancesCount:
		*s = GetEnvironmentsMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetEnvironmentsOK struct {
	Data     []Environment                `json:"data"`
	Includes OptGetEnvironmentsOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetEnvironmentsOK) GetData() []Environment {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetEnvironmentsOK) GetIncludes() OptGetEnvironmentsOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetEnvironmentsOK) SetData(val []Environment) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetEnvironmentsOK) SetIncludes(val OptGetEnvironmentsOKIncludes) {
	s.Includes = val
}

type GetEnvironmentsOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetEnvironmentsOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetEnvironmentsOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetEnvironmentsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetEnvironmentsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetEnvironmentsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetEnvironmentsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetEnvironmentsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubCapabilitiesOK struct {
	Data []Capability             `json:"data"`
	Meta GetHubCapabilitiesOKMeta `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetHubCapabilitiesOK) GetData() []Capability {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetHubCapabilitiesOK) GetMeta() GetHubCapabilitiesOKMeta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetHubCapabilitiesOK) SetData(val []Capability) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetHubCapabilitiesOK) SetMeta(val GetHubCapabilitiesOKMeta) {
	s.Meta = val
}

type GetHubCapabilitiesOKMeta struct {
	// Human-readable captions keyed by the platform level capability it describes.
	Captions GetHubCapabilitiesOKMetaCaptions `json:"captions"`
}

// GetCaptions returns the value of Captions.
func (s *GetHubCapabilitiesOKMeta) GetCaptions() GetHubCapabilitiesOKMetaCaptions {
	return s.Captions
}

// SetCaptions sets the value of Captions.
func (s *GetHubCapabilitiesOKMeta) SetCaptions(val GetHubCapabilitiesOKMetaCaptions) {
	s.Captions = val
}

// Human-readable captions keyed by the platform level capability it describes.
type GetHubCapabilitiesOKMetaCaptions map[string]string

func (s *GetHubCapabilitiesOKMetaCaptions) init() GetHubCapabilitiesOKMetaCaptions {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetHubInvitesFilter struct{}

type GetHubInvitesIncludeItem string

const (
	GetHubInvitesIncludeItemSenders  GetHubInvitesIncludeItem = "senders"
	GetHubInvitesIncludeItemHubs     GetHubInvitesIncludeItem = "hubs"
	GetHubInvitesIncludeItemAccounts GetHubInvitesIncludeItem = "accounts"
)

// AllValues returns all GetHubInvitesIncludeItem values.
func (GetHubInvitesIncludeItem) AllValues() []GetHubInvitesIncludeItem {
	return []GetHubInvitesIncludeItem{
		GetHubInvitesIncludeItemSenders,
		GetHubInvitesIncludeItemHubs,
		GetHubInvitesIncludeItemAccounts,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubInvitesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubInvitesIncludeItemSenders:
		return []byte(s), nil
	case GetHubInvitesIncludeItemHubs:
		return []byte(s), nil
	case GetHubInvitesIncludeItemAccounts:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubInvitesIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubInvitesIncludeItem(data) {
	case GetHubInvitesIncludeItemSenders:
		*s = GetHubInvitesIncludeItemSenders
		return nil
	case GetHubInvitesIncludeItemHubs:
		*s = GetHubInvitesIncludeItemHubs
		return nil
	case GetHubInvitesIncludeItemAccounts:
		*s = GetHubInvitesIncludeItemAccounts
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubInvitesMetaItem string

const (
	GetHubInvitesMetaItemCapabilities GetHubInvitesMetaItem = "capabilities"
)

// AllValues returns all GetHubInvitesMetaItem values.
func (GetHubInvitesMetaItem) AllValues() []GetHubInvitesMetaItem {
	return []GetHubInvitesMetaItem{
		GetHubInvitesMetaItemCapabilities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubInvitesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubInvitesMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubInvitesMetaItem) UnmarshalText(data []byte) error {
	switch GetHubInvitesMetaItem(data) {
	case GetHubInvitesMetaItemCapabilities:
		*s = GetHubInvitesMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubInvitesOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubInvitesOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubInvitesOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubInvitesOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubInvitesOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubInvitesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubInvitesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubInvitesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubInvitesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubInvitesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubMemberAccountIncludeItem string

const (
	GetHubMemberAccountIncludeItemSenders  GetHubMemberAccountIncludeItem = "senders"
	GetHubMemberAccountIncludeItemHubs     GetHubMemberAccountIncludeItem = "hubs"
	GetHubMemberAccountIncludeItemAccounts GetHubMemberAccountIncludeItem = "accounts"
	GetHubMemberAccountIncludeItemRoles    GetHubMemberAccountIncludeItem = "roles"
)

// AllValues returns all GetHubMemberAccountIncludeItem values.
func (GetHubMemberAccountIncludeItem) AllValues() []GetHubMemberAccountIncludeItem {
	return []GetHubMemberAccountIncludeItem{
		GetHubMemberAccountIncludeItemSenders,
		GetHubMemberAccountIncludeItemHubs,
		GetHubMemberAccountIncludeItemAccounts,
		GetHubMemberAccountIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMemberAccountIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMemberAccountIncludeItemSenders:
		return []byte(s), nil
	case GetHubMemberAccountIncludeItemHubs:
		return []byte(s), nil
	case GetHubMemberAccountIncludeItemAccounts:
		return []byte(s), nil
	case GetHubMemberAccountIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMemberAccountIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMemberAccountIncludeItem(data) {
	case GetHubMemberAccountIncludeItemSenders:
		*s = GetHubMemberAccountIncludeItemSenders
		return nil
	case GetHubMemberAccountIncludeItemHubs:
		*s = GetHubMemberAccountIncludeItemHubs
		return nil
	case GetHubMemberAccountIncludeItemAccounts:
		*s = GetHubMemberAccountIncludeItemAccounts
		return nil
	case GetHubMemberAccountIncludeItemRoles:
		*s = GetHubMemberAccountIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMemberAccountMetaItem string

const (
	GetHubMemberAccountMetaItemCapabilities GetHubMemberAccountMetaItem = "capabilities"
)

// AllValues returns all GetHubMemberAccountMetaItem values.
func (GetHubMemberAccountMetaItem) AllValues() []GetHubMemberAccountMetaItem {
	return []GetHubMemberAccountMetaItem{
		GetHubMemberAccountMetaItemCapabilities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMemberAccountMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMemberAccountMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMemberAccountMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMemberAccountMetaItem(data) {
	case GetHubMemberAccountMetaItemCapabilities:
		*s = GetHubMemberAccountMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMemberAccountOK struct {
	Data     HubMembership            `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMemberAccountOK) GetData() HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMemberAccountOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMemberAccountOK) SetData(val HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMemberAccountOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMemberIncludeItem string

const (
	GetHubMemberIncludeItemSenders  GetHubMemberIncludeItem = "senders"
	GetHubMemberIncludeItemHubs     GetHubMemberIncludeItem = "hubs"
	GetHubMemberIncludeItemAccounts GetHubMemberIncludeItem = "accounts"
	GetHubMemberIncludeItemRoles    GetHubMemberIncludeItem = "roles"
)

// AllValues returns all GetHubMemberIncludeItem values.
func (GetHubMemberIncludeItem) AllValues() []GetHubMemberIncludeItem {
	return []GetHubMemberIncludeItem{
		GetHubMemberIncludeItemSenders,
		GetHubMemberIncludeItemHubs,
		GetHubMemberIncludeItemAccounts,
		GetHubMemberIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMemberIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMemberIncludeItemSenders:
		return []byte(s), nil
	case GetHubMemberIncludeItemHubs:
		return []byte(s), nil
	case GetHubMemberIncludeItemAccounts:
		return []byte(s), nil
	case GetHubMemberIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMemberIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMemberIncludeItem(data) {
	case GetHubMemberIncludeItemSenders:
		*s = GetHubMemberIncludeItemSenders
		return nil
	case GetHubMemberIncludeItemHubs:
		*s = GetHubMemberIncludeItemHubs
		return nil
	case GetHubMemberIncludeItemAccounts:
		*s = GetHubMemberIncludeItemAccounts
		return nil
	case GetHubMemberIncludeItemRoles:
		*s = GetHubMemberIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMemberOK struct {
	Data     HubMembership            `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMemberOK) GetData() HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMemberOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMemberOK) SetData(val HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMemberOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembersFilter struct{}

type GetHubMembersIncludeItem string

const (
	GetHubMembersIncludeItemSenders  GetHubMembersIncludeItem = "senders"
	GetHubMembersIncludeItemHubs     GetHubMembersIncludeItem = "hubs"
	GetHubMembersIncludeItemAccounts GetHubMembersIncludeItem = "accounts"
	GetHubMembersIncludeItemRoles    GetHubMembersIncludeItem = "roles"
)

// AllValues returns all GetHubMembersIncludeItem values.
func (GetHubMembersIncludeItem) AllValues() []GetHubMembersIncludeItem {
	return []GetHubMembersIncludeItem{
		GetHubMembersIncludeItemSenders,
		GetHubMembersIncludeItemHubs,
		GetHubMembersIncludeItemAccounts,
		GetHubMembersIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersIncludeItemSenders:
		return []byte(s), nil
	case GetHubMembersIncludeItemHubs:
		return []byte(s), nil
	case GetHubMembersIncludeItemAccounts:
		return []byte(s), nil
	case GetHubMembersIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMembersIncludeItem(data) {
	case GetHubMembersIncludeItemSenders:
		*s = GetHubMembersIncludeItemSenders
		return nil
	case GetHubMembersIncludeItemHubs:
		*s = GetHubMembersIncludeItemHubs
		return nil
	case GetHubMembersIncludeItemAccounts:
		*s = GetHubMembersIncludeItemAccounts
		return nil
	case GetHubMembersIncludeItemRoles:
		*s = GetHubMembersIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersMetaItem string

const (
	GetHubMembersMetaItemCapabilities GetHubMembersMetaItem = "capabilities"
)

// AllValues returns all GetHubMembersMetaItem values.
func (GetHubMembersMetaItem) AllValues() []GetHubMembersMetaItem {
	return []GetHubMembersMetaItem{
		GetHubMembersMetaItemCapabilities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembersMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembersMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMembersMetaItem(data) {
	case GetHubMembersMetaItemCapabilities:
		*s = GetHubMembersMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembersOK struct {
	Data     []HubMembership          `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMembersOK) GetData() []HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMembersOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMembersOK) SetData(val []HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMembersOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubMembersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubMembersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubMembersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubMembersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubMembershipFilter struct{}

type GetHubMembershipIncludeItem string

const (
	GetHubMembershipIncludeItemSenders  GetHubMembershipIncludeItem = "senders"
	GetHubMembershipIncludeItemHubs     GetHubMembershipIncludeItem = "hubs"
	GetHubMembershipIncludeItemAccounts GetHubMembershipIncludeItem = "accounts"
	GetHubMembershipIncludeItemRoles    GetHubMembershipIncludeItem = "roles"
)

// AllValues returns all GetHubMembershipIncludeItem values.
func (GetHubMembershipIncludeItem) AllValues() []GetHubMembershipIncludeItem {
	return []GetHubMembershipIncludeItem{
		GetHubMembershipIncludeItemSenders,
		GetHubMembershipIncludeItemHubs,
		GetHubMembershipIncludeItemAccounts,
		GetHubMembershipIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembershipIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembershipIncludeItemSenders:
		return []byte(s), nil
	case GetHubMembershipIncludeItemHubs:
		return []byte(s), nil
	case GetHubMembershipIncludeItemAccounts:
		return []byte(s), nil
	case GetHubMembershipIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembershipIncludeItem) UnmarshalText(data []byte) error {
	switch GetHubMembershipIncludeItem(data) {
	case GetHubMembershipIncludeItemSenders:
		*s = GetHubMembershipIncludeItemSenders
		return nil
	case GetHubMembershipIncludeItemHubs:
		*s = GetHubMembershipIncludeItemHubs
		return nil
	case GetHubMembershipIncludeItemAccounts:
		*s = GetHubMembershipIncludeItemAccounts
		return nil
	case GetHubMembershipIncludeItemRoles:
		*s = GetHubMembershipIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembershipMetaItem string

const (
	GetHubMembershipMetaItemCapabilities GetHubMembershipMetaItem = "capabilities"
)

// AllValues returns all GetHubMembershipMetaItem values.
func (GetHubMembershipMetaItem) AllValues() []GetHubMembershipMetaItem {
	return []GetHubMembershipMetaItem{
		GetHubMembershipMetaItemCapabilities,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMembershipMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMembershipMetaItemCapabilities:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMembershipMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMembershipMetaItem(data) {
	case GetHubMembershipMetaItemCapabilities:
		*s = GetHubMembershipMetaItemCapabilities
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubMembershipOK struct {
	Data     HubMembership            `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetHubMembershipOK) GetData() HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetHubMembershipOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetHubMembershipOK) SetData(val HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetHubMembershipOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type GetHubMembershipPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubMembershipPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubMembershipPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubMembershipPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubMembershipPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetHubMetaItem string

const (
	GetHubMetaItemMemberships GetHubMetaItem = "memberships"
)

// AllValues returns all GetHubMetaItem values.
func (GetHubMetaItem) AllValues() []GetHubMetaItem {
	return []GetHubMetaItem{
		GetHubMetaItemMemberships,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetHubMetaItemMemberships:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubMetaItem) UnmarshalText(data []byte) error {
	switch GetHubMetaItem(data) {
	case GetHubMetaItemMemberships:
		*s = GetHubMetaItemMemberships
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubNotificationSocketAuthOK struct {
	Data GetHubNotificationSocketAuthOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubNotificationSocketAuthOK) GetData() GetHubNotificationSocketAuthOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubNotificationSocketAuthOK) SetData(val GetHubNotificationSocketAuthOKData) {
	s.Data = val
}

func (*GetHubNotificationSocketAuthOK) getHubNotificationSocketAuthRes() {}

type GetHubNotificationSocketAuthOKData struct {
	// A token used for connecting to the Hub notification pipeline websocket API.
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *GetHubNotificationSocketAuthOKData) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *GetHubNotificationSocketAuthOKData) SetToken(val string) {
	s.Token = val
}

// GetHubNotificationSocketAuthSwitchingProtocols is response for GetHubNotificationSocketAuth operation.
type GetHubNotificationSocketAuthSwitchingProtocols struct {
	Connection         OptString
	SecWebSocketAccept OptString
	Upgrade            OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade
}

// GetConnection returns the value of Connection.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) GetConnection() OptString {
	return s.Connection
}

// GetSecWebSocketAccept returns the value of SecWebSocketAccept.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) GetSecWebSocketAccept() OptString {
	return s.SecWebSocketAccept
}

// GetUpgrade returns the value of Upgrade.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) GetUpgrade() OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade {
	return s.Upgrade
}

// SetConnection sets the value of Connection.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) SetConnection(val OptString) {
	s.Connection = val
}

// SetSecWebSocketAccept sets the value of SecWebSocketAccept.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) SetSecWebSocketAccept(val OptString) {
	s.SecWebSocketAccept = val
}

// SetUpgrade sets the value of Upgrade.
func (s *GetHubNotificationSocketAuthSwitchingProtocols) SetUpgrade(val OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) {
	s.Upgrade = val
}

func (*GetHubNotificationSocketAuthSwitchingProtocols) getHubNotificationSocketAuthRes() {}

type GetHubNotificationSocketAuthSwitchingProtocolsUpgrade string

const (
	GetHubNotificationSocketAuthSwitchingProtocolsUpgradeWebsocket GetHubNotificationSocketAuthSwitchingProtocolsUpgrade = "websocket"
)

// AllValues returns all GetHubNotificationSocketAuthSwitchingProtocolsUpgrade values.
func (GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) AllValues() []GetHubNotificationSocketAuthSwitchingProtocolsUpgrade {
	return []GetHubNotificationSocketAuthSwitchingProtocolsUpgrade{
		GetHubNotificationSocketAuthSwitchingProtocolsUpgradeWebsocket,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) MarshalText() ([]byte, error) {
	switch s {
	case GetHubNotificationSocketAuthSwitchingProtocolsUpgradeWebsocket:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) UnmarshalText(data []byte) error {
	switch GetHubNotificationSocketAuthSwitchingProtocolsUpgrade(data) {
	case GetHubNotificationSocketAuthSwitchingProtocolsUpgradeWebsocket:
		*s = GetHubNotificationSocketAuthSwitchingProtocolsUpgradeWebsocket
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetHubOK struct {
	Data OptHub `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubOK) GetData() OptHub {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubOK) SetData(val OptHub) {
	s.Data = val
}

type GetHubUsageFilter struct{}

type GetHubUsageOK struct {
	Data []HubUsageDatum `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubUsageOK) GetData() []HubUsageDatum {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubUsageOK) SetData(val []HubUsageDatum) {
	s.Data = val
}

type GetHubsFilter struct {
	// `filter[identifier]=value` List only those environments matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search hubs for a value associated with a field on the given Hub(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Hub's current state.
	State OptString `json:"state"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetHubsFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetHubsFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetHubsFilter) GetState() OptString {
	return s.State
}

// SetIdentifier sets the value of Identifier.
func (s *GetHubsFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetHubsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetHubsFilter) SetState(val OptString) {
	s.State = val
}

type GetHubsOK struct {
	Data []Hub `json:"data"`
}

// GetData returns the value of Data.
func (s *GetHubsOK) GetData() []Hub {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetHubsOK) SetData(val []Hub) {
	s.Data = val
}

type GetHubsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetHubsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetHubsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetHubsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetHubsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetIPPoolIncludeItem string

const (
	GetIPPoolIncludeItemServers      GetIPPoolIncludeItem = "servers"
	GetIPPoolIncludeItemIntegrations GetIPPoolIncludeItem = "integrations"
	GetIPPoolIncludeItemLocations    GetIPPoolIncludeItem = "locations"
)

// AllValues returns all GetIPPoolIncludeItem values.
func (GetIPPoolIncludeItem) AllValues() []GetIPPoolIncludeItem {
	return []GetIPPoolIncludeItem{
		GetIPPoolIncludeItemServers,
		GetIPPoolIncludeItemIntegrations,
		GetIPPoolIncludeItemLocations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetIPPoolIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetIPPoolIncludeItemServers:
		return []byte(s), nil
	case GetIPPoolIncludeItemIntegrations:
		return []byte(s), nil
	case GetIPPoolIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetIPPoolIncludeItem) UnmarshalText(data []byte) error {
	switch GetIPPoolIncludeItem(data) {
	case GetIPPoolIncludeItemServers:
		*s = GetIPPoolIncludeItemServers
		return nil
	case GetIPPoolIncludeItemIntegrations:
		*s = GetIPPoolIncludeItemIntegrations
		return nil
	case GetIPPoolIncludeItemLocations:
		*s = GetIPPoolIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetIPPoolOK struct {
	Data     Pool            `json:"data"`
	Includes OptPoolIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetIPPoolOK) GetData() Pool {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetIPPoolOK) GetIncludes() OptPoolIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetIPPoolOK) SetData(val Pool) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetIPPoolOK) SetIncludes(val OptPoolIncludes) {
	s.Includes = val
}

type GetImageBuildLogOK struct {
	Data BuildLog `json:"data"`
}

// GetData returns the value of Data.
func (s *GetImageBuildLogOK) GetData() BuildLog {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetImageBuildLogOK) SetData(val BuildLog) {
	s.Data = val
}

type GetImageIncludeItem string

const (
	GetImageIncludeItemCreators     GetImageIncludeItem = "creators"
	GetImageIncludeItemStackBuilds  GetImageIncludeItem = "stack_builds"
	GetImageIncludeItemStacks       GetImageIncludeItem = "stacks"
	GetImageIncludeItemSources      GetImageIncludeItem = "sources"
	GetImageIncludeItemIntegrations GetImageIncludeItem = "integrations"
)

// AllValues returns all GetImageIncludeItem values.
func (GetImageIncludeItem) AllValues() []GetImageIncludeItem {
	return []GetImageIncludeItem{
		GetImageIncludeItemCreators,
		GetImageIncludeItemStackBuilds,
		GetImageIncludeItemStacks,
		GetImageIncludeItemSources,
		GetImageIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageIncludeItemCreators:
		return []byte(s), nil
	case GetImageIncludeItemStackBuilds:
		return []byte(s), nil
	case GetImageIncludeItemStacks:
		return []byte(s), nil
	case GetImageIncludeItemSources:
		return []byte(s), nil
	case GetImageIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageIncludeItem) UnmarshalText(data []byte) error {
	switch GetImageIncludeItem(data) {
	case GetImageIncludeItemCreators:
		*s = GetImageIncludeItemCreators
		return nil
	case GetImageIncludeItemStackBuilds:
		*s = GetImageIncludeItemStackBuilds
		return nil
	case GetImageIncludeItemStacks:
		*s = GetImageIncludeItemStacks
		return nil
	case GetImageIncludeItemSources:
		*s = GetImageIncludeItemSources
		return nil
	case GetImageIncludeItemIntegrations:
		*s = GetImageIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageMetaItem string

const (
	GetImageMetaItemContainersCount GetImageMetaItem = "containers_count"
)

// AllValues returns all GetImageMetaItem values.
func (GetImageMetaItem) AllValues() []GetImageMetaItem {
	return []GetImageMetaItem{
		GetImageMetaItemContainersCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageMetaItemContainersCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageMetaItem) UnmarshalText(data []byte) error {
	switch GetImageMetaItem(data) {
	case GetImageMetaItemContainersCount:
		*s = GetImageMetaItemContainersCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageOK struct {
	Data     Image            `json:"data"`
	Includes OptImageIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetImageOK) GetData() Image {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetImageOK) GetIncludes() OptImageIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetImageOK) SetData(val Image) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetImageOK) SetIncludes(val OptImageIncludes) {
	s.Includes = val
}

type GetImagePage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetImagePage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetImagePage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetImagePage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetImagePage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetImageSourceIncludeItem string

const (
	GetImageSourceIncludeItemCreators     GetImageSourceIncludeItem = "creators"
	GetImageSourceIncludeItemIntegrations GetImageSourceIncludeItem = "integrations"
)

// AllValues returns all GetImageSourceIncludeItem values.
func (GetImageSourceIncludeItem) AllValues() []GetImageSourceIncludeItem {
	return []GetImageSourceIncludeItem{
		GetImageSourceIncludeItemCreators,
		GetImageSourceIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageSourceIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageSourceIncludeItemCreators:
		return []byte(s), nil
	case GetImageSourceIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageSourceIncludeItem) UnmarshalText(data []byte) error {
	switch GetImageSourceIncludeItem(data) {
	case GetImageSourceIncludeItemCreators:
		*s = GetImageSourceIncludeItemCreators
		return nil
	case GetImageSourceIncludeItemIntegrations:
		*s = GetImageSourceIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageSourceMetaItem string

const (
	GetImageSourceMetaItemImagesCount GetImageSourceMetaItem = "images_count"
)

// AllValues returns all GetImageSourceMetaItem values.
func (GetImageSourceMetaItem) AllValues() []GetImageSourceMetaItem {
	return []GetImageSourceMetaItem{
		GetImageSourceMetaItemImagesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageSourceMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageSourceMetaItemImagesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageSourceMetaItem) UnmarshalText(data []byte) error {
	switch GetImageSourceMetaItem(data) {
	case GetImageSourceMetaItemImagesCount:
		*s = GetImageSourceMetaItemImagesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageSourceOK struct {
	Data     ImageSource       `json:"data"`
	Includes OptSourceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetImageSourceOK) GetData() ImageSource {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetImageSourceOK) GetIncludes() OptSourceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetImageSourceOK) SetData(val ImageSource) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetImageSourceOK) SetIncludes(val OptSourceIncludes) {
	s.Includes = val
}

type GetImageSourcesFilter struct {
	// `filter[identifier]=value` List only those image sources matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given Image Source(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Image Source's
	// current state.
	State OptString `json:"state"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetImageSourcesFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetImageSourcesFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetImageSourcesFilter) GetState() OptString {
	return s.State
}

// SetIdentifier sets the value of Identifier.
func (s *GetImageSourcesFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetImageSourcesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetImageSourcesFilter) SetState(val OptString) {
	s.State = val
}

type GetImageSourcesIncludeItem string

const (
	GetImageSourcesIncludeItemCreators     GetImageSourcesIncludeItem = "creators"
	GetImageSourcesIncludeItemIntegrations GetImageSourcesIncludeItem = "integrations"
)

// AllValues returns all GetImageSourcesIncludeItem values.
func (GetImageSourcesIncludeItem) AllValues() []GetImageSourcesIncludeItem {
	return []GetImageSourcesIncludeItem{
		GetImageSourcesIncludeItemCreators,
		GetImageSourcesIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageSourcesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageSourcesIncludeItemCreators:
		return []byte(s), nil
	case GetImageSourcesIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageSourcesIncludeItem) UnmarshalText(data []byte) error {
	switch GetImageSourcesIncludeItem(data) {
	case GetImageSourcesIncludeItemCreators:
		*s = GetImageSourcesIncludeItemCreators
		return nil
	case GetImageSourcesIncludeItemIntegrations:
		*s = GetImageSourcesIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageSourcesMetaItem string

const (
	GetImageSourcesMetaItemImagesCount GetImageSourcesMetaItem = "images_count"
)

// AllValues returns all GetImageSourcesMetaItem values.
func (GetImageSourcesMetaItem) AllValues() []GetImageSourcesMetaItem {
	return []GetImageSourcesMetaItem{
		GetImageSourcesMetaItemImagesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImageSourcesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImageSourcesMetaItemImagesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImageSourcesMetaItem) UnmarshalText(data []byte) error {
	switch GetImageSourcesMetaItem(data) {
	case GetImageSourcesMetaItemImagesCount:
		*s = GetImageSourcesMetaItemImagesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImageSourcesOK struct {
	Data     []ImageSource     `json:"data"`
	Includes OptSourceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetImageSourcesOK) GetData() []ImageSource {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetImageSourcesOK) GetIncludes() OptSourceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetImageSourcesOK) SetData(val []ImageSource) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetImageSourcesOK) SetIncludes(val OptSourceIncludes) {
	s.Includes = val
}

type GetImageSourcesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetImageSourcesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetImageSourcesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetImageSourcesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetImageSourcesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetImagesFilter struct {
	// `filter[identifier]=value` List only those images matching this identifier. May return multiple
	// results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given Image(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Image's current
	// state.
	State OptString `json:"state"`
	// `filter[source_type]=value` filter images by the Image source's type.  Can be: `direct` or
	// `stack_build`.
	SourceType OptString `json:"source_type"`
	// `filter[source_id]=ID` Image filtering by source ID.  Submit the ID of the Image source you wish
	// to filter for and the return will be any Images created from that source.
	SourceID OptString `json:"source_id"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetImagesFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetImagesFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetImagesFilter) GetState() OptString {
	return s.State
}

// GetSourceType returns the value of SourceType.
func (s *GetImagesFilter) GetSourceType() OptString {
	return s.SourceType
}

// GetSourceID returns the value of SourceID.
func (s *GetImagesFilter) GetSourceID() OptString {
	return s.SourceID
}

// SetIdentifier sets the value of Identifier.
func (s *GetImagesFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetImagesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetImagesFilter) SetState(val OptString) {
	s.State = val
}

// SetSourceType sets the value of SourceType.
func (s *GetImagesFilter) SetSourceType(val OptString) {
	s.SourceType = val
}

// SetSourceID sets the value of SourceID.
func (s *GetImagesFilter) SetSourceID(val OptString) {
	s.SourceID = val
}

type GetImagesIncludeItem string

const (
	GetImagesIncludeItemCreators     GetImagesIncludeItem = "creators"
	GetImagesIncludeItemStackBuilds  GetImagesIncludeItem = "stack_builds"
	GetImagesIncludeItemStacks       GetImagesIncludeItem = "stacks"
	GetImagesIncludeItemSources      GetImagesIncludeItem = "sources"
	GetImagesIncludeItemIntegrations GetImagesIncludeItem = "integrations"
)

// AllValues returns all GetImagesIncludeItem values.
func (GetImagesIncludeItem) AllValues() []GetImagesIncludeItem {
	return []GetImagesIncludeItem{
		GetImagesIncludeItemCreators,
		GetImagesIncludeItemStackBuilds,
		GetImagesIncludeItemStacks,
		GetImagesIncludeItemSources,
		GetImagesIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImagesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImagesIncludeItemCreators:
		return []byte(s), nil
	case GetImagesIncludeItemStackBuilds:
		return []byte(s), nil
	case GetImagesIncludeItemStacks:
		return []byte(s), nil
	case GetImagesIncludeItemSources:
		return []byte(s), nil
	case GetImagesIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImagesIncludeItem) UnmarshalText(data []byte) error {
	switch GetImagesIncludeItem(data) {
	case GetImagesIncludeItemCreators:
		*s = GetImagesIncludeItemCreators
		return nil
	case GetImagesIncludeItemStackBuilds:
		*s = GetImagesIncludeItemStackBuilds
		return nil
	case GetImagesIncludeItemStacks:
		*s = GetImagesIncludeItemStacks
		return nil
	case GetImagesIncludeItemSources:
		*s = GetImagesIncludeItemSources
		return nil
	case GetImagesIncludeItemIntegrations:
		*s = GetImagesIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImagesMetaItem string

const (
	GetImagesMetaItemContainersCount GetImagesMetaItem = "containers_count"
)

// AllValues returns all GetImagesMetaItem values.
func (GetImagesMetaItem) AllValues() []GetImagesMetaItem {
	return []GetImagesMetaItem{
		GetImagesMetaItemContainersCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetImagesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetImagesMetaItemContainersCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetImagesMetaItem) UnmarshalText(data []byte) error {
	switch GetImagesMetaItem(data) {
	case GetImagesMetaItemContainersCount:
		*s = GetImagesMetaItemContainersCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetImagesOK struct {
	Data     []Image          `json:"data"`
	Includes OptImageIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetImagesOK) GetData() []Image {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetImagesOK) GetIncludes() OptImageIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetImagesOK) SetData(val []Image) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetImagesOK) SetIncludes(val OptImageIncludes) {
	s.Includes = val
}

type GetImagesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetImagesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetImagesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetImagesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetImagesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInfrastructureIPPoolsFilter struct {
	// `filter[available]=true` filter for IPs that are available for use.
	Available OptString `json:"available"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the IP's current state.
	State OptString `json:"state"`
}

// GetAvailable returns the value of Available.
func (s *GetInfrastructureIPPoolsFilter) GetAvailable() OptString {
	return s.Available
}

// GetState returns the value of State.
func (s *GetInfrastructureIPPoolsFilter) GetState() OptString {
	return s.State
}

// SetAvailable sets the value of Available.
func (s *GetInfrastructureIPPoolsFilter) SetAvailable(val OptString) {
	s.Available = val
}

// SetState sets the value of State.
func (s *GetInfrastructureIPPoolsFilter) SetState(val OptString) {
	s.State = val
}

type GetInfrastructureIPPoolsIncludeItem string

const (
	GetInfrastructureIPPoolsIncludeItemServers      GetInfrastructureIPPoolsIncludeItem = "servers"
	GetInfrastructureIPPoolsIncludeItemIntegrations GetInfrastructureIPPoolsIncludeItem = "integrations"
	GetInfrastructureIPPoolsIncludeItemLocations    GetInfrastructureIPPoolsIncludeItem = "locations"
)

// AllValues returns all GetInfrastructureIPPoolsIncludeItem values.
func (GetInfrastructureIPPoolsIncludeItem) AllValues() []GetInfrastructureIPPoolsIncludeItem {
	return []GetInfrastructureIPPoolsIncludeItem{
		GetInfrastructureIPPoolsIncludeItemServers,
		GetInfrastructureIPPoolsIncludeItemIntegrations,
		GetInfrastructureIPPoolsIncludeItemLocations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInfrastructureIPPoolsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInfrastructureIPPoolsIncludeItemServers:
		return []byte(s), nil
	case GetInfrastructureIPPoolsIncludeItemIntegrations:
		return []byte(s), nil
	case GetInfrastructureIPPoolsIncludeItemLocations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInfrastructureIPPoolsIncludeItem) UnmarshalText(data []byte) error {
	switch GetInfrastructureIPPoolsIncludeItem(data) {
	case GetInfrastructureIPPoolsIncludeItemServers:
		*s = GetInfrastructureIPPoolsIncludeItemServers
		return nil
	case GetInfrastructureIPPoolsIncludeItemIntegrations:
		*s = GetInfrastructureIPPoolsIncludeItemIntegrations
		return nil
	case GetInfrastructureIPPoolsIncludeItemLocations:
		*s = GetInfrastructureIPPoolsIncludeItemLocations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInfrastructureIPPoolsOK struct {
	Data     []Pool          `json:"data"`
	Includes OptPoolIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetInfrastructureIPPoolsOK) GetData() []Pool {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetInfrastructureIPPoolsOK) GetIncludes() OptPoolIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetInfrastructureIPPoolsOK) SetData(val []Pool) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetInfrastructureIPPoolsOK) SetIncludes(val OptPoolIncludes) {
	s.Includes = val
}

type GetInfrastructureIPPoolsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInfrastructureIPPoolsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInfrastructureIPPoolsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInfrastructureIPPoolsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInfrastructureIPPoolsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInfrastructureSummaryFilter struct {
	// `filter[cluster]=value` return an infrastructure summary only for the specified cluster.
	Cluster OptString `json:"cluster"`
}

// GetCluster returns the value of Cluster.
func (s *GetInfrastructureSummaryFilter) GetCluster() OptString {
	return s.Cluster
}

// SetCluster sets the value of Cluster.
func (s *GetInfrastructureSummaryFilter) SetCluster(val OptString) {
	s.Cluster = val
}

type GetInfrastructureSummaryOK struct {
	Data InfrastructureSummary `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInfrastructureSummaryOK) GetData() InfrastructureSummary {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInfrastructureSummaryOK) SetData(val InfrastructureSummary) {
	s.Data = val
}

type GetInstanceConsoleStreamAuthOK struct {
	Data GetInstanceConsoleStreamAuthOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceConsoleStreamAuthOK) GetData() GetInstanceConsoleStreamAuthOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceConsoleStreamAuthOK) SetData(val GetInstanceConsoleStreamAuthOKData) {
	s.Data = val
}

type GetInstanceConsoleStreamAuthOKData struct {
	// A token used for connecting to the Instance console.
	Token string `json:"token"`
	// The protocol and url for connecting to the Instance console.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *GetInstanceConsoleStreamAuthOKData) GetToken() string {
	return s.Token
}

// GetAddress returns the value of Address.
func (s *GetInstanceConsoleStreamAuthOKData) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *GetInstanceConsoleStreamAuthOKData) SetToken(val string) {
	s.Token = val
}

// SetAddress sets the value of Address.
func (s *GetInstanceConsoleStreamAuthOKData) SetAddress(val string) {
	s.Address = val
}

type GetInstanceIncludeItem string

const (
	GetInstanceIncludeItemCreators     GetInstanceIncludeItem = "creators"
	GetInstanceIncludeItemServers      GetInstanceIncludeItem = "servers"
	GetInstanceIncludeItemLocations    GetInstanceIncludeItem = "locations"
	GetInstanceIncludeItemIntegrations GetInstanceIncludeItem = "integrations"
	GetInstanceIncludeItemContainers   GetInstanceIncludeItem = "containers"
	GetInstanceIncludeItemEnvironments GetInstanceIncludeItem = "environments"
)

// AllValues returns all GetInstanceIncludeItem values.
func (GetInstanceIncludeItem) AllValues() []GetInstanceIncludeItem {
	return []GetInstanceIncludeItem{
		GetInstanceIncludeItemCreators,
		GetInstanceIncludeItemServers,
		GetInstanceIncludeItemLocations,
		GetInstanceIncludeItemIntegrations,
		GetInstanceIncludeItemContainers,
		GetInstanceIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInstanceIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInstanceIncludeItemCreators:
		return []byte(s), nil
	case GetInstanceIncludeItemServers:
		return []byte(s), nil
	case GetInstanceIncludeItemLocations:
		return []byte(s), nil
	case GetInstanceIncludeItemIntegrations:
		return []byte(s), nil
	case GetInstanceIncludeItemContainers:
		return []byte(s), nil
	case GetInstanceIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInstanceIncludeItem) UnmarshalText(data []byte) error {
	switch GetInstanceIncludeItem(data) {
	case GetInstanceIncludeItemCreators:
		*s = GetInstanceIncludeItemCreators
		return nil
	case GetInstanceIncludeItemServers:
		*s = GetInstanceIncludeItemServers
		return nil
	case GetInstanceIncludeItemLocations:
		*s = GetInstanceIncludeItemLocations
		return nil
	case GetInstanceIncludeItemIntegrations:
		*s = GetInstanceIncludeItemIntegrations
		return nil
	case GetInstanceIncludeItemContainers:
		*s = GetInstanceIncludeItemContainers
		return nil
	case GetInstanceIncludeItemEnvironments:
		*s = GetInstanceIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInstanceOK struct {
	Data     Instance            `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetInstanceOK) GetData() Instance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetInstanceOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetInstanceOK) SetData(val Instance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetInstanceOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetInstanceTelemetryReportFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetInstanceTelemetryReportFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetInstanceTelemetryReportFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetInstanceTelemetryReportFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetInstanceTelemetryReportFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetInstanceTelemetryReportOK struct {
	Data InstanceTelemetryReport `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceTelemetryReportOK) GetData() InstanceTelemetryReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceTelemetryReportOK) SetData(val InstanceTelemetryReport) {
	s.Data = val
}

type GetInstanceTelemetryStreamAuthOK struct {
	// Credentials for connecting to the instance telemetry stream on compute.
	Data GetInstanceTelemetryStreamAuthOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceTelemetryStreamAuthOK) GetData() GetInstanceTelemetryStreamAuthOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceTelemetryStreamAuthOK) SetData(val GetInstanceTelemetryStreamAuthOKData) {
	s.Data = val
}

// Credentials for connecting to the instance telemetry stream on compute.
type GetInstanceTelemetryStreamAuthOKData struct {
	// The authentication token passed into the address as a URL parameter (?token).
	Token string `json:"token"`
	// The URL address to open a websocket to for streaming instance telemetry data.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *GetInstanceTelemetryStreamAuthOKData) GetToken() string {
	return s.Token
}

// GetAddress returns the value of Address.
func (s *GetInstanceTelemetryStreamAuthOKData) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *GetInstanceTelemetryStreamAuthOKData) SetToken(val string) {
	s.Token = val
}

// SetAddress sets the value of Address.
func (s *GetInstanceTelemetryStreamAuthOKData) SetAddress(val string) {
	s.Address = val
}

type GetInstanceVolumesOK struct {
	Data []InstanceVolume `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInstanceVolumesOK) GetData() []InstanceVolume {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInstanceVolumesOK) SetData(val []InstanceVolume) {
	s.Data = val
}

type GetInstanceVolumesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInstanceVolumesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInstanceVolumesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInstanceVolumesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInstanceVolumesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInstancesFilter struct {
	// `filter[state]=value1,value2` state filtering will allow you to filter by the instance's current
	// state.
	State OptString `json:"state"`
	// `filter[search]=value` search instances for a value associated with a field on the given
	// instance(s).
	Search OptString `json:"search"`
	// `filter[server]=ID` server filtering by ID. Submit the ID of the server you wish to filter for and
	// the return will be any instances of the container currently deployed to the given server.
	Server          OptString   `json:"server"`
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetState returns the value of State.
func (s *GetInstancesFilter) GetState() OptString {
	return s.State
}

// GetSearch returns the value of Search.
func (s *GetInstancesFilter) GetSearch() OptString {
	return s.Search
}

// GetServer returns the value of Server.
func (s *GetInstancesFilter) GetServer() OptString {
	return s.Server
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetInstancesFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetInstancesFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetState sets the value of State.
func (s *GetInstancesFilter) SetState(val OptString) {
	s.State = val
}

// SetSearch sets the value of Search.
func (s *GetInstancesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetServer sets the value of Server.
func (s *GetInstancesFilter) SetServer(val OptString) {
	s.Server = val
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetInstancesFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetInstancesFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetInstancesIncludeItem string

const (
	GetInstancesIncludeItemCreators     GetInstancesIncludeItem = "creators"
	GetInstancesIncludeItemServers      GetInstancesIncludeItem = "servers"
	GetInstancesIncludeItemLocations    GetInstancesIncludeItem = "locations"
	GetInstancesIncludeItemIntegrations GetInstancesIncludeItem = "integrations"
	GetInstancesIncludeItemContainers   GetInstancesIncludeItem = "containers"
	GetInstancesIncludeItemEnvironments GetInstancesIncludeItem = "environments"
)

// AllValues returns all GetInstancesIncludeItem values.
func (GetInstancesIncludeItem) AllValues() []GetInstancesIncludeItem {
	return []GetInstancesIncludeItem{
		GetInstancesIncludeItemCreators,
		GetInstancesIncludeItemServers,
		GetInstancesIncludeItemLocations,
		GetInstancesIncludeItemIntegrations,
		GetInstancesIncludeItemContainers,
		GetInstancesIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInstancesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInstancesIncludeItemCreators:
		return []byte(s), nil
	case GetInstancesIncludeItemServers:
		return []byte(s), nil
	case GetInstancesIncludeItemLocations:
		return []byte(s), nil
	case GetInstancesIncludeItemIntegrations:
		return []byte(s), nil
	case GetInstancesIncludeItemContainers:
		return []byte(s), nil
	case GetInstancesIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInstancesIncludeItem) UnmarshalText(data []byte) error {
	switch GetInstancesIncludeItem(data) {
	case GetInstancesIncludeItemCreators:
		*s = GetInstancesIncludeItemCreators
		return nil
	case GetInstancesIncludeItemServers:
		*s = GetInstancesIncludeItemServers
		return nil
	case GetInstancesIncludeItemLocations:
		*s = GetInstancesIncludeItemLocations
		return nil
	case GetInstancesIncludeItemIntegrations:
		*s = GetInstancesIncludeItemIntegrations
		return nil
	case GetInstancesIncludeItemContainers:
		*s = GetInstancesIncludeItemContainers
		return nil
	case GetInstancesIncludeItemEnvironments:
		*s = GetInstancesIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInstancesOK struct {
	Data     []Instance          `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetInstancesOK) GetData() []Instance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetInstancesOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetInstancesOK) SetData(val []Instance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetInstancesOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetInstancesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInstancesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInstancesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInstancesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInstancesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetIntegrationMetaItem string

const (
	GetIntegrationMetaItemDefinition GetIntegrationMetaItem = "definition"
)

// AllValues returns all GetIntegrationMetaItem values.
func (GetIntegrationMetaItem) AllValues() []GetIntegrationMetaItem {
	return []GetIntegrationMetaItem{
		GetIntegrationMetaItemDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetIntegrationMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetIntegrationMetaItemDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetIntegrationMetaItem) UnmarshalText(data []byte) error {
	switch GetIntegrationMetaItem(data) {
	case GetIntegrationMetaItemDefinition:
		*s = GetIntegrationMetaItemDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetIntegrationOK struct {
	Data Integration `json:"data"`
}

// GetData returns the value of Data.
func (s *GetIntegrationOK) GetData() Integration {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetIntegrationOK) SetData(val Integration) {
	s.Data = val
}

type GetIntegrationsFilter struct {
	// `filter[state]=value` Filters integrations by their current state. For example,
	// `filter[state]=active` would return only integrations in an active state.
	State OptString `json:"state"`
	// `filter[search]=value` Performs a text search across relevant fields of the integrations. For
	// example, `filter[search]=example` would return integrations that have "example" in any of the
	// searchable fields.
	Search OptString `json:"search"`
	// `filter[identifier]=value` Filters integrations by their identifier. For example,
	// `filter[identifier]=abstraction` would return only integrations with the abstraction identifier.
	Identifier OptString `json:"identifier"`
	// `filter[category]=value` Filters integrations by their category. For example,
	// `filter[category]=infrastructure-provider` would return only integrations that are capable of
	// provisioning infrastructure.
	Category OptString `json:"category"`
}

// GetState returns the value of State.
func (s *GetIntegrationsFilter) GetState() OptString {
	return s.State
}

// GetSearch returns the value of Search.
func (s *GetIntegrationsFilter) GetSearch() OptString {
	return s.Search
}

// GetIdentifier returns the value of Identifier.
func (s *GetIntegrationsFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetCategory returns the value of Category.
func (s *GetIntegrationsFilter) GetCategory() OptString {
	return s.Category
}

// SetState sets the value of State.
func (s *GetIntegrationsFilter) SetState(val OptString) {
	s.State = val
}

// SetSearch sets the value of Search.
func (s *GetIntegrationsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetIdentifier sets the value of Identifier.
func (s *GetIntegrationsFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetCategory sets the value of Category.
func (s *GetIntegrationsFilter) SetCategory(val OptString) {
	s.Category = val
}

type GetIntegrationsMetaItem string

const (
	GetIntegrationsMetaItemDefinition GetIntegrationsMetaItem = "definition"
)

// AllValues returns all GetIntegrationsMetaItem values.
func (GetIntegrationsMetaItem) AllValues() []GetIntegrationsMetaItem {
	return []GetIntegrationsMetaItem{
		GetIntegrationsMetaItemDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetIntegrationsMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetIntegrationsMetaItemDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetIntegrationsMetaItem) UnmarshalText(data []byte) error {
	switch GetIntegrationsMetaItem(data) {
	case GetIntegrationsMetaItemDefinition:
		*s = GetIntegrationsMetaItemDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetIntegrationsOK struct {
	Data []Integration `json:"data"`
}

// GetData returns the value of Data.
func (s *GetIntegrationsOK) GetData() []Integration {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetIntegrationsOK) SetData(val []Integration) {
	s.Data = val
}

type GetIntegrationsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetIntegrationsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetIntegrationsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetIntegrationsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetIntegrationsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetInvoiceMetaItem string

const (
	GetInvoiceMetaItemDue GetInvoiceMetaItem = "due"
)

// AllValues returns all GetInvoiceMetaItem values.
func (GetInvoiceMetaItem) AllValues() []GetInvoiceMetaItem {
	return []GetInvoiceMetaItem{
		GetInvoiceMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInvoiceMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInvoiceMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInvoiceMetaItem) UnmarshalText(data []byte) error {
	switch GetInvoiceMetaItem(data) {
	case GetInvoiceMetaItemDue:
		*s = GetInvoiceMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInvoiceOK struct {
	Data Invoice `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInvoiceOK) GetData() Invoice {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInvoiceOK) SetData(val Invoice) {
	s.Data = val
}

type GetInvoicesFilter struct {
	// `filter[search]=value` search for the specified text on supported fields.
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the invoice's current
	// state.
	State           OptString   `json:"state"`
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetSearch returns the value of Search.
func (s *GetInvoicesFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetInvoicesFilter) GetState() OptString {
	return s.State
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetInvoicesFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetInvoicesFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetSearch sets the value of Search.
func (s *GetInvoicesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetInvoicesFilter) SetState(val OptString) {
	s.State = val
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetInvoicesFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetInvoicesFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetInvoicesMetaItem string

const (
	GetInvoicesMetaItemDue GetInvoicesMetaItem = "due"
)

// AllValues returns all GetInvoicesMetaItem values.
func (GetInvoicesMetaItem) AllValues() []GetInvoicesMetaItem {
	return []GetInvoicesMetaItem{
		GetInvoicesMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetInvoicesMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetInvoicesMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetInvoicesMetaItem) UnmarshalText(data []byte) error {
	switch GetInvoicesMetaItem(data) {
	case GetInvoicesMetaItemDue:
		*s = GetInvoicesMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetInvoicesOK struct {
	Data []Invoice `json:"data"`
}

// GetData returns the value of Data.
func (s *GetInvoicesOK) GetData() []Invoice {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetInvoicesOK) SetData(val []Invoice) {
	s.Data = val
}

type GetInvoicesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetInvoicesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetInvoicesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetInvoicesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetInvoicesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetJobOK struct {
	Data Job `json:"data"`
}

// GetData returns the value of Data.
func (s *GetJobOK) GetData() Job {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetJobOK) SetData(val Job) {
	s.Data = val
}

type GetJobsFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
	// `filter[search]=value` search jobs for a value associated with a field on the given job(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the job's current state.
	State OptString `json:"state"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetJobsFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetJobsFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// GetSearch returns the value of Search.
func (s *GetJobsFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetJobsFilter) GetState() OptString {
	return s.State
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetJobsFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetJobsFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

// SetSearch sets the value of Search.
func (s *GetJobsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetJobsFilter) SetState(val OptString) {
	s.State = val
}

type GetJobsIncludeItem string

const (
	GetJobsIncludeItemCreators GetJobsIncludeItem = "creators"
)

// AllValues returns all GetJobsIncludeItem values.
func (GetJobsIncludeItem) AllValues() []GetJobsIncludeItem {
	return []GetJobsIncludeItem{
		GetJobsIncludeItemCreators,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetJobsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetJobsIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetJobsIncludeItem) UnmarshalText(data []byte) error {
	switch GetJobsIncludeItem(data) {
	case GetJobsIncludeItemCreators:
		*s = GetJobsIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetJobsOK struct {
	Data     []Job          `json:"data"`
	Includes OptJobIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetJobsOK) GetData() []Job {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetJobsOK) GetIncludes() OptJobIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetJobsOK) SetData(val []Job) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetJobsOK) SetIncludes(val OptJobIncludes) {
	s.Includes = val
}

type GetJobsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetJobsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetJobsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetJobsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetJobsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetLatestJobsOK struct {
	Data []Job `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLatestJobsOK) GetData() []Job {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLatestJobsOK) SetData(val []Job) {
	s.Data = val
}

type GetLoadBalancerLatestTelemetryReportFilter struct {
	// `filter[controller]=port-123` filter for a specific controller to load telemetry for. THIS FILTER
	// IS REQUIRED.
	Controller OptString `json:"controller"`
}

// GetController returns the value of Controller.
func (s *GetLoadBalancerLatestTelemetryReportFilter) GetController() OptString {
	return s.Controller
}

// SetController sets the value of Controller.
func (s *GetLoadBalancerLatestTelemetryReportFilter) SetController(val OptString) {
	s.Controller = val
}

type GetLoadBalancerLatestTelemetryReportOK struct {
	Data LoadBalancerLatestTelemetry `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLoadBalancerLatestTelemetryReportOK) GetData() LoadBalancerLatestTelemetry {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLoadBalancerLatestTelemetryReportOK) SetData(val LoadBalancerLatestTelemetry) {
	s.Data = val
}

type GetLoadBalancerServiceOK struct {
	// Information about an environments load balancer configuration, state, and availability settings.
	Data GetLoadBalancerServiceOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLoadBalancerServiceOK) GetData() GetLoadBalancerServiceOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLoadBalancerServiceOK) SetData(val GetLoadBalancerServiceOKData) {
	s.Data = val
}

// Information about an environments load balancer configuration, state, and availability settings.
type GetLoadBalancerServiceOKData struct {
	DefaultConfig NilLoadBalancerConfig                      `json:"default_config"`
	DefaultType   GetLoadBalancerServiceOKDataDefaultType    `json:"default_type"`
	BaseConfigs   OptGetLoadBalancerServiceOKDataBaseConfigs `json:"base_configs"`
	Service       NilGetLoadBalancerServiceOKDataService     `json:"service"`
}

// GetDefaultConfig returns the value of DefaultConfig.
func (s *GetLoadBalancerServiceOKData) GetDefaultConfig() NilLoadBalancerConfig {
	return s.DefaultConfig
}

// GetDefaultType returns the value of DefaultType.
func (s *GetLoadBalancerServiceOKData) GetDefaultType() GetLoadBalancerServiceOKDataDefaultType {
	return s.DefaultType
}

// GetBaseConfigs returns the value of BaseConfigs.
func (s *GetLoadBalancerServiceOKData) GetBaseConfigs() OptGetLoadBalancerServiceOKDataBaseConfigs {
	return s.BaseConfigs
}

// GetService returns the value of Service.
func (s *GetLoadBalancerServiceOKData) GetService() NilGetLoadBalancerServiceOKDataService {
	return s.Service
}

// SetDefaultConfig sets the value of DefaultConfig.
func (s *GetLoadBalancerServiceOKData) SetDefaultConfig(val NilLoadBalancerConfig) {
	s.DefaultConfig = val
}

// SetDefaultType sets the value of DefaultType.
func (s *GetLoadBalancerServiceOKData) SetDefaultType(val GetLoadBalancerServiceOKDataDefaultType) {
	s.DefaultType = val
}

// SetBaseConfigs sets the value of BaseConfigs.
func (s *GetLoadBalancerServiceOKData) SetBaseConfigs(val OptGetLoadBalancerServiceOKDataBaseConfigs) {
	s.BaseConfigs = val
}

// SetService sets the value of Service.
func (s *GetLoadBalancerServiceOKData) SetService(val NilGetLoadBalancerServiceOKDataService) {
	s.Service = val
}

type GetLoadBalancerServiceOKDataBaseConfigs struct {
	Haproxy HaProxyConfig `json:"haproxy"`
	V1      V1LbConfig    `json:"v1"`
}

// GetHaproxy returns the value of Haproxy.
func (s *GetLoadBalancerServiceOKDataBaseConfigs) GetHaproxy() HaProxyConfig {
	return s.Haproxy
}

// GetV1 returns the value of V1.
func (s *GetLoadBalancerServiceOKDataBaseConfigs) GetV1() V1LbConfig {
	return s.V1
}

// SetHaproxy sets the value of Haproxy.
func (s *GetLoadBalancerServiceOKDataBaseConfigs) SetHaproxy(val HaProxyConfig) {
	s.Haproxy = val
}

// SetV1 sets the value of V1.
func (s *GetLoadBalancerServiceOKDataBaseConfigs) SetV1(val V1LbConfig) {
	s.V1 = val
}

type GetLoadBalancerServiceOKDataDefaultType string

const (
	GetLoadBalancerServiceOKDataDefaultTypeHaproxy GetLoadBalancerServiceOKDataDefaultType = "haproxy"
	GetLoadBalancerServiceOKDataDefaultTypeV1      GetLoadBalancerServiceOKDataDefaultType = "v1"
)

// AllValues returns all GetLoadBalancerServiceOKDataDefaultType values.
func (GetLoadBalancerServiceOKDataDefaultType) AllValues() []GetLoadBalancerServiceOKDataDefaultType {
	return []GetLoadBalancerServiceOKDataDefaultType{
		GetLoadBalancerServiceOKDataDefaultTypeHaproxy,
		GetLoadBalancerServiceOKDataDefaultTypeV1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLoadBalancerServiceOKDataDefaultType) MarshalText() ([]byte, error) {
	switch s {
	case GetLoadBalancerServiceOKDataDefaultTypeHaproxy:
		return []byte(s), nil
	case GetLoadBalancerServiceOKDataDefaultTypeV1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLoadBalancerServiceOKDataDefaultType) UnmarshalText(data []byte) error {
	switch GetLoadBalancerServiceOKDataDefaultType(data) {
	case GetLoadBalancerServiceOKDataDefaultTypeHaproxy:
		*s = GetLoadBalancerServiceOKDataDefaultTypeHaproxy
		return nil
	case GetLoadBalancerServiceOKDataDefaultTypeV1:
		*s = GetLoadBalancerServiceOKDataDefaultTypeV1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Information about the environments loadbalancer service(s).
type GetLoadBalancerServiceOKDataService struct {
	// Whether or not the loadbalancer service is enabled.
	Enable bool `json:"enable"`
	// The ID of the loadbalancer service container.
	ContainerID NilString `json:"container_id"`
	// A boolean representing if this service container is set to high availability mode or not.
	HighAvailability bool `json:"high_availability"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptBool               `json:"auto_update"`
	Config     NilLoadBalancerConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *GetLoadBalancerServiceOKDataService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *GetLoadBalancerServiceOKDataService) GetContainerID() NilString {
	return s.ContainerID
}

// GetHighAvailability returns the value of HighAvailability.
func (s *GetLoadBalancerServiceOKDataService) GetHighAvailability() bool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *GetLoadBalancerServiceOKDataService) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *GetLoadBalancerServiceOKDataService) GetConfig() NilLoadBalancerConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *GetLoadBalancerServiceOKDataService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *GetLoadBalancerServiceOKDataService) SetContainerID(val NilString) {
	s.ContainerID = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *GetLoadBalancerServiceOKDataService) SetHighAvailability(val bool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *GetLoadBalancerServiceOKDataService) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *GetLoadBalancerServiceOKDataService) SetConfig(val NilLoadBalancerConfig) {
	s.Config = val
}

type GetLoadBalancerTelemetryLatestControllersIncludeItem string

const (
	GetLoadBalancerTelemetryLatestControllersIncludeItemInstances  GetLoadBalancerTelemetryLatestControllersIncludeItem = "instances"
	GetLoadBalancerTelemetryLatestControllersIncludeItemServers    GetLoadBalancerTelemetryLatestControllersIncludeItem = "servers"
	GetLoadBalancerTelemetryLatestControllersIncludeItemContainers GetLoadBalancerTelemetryLatestControllersIncludeItem = "containers"
)

// AllValues returns all GetLoadBalancerTelemetryLatestControllersIncludeItem values.
func (GetLoadBalancerTelemetryLatestControllersIncludeItem) AllValues() []GetLoadBalancerTelemetryLatestControllersIncludeItem {
	return []GetLoadBalancerTelemetryLatestControllersIncludeItem{
		GetLoadBalancerTelemetryLatestControllersIncludeItemInstances,
		GetLoadBalancerTelemetryLatestControllersIncludeItemServers,
		GetLoadBalancerTelemetryLatestControllersIncludeItemContainers,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetLoadBalancerTelemetryLatestControllersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetLoadBalancerTelemetryLatestControllersIncludeItemInstances:
		return []byte(s), nil
	case GetLoadBalancerTelemetryLatestControllersIncludeItemServers:
		return []byte(s), nil
	case GetLoadBalancerTelemetryLatestControllersIncludeItemContainers:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetLoadBalancerTelemetryLatestControllersIncludeItem) UnmarshalText(data []byte) error {
	switch GetLoadBalancerTelemetryLatestControllersIncludeItem(data) {
	case GetLoadBalancerTelemetryLatestControllersIncludeItemInstances:
		*s = GetLoadBalancerTelemetryLatestControllersIncludeItemInstances
		return nil
	case GetLoadBalancerTelemetryLatestControllersIncludeItemServers:
		*s = GetLoadBalancerTelemetryLatestControllersIncludeItemServers
		return nil
	case GetLoadBalancerTelemetryLatestControllersIncludeItemContainers:
		*s = GetLoadBalancerTelemetryLatestControllersIncludeItemContainers
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetLoadBalancerTelemetryLatestControllersOK struct {
	Data     LoadBalancerLatestControllers `json:"data"`
	Includes OptControllers                `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetLoadBalancerTelemetryLatestControllersOK) GetData() LoadBalancerLatestControllers {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetLoadBalancerTelemetryLatestControllersOK) GetIncludes() OptControllers {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetLoadBalancerTelemetryLatestControllersOK) SetData(val LoadBalancerLatestControllers) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetLoadBalancerTelemetryLatestControllersOK) SetIncludes(val OptControllers) {
	s.Includes = val
}

type GetLoadBalancerTelemetryReportFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetLoadBalancerTelemetryReportFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetLoadBalancerTelemetryReportFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetLoadBalancerTelemetryReportFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetLoadBalancerTelemetryReportFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetLoadBalancerTelemetryReportOK struct {
	Data LoadBalancerTelemetryReport `json:"data"`
}

// GetData returns the value of Data.
func (s *GetLoadBalancerTelemetryReportOK) GetData() LoadBalancerTelemetryReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetLoadBalancerTelemetryReportOK) SetData(val LoadBalancerTelemetryReport) {
	s.Data = val
}

type GetNetworkIncludeItem string

const (
	GetNetworkIncludeItemCreators     GetNetworkIncludeItem = "creators"
	GetNetworkIncludeItemEnvironments GetNetworkIncludeItem = "environments"
)

// AllValues returns all GetNetworkIncludeItem values.
func (GetNetworkIncludeItem) AllValues() []GetNetworkIncludeItem {
	return []GetNetworkIncludeItem{
		GetNetworkIncludeItemCreators,
		GetNetworkIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNetworkIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNetworkIncludeItemCreators:
		return []byte(s), nil
	case GetNetworkIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNetworkIncludeItem) UnmarshalText(data []byte) error {
	switch GetNetworkIncludeItem(data) {
	case GetNetworkIncludeItemCreators:
		*s = GetNetworkIncludeItemCreators
		return nil
	case GetNetworkIncludeItemEnvironments:
		*s = GetNetworkIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetNetworkOK struct {
	Data     Network            `json:"data"`
	Includes OptNetworkIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetNetworkOK) GetData() Network {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetNetworkOK) GetIncludes() OptNetworkIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetNetworkOK) SetData(val Network) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetNetworkOK) SetIncludes(val OptNetworkIncludes) {
	s.Includes = val
}

type GetNetworksFilter struct {
	// `filter[search]=value` search for a value associated with a field on the given Network(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Network's current
	// state.
	State OptString `json:"state"`
}

// GetSearch returns the value of Search.
func (s *GetNetworksFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetNetworksFilter) GetState() OptString {
	return s.State
}

// SetSearch sets the value of Search.
func (s *GetNetworksFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetNetworksFilter) SetState(val OptString) {
	s.State = val
}

type GetNetworksIncludeItem string

const (
	GetNetworksIncludeItemCreators     GetNetworksIncludeItem = "creators"
	GetNetworksIncludeItemEnvironments GetNetworksIncludeItem = "environments"
)

// AllValues returns all GetNetworksIncludeItem values.
func (GetNetworksIncludeItem) AllValues() []GetNetworksIncludeItem {
	return []GetNetworksIncludeItem{
		GetNetworksIncludeItemCreators,
		GetNetworksIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetNetworksIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetNetworksIncludeItemCreators:
		return []byte(s), nil
	case GetNetworksIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetNetworksIncludeItem) UnmarshalText(data []byte) error {
	switch GetNetworksIncludeItem(data) {
	case GetNetworksIncludeItemCreators:
		*s = GetNetworksIncludeItemCreators
		return nil
	case GetNetworksIncludeItemEnvironments:
		*s = GetNetworksIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetNetworksOK struct {
	Data     []Network          `json:"data"`
	Includes OptNetworkIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetNetworksOK) GetData() []Network {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetNetworksOK) GetIncludes() OptNetworkIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetNetworksOK) SetData(val []Network) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetNetworksOK) SetIncludes(val OptNetworkIncludes) {
	s.Includes = val
}

type GetNetworksPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetNetworksPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetNetworksPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetNetworksPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetNetworksPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetOrdersFilter struct{}

type GetOrdersIncludeItem string

const (
	GetOrdersIncludeItemPromoCodes GetOrdersIncludeItem = "promo_codes"
)

// AllValues returns all GetOrdersIncludeItem values.
func (GetOrdersIncludeItem) AllValues() []GetOrdersIncludeItem {
	return []GetOrdersIncludeItem{
		GetOrdersIncludeItemPromoCodes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetOrdersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetOrdersIncludeItemPromoCodes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrdersIncludeItem) UnmarshalText(data []byte) error {
	switch GetOrdersIncludeItem(data) {
	case GetOrdersIncludeItemPromoCodes:
		*s = GetOrdersIncludeItemPromoCodes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetOrdersMetaItem string

const (
	GetOrdersMetaItemDue GetOrdersMetaItem = "due"
)

// AllValues returns all GetOrdersMetaItem values.
func (GetOrdersMetaItem) AllValues() []GetOrdersMetaItem {
	return []GetOrdersMetaItem{
		GetOrdersMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetOrdersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetOrdersMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetOrdersMetaItem) UnmarshalText(data []byte) error {
	switch GetOrdersMetaItem(data) {
	case GetOrdersMetaItemDue:
		*s = GetOrdersMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetOrdersOK struct {
	Data     []Order                 `json:"data"`
	Includes OptBillingOrderIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetOrdersOK) GetData() []Order {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetOrdersOK) GetIncludes() OptBillingOrderIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetOrdersOK) SetData(val []Order) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetOrdersOK) SetIncludes(val OptBillingOrderIncludes) {
	s.Includes = val
}

type GetOrdersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetOrdersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetOrdersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetOrdersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetOrdersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetPipelineIncludeItem string

const (
	GetPipelineIncludeItemCreators   GetPipelineIncludeItem = "creators"
	GetPipelineIncludeItemName       GetPipelineIncludeItem = "name"
	GetPipelineIncludeItemComponents GetPipelineIncludeItem = "components"
)

// AllValues returns all GetPipelineIncludeItem values.
func (GetPipelineIncludeItem) AllValues() []GetPipelineIncludeItem {
	return []GetPipelineIncludeItem{
		GetPipelineIncludeItemCreators,
		GetPipelineIncludeItemName,
		GetPipelineIncludeItemComponents,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPipelineIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPipelineIncludeItemCreators:
		return []byte(s), nil
	case GetPipelineIncludeItemName:
		return []byte(s), nil
	case GetPipelineIncludeItemComponents:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPipelineIncludeItem) UnmarshalText(data []byte) error {
	switch GetPipelineIncludeItem(data) {
	case GetPipelineIncludeItemCreators:
		*s = GetPipelineIncludeItemCreators
		return nil
	case GetPipelineIncludeItemName:
		*s = GetPipelineIncludeItemName
		return nil
	case GetPipelineIncludeItemComponents:
		*s = GetPipelineIncludeItemComponents
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPipelineOK struct {
	Data     Pipeline            `json:"data"`
	Includes OptPipelineIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetPipelineOK) GetData() Pipeline {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetPipelineOK) GetIncludes() OptPipelineIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetPipelineOK) SetData(val Pipeline) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetPipelineOK) SetIncludes(val OptPipelineIncludes) {
	s.Includes = val
}

type GetPipelineRunsIncludeItem string

const (
	GetPipelineRunsIncludeItemCreators GetPipelineRunsIncludeItem = "creators"
)

// AllValues returns all GetPipelineRunsIncludeItem values.
func (GetPipelineRunsIncludeItem) AllValues() []GetPipelineRunsIncludeItem {
	return []GetPipelineRunsIncludeItem{
		GetPipelineRunsIncludeItemCreators,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPipelineRunsIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPipelineRunsIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPipelineRunsIncludeItem) UnmarshalText(data []byte) error {
	switch GetPipelineRunsIncludeItem(data) {
	case GetPipelineRunsIncludeItemCreators:
		*s = GetPipelineRunsIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPipelineRunsOK struct {
	Data     []PipelineRun                `json:"data"`
	Includes OptGetPipelineRunsOKIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetPipelineRunsOK) GetData() []PipelineRun {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetPipelineRunsOK) GetIncludes() OptGetPipelineRunsOKIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetPipelineRunsOK) SetData(val []PipelineRun) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetPipelineRunsOK) SetIncludes(val OptGetPipelineRunsOKIncludes) {
	s.Includes = val
}

type GetPipelineRunsOKIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *GetPipelineRunsOKIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *GetPipelineRunsOKIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

type GetPipelineTriggerKeyOK struct {
	Data OptTriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPipelineTriggerKeyOK) GetData() OptTriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPipelineTriggerKeyOK) SetData(val OptTriggerKey) {
	s.Data = val
}

type GetPipelineTriggerKeysFilter struct {
	// `filter[search]=value` search for a value associated with a field on the given Trigger Key(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Trigger Key's
	// current state.
	State OptString `json:"state"`
}

// GetSearch returns the value of Search.
func (s *GetPipelineTriggerKeysFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetPipelineTriggerKeysFilter) GetState() OptString {
	return s.State
}

// SetSearch sets the value of Search.
func (s *GetPipelineTriggerKeysFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetPipelineTriggerKeysFilter) SetState(val OptString) {
	s.State = val
}

type GetPipelineTriggerKeysOK struct {
	Data []TriggerKey `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPipelineTriggerKeysOK) GetData() []TriggerKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPipelineTriggerKeysOK) SetData(val []TriggerKey) {
	s.Data = val
}

type GetPipelineTriggerKeysPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetPipelineTriggerKeysPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetPipelineTriggerKeysPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetPipelineTriggerKeysPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetPipelineTriggerKeysPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetPipelinesFilter struct {
	// `filter[identifier]=value` List only those pipelines matching this identifier. May return multiple
	// results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given pipelines(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Pipeline's current
	// state.
	State OptString `json:"state"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetPipelinesFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetPipelinesFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetPipelinesFilter) GetState() OptString {
	return s.State
}

// SetIdentifier sets the value of Identifier.
func (s *GetPipelinesFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetPipelinesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetPipelinesFilter) SetState(val OptString) {
	s.State = val
}

type GetPipelinesIncludeItem string

const (
	GetPipelinesIncludeItemCreators   GetPipelinesIncludeItem = "creators"
	GetPipelinesIncludeItemName       GetPipelinesIncludeItem = "name"
	GetPipelinesIncludeItemComponents GetPipelinesIncludeItem = "components"
)

// AllValues returns all GetPipelinesIncludeItem values.
func (GetPipelinesIncludeItem) AllValues() []GetPipelinesIncludeItem {
	return []GetPipelinesIncludeItem{
		GetPipelinesIncludeItemCreators,
		GetPipelinesIncludeItemName,
		GetPipelinesIncludeItemComponents,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetPipelinesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetPipelinesIncludeItemCreators:
		return []byte(s), nil
	case GetPipelinesIncludeItemName:
		return []byte(s), nil
	case GetPipelinesIncludeItemComponents:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetPipelinesIncludeItem) UnmarshalText(data []byte) error {
	switch GetPipelinesIncludeItem(data) {
	case GetPipelinesIncludeItemCreators:
		*s = GetPipelinesIncludeItemCreators
		return nil
	case GetPipelinesIncludeItemName:
		*s = GetPipelinesIncludeItemName
		return nil
	case GetPipelinesIncludeItemComponents:
		*s = GetPipelinesIncludeItemComponents
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetPipelinesOK struct {
	Data     []Pipeline          `json:"data"`
	Includes OptPipelineIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetPipelinesOK) GetData() []Pipeline {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetPipelinesOK) GetIncludes() OptPipelineIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetPipelinesOK) SetData(val []Pipeline) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetPipelinesOK) SetIncludes(val OptPipelineIncludes) {
	s.Includes = val
}

type GetPipelinesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetPipelinesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetPipelinesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetPipelinesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetPipelinesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetPoolIPsOK struct {
	Data []IP `json:"data"`
}

// GetData returns the value of Data.
func (s *GetPoolIPsOK) GetData() []IP {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetPoolIPsOK) SetData(val []IP) {
	s.Data = val
}

type GetProviderLocationsOK struct {
	Data []ProviderLocation `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProviderLocationsOK) GetData() []ProviderLocation {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProviderLocationsOK) SetData(val []ProviderLocation) {
	s.Data = val
}

type GetProviderLocationsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetProviderLocationsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetProviderLocationsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetProviderLocationsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetProviderLocationsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetProviderServersFilter struct {
	// `filter[location_ids]=value` List only those provider servers matching this location. May return
	// multiple results.
	LocationIds OptString `json:"location_ids"`
}

// GetLocationIds returns the value of LocationIds.
func (s *GetProviderServersFilter) GetLocationIds() OptString {
	return s.LocationIds
}

// SetLocationIds sets the value of LocationIds.
func (s *GetProviderServersFilter) SetLocationIds(val OptString) {
	s.LocationIds = val
}

type GetProviderServersOK struct {
	Data []ProviderServerModel `json:"data"`
}

// GetData returns the value of Data.
func (s *GetProviderServersOK) GetData() []ProviderServerModel {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetProviderServersOK) SetData(val []ProviderServerModel) {
	s.Data = val
}

type GetProviderServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetProviderServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetProviderServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetProviderServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetProviderServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetRoleOK struct {
	Data OptRole `json:"data"`
}

// GetData returns the value of Data.
func (s *GetRoleOK) GetData() OptRole {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetRoleOK) SetData(val OptRole) {
	s.Data = val
}

type GetRolesFilter struct{}

type GetRolesOK struct {
	Data []Role `json:"data"`
}

// GetData returns the value of Data.
func (s *GetRolesOK) GetData() []Role {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetRolesOK) SetData(val []Role) {
	s.Data = val
}

type GetRolesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetRolesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetRolesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetRolesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetRolesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetScopedVariableOK struct {
	Data ScopedVariable `json:"data"`
}

// GetData returns the value of Data.
func (s *GetScopedVariableOK) GetData() ScopedVariable {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetScopedVariableOK) SetData(val ScopedVariable) {
	s.Data = val
}

type GetScopedVariablesFilter struct {
	// `filter[identifier]=value` List only those environments matching this identifier. May return
	// multiple results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given Scoped Variable(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Scoped Variable's
	// current state.
	State OptString `json:"state"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetScopedVariablesFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetScopedVariablesFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetScopedVariablesFilter) GetState() OptString {
	return s.State
}

// SetIdentifier sets the value of Identifier.
func (s *GetScopedVariablesFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetScopedVariablesFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetScopedVariablesFilter) SetState(val OptString) {
	s.State = val
}

type GetScopedVariablesOK struct {
	Data []ScopedVariable `json:"data"`
}

// GetData returns the value of Data.
func (s *GetScopedVariablesOK) GetData() []ScopedVariable {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetScopedVariablesOK) SetData(val []ScopedVariable) {
	s.Data = val
}

type GetScopedVariablesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetScopedVariablesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetScopedVariablesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetScopedVariablesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetScopedVariablesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetSearchIndexOK struct {
	Data Index `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSearchIndexOK) GetData() Index {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSearchIndexOK) SetData(val Index) {
	s.Data = val
}

type GetSecurityReportFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
	// `filter[environment]=<Environment ID>` fetch the security report for the specified environment.
	Environment OptString `json:"environment"`
	// `filter[event]=value` filter by event occurrence. Example: `filter[event]=environment.services.vpn.
	// login`.
	Event OptString `json:"event"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetSecurityReportFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetSecurityReportFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// GetEnvironment returns the value of Environment.
func (s *GetSecurityReportFilter) GetEnvironment() OptString {
	return s.Environment
}

// GetEvent returns the value of Event.
func (s *GetSecurityReportFilter) GetEvent() OptString {
	return s.Event
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetSecurityReportFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetSecurityReportFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

// SetEnvironment sets the value of Environment.
func (s *GetSecurityReportFilter) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetEvent sets the value of Event.
func (s *GetSecurityReportFilter) SetEvent(val OptString) {
	s.Event = val
}

type GetSecurityReportOK struct {
	Data SecurityReport `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSecurityReportOK) GetData() SecurityReport {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSecurityReportOK) SetData(val SecurityReport) {
	s.Data = val
}

type GetServerConsoleOK struct {
	Data GetServerConsoleOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServerConsoleOK) GetData() GetServerConsoleOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServerConsoleOK) SetData(val GetServerConsoleOKData) {
	s.Data = val
}

type GetServerConsoleOKData struct {
	// The websocket target URL.
	Address string `json:"address"`
	// The authentication token for the console socket. It should be appended as the URL parameter
	// "token" to the address.
	Token string `json:"token"`
}

// GetAddress returns the value of Address.
func (s *GetServerConsoleOKData) GetAddress() string {
	return s.Address
}

// GetToken returns the value of Token.
func (s *GetServerConsoleOKData) GetToken() string {
	return s.Token
}

// SetAddress sets the value of Address.
func (s *GetServerConsoleOKData) SetAddress(val string) {
	s.Address = val
}

// SetToken sets the value of Token.
func (s *GetServerConsoleOKData) SetToken(val string) {
	s.Token = val
}

type GetServerIncludeItem string

const (
	GetServerIncludeItemLocations    GetServerIncludeItem = "locations"
	GetServerIncludeItemModels       GetServerIncludeItem = "models"
	GetServerIncludeItemIntegrations GetServerIncludeItem = "integrations"
)

// AllValues returns all GetServerIncludeItem values.
func (GetServerIncludeItem) AllValues() []GetServerIncludeItem {
	return []GetServerIncludeItem{
		GetServerIncludeItemLocations,
		GetServerIncludeItemModels,
		GetServerIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServerIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServerIncludeItemLocations:
		return []byte(s), nil
	case GetServerIncludeItemModels:
		return []byte(s), nil
	case GetServerIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerIncludeItem) UnmarshalText(data []byte) error {
	switch GetServerIncludeItem(data) {
	case GetServerIncludeItemLocations:
		*s = GetServerIncludeItemLocations
		return nil
	case GetServerIncludeItemModels:
		*s = GetServerIncludeItemModels
		return nil
	case GetServerIncludeItemIntegrations:
		*s = GetServerIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServerInstancesIncludeItem string

const (
	GetServerInstancesIncludeItemCreator      GetServerInstancesIncludeItem = "creator"
	GetServerInstancesIncludeItemServers      GetServerInstancesIncludeItem = "servers"
	GetServerInstancesIncludeItemLocations    GetServerInstancesIncludeItem = "locations"
	GetServerInstancesIncludeItemIntegrations GetServerInstancesIncludeItem = "integrations"
	GetServerInstancesIncludeItemContainers   GetServerInstancesIncludeItem = "containers"
	GetServerInstancesIncludeItemEnvironments GetServerInstancesIncludeItem = "environments"
)

// AllValues returns all GetServerInstancesIncludeItem values.
func (GetServerInstancesIncludeItem) AllValues() []GetServerInstancesIncludeItem {
	return []GetServerInstancesIncludeItem{
		GetServerInstancesIncludeItemCreator,
		GetServerInstancesIncludeItemServers,
		GetServerInstancesIncludeItemLocations,
		GetServerInstancesIncludeItemIntegrations,
		GetServerInstancesIncludeItemContainers,
		GetServerInstancesIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServerInstancesIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServerInstancesIncludeItemCreator:
		return []byte(s), nil
	case GetServerInstancesIncludeItemServers:
		return []byte(s), nil
	case GetServerInstancesIncludeItemLocations:
		return []byte(s), nil
	case GetServerInstancesIncludeItemIntegrations:
		return []byte(s), nil
	case GetServerInstancesIncludeItemContainers:
		return []byte(s), nil
	case GetServerInstancesIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerInstancesIncludeItem) UnmarshalText(data []byte) error {
	switch GetServerInstancesIncludeItem(data) {
	case GetServerInstancesIncludeItemCreator:
		*s = GetServerInstancesIncludeItemCreator
		return nil
	case GetServerInstancesIncludeItemServers:
		*s = GetServerInstancesIncludeItemServers
		return nil
	case GetServerInstancesIncludeItemLocations:
		*s = GetServerInstancesIncludeItemLocations
		return nil
	case GetServerInstancesIncludeItemIntegrations:
		*s = GetServerInstancesIncludeItemIntegrations
		return nil
	case GetServerInstancesIncludeItemContainers:
		*s = GetServerInstancesIncludeItemContainers
		return nil
	case GetServerInstancesIncludeItemEnvironments:
		*s = GetServerInstancesIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServerInstancesOK struct {
	Data     []Instance          `json:"data"`
	Includes OptInstanceIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetServerInstancesOK) GetData() []Instance {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetServerInstancesOK) GetIncludes() OptInstanceIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetServerInstancesOK) SetData(val []Instance) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetServerInstancesOK) SetIncludes(val OptInstanceIncludes) {
	s.Includes = val
}

type GetServerInstancesPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServerInstancesPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServerInstancesPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServerInstancesPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServerInstancesPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetServerMetaItem string

const (
	GetServerMetaItemNode           GetServerMetaItem = "node"
	GetServerMetaItemInstancesCount GetServerMetaItem = "instances_count"
)

// AllValues returns all GetServerMetaItem values.
func (GetServerMetaItem) AllValues() []GetServerMetaItem {
	return []GetServerMetaItem{
		GetServerMetaItemNode,
		GetServerMetaItemInstancesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServerMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServerMetaItemNode:
		return []byte(s), nil
	case GetServerMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServerMetaItem) UnmarshalText(data []byte) error {
	switch GetServerMetaItem(data) {
	case GetServerMetaItemNode:
		*s = GetServerMetaItemNode
		return nil
	case GetServerMetaItemInstancesCount:
		*s = GetServerMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServerOK struct {
	Data     InfraServer       `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetServerOK) GetData() InfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetServerOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetServerOK) SetData(val InfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetServerOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetServerTagsFilter struct {
	// `filter[cluster]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas
	// separated) and the return will include tags from servers that match any cluster(s) in the list.
	Cluster OptString `json:"cluster"`
}

// GetCluster returns the value of Cluster.
func (s *GetServerTagsFilter) GetCluster() OptString {
	return s.Cluster
}

// SetCluster sets the value of Cluster.
func (s *GetServerTagsFilter) SetCluster(val OptString) {
	s.Cluster = val
}

type GetServerTelemetryFilter struct {
	RangeMinusStart OptDateTime `json:"range-start"`
	RangeMinusEnd   OptDateTime `json:"range-end"`
}

// GetRangeMinusStart returns the value of RangeMinusStart.
func (s *GetServerTelemetryFilter) GetRangeMinusStart() OptDateTime {
	return s.RangeMinusStart
}

// GetRangeMinusEnd returns the value of RangeMinusEnd.
func (s *GetServerTelemetryFilter) GetRangeMinusEnd() OptDateTime {
	return s.RangeMinusEnd
}

// SetRangeMinusStart sets the value of RangeMinusStart.
func (s *GetServerTelemetryFilter) SetRangeMinusStart(val OptDateTime) {
	s.RangeMinusStart = val
}

// SetRangeMinusEnd sets the value of RangeMinusEnd.
func (s *GetServerTelemetryFilter) SetRangeMinusEnd(val OptDateTime) {
	s.RangeMinusEnd = val
}

type GetServerTelemetryOK struct {
	Data []ServerStatsTelemetry `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServerTelemetryOK) GetData() []ServerStatsTelemetry {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServerTelemetryOK) SetData(val []ServerStatsTelemetry) {
	s.Data = val
}

type GetServerTelemetryPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServerTelemetryPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServerTelemetryPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServerTelemetryPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServerTelemetryPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetServerUsageOK struct {
	Data UsageDatum `json:"data"`
}

// GetData returns the value of Data.
func (s *GetServerUsageOK) GetData() UsageDatum {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetServerUsageOK) SetData(val UsageDatum) {
	s.Data = val
}

type GetServersFilter struct {
	// `filter[state]=value1,value2` state filtering will allow you to filter by the provider's current
	// state.
	State OptString `json:"state"`
	// `filter[tags]=tagone,tagtwo,tagthree` filtering by Server tag.  Enter one or more tags (comma
	// separated) and the return will include servers that match any tags in the list.
	Tags OptString `json:"tags"`
	// `filter[clusters]=clusterone,clustertwo` filtering by cluster.  Enter one or more clusters (commas
	// separated) and the return will include servers that match any clusters in the list.
	Clusters OptString `json:"clusters"`
	// `filter[providers]=providerone,providertwo` filtering by provider.  Enter one or more providers
	// (commas separated) and the return will include servers that match any providers in the list.
	Providers OptString `json:"providers"`
}

// GetState returns the value of State.
func (s *GetServersFilter) GetState() OptString {
	return s.State
}

// GetTags returns the value of Tags.
func (s *GetServersFilter) GetTags() OptString {
	return s.Tags
}

// GetClusters returns the value of Clusters.
func (s *GetServersFilter) GetClusters() OptString {
	return s.Clusters
}

// GetProviders returns the value of Providers.
func (s *GetServersFilter) GetProviders() OptString {
	return s.Providers
}

// SetState sets the value of State.
func (s *GetServersFilter) SetState(val OptString) {
	s.State = val
}

// SetTags sets the value of Tags.
func (s *GetServersFilter) SetTags(val OptString) {
	s.Tags = val
}

// SetClusters sets the value of Clusters.
func (s *GetServersFilter) SetClusters(val OptString) {
	s.Clusters = val
}

// SetProviders sets the value of Providers.
func (s *GetServersFilter) SetProviders(val OptString) {
	s.Providers = val
}

type GetServersIncludeItem string

const (
	GetServersIncludeItemLocations    GetServersIncludeItem = "locations"
	GetServersIncludeItemModels       GetServersIncludeItem = "models"
	GetServersIncludeItemIntegrations GetServersIncludeItem = "integrations"
)

// AllValues returns all GetServersIncludeItem values.
func (GetServersIncludeItem) AllValues() []GetServersIncludeItem {
	return []GetServersIncludeItem{
		GetServersIncludeItemLocations,
		GetServersIncludeItemModels,
		GetServersIncludeItemIntegrations,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServersIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServersIncludeItemLocations:
		return []byte(s), nil
	case GetServersIncludeItemModels:
		return []byte(s), nil
	case GetServersIncludeItemIntegrations:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServersIncludeItem) UnmarshalText(data []byte) error {
	switch GetServersIncludeItem(data) {
	case GetServersIncludeItemLocations:
		*s = GetServersIncludeItemLocations
		return nil
	case GetServersIncludeItemModels:
		*s = GetServersIncludeItemModels
		return nil
	case GetServersIncludeItemIntegrations:
		*s = GetServersIncludeItemIntegrations
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServersMetaItem string

const (
	GetServersMetaItemNode           GetServersMetaItem = "node"
	GetServersMetaItemInstancesCount GetServersMetaItem = "instances_count"
)

// AllValues returns all GetServersMetaItem values.
func (GetServersMetaItem) AllValues() []GetServersMetaItem {
	return []GetServersMetaItem{
		GetServersMetaItemNode,
		GetServersMetaItemInstancesCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetServersMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetServersMetaItemNode:
		return []byte(s), nil
	case GetServersMetaItemInstancesCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetServersMetaItem) UnmarshalText(data []byte) error {
	switch GetServersMetaItem(data) {
	case GetServersMetaItemNode:
		*s = GetServersMetaItemNode
		return nil
	case GetServersMetaItemInstancesCount:
		*s = GetServersMetaItemInstancesCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetServersOK struct {
	Data     []InfraServer     `json:"data"`
	Includes OptServerIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetServersOK) GetData() []InfraServer {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetServersOK) GetIncludes() OptServerIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetServersOK) SetData(val []InfraServer) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetServersOK) SetIncludes(val OptServerIncludes) {
	s.Includes = val
}

type GetServersPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetServersPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetServersPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetServersPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetServersPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetStackBuildOK struct {
	Data StackBuild `json:"data"`
}

// GetData returns the value of Data.
func (s *GetStackBuildOK) GetData() StackBuild {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetStackBuildOK) SetData(val StackBuild) {
	s.Data = val
}

type GetStackBuildsFilter struct {
	// `filter[search]=value` search for a value associated with a field on the given Stack Build(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Stack Build's
	// current state.
	State OptString `json:"state"`
}

// GetSearch returns the value of Search.
func (s *GetStackBuildsFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetStackBuildsFilter) GetState() OptString {
	return s.State
}

// SetSearch sets the value of Search.
func (s *GetStackBuildsFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetStackBuildsFilter) SetState(val OptString) {
	s.State = val
}

type GetStackBuildsMetaItem string

const (
	GetStackBuildsMetaItemContainersCount GetStackBuildsMetaItem = "containers_count"
)

// AllValues returns all GetStackBuildsMetaItem values.
func (GetStackBuildsMetaItem) AllValues() []GetStackBuildsMetaItem {
	return []GetStackBuildsMetaItem{
		GetStackBuildsMetaItemContainersCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetStackBuildsMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetStackBuildsMetaItemContainersCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetStackBuildsMetaItem) UnmarshalText(data []byte) error {
	switch GetStackBuildsMetaItem(data) {
	case GetStackBuildsMetaItemContainersCount:
		*s = GetStackBuildsMetaItemContainersCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetStackBuildsOK struct {
	Data []StackBuild `json:"data"`
}

// GetData returns the value of Data.
func (s *GetStackBuildsOK) GetData() []StackBuild {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetStackBuildsOK) SetData(val []StackBuild) {
	s.Data = val
}

type GetStackBuildsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetStackBuildsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetStackBuildsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetStackBuildsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetStackBuildsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetStackOK struct {
	Data Stack `json:"data"`
}

// GetData returns the value of Data.
func (s *GetStackOK) GetData() Stack {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetStackOK) SetData(val Stack) {
	s.Data = val
}

type GetStacksFilter struct {
	// `filter[identifier]=value` List only those stacks matching this identifier. May return multiple
	// results.
	Identifier OptString `json:"identifier"`
	// `filter[search]=value` search for a value associated with a field on the given Stack(s).
	Search OptString `json:"search"`
	// `filter[state]=value1,value2` state filtering will allow you to filter by the Stack's current
	// state.
	State OptString `json:"state"`
}

// GetIdentifier returns the value of Identifier.
func (s *GetStacksFilter) GetIdentifier() OptString {
	return s.Identifier
}

// GetSearch returns the value of Search.
func (s *GetStacksFilter) GetSearch() OptString {
	return s.Search
}

// GetState returns the value of State.
func (s *GetStacksFilter) GetState() OptString {
	return s.State
}

// SetIdentifier sets the value of Identifier.
func (s *GetStacksFilter) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetSearch sets the value of Search.
func (s *GetStacksFilter) SetSearch(val OptString) {
	s.Search = val
}

// SetState sets the value of State.
func (s *GetStacksFilter) SetState(val OptString) {
	s.State = val
}

type GetStacksIncludeItem string

const (
	GetStacksIncludeItemCreators GetStacksIncludeItem = "creators"
)

// AllValues returns all GetStacksIncludeItem values.
func (GetStacksIncludeItem) AllValues() []GetStacksIncludeItem {
	return []GetStacksIncludeItem{
		GetStacksIncludeItemCreators,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetStacksIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case GetStacksIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetStacksIncludeItem) UnmarshalText(data []byte) error {
	switch GetStacksIncludeItem(data) {
	case GetStacksIncludeItemCreators:
		*s = GetStacksIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetStacksMetaItem string

const (
	GetStacksMetaItemContainersCount GetStacksMetaItem = "containers_count"
	GetStacksMetaItemBuildsCount     GetStacksMetaItem = "builds_count"
)

// AllValues returns all GetStacksMetaItem values.
func (GetStacksMetaItem) AllValues() []GetStacksMetaItem {
	return []GetStacksMetaItem{
		GetStacksMetaItemContainersCount,
		GetStacksMetaItemBuildsCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetStacksMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case GetStacksMetaItemContainersCount:
		return []byte(s), nil
	case GetStacksMetaItemBuildsCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetStacksMetaItem) UnmarshalText(data []byte) error {
	switch GetStacksMetaItem(data) {
	case GetStacksMetaItemContainersCount:
		*s = GetStacksMetaItemContainersCount
		return nil
	case GetStacksMetaItemBuildsCount:
		*s = GetStacksMetaItemBuildsCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetStacksOK struct {
	Data     []Stack         `json:"data"`
	Includes OptStackInclude `json:"includes"`
}

// GetData returns the value of Data.
func (s *GetStacksOK) GetData() []Stack {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *GetStacksOK) GetIncludes() OptStackInclude {
	return s.Includes
}

// SetData sets the value of Data.
func (s *GetStacksOK) SetData(val []Stack) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *GetStacksOK) SetIncludes(val OptStackInclude) {
	s.Includes = val
}

type GetStacksPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetStacksPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetStacksPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetStacksPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetStacksPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetTLSGenerationAttemptsFilter struct {
	// `filter[domain]=value` filter the return for TLS attempts by domain.
	Domain OptString `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *GetTLSGenerationAttemptsFilter) GetDomain() OptString {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *GetTLSGenerationAttemptsFilter) SetDomain(val OptString) {
	s.Domain = val
}

type GetTLSGenerationAttemptsOK struct {
	Data []Attempt `json:"data"`
}

// GetData returns the value of Data.
func (s *GetTLSGenerationAttemptsOK) GetData() []Attempt {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetTLSGenerationAttemptsOK) SetData(val []Attempt) {
	s.Data = val
}

type GetTLSGenerationAttemptsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetTLSGenerationAttemptsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetTLSGenerationAttemptsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetTLSGenerationAttemptsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetTLSGenerationAttemptsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetTwoFactorAuthSetupOK struct {
	Data OptTwoFactorAuthSetup `json:"data"`
}

// GetData returns the value of Data.
func (s *GetTwoFactorAuthSetupOK) GetData() OptTwoFactorAuthSetup {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetTwoFactorAuthSetupOK) SetData(val OptTwoFactorAuthSetup) {
	s.Data = val
}

type GetVPNLoginsOK struct {
	Data []VPNLogin `json:"data"`
}

// GetData returns the value of Data.
func (s *GetVPNLoginsOK) GetData() []VPNLogin {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetVPNLoginsOK) SetData(val []VPNLogin) {
	s.Data = val
}

type GetVPNLoginsPage struct {
	// The page to jump to.
	Number OptFloat64 `json:"number"`
	// The number of resources returned per page.
	Size OptFloat64 `json:"size"`
}

// GetNumber returns the value of Number.
func (s *GetVPNLoginsPage) GetNumber() OptFloat64 {
	return s.Number
}

// GetSize returns the value of Size.
func (s *GetVPNLoginsPage) GetSize() OptFloat64 {
	return s.Size
}

// SetNumber sets the value of Number.
func (s *GetVPNLoginsPage) SetNumber(val OptFloat64) {
	s.Number = val
}

// SetSize sets the value of Size.
func (s *GetVPNLoginsPage) SetSize(val OptFloat64) {
	s.Size = val
}

type GetVPNServiceOK struct {
	Data VPNInfoReturn `json:"data"`
}

// GetData returns the value of Data.
func (s *GetVPNServiceOK) GetData() VPNInfoReturn {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetVPNServiceOK) SetData(val VPNInfoReturn) {
	s.Data = val
}

type GetVPNUsersOK struct {
	Data []VPNUsers `json:"data"`
}

// GetData returns the value of Data.
func (s *GetVPNUsersOK) GetData() []VPNUsers {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetVPNUsersOK) SetData(val []VPNUsers) {
	s.Data = val
}

// Describes settings that are passed to HAProxy within the load balancer.
// Ref: #/components/schemas/HaProxyConfig
type HaProxyConfig struct {
	Default HaProxyConfigSet `json:"default"`
	// An object that defines how HAProxy will act on a specific port. The key is a custom port, and the
	// value is the same settings object found under `default` above.
	Ports HaProxyConfigPorts `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *HaProxyConfig) GetDefault() HaProxyConfigSet {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *HaProxyConfig) GetPorts() HaProxyConfigPorts {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *HaProxyConfig) SetDefault(val HaProxyConfigSet) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *HaProxyConfig) SetPorts(val HaProxyConfigPorts) {
	s.Ports = val
}

// An object that defines how HAProxy will act on a specific port. The key is a custom port, and the
// value is the same settings object found under `default` above.
type HaProxyConfigPorts map[string]HaProxyConfigSet

func (s *HaProxyConfigPorts) init() HaProxyConfigPorts {
	m := *s
	if m == nil {
		m = map[string]HaProxyConfigSet{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/HaProxyConfigSet
type HaProxyConfigSet struct {
	// Settings that describe how incoming traffic to the load balancer is handled.
	Frontend HaProxyConfigSetFrontend `json:"frontend"`
	// Settings related to how the load balancer routes connections to container instances.
	Backend HaProxyConfigSetBackend `json:"backend"`
}

// GetFrontend returns the value of Frontend.
func (s *HaProxyConfigSet) GetFrontend() HaProxyConfigSetFrontend {
	return s.Frontend
}

// GetBackend returns the value of Backend.
func (s *HaProxyConfigSet) GetBackend() HaProxyConfigSetBackend {
	return s.Backend
}

// SetFrontend sets the value of Frontend.
func (s *HaProxyConfigSet) SetFrontend(val HaProxyConfigSetFrontend) {
	s.Frontend = val
}

// SetBackend sets the value of Backend.
func (s *HaProxyConfigSet) SetBackend(val HaProxyConfigSetBackend) {
	s.Backend = val
}

// Settings related to how the load balancer routes connections to container instances.
type HaProxyConfigSetBackend struct {
	// How connections are balanced across your container instances. Can be one of the following:
	// - `roundrobin`: Each container instance is used in turns.
	// - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the
	// expense of being less dynamic.
	// - `leastconn`: Routes traffic to the instance with the least number of active connections.
	// - `first`: Routes traffic to the first available instance.
	// - `source`: The same client IP always reaches the same container instance as long as no instance
	// goes down or up.
	Balance HaProxyConfigSetBackendBalance `json:"balance"`
	// Various options for handling timeouts when communicating with a container instance behind the load
	// balancer.
	Timeouts NilHaProxyConfigSetBackendTimeouts `json:"timeouts"`
}

// GetBalance returns the value of Balance.
func (s *HaProxyConfigSetBackend) GetBalance() HaProxyConfigSetBackendBalance {
	return s.Balance
}

// GetTimeouts returns the value of Timeouts.
func (s *HaProxyConfigSetBackend) GetTimeouts() NilHaProxyConfigSetBackendTimeouts {
	return s.Timeouts
}

// SetBalance sets the value of Balance.
func (s *HaProxyConfigSetBackend) SetBalance(val HaProxyConfigSetBackendBalance) {
	s.Balance = val
}

// SetTimeouts sets the value of Timeouts.
func (s *HaProxyConfigSetBackend) SetTimeouts(val NilHaProxyConfigSetBackendTimeouts) {
	s.Timeouts = val
}

// How connections are balanced across your container instances. Can be one of the following:
// - `roundrobin`: Each container instance is used in turns.
// - `static-rr`: Each container instance is used in turns, but is faster than Round Robin at the
// expense of being less dynamic.
// - `leastconn`: Routes traffic to the instance with the least number of active connections.
// - `first`: Routes traffic to the first available instance.
// - `source`: The same client IP always reaches the same container instance as long as no instance
// goes down or up.
type HaProxyConfigSetBackendBalance string

const (
	HaProxyConfigSetBackendBalanceRoundrobin HaProxyConfigSetBackendBalance = "roundrobin"
	HaProxyConfigSetBackendBalanceStaticRr   HaProxyConfigSetBackendBalance = "static-rr"
	HaProxyConfigSetBackendBalanceLeastconn  HaProxyConfigSetBackendBalance = "leastconn"
	HaProxyConfigSetBackendBalanceFirst      HaProxyConfigSetBackendBalance = "first"
	HaProxyConfigSetBackendBalanceSource     HaProxyConfigSetBackendBalance = "source"
)

// AllValues returns all HaProxyConfigSetBackendBalance values.
func (HaProxyConfigSetBackendBalance) AllValues() []HaProxyConfigSetBackendBalance {
	return []HaProxyConfigSetBackendBalance{
		HaProxyConfigSetBackendBalanceRoundrobin,
		HaProxyConfigSetBackendBalanceStaticRr,
		HaProxyConfigSetBackendBalanceLeastconn,
		HaProxyConfigSetBackendBalanceFirst,
		HaProxyConfigSetBackendBalanceSource,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HaProxyConfigSetBackendBalance) MarshalText() ([]byte, error) {
	switch s {
	case HaProxyConfigSetBackendBalanceRoundrobin:
		return []byte(s), nil
	case HaProxyConfigSetBackendBalanceStaticRr:
		return []byte(s), nil
	case HaProxyConfigSetBackendBalanceLeastconn:
		return []byte(s), nil
	case HaProxyConfigSetBackendBalanceFirst:
		return []byte(s), nil
	case HaProxyConfigSetBackendBalanceSource:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HaProxyConfigSetBackendBalance) UnmarshalText(data []byte) error {
	switch HaProxyConfigSetBackendBalance(data) {
	case HaProxyConfigSetBackendBalanceRoundrobin:
		*s = HaProxyConfigSetBackendBalanceRoundrobin
		return nil
	case HaProxyConfigSetBackendBalanceStaticRr:
		*s = HaProxyConfigSetBackendBalanceStaticRr
		return nil
	case HaProxyConfigSetBackendBalanceLeastconn:
		*s = HaProxyConfigSetBackendBalanceLeastconn
		return nil
	case HaProxyConfigSetBackendBalanceFirst:
		*s = HaProxyConfigSetBackendBalanceFirst
		return nil
	case HaProxyConfigSetBackendBalanceSource:
		*s = HaProxyConfigSetBackendBalanceSource
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Various options for handling timeouts when communicating with a container instance behind the load
// balancer.
type HaProxyConfigSetBackendTimeouts struct {
	// The number of seconds the load balancer will wait for a response from the container instance. See
	// the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.
	// 2-timeout%20server) for more information.
	ServerSecs NilInt `json:"server_secs"`
	// The number of milliseconds the load balancer will wait for the server to send data when one
	// direction is already closed. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.
	// 7/configuration.html#4-timeout%20server-fin) for more information.
	ServerFinMs NilInt `json:"server_fin_ms"`
	// The number of milliseconds the load balancer will wait for a successful connection to a container
	// instance. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.
	// html#4-timeout%20connect) for more information.
	ConnectMs NilInt `json:"connect_ms"`
	// The number of milliseconds the load balancer will hold connections in a queue when the maximum
	// number of connections has been reached. See the [HAProxy Docs](https://cbonte.github.
	// io/haproxy-dconv/1.7/configuration.html#4-timeout%20queue) for more information.
	QueueMs NilInt `json:"queue_ms"`
	// The number of milliseconds the load balancer will allow for inactivity on a bidirectional tunnel.
	// See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.
	// html#4-timeout%20tunnel) for more information.
	TunnelSecs NilInt `json:"tunnel_secs"`
}

// GetServerSecs returns the value of ServerSecs.
func (s *HaProxyConfigSetBackendTimeouts) GetServerSecs() NilInt {
	return s.ServerSecs
}

// GetServerFinMs returns the value of ServerFinMs.
func (s *HaProxyConfigSetBackendTimeouts) GetServerFinMs() NilInt {
	return s.ServerFinMs
}

// GetConnectMs returns the value of ConnectMs.
func (s *HaProxyConfigSetBackendTimeouts) GetConnectMs() NilInt {
	return s.ConnectMs
}

// GetQueueMs returns the value of QueueMs.
func (s *HaProxyConfigSetBackendTimeouts) GetQueueMs() NilInt {
	return s.QueueMs
}

// GetTunnelSecs returns the value of TunnelSecs.
func (s *HaProxyConfigSetBackendTimeouts) GetTunnelSecs() NilInt {
	return s.TunnelSecs
}

// SetServerSecs sets the value of ServerSecs.
func (s *HaProxyConfigSetBackendTimeouts) SetServerSecs(val NilInt) {
	s.ServerSecs = val
}

// SetServerFinMs sets the value of ServerFinMs.
func (s *HaProxyConfigSetBackendTimeouts) SetServerFinMs(val NilInt) {
	s.ServerFinMs = val
}

// SetConnectMs sets the value of ConnectMs.
func (s *HaProxyConfigSetBackendTimeouts) SetConnectMs(val NilInt) {
	s.ConnectMs = val
}

// SetQueueMs sets the value of QueueMs.
func (s *HaProxyConfigSetBackendTimeouts) SetQueueMs(val NilInt) {
	s.QueueMs = val
}

// SetTunnelSecs sets the value of TunnelSecs.
func (s *HaProxyConfigSetBackendTimeouts) SetTunnelSecs(val NilInt) {
	s.TunnelSecs = val
}

// Settings that describe how incoming traffic to the load balancer is handled.
type HaProxyConfigSetFrontend struct {
	// The type of traffic expected by the load balancer for this port. Can be either:
	// - tcp: Traffic is forwarded without any parsing or additional manipulation.
	// - http: Traffic is treated as web traffic. If a LINKED record is configured for a container
	// exposing this port, the domain will be parsed and it will be forwarded to the proper container.
	// This allows multiple services to run on port 80 in the same environment.
	Mode HaProxyConfigSetFrontendMode `json:"mode"`
	// The number of simultaneous connections that can be processed at a time.
	MaxConnections NilInt `json:"max_connections"`
	// Various options for handling timeouts when communicating with the client.
	Timeouts NilHaProxyConfigSetFrontendTimeouts `json:"timeouts"`
}

// GetMode returns the value of Mode.
func (s *HaProxyConfigSetFrontend) GetMode() HaProxyConfigSetFrontendMode {
	return s.Mode
}

// GetMaxConnections returns the value of MaxConnections.
func (s *HaProxyConfigSetFrontend) GetMaxConnections() NilInt {
	return s.MaxConnections
}

// GetTimeouts returns the value of Timeouts.
func (s *HaProxyConfigSetFrontend) GetTimeouts() NilHaProxyConfigSetFrontendTimeouts {
	return s.Timeouts
}

// SetMode sets the value of Mode.
func (s *HaProxyConfigSetFrontend) SetMode(val HaProxyConfigSetFrontendMode) {
	s.Mode = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *HaProxyConfigSetFrontend) SetMaxConnections(val NilInt) {
	s.MaxConnections = val
}

// SetTimeouts sets the value of Timeouts.
func (s *HaProxyConfigSetFrontend) SetTimeouts(val NilHaProxyConfigSetFrontendTimeouts) {
	s.Timeouts = val
}

// The type of traffic expected by the load balancer for this port. Can be either:
// - tcp: Traffic is forwarded without any parsing or additional manipulation.
// - http: Traffic is treated as web traffic. If a LINKED record is configured for a container
// exposing this port, the domain will be parsed and it will be forwarded to the proper container.
// This allows multiple services to run on port 80 in the same environment.
type HaProxyConfigSetFrontendMode string

const (
	HaProxyConfigSetFrontendModeTCP  HaProxyConfigSetFrontendMode = "tcp"
	HaProxyConfigSetFrontendModeHTTP HaProxyConfigSetFrontendMode = "http"
)

// AllValues returns all HaProxyConfigSetFrontendMode values.
func (HaProxyConfigSetFrontendMode) AllValues() []HaProxyConfigSetFrontendMode {
	return []HaProxyConfigSetFrontendMode{
		HaProxyConfigSetFrontendModeTCP,
		HaProxyConfigSetFrontendModeHTTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HaProxyConfigSetFrontendMode) MarshalText() ([]byte, error) {
	switch s {
	case HaProxyConfigSetFrontendModeTCP:
		return []byte(s), nil
	case HaProxyConfigSetFrontendModeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HaProxyConfigSetFrontendMode) UnmarshalText(data []byte) error {
	switch HaProxyConfigSetFrontendMode(data) {
	case HaProxyConfigSetFrontendModeTCP:
		*s = HaProxyConfigSetFrontendModeTCP
		return nil
	case HaProxyConfigSetFrontendModeHTTP:
		*s = HaProxyConfigSetFrontendModeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Various options for handling timeouts when communicating with the client.
type HaProxyConfigSetFrontendTimeouts struct {
	// The number of seconds the load balancer will wait for a response from a client before
	// disconnecting.
	ClientSecs NilInt `json:"client_secs"`
	// The number of milliseconds the load balancer will wait for a client to send it data when one
	// direction is already closed. This is particularly useful to avoid keeping connections in a waiting
	// state for too long when clients do not disconnect cleanly.
	ClientFinMs NilInt `json:"client_fin_ms"`
	// The number of milliseconds the load balancer will wait for a new HTTP request to start coming
	// after a response was set. See the [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.
	// 7/configuration.html#4.2-timeout%20http-request) for more information. (`http` mode only).
	HTTPKeepAliveMs NilInt `json:"http_keep_alive_ms"`
	// The number of milliseconds the load balancer will wait for a complete HTTP request. See the
	// [HAProxy Docs](https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.
	// 2-timeout%20http-request) for more information. (`http` mode only).
	HTTPRequestMs NilInt `json:"http_request_ms"`
}

// GetClientSecs returns the value of ClientSecs.
func (s *HaProxyConfigSetFrontendTimeouts) GetClientSecs() NilInt {
	return s.ClientSecs
}

// GetClientFinMs returns the value of ClientFinMs.
func (s *HaProxyConfigSetFrontendTimeouts) GetClientFinMs() NilInt {
	return s.ClientFinMs
}

// GetHTTPKeepAliveMs returns the value of HTTPKeepAliveMs.
func (s *HaProxyConfigSetFrontendTimeouts) GetHTTPKeepAliveMs() NilInt {
	return s.HTTPKeepAliveMs
}

// GetHTTPRequestMs returns the value of HTTPRequestMs.
func (s *HaProxyConfigSetFrontendTimeouts) GetHTTPRequestMs() NilInt {
	return s.HTTPRequestMs
}

// SetClientSecs sets the value of ClientSecs.
func (s *HaProxyConfigSetFrontendTimeouts) SetClientSecs(val NilInt) {
	s.ClientSecs = val
}

// SetClientFinMs sets the value of ClientFinMs.
func (s *HaProxyConfigSetFrontendTimeouts) SetClientFinMs(val NilInt) {
	s.ClientFinMs = val
}

// SetHTTPKeepAliveMs sets the value of HTTPKeepAliveMs.
func (s *HaProxyConfigSetFrontendTimeouts) SetHTTPKeepAliveMs(val NilInt) {
	s.HTTPKeepAliveMs = val
}

// SetHTTPRequestMs sets the value of HTTPRequestMs.
func (s *HaProxyConfigSetFrontendTimeouts) SetHTTPRequestMs(val NilInt) {
	s.HTTPRequestMs = val
}

// Ref: #/components/schemas/HaProxyLbType
type HaProxyLbType struct {
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 bool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6    bool                    `json:"ipv6"`
	Details NilHaProxyLbTypeDetails `json:"details"`
}

// GetIpv4 returns the value of Ipv4.
func (s *HaProxyLbType) GetIpv4() bool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *HaProxyLbType) GetIpv6() bool {
	return s.Ipv6
}

// GetDetails returns the value of Details.
func (s *HaProxyLbType) GetDetails() NilHaProxyLbTypeDetails {
	return s.Details
}

// SetIpv4 sets the value of Ipv4.
func (s *HaProxyLbType) SetIpv4(val bool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *HaProxyLbType) SetIpv6(val bool) {
	s.Ipv6 = val
}

// SetDetails sets the value of Details.
func (s *HaProxyLbType) SetDetails(val NilHaProxyLbTypeDetails) {
	s.Details = val
}

// Describes settings that are passed to HAProxy within the load balancer.
type HaProxyLbTypeDetails struct {
	Default HaProxyConfigSet `json:"default"`
	// An object that defines how HAProxy will act on a specific port. The key is a custom port, and the
	// value is the same settings object found under `default` above.
	Ports HaProxyLbTypeDetailsPorts `json:"ports"`
}

// GetDefault returns the value of Default.
func (s *HaProxyLbTypeDetails) GetDefault() HaProxyConfigSet {
	return s.Default
}

// GetPorts returns the value of Ports.
func (s *HaProxyLbTypeDetails) GetPorts() HaProxyLbTypeDetailsPorts {
	return s.Ports
}

// SetDefault sets the value of Default.
func (s *HaProxyLbTypeDetails) SetDefault(val HaProxyConfigSet) {
	s.Default = val
}

// SetPorts sets the value of Ports.
func (s *HaProxyLbTypeDetails) SetPorts(val HaProxyLbTypeDetailsPorts) {
	s.Ports = val
}

// An object that defines how HAProxy will act on a specific port. The key is a custom port, and the
// value is the same settings object found under `default` above.
type HaProxyLbTypeDetailsPorts map[string]HaProxyConfigSet

func (s *HaProxyLbTypeDetailsPorts) init() HaProxyLbTypeDetailsPorts {
	m := *s
	if m == nil {
		m = map[string]HaProxyConfigSet{}
		*s = m
	}
	return m
}

type HaProxyLbTypeType string

const (
	HaProxyLbTypeTypeHaproxy HaProxyLbTypeType = "haproxy"
)

// AllValues returns all HaProxyLbTypeType values.
func (HaProxyLbTypeType) AllValues() []HaProxyLbTypeType {
	return []HaProxyLbTypeType{
		HaProxyLbTypeTypeHaproxy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HaProxyLbTypeType) MarshalText() ([]byte, error) {
	switch s {
	case HaProxyLbTypeTypeHaproxy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HaProxyLbTypeType) UnmarshalText(data []byte) error {
	switch HaProxyLbTypeType(data) {
	case HaProxyLbTypeTypeHaproxy:
		*s = HaProxyLbTypeTypeHaproxy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional configuration options for HTTP mode routers.
// Ref: #/components/schemas/HttpRouterConfig
type HttpRouterConfig struct {
	Details HttpRouterConfigDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *HttpRouterConfig) GetDetails() HttpRouterConfigDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *HttpRouterConfig) SetDetails(val HttpRouterConfigDetails) {
	s.Details = val
}

type HttpRouterConfigDetails struct {
	// Defines a built-in redirect for HTTP mode routers.
	Redirect OptNilHttpRouterConfigDetailsRedirect `json:"redirect"`
	Forward  OptNilHttpRouterConfigDetailsForward  `json:"forward"`
	Proxy    OptNilHttpRouterConfigDetailsProxy    `json:"proxy"`
	Caching  OptNilHttpRouterConfigDetailsCaching  `json:"caching"`
}

// GetRedirect returns the value of Redirect.
func (s *HttpRouterConfigDetails) GetRedirect() OptNilHttpRouterConfigDetailsRedirect {
	return s.Redirect
}

// GetForward returns the value of Forward.
func (s *HttpRouterConfigDetails) GetForward() OptNilHttpRouterConfigDetailsForward {
	return s.Forward
}

// GetProxy returns the value of Proxy.
func (s *HttpRouterConfigDetails) GetProxy() OptNilHttpRouterConfigDetailsProxy {
	return s.Proxy
}

// GetCaching returns the value of Caching.
func (s *HttpRouterConfigDetails) GetCaching() OptNilHttpRouterConfigDetailsCaching {
	return s.Caching
}

// SetRedirect sets the value of Redirect.
func (s *HttpRouterConfigDetails) SetRedirect(val OptNilHttpRouterConfigDetailsRedirect) {
	s.Redirect = val
}

// SetForward sets the value of Forward.
func (s *HttpRouterConfigDetails) SetForward(val OptNilHttpRouterConfigDetailsForward) {
	s.Forward = val
}

// SetProxy sets the value of Proxy.
func (s *HttpRouterConfigDetails) SetProxy(val OptNilHttpRouterConfigDetailsProxy) {
	s.Proxy = val
}

// SetCaching sets the value of Caching.
func (s *HttpRouterConfigDetails) SetCaching(val OptNilHttpRouterConfigDetailsCaching) {
	s.Caching = val
}

type HttpRouterConfigDetailsCaching struct {
	Files OptNilHttpRouterConfigDetailsCachingFilesItemArray `json:"files"`
}

// GetFiles returns the value of Files.
func (s *HttpRouterConfigDetailsCaching) GetFiles() OptNilHttpRouterConfigDetailsCachingFilesItemArray {
	return s.Files
}

// SetFiles sets the value of Files.
func (s *HttpRouterConfigDetailsCaching) SetFiles(val OptNilHttpRouterConfigDetailsCachingFilesItemArray) {
	s.Files = val
}

type HttpRouterConfigDetailsCachingFilesItem struct {
	// Regex string that describes the files to cache.
	Match string   `json:"match"`
	TTL   Duration `json:"ttl"`
}

// GetMatch returns the value of Match.
func (s *HttpRouterConfigDetailsCachingFilesItem) GetMatch() string {
	return s.Match
}

// GetTTL returns the value of TTL.
func (s *HttpRouterConfigDetailsCachingFilesItem) GetTTL() Duration {
	return s.TTL
}

// SetMatch sets the value of Match.
func (s *HttpRouterConfigDetailsCachingFilesItem) SetMatch(val string) {
	s.Match = val
}

// SetTTL sets the value of TTL.
func (s *HttpRouterConfigDetailsCachingFilesItem) SetTTL(val Duration) {
	s.TTL = val
}

type HttpRouterConfigDetailsForward struct {
	Scheme OptNilString `json:"scheme"`
	// Allows the load balancer to modify content before it reaches the user.
	ContentMod OptNilHttpRouterConfigDetailsForwardContentMod `json:"content_mod"`
}

// GetScheme returns the value of Scheme.
func (s *HttpRouterConfigDetailsForward) GetScheme() OptNilString {
	return s.Scheme
}

// GetContentMod returns the value of ContentMod.
func (s *HttpRouterConfigDetailsForward) GetContentMod() OptNilHttpRouterConfigDetailsForwardContentMod {
	return s.ContentMod
}

// SetScheme sets the value of Scheme.
func (s *HttpRouterConfigDetailsForward) SetScheme(val OptNilString) {
	s.Scheme = val
}

// SetContentMod sets the value of ContentMod.
func (s *HttpRouterConfigDetailsForward) SetContentMod(val OptNilHttpRouterConfigDetailsForwardContentMod) {
	s.ContentMod = val
}

// Allows the load balancer to modify content before it reaches the user.
type HttpRouterConfigDetailsForwardContentMod struct {
	// An array that describes a list of replacement match/value pairs.
	Replace OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray `json:"replace"`
}

// GetReplace returns the value of Replace.
func (s *HttpRouterConfigDetailsForwardContentMod) GetReplace() OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray {
	return s.Replace
}

// SetReplace sets the value of Replace.
func (s *HttpRouterConfigDetailsForwardContentMod) SetReplace(val OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) {
	s.Replace = val
}

type HttpRouterConfigDetailsForwardContentModReplaceItem struct {
	// String that will be replaced.
	Match string `json:"match"`
	// Replacement value.
	Value string `json:"value"`
}

// GetMatch returns the value of Match.
func (s *HttpRouterConfigDetailsForwardContentModReplaceItem) GetMatch() string {
	return s.Match
}

// GetValue returns the value of Value.
func (s *HttpRouterConfigDetailsForwardContentModReplaceItem) GetValue() string {
	return s.Value
}

// SetMatch sets the value of Match.
func (s *HttpRouterConfigDetailsForwardContentModReplaceItem) SetMatch(val string) {
	s.Match = val
}

// SetValue sets the value of Value.
func (s *HttpRouterConfigDetailsForwardContentModReplaceItem) SetValue(val string) {
	s.Value = val
}

type HttpRouterConfigDetailsProxy struct {
	// The proxy domain for this router.
	Domain OptNilString `json:"domain"`
	// Allows the load balancer to modify content before it reaches the user.
	ContentMod OptNilHttpRouterConfigDetailsProxyContentMod `json:"content_mod"`
}

// GetDomain returns the value of Domain.
func (s *HttpRouterConfigDetailsProxy) GetDomain() OptNilString {
	return s.Domain
}

// GetContentMod returns the value of ContentMod.
func (s *HttpRouterConfigDetailsProxy) GetContentMod() OptNilHttpRouterConfigDetailsProxyContentMod {
	return s.ContentMod
}

// SetDomain sets the value of Domain.
func (s *HttpRouterConfigDetailsProxy) SetDomain(val OptNilString) {
	s.Domain = val
}

// SetContentMod sets the value of ContentMod.
func (s *HttpRouterConfigDetailsProxy) SetContentMod(val OptNilHttpRouterConfigDetailsProxyContentMod) {
	s.ContentMod = val
}

// Allows the load balancer to modify content before it reaches the user.
type HttpRouterConfigDetailsProxyContentMod struct {
	// An array that describes a list of replacement match/value pairs.
	Replace OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray `json:"replace"`
}

// GetReplace returns the value of Replace.
func (s *HttpRouterConfigDetailsProxyContentMod) GetReplace() OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray {
	return s.Replace
}

// SetReplace sets the value of Replace.
func (s *HttpRouterConfigDetailsProxyContentMod) SetReplace(val OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) {
	s.Replace = val
}

type HttpRouterConfigDetailsProxyContentModReplaceItem struct {
	// String that will be replaced.
	Match string `json:"match"`
	// Replacement value.
	Value string `json:"value"`
}

// GetMatch returns the value of Match.
func (s *HttpRouterConfigDetailsProxyContentModReplaceItem) GetMatch() string {
	return s.Match
}

// GetValue returns the value of Value.
func (s *HttpRouterConfigDetailsProxyContentModReplaceItem) GetValue() string {
	return s.Value
}

// SetMatch sets the value of Match.
func (s *HttpRouterConfigDetailsProxyContentModReplaceItem) SetMatch(val string) {
	s.Match = val
}

// SetValue sets the value of Value.
func (s *HttpRouterConfigDetailsProxyContentModReplaceItem) SetValue(val string) {
	s.Value = val
}

// Defines a built-in redirect for HTTP mode routers.
type HttpRouterConfigDetailsRedirect struct {
	// If enabled and a sibling controller exists for port 443, requests will be auto redirected to it.
	// Essentially sets up automatic TLS redirection for this router.
	AutoHTTPSRedirect bool `json:"auto_https_redirect"`
	// If true, any request comes in with "www" prefix will be permanently redirected to the same path
	// without www.
	RemoveWww bool `json:"remove_www"`
	// The port to redirect traffic to.
	Port OptNilInt `json:"port"`
	// The scheme to redirect to. (i.e. `https`).
	Scheme OptNilString `json:"scheme"`
	// A specific URL to redirect to.
	URL OptNilString `json:"url"`
}

// GetAutoHTTPSRedirect returns the value of AutoHTTPSRedirect.
func (s *HttpRouterConfigDetailsRedirect) GetAutoHTTPSRedirect() bool {
	return s.AutoHTTPSRedirect
}

// GetRemoveWww returns the value of RemoveWww.
func (s *HttpRouterConfigDetailsRedirect) GetRemoveWww() bool {
	return s.RemoveWww
}

// GetPort returns the value of Port.
func (s *HttpRouterConfigDetailsRedirect) GetPort() OptNilInt {
	return s.Port
}

// GetScheme returns the value of Scheme.
func (s *HttpRouterConfigDetailsRedirect) GetScheme() OptNilString {
	return s.Scheme
}

// GetURL returns the value of URL.
func (s *HttpRouterConfigDetailsRedirect) GetURL() OptNilString {
	return s.URL
}

// SetAutoHTTPSRedirect sets the value of AutoHTTPSRedirect.
func (s *HttpRouterConfigDetailsRedirect) SetAutoHTTPSRedirect(val bool) {
	s.AutoHTTPSRedirect = val
}

// SetRemoveWww sets the value of RemoveWww.
func (s *HttpRouterConfigDetailsRedirect) SetRemoveWww(val bool) {
	s.RemoveWww = val
}

// SetPort sets the value of Port.
func (s *HttpRouterConfigDetailsRedirect) SetPort(val OptNilInt) {
	s.Port = val
}

// SetScheme sets the value of Scheme.
func (s *HttpRouterConfigDetailsRedirect) SetScheme(val OptNilString) {
	s.Scheme = val
}

// SetURL sets the value of URL.
func (s *HttpRouterConfigDetailsRedirect) SetURL(val OptNilString) {
	s.URL = val
}

type HttpRouterConfigType string

const (
	HttpRouterConfigTypeHTTP HttpRouterConfigType = "http"
)

// AllValues returns all HttpRouterConfigType values.
func (HttpRouterConfigType) AllValues() []HttpRouterConfigType {
	return []HttpRouterConfigType{
		HttpRouterConfigTypeHTTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HttpRouterConfigType) MarshalText() ([]byte, error) {
	switch s {
	case HttpRouterConfigTypeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HttpRouterConfigType) UnmarshalText(data []byte) error {
	switch HttpRouterConfigType(data) {
	case HttpRouterConfigTypeHTTP:
		*s = HttpRouterConfigTypeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional configuration options for the HTTP transport mode.
// Ref: #/components/schemas/HttpTransportConfig
type HttpTransportConfig struct {
	Details HttpTransportConfigDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *HttpTransportConfig) GetDetails() HttpTransportConfigDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *HttpTransportConfig) SetDetails(val HttpTransportConfigDetails) {
	s.Details = val
}

type HttpTransportConfigDetails struct {
	// Defines extra configuration options connections to the load balancer.
	Connections HttpTransportConfigDetailsConnections `json:"connections"`
	// Configuration options for how telemetry is handled.
	Telemetry HttpTransportConfigDetailsTelemetry `json:"telemetry"`
}

// GetConnections returns the value of Connections.
func (s *HttpTransportConfigDetails) GetConnections() HttpTransportConfigDetailsConnections {
	return s.Connections
}

// GetTelemetry returns the value of Telemetry.
func (s *HttpTransportConfigDetails) GetTelemetry() HttpTransportConfigDetailsTelemetry {
	return s.Telemetry
}

// SetConnections sets the value of Connections.
func (s *HttpTransportConfigDetails) SetConnections(val HttpTransportConfigDetailsConnections) {
	s.Connections = val
}

// SetTelemetry sets the value of Telemetry.
func (s *HttpTransportConfigDetails) SetTelemetry(val HttpTransportConfigDetailsTelemetry) {
	s.Telemetry = val
}

// Defines extra configuration options connections to the load balancer.
type HttpTransportConfigDetailsConnections struct {
	// Maximum number of simultaneous connections (via http/2) per connection.
	MaxIdleConnsPerConnection NilInt `json:"max_idle_conns_per_connection"`
}

// GetMaxIdleConnsPerConnection returns the value of MaxIdleConnsPerConnection.
func (s *HttpTransportConfigDetailsConnections) GetMaxIdleConnsPerConnection() NilInt {
	return s.MaxIdleConnsPerConnection
}

// SetMaxIdleConnsPerConnection sets the value of MaxIdleConnsPerConnection.
func (s *HttpTransportConfigDetailsConnections) SetMaxIdleConnsPerConnection(val NilInt) {
	s.MaxIdleConnsPerConnection = val
}

// Configuration options for how telemetry is handled.
type HttpTransportConfigDetailsTelemetry struct {
	// Determines if the load balancer will track url metrics. Defaults to false.
	DisableURLTracking bool `json:"disable_url_tracking"`
	// Determines if the load balancer will track router metrics. Defaults to false.
	DisableRouterMetrics bool `json:"disable_router_metrics"`
	// Determines how many URLs the load balancer will track at one time. Defaults to 150.
	MaxTrackableUrls OptNilInt `json:"max_trackable_urls"`
	// Determines how long the load balancer will track a URL from its last hit. Helps reduce noise by
	// not tracking URLs that are occasionally hit. Defaults to 8h.
	TrackingWindow OptNilString `json:"tracking_window"`
	// Whether or not to track invalid requests. An invalid request is a request that came in that no
	// router existed for. Usually this means bot requests. Defaults to false.
	TrackInvalidRequests OptNilBool `json:"track_invalid_requests"`
	// Group paths is used to group URLs.  The key is the URL and the value is the regex used to match
	// URLs.
	GroupPaths OptNilHttpTransportConfigDetailsTelemetryGroupPaths `json:"group_paths"`
	// An array of paths to exclude from tracking.
	IgnorePaths OptNilStringArray `json:"ignore_paths"`
}

// GetDisableURLTracking returns the value of DisableURLTracking.
func (s *HttpTransportConfigDetailsTelemetry) GetDisableURLTracking() bool {
	return s.DisableURLTracking
}

// GetDisableRouterMetrics returns the value of DisableRouterMetrics.
func (s *HttpTransportConfigDetailsTelemetry) GetDisableRouterMetrics() bool {
	return s.DisableRouterMetrics
}

// GetMaxTrackableUrls returns the value of MaxTrackableUrls.
func (s *HttpTransportConfigDetailsTelemetry) GetMaxTrackableUrls() OptNilInt {
	return s.MaxTrackableUrls
}

// GetTrackingWindow returns the value of TrackingWindow.
func (s *HttpTransportConfigDetailsTelemetry) GetTrackingWindow() OptNilString {
	return s.TrackingWindow
}

// GetTrackInvalidRequests returns the value of TrackInvalidRequests.
func (s *HttpTransportConfigDetailsTelemetry) GetTrackInvalidRequests() OptNilBool {
	return s.TrackInvalidRequests
}

// GetGroupPaths returns the value of GroupPaths.
func (s *HttpTransportConfigDetailsTelemetry) GetGroupPaths() OptNilHttpTransportConfigDetailsTelemetryGroupPaths {
	return s.GroupPaths
}

// GetIgnorePaths returns the value of IgnorePaths.
func (s *HttpTransportConfigDetailsTelemetry) GetIgnorePaths() OptNilStringArray {
	return s.IgnorePaths
}

// SetDisableURLTracking sets the value of DisableURLTracking.
func (s *HttpTransportConfigDetailsTelemetry) SetDisableURLTracking(val bool) {
	s.DisableURLTracking = val
}

// SetDisableRouterMetrics sets the value of DisableRouterMetrics.
func (s *HttpTransportConfigDetailsTelemetry) SetDisableRouterMetrics(val bool) {
	s.DisableRouterMetrics = val
}

// SetMaxTrackableUrls sets the value of MaxTrackableUrls.
func (s *HttpTransportConfigDetailsTelemetry) SetMaxTrackableUrls(val OptNilInt) {
	s.MaxTrackableUrls = val
}

// SetTrackingWindow sets the value of TrackingWindow.
func (s *HttpTransportConfigDetailsTelemetry) SetTrackingWindow(val OptNilString) {
	s.TrackingWindow = val
}

// SetTrackInvalidRequests sets the value of TrackInvalidRequests.
func (s *HttpTransportConfigDetailsTelemetry) SetTrackInvalidRequests(val OptNilBool) {
	s.TrackInvalidRequests = val
}

// SetGroupPaths sets the value of GroupPaths.
func (s *HttpTransportConfigDetailsTelemetry) SetGroupPaths(val OptNilHttpTransportConfigDetailsTelemetryGroupPaths) {
	s.GroupPaths = val
}

// SetIgnorePaths sets the value of IgnorePaths.
func (s *HttpTransportConfigDetailsTelemetry) SetIgnorePaths(val OptNilStringArray) {
	s.IgnorePaths = val
}

// Group paths is used to group URLs.  The key is the URL and the value is the regex used to match
// URLs.
type HttpTransportConfigDetailsTelemetryGroupPaths map[string]string

func (s *HttpTransportConfigDetailsTelemetryGroupPaths) init() HttpTransportConfigDetailsTelemetryGroupPaths {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type HttpTransportConfigType string

const (
	HttpTransportConfigTypeHTTP HttpTransportConfigType = "http"
)

// AllValues returns all HttpTransportConfigType values.
func (HttpTransportConfigType) AllValues() []HttpTransportConfigType {
	return []HttpTransportConfigType{
		HttpTransportConfigTypeHTTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HttpTransportConfigType) MarshalText() ([]byte, error) {
	switch s {
	case HttpTransportConfigTypeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HttpTransportConfigType) UnmarshalText(data []byte) error {
	switch HttpTransportConfigType(data) {
	case HttpTransportConfigTypeHTTP:
		*s = HttpTransportConfigTypeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A hub resource.
// Ref: #/components/schemas/Hub
type Hub struct {
	ID         ID         `json:"id"`
	Identifier Identifier `json:"identifier"`
	// A name for the hub.
	Name     string        `json:"name"`
	Creator  CreatorScope  `json:"creator"`
	Events   HubEvents     `json:"events"`
	State    HubState      `json:"state"`
	Webhooks HubWebhooks   `json:"webhooks"`
	Billing  NilHubBilling `json:"billing"`
	Meta     OptHubMeta    `json:"meta"`
}

// GetID returns the value of ID.
func (s *Hub) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *Hub) GetIdentifier() Identifier {
	return s.Identifier
}

// GetName returns the value of Name.
func (s *Hub) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *Hub) GetCreator() CreatorScope {
	return s.Creator
}

// GetEvents returns the value of Events.
func (s *Hub) GetEvents() HubEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Hub) GetState() HubState {
	return s.State
}

// GetWebhooks returns the value of Webhooks.
func (s *Hub) GetWebhooks() HubWebhooks {
	return s.Webhooks
}

// GetBilling returns the value of Billing.
func (s *Hub) GetBilling() NilHubBilling {
	return s.Billing
}

// GetMeta returns the value of Meta.
func (s *Hub) GetMeta() OptHubMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Hub) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *Hub) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetName sets the value of Name.
func (s *Hub) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *Hub) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEvents sets the value of Events.
func (s *Hub) SetEvents(val HubEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Hub) SetState(val HubState) {
	s.State = val
}

// SetWebhooks sets the value of Webhooks.
func (s *Hub) SetWebhooks(val HubWebhooks) {
	s.Webhooks = val
}

// SetBilling sets the value of Billing.
func (s *Hub) SetBilling(val NilHubBilling) {
	s.Billing = val
}

// SetMeta sets the value of Meta.
func (s *Hub) SetMeta(val OptHubMeta) {
	s.Meta = val
}

type HubAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *HubAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *HubAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// A billing profile for a given hub.
type HubBilling struct {
	Term Term `json:"term"`
	// A boolean where true represents this account being approved to use a prepaid card for billing
	// transactions.
	AllowPrepaid OptBool `json:"allow_prepaid"`
	// A boolean where true represents invoices have been paused on this hub for one reason or another.
	PauseInvoices bool `json:"pause_invoices"`
	// A boolean where true means this billing is disabled on this hub.
	Disable OptBool `json:"disable"`
	// Information about the plan associated with this hub.
	Plans HubBillingPlans `json:"plans"`
	// An array of email addresses to whom the billing invoices will be sent to. If left empty, they will
	// be sent to the owner of this hub.
	Emails []string `json:"emails"`
}

// GetTerm returns the value of Term.
func (s *HubBilling) GetTerm() Term {
	return s.Term
}

// GetAllowPrepaid returns the value of AllowPrepaid.
func (s *HubBilling) GetAllowPrepaid() OptBool {
	return s.AllowPrepaid
}

// GetPauseInvoices returns the value of PauseInvoices.
func (s *HubBilling) GetPauseInvoices() bool {
	return s.PauseInvoices
}

// GetDisable returns the value of Disable.
func (s *HubBilling) GetDisable() OptBool {
	return s.Disable
}

// GetPlans returns the value of Plans.
func (s *HubBilling) GetPlans() HubBillingPlans {
	return s.Plans
}

// GetEmails returns the value of Emails.
func (s *HubBilling) GetEmails() []string {
	return s.Emails
}

// SetTerm sets the value of Term.
func (s *HubBilling) SetTerm(val Term) {
	s.Term = val
}

// SetAllowPrepaid sets the value of AllowPrepaid.
func (s *HubBilling) SetAllowPrepaid(val OptBool) {
	s.AllowPrepaid = val
}

// SetPauseInvoices sets the value of PauseInvoices.
func (s *HubBilling) SetPauseInvoices(val bool) {
	s.PauseInvoices = val
}

// SetDisable sets the value of Disable.
func (s *HubBilling) SetDisable(val OptBool) {
	s.Disable = val
}

// SetPlans sets the value of Plans.
func (s *HubBilling) SetPlans(val HubBillingPlans) {
	s.Plans = val
}

// SetEmails sets the value of Emails.
func (s *HubBilling) SetEmails(val []string) {
	s.Emails = val
}

// Information about the plan associated with this hub.
type HubBillingPlans struct {
	// An ID referencing the pricing tier applied to this hub.
	TierID NilString `json:"tier_id"`
	// An ID referencing the support plan applied to this hub.
	SupportID NilString `json:"support_id"`
}

// GetTierID returns the value of TierID.
func (s *HubBillingPlans) GetTierID() NilString {
	return s.TierID
}

// GetSupportID returns the value of SupportID.
func (s *HubBillingPlans) GetSupportID() NilString {
	return s.SupportID
}

// SetTierID sets the value of TierID.
func (s *HubBillingPlans) SetTierID(val NilString) {
	s.TierID = val
}

// SetSupportID sets the value of SupportID.
func (s *HubBillingPlans) SetSupportID(val NilString) {
	s.SupportID = val
}

// A collection of timestamps for each event in the hub's lifetime.
// Ref: #/components/schemas/HubEvents
type HubEvents struct {
	Created          DateTime    `json:"created"`
	Updated          DateTime    `json:"updated"`
	Deleted          DateTime    `json:"deleted"`
	Converted        OptDateTime `json:"converted"`
	FirstOrder       OptDateTime `json:"first_order"`
	FirstProvider    OptDateTime `json:"first_provider"`
	FirstServer      OptDateTime `json:"first_server"`
	FirstEnvironment OptDateTime `json:"first_environment"`
	FirstImage       OptDateTime `json:"first_image"`
	FirstContainer   OptDateTime `json:"first_container"`
}

// GetCreated returns the value of Created.
func (s *HubEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *HubEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *HubEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetConverted returns the value of Converted.
func (s *HubEvents) GetConverted() OptDateTime {
	return s.Converted
}

// GetFirstOrder returns the value of FirstOrder.
func (s *HubEvents) GetFirstOrder() OptDateTime {
	return s.FirstOrder
}

// GetFirstProvider returns the value of FirstProvider.
func (s *HubEvents) GetFirstProvider() OptDateTime {
	return s.FirstProvider
}

// GetFirstServer returns the value of FirstServer.
func (s *HubEvents) GetFirstServer() OptDateTime {
	return s.FirstServer
}

// GetFirstEnvironment returns the value of FirstEnvironment.
func (s *HubEvents) GetFirstEnvironment() OptDateTime {
	return s.FirstEnvironment
}

// GetFirstImage returns the value of FirstImage.
func (s *HubEvents) GetFirstImage() OptDateTime {
	return s.FirstImage
}

// GetFirstContainer returns the value of FirstContainer.
func (s *HubEvents) GetFirstContainer() OptDateTime {
	return s.FirstContainer
}

// SetCreated sets the value of Created.
func (s *HubEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *HubEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *HubEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetConverted sets the value of Converted.
func (s *HubEvents) SetConverted(val OptDateTime) {
	s.Converted = val
}

// SetFirstOrder sets the value of FirstOrder.
func (s *HubEvents) SetFirstOrder(val OptDateTime) {
	s.FirstOrder = val
}

// SetFirstProvider sets the value of FirstProvider.
func (s *HubEvents) SetFirstProvider(val OptDateTime) {
	s.FirstProvider = val
}

// SetFirstServer sets the value of FirstServer.
func (s *HubEvents) SetFirstServer(val OptDateTime) {
	s.FirstServer = val
}

// SetFirstEnvironment sets the value of FirstEnvironment.
func (s *HubEvents) SetFirstEnvironment(val OptDateTime) {
	s.FirstEnvironment = val
}

// SetFirstImage sets the value of FirstImage.
func (s *HubEvents) SetFirstImage(val OptDateTime) {
	s.FirstImage = val
}

// SetFirstContainer sets the value of FirstContainer.
func (s *HubEvents) SetFirstContainer(val OptDateTime) {
	s.FirstContainer = val
}

type HubID string

// A membership resource that is scoped to an individual hub.
// Ref: #/components/schemas/HubMembership
type HubMembership struct {
	ID ID `json:"id"`
	// An ID for the account associated with the given membership.
	AccountID OptString `json:"account_id"`
	HubID     HubID     `json:"hub_id"`
	// A collection of timestamps for each event in the membership's lifetime.
	Events HubMembershipEvents `json:"events"`
	RoleID OptID               `json:"role_id"`
	// Information about this member's permissions for a given hub.
	Permissions HubMembershipPermissions `json:"permissions"`
	// Preference information set by the user for the membership.
	Preferences OptHubMembershipPreferences `json:"preferences"`
	State       MembershipState             `json:"state"`
	Invitation  Invitation                  `json:"invitation"`
	// If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts
	// do not consume a "membership" for a given hub.
	Cycle OptHubMembershipCycle `json:"cycle"`
	Meta  OptHubMembershipMeta  `json:"meta"`
}

// GetID returns the value of ID.
func (s *HubMembership) GetID() ID {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *HubMembership) GetAccountID() OptString {
	return s.AccountID
}

// GetHubID returns the value of HubID.
func (s *HubMembership) GetHubID() HubID {
	return s.HubID
}

// GetEvents returns the value of Events.
func (s *HubMembership) GetEvents() HubMembershipEvents {
	return s.Events
}

// GetRoleID returns the value of RoleID.
func (s *HubMembership) GetRoleID() OptID {
	return s.RoleID
}

// GetPermissions returns the value of Permissions.
func (s *HubMembership) GetPermissions() HubMembershipPermissions {
	return s.Permissions
}

// GetPreferences returns the value of Preferences.
func (s *HubMembership) GetPreferences() OptHubMembershipPreferences {
	return s.Preferences
}

// GetState returns the value of State.
func (s *HubMembership) GetState() MembershipState {
	return s.State
}

// GetInvitation returns the value of Invitation.
func (s *HubMembership) GetInvitation() Invitation {
	return s.Invitation
}

// GetCycle returns the value of Cycle.
func (s *HubMembership) GetCycle() OptHubMembershipCycle {
	return s.Cycle
}

// GetMeta returns the value of Meta.
func (s *HubMembership) GetMeta() OptHubMembershipMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *HubMembership) SetID(val ID) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *HubMembership) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetHubID sets the value of HubID.
func (s *HubMembership) SetHubID(val HubID) {
	s.HubID = val
}

// SetEvents sets the value of Events.
func (s *HubMembership) SetEvents(val HubMembershipEvents) {
	s.Events = val
}

// SetRoleID sets the value of RoleID.
func (s *HubMembership) SetRoleID(val OptID) {
	s.RoleID = val
}

// SetPermissions sets the value of Permissions.
func (s *HubMembership) SetPermissions(val HubMembershipPermissions) {
	s.Permissions = val
}

// SetPreferences sets the value of Preferences.
func (s *HubMembership) SetPreferences(val OptHubMembershipPreferences) {
	s.Preferences = val
}

// SetState sets the value of State.
func (s *HubMembership) SetState(val MembershipState) {
	s.State = val
}

// SetInvitation sets the value of Invitation.
func (s *HubMembership) SetInvitation(val Invitation) {
	s.Invitation = val
}

// SetCycle sets the value of Cycle.
func (s *HubMembership) SetCycle(val OptHubMembershipCycle) {
	s.Cycle = val
}

// SetMeta sets the value of Meta.
func (s *HubMembership) SetMeta(val OptHubMembershipMeta) {
	s.Meta = val
}

// If this member is a Cycle employee, their employee ID will be listed here. Cycle employee accounts
// do not consume a "membership" for a given hub.
type HubMembershipCycle struct {
	// The ID of the employee this membership is associated with.
	EmployeeID string `json:"employee_id"`
}

// GetEmployeeID returns the value of EmployeeID.
func (s *HubMembershipCycle) GetEmployeeID() string {
	return s.EmployeeID
}

// SetEmployeeID sets the value of EmployeeID.
func (s *HubMembershipCycle) SetEmployeeID(val string) {
	s.EmployeeID = val
}

// A collection of timestamps for each event in the membership's lifetime.
type HubMembershipEvents struct {
	Created OptDateTime `json:"created"`
	Updated OptDateTime `json:"updated"`
	Deleted OptDateTime `json:"deleted"`
	Joined  DateTime    `json:"joined"`
}

// GetCreated returns the value of Created.
func (s *HubMembershipEvents) GetCreated() OptDateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *HubMembershipEvents) GetUpdated() OptDateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *HubMembershipEvents) GetDeleted() OptDateTime {
	return s.Deleted
}

// GetJoined returns the value of Joined.
func (s *HubMembershipEvents) GetJoined() DateTime {
	return s.Joined
}

// SetCreated sets the value of Created.
func (s *HubMembershipEvents) SetCreated(val OptDateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *HubMembershipEvents) SetUpdated(val OptDateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *HubMembershipEvents) SetDeleted(val OptDateTime) {
	s.Deleted = val
}

// SetJoined sets the value of Joined.
func (s *HubMembershipEvents) SetJoined(val DateTime) {
	s.Joined = val
}

// A resource thats associated with a hub membershp.
// Ref: #/components/schemas/HubMembershipIncludes
type HubMembershipIncludes struct {
	// A record with an ID mapped to a public account for the account that sent this memberships initial
	// invite.
	Senders OptHubMembershipIncludesSenders `json:"senders"`
	// A record with an ID mapped to a public account.
	Accounts OptHubMembershipIncludesAccounts `json:"accounts"`
	// A record with an ID mapped to a hub resource.
	Hubs OptHubMembershipIncludesHubs `json:"hubs"`
	// A map of Roles relevant to this Hub Membership, keyed by the Role ID.
	Roles OptHubMembershipIncludesRoles `json:"roles"`
	// A map of Roles relevant to this Hub Membership, keyed by the Role ID.
	RolesIdentifiers OptHubMembershipIncludesRolesIdentifiers `json:"roles:identifiers"`
}

// GetSenders returns the value of Senders.
func (s *HubMembershipIncludes) GetSenders() OptHubMembershipIncludesSenders {
	return s.Senders
}

// GetAccounts returns the value of Accounts.
func (s *HubMembershipIncludes) GetAccounts() OptHubMembershipIncludesAccounts {
	return s.Accounts
}

// GetHubs returns the value of Hubs.
func (s *HubMembershipIncludes) GetHubs() OptHubMembershipIncludesHubs {
	return s.Hubs
}

// GetRoles returns the value of Roles.
func (s *HubMembershipIncludes) GetRoles() OptHubMembershipIncludesRoles {
	return s.Roles
}

// GetRolesIdentifiers returns the value of RolesIdentifiers.
func (s *HubMembershipIncludes) GetRolesIdentifiers() OptHubMembershipIncludesRolesIdentifiers {
	return s.RolesIdentifiers
}

// SetSenders sets the value of Senders.
func (s *HubMembershipIncludes) SetSenders(val OptHubMembershipIncludesSenders) {
	s.Senders = val
}

// SetAccounts sets the value of Accounts.
func (s *HubMembershipIncludes) SetAccounts(val OptHubMembershipIncludesAccounts) {
	s.Accounts = val
}

// SetHubs sets the value of Hubs.
func (s *HubMembershipIncludes) SetHubs(val OptHubMembershipIncludesHubs) {
	s.Hubs = val
}

// SetRoles sets the value of Roles.
func (s *HubMembershipIncludes) SetRoles(val OptHubMembershipIncludesRoles) {
	s.Roles = val
}

// SetRolesIdentifiers sets the value of RolesIdentifiers.
func (s *HubMembershipIncludes) SetRolesIdentifiers(val OptHubMembershipIncludesRolesIdentifiers) {
	s.RolesIdentifiers = val
}

// A record with an ID mapped to a public account.
type HubMembershipIncludesAccounts map[string]PublicAccount

func (s *HubMembershipIncludesAccounts) init() HubMembershipIncludesAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// A record with an ID mapped to a hub resource.
type HubMembershipIncludesHubs map[string]Hub

func (s *HubMembershipIncludesHubs) init() HubMembershipIncludesHubs {
	m := *s
	if m == nil {
		m = map[string]Hub{}
		*s = m
	}
	return m
}

// A map of Roles relevant to this Hub Membership, keyed by the Role ID.
type HubMembershipIncludesRoles map[string]Role

func (s *HubMembershipIncludesRoles) init() HubMembershipIncludesRoles {
	m := *s
	if m == nil {
		m = map[string]Role{}
		*s = m
	}
	return m
}

// A map of Roles relevant to this Hub Membership, keyed by the Role ID.
type HubMembershipIncludesRolesIdentifiers map[string]ID

func (s *HubMembershipIncludesRolesIdentifiers) init() HubMembershipIncludesRolesIdentifiers {
	m := *s
	if m == nil {
		m = map[string]ID{}
		*s = m
	}
	return m
}

// A record with an ID mapped to a public account for the account that sent this memberships initial
// invite.
type HubMembershipIncludesSenders struct {
	// A record with an ID mapped to a public account.
	Accounts OptHubMembershipIncludesSendersAccounts `json:"accounts"`
}

// GetAccounts returns the value of Accounts.
func (s *HubMembershipIncludesSenders) GetAccounts() OptHubMembershipIncludesSendersAccounts {
	return s.Accounts
}

// SetAccounts sets the value of Accounts.
func (s *HubMembershipIncludesSenders) SetAccounts(val OptHubMembershipIncludesSendersAccounts) {
	s.Accounts = val
}

// A record with an ID mapped to a public account.
type HubMembershipIncludesSendersAccounts map[string]PublicAccount

func (s *HubMembershipIncludesSendersAccounts) init() HubMembershipIncludesSendersAccounts {
	m := *s
	if m == nil {
		m = map[string]PublicAccount{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to a membership.
// Ref: #/components/schemas/HubMembershipMeta
type HubMembershipMeta struct {
	Capabilities OptHubMembershipMetaCapabilities `json:"capabilities"`
}

// GetCapabilities returns the value of Capabilities.
func (s *HubMembershipMeta) GetCapabilities() OptHubMembershipMetaCapabilities {
	return s.Capabilities
}

// SetCapabilities sets the value of Capabilities.
func (s *HubMembershipMeta) SetCapabilities(val OptHubMembershipMetaCapabilities) {
	s.Capabilities = val
}

type HubMembershipMetaCapabilities struct {
	All      bool                  `json:"all"`
	Specific OptNilCapabilityArray `json:"specific"`
}

// GetAll returns the value of All.
func (s *HubMembershipMetaCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *HubMembershipMetaCapabilities) GetSpecific() OptNilCapabilityArray {
	return s.Specific
}

// SetAll sets the value of All.
func (s *HubMembershipMetaCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *HubMembershipMetaCapabilities) SetSpecific(val OptNilCapabilityArray) {
	s.Specific = val
}

// Information about this member's permissions for a given hub.
type HubMembershipPermissions struct {
	// A boolean where true represents the member has access to view and manage all environments for the
	// hub.
	AllEnvironments bool `json:"all_environments"`
	// An array of environments this membership has access to.
	Environments []HubMembershipPermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *HubMembershipPermissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *HubMembershipPermissions) GetEnvironments() []HubMembershipPermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *HubMembershipPermissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *HubMembershipPermissions) SetEnvironments(val []HubMembershipPermissionsEnvironmentsItem) {
	s.Environments = val
}

// Environment membership resources.
type HubMembershipPermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean where true represents this environment can be managed by the membership (i.e. its not
	// just read-only).
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *HubMembershipPermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *HubMembershipPermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *HubMembershipPermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *HubMembershipPermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// Preference information set by the user for the membership.
type HubMembershipPreferences struct {
	Portal HubMembershipPreferencesPortal `json:"portal"`
	Email  HubMembershipPreferencesEmail  `json:"email"`
}

// GetPortal returns the value of Portal.
func (s *HubMembershipPreferences) GetPortal() HubMembershipPreferencesPortal {
	return s.Portal
}

// GetEmail returns the value of Email.
func (s *HubMembershipPreferences) GetEmail() HubMembershipPreferencesEmail {
	return s.Email
}

// SetPortal sets the value of Portal.
func (s *HubMembershipPreferences) SetPortal(val HubMembershipPreferencesPortal) {
	s.Portal = val
}

// SetEmail sets the value of Email.
func (s *HubMembershipPreferences) SetEmail(val HubMembershipPreferencesEmail) {
	s.Email = val
}

type HubMembershipPreferencesEmail struct {
	Notificaitons OptHubMembershipPreferencesEmailNotificaitons `json:"notificaitons"`
}

// GetNotificaitons returns the value of Notificaitons.
func (s *HubMembershipPreferencesEmail) GetNotificaitons() OptHubMembershipPreferencesEmailNotificaitons {
	return s.Notificaitons
}

// SetNotificaitons sets the value of Notificaitons.
func (s *HubMembershipPreferencesEmail) SetNotificaitons(val OptHubMembershipPreferencesEmailNotificaitons) {
	s.Notificaitons = val
}

type HubMembershipPreferencesEmailNotificaitons struct {
	Server HubMembershipPreferencesEmailNotificaitonsServer `json:"server"`
}

// GetServer returns the value of Server.
func (s *HubMembershipPreferencesEmailNotificaitons) GetServer() HubMembershipPreferencesEmailNotificaitonsServer {
	return s.Server
}

// SetServer sets the value of Server.
func (s *HubMembershipPreferencesEmailNotificaitons) SetServer(val HubMembershipPreferencesEmailNotificaitonsServer) {
	s.Server = val
}

type HubMembershipPreferencesEmailNotificaitonsServer struct {
	New     NilBool `json:"new"`
	Offline NilBool `json:"offline"`
}

// GetNew returns the value of New.
func (s *HubMembershipPreferencesEmailNotificaitonsServer) GetNew() NilBool {
	return s.New
}

// GetOffline returns the value of Offline.
func (s *HubMembershipPreferencesEmailNotificaitonsServer) GetOffline() NilBool {
	return s.Offline
}

// SetNew sets the value of New.
func (s *HubMembershipPreferencesEmailNotificaitonsServer) SetNew(val NilBool) {
	s.New = val
}

// SetOffline sets the value of Offline.
func (s *HubMembershipPreferencesEmailNotificaitonsServer) SetOffline(val NilBool) {
	s.Offline = val
}

type HubMembershipPreferencesPortal struct {
	Notifications HubMembershipPreferencesPortalNotifications `json:"notifications"`
}

// GetNotifications returns the value of Notifications.
func (s *HubMembershipPreferencesPortal) GetNotifications() HubMembershipPreferencesPortalNotifications {
	return s.Notifications
}

// SetNotifications sets the value of Notifications.
func (s *HubMembershipPreferencesPortal) SetNotifications(val HubMembershipPreferencesPortalNotifications) {
	s.Notifications = val
}

type HubMembershipPreferencesPortalNotifications struct {
	Jobs HubMembershipPreferencesPortalNotificationsJobs `json:"jobs"`
}

// GetJobs returns the value of Jobs.
func (s *HubMembershipPreferencesPortalNotifications) GetJobs() HubMembershipPreferencesPortalNotificationsJobs {
	return s.Jobs
}

// SetJobs sets the value of Jobs.
func (s *HubMembershipPreferencesPortalNotifications) SetJobs(val HubMembershipPreferencesPortalNotificationsJobs) {
	s.Jobs = val
}

type HubMembershipPreferencesPortalNotificationsJobs struct {
	ApikeyAlerts bool `json:"apikey_alerts"`
}

// GetApikeyAlerts returns the value of ApikeyAlerts.
func (s *HubMembershipPreferencesPortalNotificationsJobs) GetApikeyAlerts() bool {
	return s.ApikeyAlerts
}

// SetApikeyAlerts sets the value of ApikeyAlerts.
func (s *HubMembershipPreferencesPortalNotificationsJobs) SetApikeyAlerts(val bool) {
	s.ApikeyAlerts = val
}

// A list of meta fields that can be applied to a hub.
// Ref: #/components/schemas/HubMeta
type HubMeta struct {
	Membership OptHubMembership `json:"membership"`
}

// GetMembership returns the value of Membership.
func (s *HubMeta) GetMembership() OptHubMembership {
	return s.Membership
}

// SetMembership sets the value of Membership.
func (s *HubMeta) SetMembership(val OptHubMembership) {
	s.Membership = val
}

// Merged schema.
// Ref: #/components/schemas/HubState
type HubState struct {
	// The current state of the hub.
	Current HubStateCurrent `json:"current"`
	Changed DateTime        `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptHubStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *HubState) GetCurrent() HubStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *HubState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *HubState) GetError() OptHubStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *HubState) SetCurrent(val HubStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *HubState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *HubState) SetError(val OptHubStateError) {
	s.Error = val
}

// The current state of the hub.
type HubStateCurrent string

const (
	HubStateCurrentNew         HubStateCurrent = "new"
	HubStateCurrentConfiguring HubStateCurrent = "configuring"
	HubStateCurrentLive        HubStateCurrent = "live"
	HubStateCurrentInactive    HubStateCurrent = "inactive"
	HubStateCurrentDeleting    HubStateCurrent = "deleting"
	HubStateCurrentDeleted     HubStateCurrent = "deleted"
)

// AllValues returns all HubStateCurrent values.
func (HubStateCurrent) AllValues() []HubStateCurrent {
	return []HubStateCurrent{
		HubStateCurrentNew,
		HubStateCurrentConfiguring,
		HubStateCurrentLive,
		HubStateCurrentInactive,
		HubStateCurrentDeleting,
		HubStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HubStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case HubStateCurrentNew:
		return []byte(s), nil
	case HubStateCurrentConfiguring:
		return []byte(s), nil
	case HubStateCurrentLive:
		return []byte(s), nil
	case HubStateCurrentInactive:
		return []byte(s), nil
	case HubStateCurrentDeleting:
		return []byte(s), nil
	case HubStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HubStateCurrent) UnmarshalText(data []byte) error {
	switch HubStateCurrent(data) {
	case HubStateCurrentNew:
		*s = HubStateCurrentNew
		return nil
	case HubStateCurrentConfiguring:
		*s = HubStateCurrentConfiguring
		return nil
	case HubStateCurrentLive:
		*s = HubStateCurrentLive
		return nil
	case HubStateCurrentInactive:
		*s = HubStateCurrentInactive
		return nil
	case HubStateCurrentDeleting:
		*s = HubStateCurrentDeleting
		return nil
	case HubStateCurrentDeleted:
		*s = HubStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type HubStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *HubStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *HubStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *HubStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *HubStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A hub usage data point.
// Ref: #/components/schemas/HubUsageDatum
type HubUsageDatum struct {
	Time         string  `json:"time"`
	Servers      float64 `json:"servers"`
	Members      float64 `json:"members"`
	Environments float64 `json:"environments"`
	Containers   float64 `json:"containers"`
}

// GetTime returns the value of Time.
func (s *HubUsageDatum) GetTime() string {
	return s.Time
}

// GetServers returns the value of Servers.
func (s *HubUsageDatum) GetServers() float64 {
	return s.Servers
}

// GetMembers returns the value of Members.
func (s *HubUsageDatum) GetMembers() float64 {
	return s.Members
}

// GetEnvironments returns the value of Environments.
func (s *HubUsageDatum) GetEnvironments() float64 {
	return s.Environments
}

// GetContainers returns the value of Containers.
func (s *HubUsageDatum) GetContainers() float64 {
	return s.Containers
}

// SetTime sets the value of Time.
func (s *HubUsageDatum) SetTime(val string) {
	s.Time = val
}

// SetServers sets the value of Servers.
func (s *HubUsageDatum) SetServers(val float64) {
	s.Servers = val
}

// SetMembers sets the value of Members.
func (s *HubUsageDatum) SetMembers(val float64) {
	s.Members = val
}

// SetEnvironments sets the value of Environments.
func (s *HubUsageDatum) SetEnvironments(val float64) {
	s.Environments = val
}

// SetContainers sets the value of Containers.
func (s *HubUsageDatum) SetContainers(val float64) {
	s.Containers = val
}

// Hub related webhooks. When supplied, the given webhook will be called with a payload any time one
// of these events occurs.
// Ref: #/components/schemas/HubWebhooks
type HubWebhooks struct {
	// A webhook that is called any time a server is deployed to this hub. The payload will be a `Server`
	// object.
	ServerDeployed NilString `json:"server_deployed"`
	// A webhook that is called any time a server in this hub is deleted. The payload will be a `Server`
	// object.
	ServerDeleted NilString `json:"server_deleted"`
}

// GetServerDeployed returns the value of ServerDeployed.
func (s *HubWebhooks) GetServerDeployed() NilString {
	return s.ServerDeployed
}

// GetServerDeleted returns the value of ServerDeleted.
func (s *HubWebhooks) GetServerDeleted() NilString {
	return s.ServerDeleted
}

// SetServerDeployed sets the value of ServerDeployed.
func (s *HubWebhooks) SetServerDeployed(val NilString) {
	s.ServerDeployed = val
}

// SetServerDeleted sets the value of ServerDeleted.
func (s *HubWebhooks) SetServerDeleted(val NilString) {
	s.ServerDeleted = val
}

// HugeTLB data.
// Ref: #/components/schemas/HugeTLB
type HugeTLB struct {
	// The number of bytes being consumed by huge pages of all sizes.
	Usage OptInt `json:"usage"`
	// The maximum number of bytes allowed to be used for huge pages for this instance.
	Max OptInt `json:"max"`
	// The number of times the hugeTLB memory limit has been exceeded by this instance.
	FailCount OptInt `json:"fail_count"`
}

// GetUsage returns the value of Usage.
func (s *HugeTLB) GetUsage() OptInt {
	return s.Usage
}

// GetMax returns the value of Max.
func (s *HugeTLB) GetMax() OptInt {
	return s.Max
}

// GetFailCount returns the value of FailCount.
func (s *HugeTLB) GetFailCount() OptInt {
	return s.FailCount
}

// SetUsage sets the value of Usage.
func (s *HugeTLB) SetUsage(val OptInt) {
	s.Usage = val
}

// SetMax sets the value of Max.
func (s *HugeTLB) SetMax(val OptInt) {
	s.Max = val
}

// SetFailCount sets the value of FailCount.
func (s *HugeTLB) SetFailCount(val OptInt) {
	s.FailCount = val
}

type HybridIdentifier string

type ID string

// Details about an IP.
// Ref: #/components/schemas/Ip
type IP struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// The type of IP protocol this IP is.
	Kind IPKind `json:"kind"`
	// Information about the assignment of this IP.
	Assignment OptNilIPAssignment `json:"assignment"`
	// A unique identifier that associates the IP with an IP pool.
	PoolID string `json:"pool_id"`
	// The IP address.
	Address string `json:"address"`
	// The IP gateway.
	Gateway string `json:"gateway"`
	// The CIDR for the IP.
	Cidr  string  `json:"cidr"`
	State IpState `json:"state"`
}

// GetID returns the value of ID.
func (s *IP) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *IP) GetHubID() HubID {
	return s.HubID
}

// GetKind returns the value of Kind.
func (s *IP) GetKind() IPKind {
	return s.Kind
}

// GetAssignment returns the value of Assignment.
func (s *IP) GetAssignment() OptNilIPAssignment {
	return s.Assignment
}

// GetPoolID returns the value of PoolID.
func (s *IP) GetPoolID() string {
	return s.PoolID
}

// GetAddress returns the value of Address.
func (s *IP) GetAddress() string {
	return s.Address
}

// GetGateway returns the value of Gateway.
func (s *IP) GetGateway() string {
	return s.Gateway
}

// GetCidr returns the value of Cidr.
func (s *IP) GetCidr() string {
	return s.Cidr
}

// GetState returns the value of State.
func (s *IP) GetState() IpState {
	return s.State
}

// SetID sets the value of ID.
func (s *IP) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *IP) SetHubID(val HubID) {
	s.HubID = val
}

// SetKind sets the value of Kind.
func (s *IP) SetKind(val IPKind) {
	s.Kind = val
}

// SetAssignment sets the value of Assignment.
func (s *IP) SetAssignment(val OptNilIPAssignment) {
	s.Assignment = val
}

// SetPoolID sets the value of PoolID.
func (s *IP) SetPoolID(val string) {
	s.PoolID = val
}

// SetAddress sets the value of Address.
func (s *IP) SetAddress(val string) {
	s.Address = val
}

// SetGateway sets the value of Gateway.
func (s *IP) SetGateway(val string) {
	s.Gateway = val
}

// SetCidr sets the value of Cidr.
func (s *IP) SetCidr(val string) {
	s.Cidr = val
}

// SetState sets the value of State.
func (s *IP) SetState(val IpState) {
	s.State = val
}

// Information about the assignment of this IP.
type IPAssignment struct {
	ContainerID   string `json:"container_id"`
	InstanceID    string `json:"instance_id"`
	EnvironmentID string `json:"environment_id"`
}

// GetContainerID returns the value of ContainerID.
func (s *IPAssignment) GetContainerID() string {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *IPAssignment) GetInstanceID() string {
	return s.InstanceID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *IPAssignment) GetEnvironmentID() string {
	return s.EnvironmentID
}

// SetContainerID sets the value of ContainerID.
func (s *IPAssignment) SetContainerID(val string) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *IPAssignment) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *IPAssignment) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// The type of IP protocol this IP is.
type IPKind string

const (
	IPKindIpv4 IPKind = "ipv4"
	IPKindIpv6 IPKind = "ipv6"
)

// AllValues returns all IPKind values.
func (IPKind) AllValues() []IPKind {
	return []IPKind{
		IPKindIpv4,
		IPKindIpv6,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IPKind) MarshalText() ([]byte, error) {
	switch s {
	case IPKindIpv4:
		return []byte(s), nil
	case IPKindIpv6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IPKind) UnmarshalText(data []byte) error {
	switch IPKind(data) {
	case IPKindIpv4:
		*s = IPKindIpv4
		return nil
	case IPKindIpv6:
		*s = IPKindIpv6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Identifier string

// A map of identifiers to an array of resource IDs that are associated with it. All IDs point to the
// same type of resource.
// Ref: #/components/schemas/IdentifierIncludes
type IdentifierIncludes map[string][]ID

func (s *IdentifierIncludes) init() IdentifierIncludes {
	m := *s
	if m == nil {
		m = map[string][]ID{}
		*s = m
	}
	return m
}

// An image is a point in time build on a given image source, and what is distributed by Cycle to run
// containers.
// Ref: #/components/schemas/Image
type Image struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A user defined name for the image.
	Name string `json:"name"`
	// The image size in bytes.
	Size int `json:"size"`
	// An object that holds information about the image.
	About OptImageAbout `json:"about"`
	// Describes where the image is hosted.
	Backend ImageBackend `json:"backend"`
	// Any restrictions or requirements needed to run this image as a container.
	Requires ImageRequires `json:"requires"`
	// Any additional build details for this image.
	Build OptNilImageBuild `json:"build"`
	// Configuration options regarding the builder used to create/import this Image.
	Builder OptNilImageBuilder `json:"builder"`
	// Configuration settings for the image.
	Config  ImageConfig           `json:"config"`
	Source  OptImageSourceDetails `json:"source"`
	Creator OptCreatorScope       `json:"creator"`
	// Information about the Factory service that built/imported the Image into Cycle.
	Factory OptNilImageFactory `json:"factory"`
	State   ImageState         `json:"state"`
	// A collection of timestamps for each event in the image's lifetime.
	Events ImageEvents  `json:"events"`
	Meta   OptImageMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Image) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Image) GetHubID() HubID {
	return s.HubID
}

// GetName returns the value of Name.
func (s *Image) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *Image) GetSize() int {
	return s.Size
}

// GetAbout returns the value of About.
func (s *Image) GetAbout() OptImageAbout {
	return s.About
}

// GetBackend returns the value of Backend.
func (s *Image) GetBackend() ImageBackend {
	return s.Backend
}

// GetRequires returns the value of Requires.
func (s *Image) GetRequires() ImageRequires {
	return s.Requires
}

// GetBuild returns the value of Build.
func (s *Image) GetBuild() OptNilImageBuild {
	return s.Build
}

// GetBuilder returns the value of Builder.
func (s *Image) GetBuilder() OptNilImageBuilder {
	return s.Builder
}

// GetConfig returns the value of Config.
func (s *Image) GetConfig() ImageConfig {
	return s.Config
}

// GetSource returns the value of Source.
func (s *Image) GetSource() OptImageSourceDetails {
	return s.Source
}

// GetCreator returns the value of Creator.
func (s *Image) GetCreator() OptCreatorScope {
	return s.Creator
}

// GetFactory returns the value of Factory.
func (s *Image) GetFactory() OptNilImageFactory {
	return s.Factory
}

// GetState returns the value of State.
func (s *Image) GetState() ImageState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Image) GetEvents() ImageEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *Image) GetMeta() OptImageMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Image) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Image) SetHubID(val HubID) {
	s.HubID = val
}

// SetName sets the value of Name.
func (s *Image) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *Image) SetSize(val int) {
	s.Size = val
}

// SetAbout sets the value of About.
func (s *Image) SetAbout(val OptImageAbout) {
	s.About = val
}

// SetBackend sets the value of Backend.
func (s *Image) SetBackend(val ImageBackend) {
	s.Backend = val
}

// SetRequires sets the value of Requires.
func (s *Image) SetRequires(val ImageRequires) {
	s.Requires = val
}

// SetBuild sets the value of Build.
func (s *Image) SetBuild(val OptNilImageBuild) {
	s.Build = val
}

// SetBuilder sets the value of Builder.
func (s *Image) SetBuilder(val OptNilImageBuilder) {
	s.Builder = val
}

// SetConfig sets the value of Config.
func (s *Image) SetConfig(val ImageConfig) {
	s.Config = val
}

// SetSource sets the value of Source.
func (s *Image) SetSource(val OptImageSourceDetails) {
	s.Source = val
}

// SetCreator sets the value of Creator.
func (s *Image) SetCreator(val OptCreatorScope) {
	s.Creator = val
}

// SetFactory sets the value of Factory.
func (s *Image) SetFactory(val OptNilImageFactory) {
	s.Factory = val
}

// SetState sets the value of State.
func (s *Image) SetState(val ImageState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Image) SetEvents(val ImageEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *Image) SetMeta(val OptImageMeta) {
	s.Meta = val
}

// An object that holds information about the image.
type ImageAbout struct {
	// A description of the image.
	Description NilString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *ImageAbout) GetDescription() NilString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *ImageAbout) SetDescription(val NilString) {
	s.Description = val
}

// Describes where the image is hosted.
type ImageBackend struct {
	// The provider where this image is hosted.
	Provider string `json:"provider"`
	// The size of the image in bytes.
	Size int `json:"size"`
	// A file name for the image, used by the platform.
	FileName string `json:"file_name"`
	// A file id for the image, used by the platform.
	FileID string `json:"file_id"`
}

// GetProvider returns the value of Provider.
func (s *ImageBackend) GetProvider() string {
	return s.Provider
}

// GetSize returns the value of Size.
func (s *ImageBackend) GetSize() int {
	return s.Size
}

// GetFileName returns the value of FileName.
func (s *ImageBackend) GetFileName() string {
	return s.FileName
}

// GetFileID returns the value of FileID.
func (s *ImageBackend) GetFileID() string {
	return s.FileID
}

// SetProvider sets the value of Provider.
func (s *ImageBackend) SetProvider(val string) {
	s.Provider = val
}

// SetSize sets the value of Size.
func (s *ImageBackend) SetSize(val int) {
	s.Size = val
}

// SetFileName sets the value of FileName.
func (s *ImageBackend) SetFileName(val string) {
	s.FileName = val
}

// SetFileID sets the value of FileID.
func (s *ImageBackend) SetFileID(val string) {
	s.FileID = val
}

// Any additional build details for this image.
type ImageBuild struct {
	// Arguments to pass to the builder during a build of this image.
	Args OptImageBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *ImageBuild) GetArgs() OptImageBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *ImageBuild) SetArgs(val OptImageBuildArgs) {
	s.Args = val
}

// Arguments to pass to the builder during a build of this image.
type ImageBuildArgs map[string]string

func (s *ImageBuildArgs) init() ImageBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Configuration options regarding the builder used to create/import this Image.
type ImageBuilder struct {
	IntegrationID ID `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ImageBuilder) GetIntegrationID() ID {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ImageBuilder) SetIntegrationID(val ID) {
	s.IntegrationID = val
}

// Configuration settings for the image.
type ImageConfig struct {
	// The linux user this image runs its processes as.
	User string `json:"user"`
	// The port settings for the image.
	Ports []ImageConfigPortsItem `json:"ports"`
	// Image defined environment variables for the image.
	Env ImageConfigEnv `json:"env"`
	// Image labels.
	Labels ImageConfigLabels `json:"labels"`
	// The CMD array used to start the container.
	Command []string `json:"command"`
	// An entrypoint command.
	Entrypoint []string `json:"entrypoint"`
	// Volumes information for the given image.
	Volumes []ImageConfigVolumesItem `json:"volumes"`
	// The working directory for the image.
	Workdir string `json:"workdir"`
	// A set command to be run if a signal is called.
	SignalStop string `json:"signal_stop"`
}

// GetUser returns the value of User.
func (s *ImageConfig) GetUser() string {
	return s.User
}

// GetPorts returns the value of Ports.
func (s *ImageConfig) GetPorts() []ImageConfigPortsItem {
	return s.Ports
}

// GetEnv returns the value of Env.
func (s *ImageConfig) GetEnv() ImageConfigEnv {
	return s.Env
}

// GetLabels returns the value of Labels.
func (s *ImageConfig) GetLabels() ImageConfigLabels {
	return s.Labels
}

// GetCommand returns the value of Command.
func (s *ImageConfig) GetCommand() []string {
	return s.Command
}

// GetEntrypoint returns the value of Entrypoint.
func (s *ImageConfig) GetEntrypoint() []string {
	return s.Entrypoint
}

// GetVolumes returns the value of Volumes.
func (s *ImageConfig) GetVolumes() []ImageConfigVolumesItem {
	return s.Volumes
}

// GetWorkdir returns the value of Workdir.
func (s *ImageConfig) GetWorkdir() string {
	return s.Workdir
}

// GetSignalStop returns the value of SignalStop.
func (s *ImageConfig) GetSignalStop() string {
	return s.SignalStop
}

// SetUser sets the value of User.
func (s *ImageConfig) SetUser(val string) {
	s.User = val
}

// SetPorts sets the value of Ports.
func (s *ImageConfig) SetPorts(val []ImageConfigPortsItem) {
	s.Ports = val
}

// SetEnv sets the value of Env.
func (s *ImageConfig) SetEnv(val ImageConfigEnv) {
	s.Env = val
}

// SetLabels sets the value of Labels.
func (s *ImageConfig) SetLabels(val ImageConfigLabels) {
	s.Labels = val
}

// SetCommand sets the value of Command.
func (s *ImageConfig) SetCommand(val []string) {
	s.Command = val
}

// SetEntrypoint sets the value of Entrypoint.
func (s *ImageConfig) SetEntrypoint(val []string) {
	s.Entrypoint = val
}

// SetVolumes sets the value of Volumes.
func (s *ImageConfig) SetVolumes(val []ImageConfigVolumesItem) {
	s.Volumes = val
}

// SetWorkdir sets the value of Workdir.
func (s *ImageConfig) SetWorkdir(val string) {
	s.Workdir = val
}

// SetSignalStop sets the value of SignalStop.
func (s *ImageConfig) SetSignalStop(val string) {
	s.SignalStop = val
}

// Image defined environment variables for the image.
type ImageConfigEnv map[string]string

func (s *ImageConfigEnv) init() ImageConfigEnv {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Image labels.
type ImageConfigLabels map[string]string

func (s *ImageConfigLabels) init() ImageConfigLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type ImageConfigPortsItem struct {
	// Host Port.
	Host      float64 `json:"host"`
	Container float64 `json:"container"`
	Type      string  `json:"type"`
}

// GetHost returns the value of Host.
func (s *ImageConfigPortsItem) GetHost() float64 {
	return s.Host
}

// GetContainer returns the value of Container.
func (s *ImageConfigPortsItem) GetContainer() float64 {
	return s.Container
}

// GetType returns the value of Type.
func (s *ImageConfigPortsItem) GetType() string {
	return s.Type
}

// SetHost sets the value of Host.
func (s *ImageConfigPortsItem) SetHost(val float64) {
	s.Host = val
}

// SetContainer sets the value of Container.
func (s *ImageConfigPortsItem) SetContainer(val float64) {
	s.Container = val
}

// SetType sets the value of Type.
func (s *ImageConfigPortsItem) SetType(val string) {
	s.Type = val
}

type ImageConfigVolumesItem struct {
	// The path where the volume is mounted.
	Path OptString `json:"path"`
	// Permission settings for the volume.
	Mode OptImageConfigVolumesItemMode `json:"mode"`
}

// GetPath returns the value of Path.
func (s *ImageConfigVolumesItem) GetPath() OptString {
	return s.Path
}

// GetMode returns the value of Mode.
func (s *ImageConfigVolumesItem) GetMode() OptImageConfigVolumesItemMode {
	return s.Mode
}

// SetPath sets the value of Path.
func (s *ImageConfigVolumesItem) SetPath(val OptString) {
	s.Path = val
}

// SetMode sets the value of Mode.
func (s *ImageConfigVolumesItem) SetMode(val OptImageConfigVolumesItemMode) {
	s.Mode = val
}

// Permission settings for the volume.
type ImageConfigVolumesItemMode string

const (
	ImageConfigVolumesItemModeRo ImageConfigVolumesItemMode = "ro"
	ImageConfigVolumesItemModeRw ImageConfigVolumesItemMode = "rw"
)

// AllValues returns all ImageConfigVolumesItemMode values.
func (ImageConfigVolumesItemMode) AllValues() []ImageConfigVolumesItemMode {
	return []ImageConfigVolumesItemMode{
		ImageConfigVolumesItemModeRo,
		ImageConfigVolumesItemModeRw,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageConfigVolumesItemMode) MarshalText() ([]byte, error) {
	switch s {
	case ImageConfigVolumesItemModeRo:
		return []byte(s), nil
	case ImageConfigVolumesItemModeRw:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageConfigVolumesItemMode) UnmarshalText(data []byte) error {
	switch ImageConfigVolumesItemMode(data) {
	case ImageConfigVolumesItemModeRo:
		*s = ImageConfigVolumesItemModeRo
		return nil
	case ImageConfigVolumesItemModeRw:
		*s = ImageConfigVolumesItemModeRw
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A pipeline step for creating and importing an image in one go.
// Ref: #/components/schemas/ImageCreateImportStep
type ImageCreateImportStep struct {
	// An identifier for the step.
	Identifier OptString                       `json:"identifier"`
	Options    OptImageCreateImportStepOptions `json:"options"`
	Details    ImageCreateImportStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImageCreateImportStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ImageCreateImportStep) GetOptions() OptImageCreateImportStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ImageCreateImportStep) GetDetails() ImageCreateImportStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ImageCreateImportStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ImageCreateImportStep) SetOptions(val OptImageCreateImportStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ImageCreateImportStep) SetDetails(val ImageCreateImportStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ImageCreateImportStepAction string

const (
	ImageCreateImportStepActionImageCreateImport ImageCreateImportStepAction = "image.create-import"
)

// AllValues returns all ImageCreateImportStepAction values.
func (ImageCreateImportStepAction) AllValues() []ImageCreateImportStepAction {
	return []ImageCreateImportStepAction{
		ImageCreateImportStepActionImageCreateImport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageCreateImportStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ImageCreateImportStepActionImageCreateImport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageCreateImportStepAction) UnmarshalText(data []byte) error {
	switch ImageCreateImportStepAction(data) {
	case ImageCreateImportStepActionImageCreateImport:
		*s = ImageCreateImportStepActionImageCreateImport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ImageCreateImportStepDetails struct {
	Name   OptNilString    `json:"name"`
	Source FluidIdentifier `json:"source"`
	// Optional build-time options for when this image is built on pipeline run.
	Build OptImageCreateImportStepDetailsBuild `json:"build"`
	// An override object to be used for a single image create request.
	Override OptNilImageCreateImportStepDetailsOverride `json:"override"`
}

// GetName returns the value of Name.
func (s *ImageCreateImportStepDetails) GetName() OptNilString {
	return s.Name
}

// GetSource returns the value of Source.
func (s *ImageCreateImportStepDetails) GetSource() FluidIdentifier {
	return s.Source
}

// GetBuild returns the value of Build.
func (s *ImageCreateImportStepDetails) GetBuild() OptImageCreateImportStepDetailsBuild {
	return s.Build
}

// GetOverride returns the value of Override.
func (s *ImageCreateImportStepDetails) GetOverride() OptNilImageCreateImportStepDetailsOverride {
	return s.Override
}

// SetName sets the value of Name.
func (s *ImageCreateImportStepDetails) SetName(val OptNilString) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *ImageCreateImportStepDetails) SetSource(val FluidIdentifier) {
	s.Source = val
}

// SetBuild sets the value of Build.
func (s *ImageCreateImportStepDetails) SetBuild(val OptImageCreateImportStepDetailsBuild) {
	s.Build = val
}

// SetOverride sets the value of Override.
func (s *ImageCreateImportStepDetails) SetOverride(val OptNilImageCreateImportStepDetailsOverride) {
	s.Override = val
}

// Optional build-time options for when this image is built on pipeline run.
type ImageCreateImportStepDetailsBuild struct {
	// Build args passed into the container image build process during pipeline run.
	Args OptNilImageCreateImportStepDetailsBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *ImageCreateImportStepDetailsBuild) GetArgs() OptNilImageCreateImportStepDetailsBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *ImageCreateImportStepDetailsBuild) SetArgs(val OptNilImageCreateImportStepDetailsBuildArgs) {
	s.Args = val
}

// Build args passed into the container image build process during pipeline run.
type ImageCreateImportStepDetailsBuildArgs map[string]string

func (s *ImageCreateImportStepDetailsBuildArgs) init() ImageCreateImportStepDetailsBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// An override object to be used for a single image create request.
type ImageCreateImportStepDetailsOverride struct {
	// For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for
	// overridding the default target - should include an image and a tag.
	Target OptNilString `json:"target"`
	// For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with
	// a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
	TargzURL OptNilString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *ImageCreateImportStepDetailsOverride) GetTarget() OptNilString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *ImageCreateImportStepDetailsOverride) GetTargzURL() OptNilString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *ImageCreateImportStepDetailsOverride) SetTarget(val OptNilString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *ImageCreateImportStepDetailsOverride) SetTargzURL(val OptNilString) {
	s.TargzURL = val
}

type ImageCreateImportStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ImageCreateImportStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ImageCreateImportStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Settings for the image create step for a pipeline.
// Ref: #/components/schemas/ImageCreateStep
type ImageCreateStep struct {
	// An identifier for the step.
	Identifier OptString                 `json:"identifier"`
	Options    OptImageCreateStepOptions `json:"options"`
	Details    ImageCreateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImageCreateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ImageCreateStep) GetOptions() OptImageCreateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ImageCreateStep) GetDetails() ImageCreateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ImageCreateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ImageCreateStep) SetOptions(val OptImageCreateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ImageCreateStep) SetDetails(val ImageCreateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ImageCreateStepAction string

const (
	ImageCreateStepActionImageCreate ImageCreateStepAction = "image.create"
)

// AllValues returns all ImageCreateStepAction values.
func (ImageCreateStepAction) AllValues() []ImageCreateStepAction {
	return []ImageCreateStepAction{
		ImageCreateStepActionImageCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageCreateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ImageCreateStepActionImageCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageCreateStepAction) UnmarshalText(data []byte) error {
	switch ImageCreateStepAction(data) {
	case ImageCreateStepActionImageCreate:
		*s = ImageCreateStepActionImageCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ImageCreateStepDetails struct {
	Name   OptNilString    `json:"name"`
	Source FluidIdentifier `json:"source"`
	// Optional build-time options for when this image is built on pipeline run.
	Build OptImageCreateStepDetailsBuild `json:"build"`
	// An override object to be used for a single image create request.
	Override OptNilImageCreateStepDetailsOverride `json:"override"`
}

// GetName returns the value of Name.
func (s *ImageCreateStepDetails) GetName() OptNilString {
	return s.Name
}

// GetSource returns the value of Source.
func (s *ImageCreateStepDetails) GetSource() FluidIdentifier {
	return s.Source
}

// GetBuild returns the value of Build.
func (s *ImageCreateStepDetails) GetBuild() OptImageCreateStepDetailsBuild {
	return s.Build
}

// GetOverride returns the value of Override.
func (s *ImageCreateStepDetails) GetOverride() OptNilImageCreateStepDetailsOverride {
	return s.Override
}

// SetName sets the value of Name.
func (s *ImageCreateStepDetails) SetName(val OptNilString) {
	s.Name = val
}

// SetSource sets the value of Source.
func (s *ImageCreateStepDetails) SetSource(val FluidIdentifier) {
	s.Source = val
}

// SetBuild sets the value of Build.
func (s *ImageCreateStepDetails) SetBuild(val OptImageCreateStepDetailsBuild) {
	s.Build = val
}

// SetOverride sets the value of Override.
func (s *ImageCreateStepDetails) SetOverride(val OptNilImageCreateStepDetailsOverride) {
	s.Override = val
}

// Optional build-time options for when this image is built on pipeline run.
type ImageCreateStepDetailsBuild struct {
	// Build args passed into the container image build process during pipeline run.
	Args OptNilImageCreateStepDetailsBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *ImageCreateStepDetailsBuild) GetArgs() OptNilImageCreateStepDetailsBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *ImageCreateStepDetailsBuild) SetArgs(val OptNilImageCreateStepDetailsBuildArgs) {
	s.Args = val
}

// Build args passed into the container image build process during pipeline run.
type ImageCreateStepDetailsBuildArgs map[string]string

func (s *ImageCreateStepDetailsBuildArgs) init() ImageCreateStepDetailsBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// An override object to be used for a single image create request.
type ImageCreateStepDetailsOverride struct {
	// For image sources with `docker-hub` or `docker-registry` origin types. A target to be used for
	// overridding the default target - should include an image and a tag.
	Target OptNilString `json:"target"`
	// For image sources with `docker-file` origin types. A URL pointing to a .tar.gz file of a repo with
	// a Dockerfile in it - can be used instead of linking Cycle directly to a repository.
	TargzURL OptNilString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *ImageCreateStepDetailsOverride) GetTarget() OptNilString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *ImageCreateStepDetailsOverride) GetTargzURL() OptNilString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *ImageCreateStepDetailsOverride) SetTarget(val OptNilString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *ImageCreateStepDetailsOverride) SetTargzURL(val OptNilString) {
	s.TargzURL = val
}

type ImageCreateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ImageCreateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ImageCreateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A collection of timestamps for each event in the image's lifetime.
type ImageEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ImageEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ImageEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ImageEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ImageEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ImageEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ImageEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information about the Factory service that built/imported the Image into Cycle.
type ImageFactory struct {
	// The node holding the factory service that was responsible for building the image.
	NodeID       string   `json:"node_id"`
	Cached       DateTime `json:"cached"`
	Acknowledged DateTime `json:"acknowledged"`
}

// GetNodeID returns the value of NodeID.
func (s *ImageFactory) GetNodeID() string {
	return s.NodeID
}

// GetCached returns the value of Cached.
func (s *ImageFactory) GetCached() DateTime {
	return s.Cached
}

// GetAcknowledged returns the value of Acknowledged.
func (s *ImageFactory) GetAcknowledged() DateTime {
	return s.Acknowledged
}

// SetNodeID sets the value of NodeID.
func (s *ImageFactory) SetNodeID(val string) {
	s.NodeID = val
}

// SetCached sets the value of Cached.
func (s *ImageFactory) SetCached(val DateTime) {
	s.Cached = val
}

// SetAcknowledged sets the value of Acknowledged.
func (s *ImageFactory) SetAcknowledged(val DateTime) {
	s.Acknowledged = val
}

// Settings for the image import step for a pipeline.
// Ref: #/components/schemas/ImageImportStep
type ImageImportStep struct {
	// An identifier for the step.
	Identifier OptString                 `json:"identifier"`
	Options    OptImageImportStepOptions `json:"options"`
	Details    ImageImportStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImageImportStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ImageImportStep) GetOptions() OptImageImportStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ImageImportStep) GetDetails() ImageImportStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ImageImportStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ImageImportStep) SetOptions(val OptImageImportStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ImageImportStep) SetDetails(val ImageImportStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ImageImportStepAction string

const (
	ImageImportStepActionImageImport ImageImportStepAction = "image.import"
)

// AllValues returns all ImageImportStepAction values.
func (ImageImportStepAction) AllValues() []ImageImportStepAction {
	return []ImageImportStepAction{
		ImageImportStepActionImageImport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageImportStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ImageImportStepActionImageImport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageImportStepAction) UnmarshalText(data []byte) error {
	switch ImageImportStepAction(data) {
	case ImageImportStepActionImageImport:
		*s = ImageImportStepActionImageImport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ImageImportStepDetails struct {
	Image FluidIdentifier `json:"image"`
}

// GetImage returns the value of Image.
func (s *ImageImportStepDetails) GetImage() FluidIdentifier {
	return s.Image
}

// SetImage sets the value of Image.
func (s *ImageImportStepDetails) SetImage(val FluidIdentifier) {
	s.Image = val
}

type ImageImportStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ImageImportStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ImageImportStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// All includable resources linkable to the given image.
// Ref: #/components/schemas/ImageIncludes
type ImageIncludes struct {
	Creators                OptCreatorInclude       `json:"creators"`
	StackBuilds             OptStackBuildIncludes   `json:"stack_builds"`
	Stacks                  OptStackIncludes        `json:"stacks"`
	StacksIdentifiers       OptIdentifierIncludes   `json:"stacks:identifiers"`
	Sources                 OptImageSourceIncludes  `json:"sources"`
	SourcesIdentifiers      OptIdentifierIncludes   `json:"sources:identifiers"`
	Integrations            OptIntegrationsIncludes `json:"integrations"`
	IntegrationsIdentifiers OptIdentifierIncludes   `json:"integrations:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *ImageIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetStackBuilds returns the value of StackBuilds.
func (s *ImageIncludes) GetStackBuilds() OptStackBuildIncludes {
	return s.StackBuilds
}

// GetStacks returns the value of Stacks.
func (s *ImageIncludes) GetStacks() OptStackIncludes {
	return s.Stacks
}

// GetStacksIdentifiers returns the value of StacksIdentifiers.
func (s *ImageIncludes) GetStacksIdentifiers() OptIdentifierIncludes {
	return s.StacksIdentifiers
}

// GetSources returns the value of Sources.
func (s *ImageIncludes) GetSources() OptImageSourceIncludes {
	return s.Sources
}

// GetSourcesIdentifiers returns the value of SourcesIdentifiers.
func (s *ImageIncludes) GetSourcesIdentifiers() OptIdentifierIncludes {
	return s.SourcesIdentifiers
}

// GetIntegrations returns the value of Integrations.
func (s *ImageIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// GetIntegrationsIdentifiers returns the value of IntegrationsIdentifiers.
func (s *ImageIncludes) GetIntegrationsIdentifiers() OptIdentifierIncludes {
	return s.IntegrationsIdentifiers
}

// SetCreators sets the value of Creators.
func (s *ImageIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetStackBuilds sets the value of StackBuilds.
func (s *ImageIncludes) SetStackBuilds(val OptStackBuildIncludes) {
	s.StackBuilds = val
}

// SetStacks sets the value of Stacks.
func (s *ImageIncludes) SetStacks(val OptStackIncludes) {
	s.Stacks = val
}

// SetStacksIdentifiers sets the value of StacksIdentifiers.
func (s *ImageIncludes) SetStacksIdentifiers(val OptIdentifierIncludes) {
	s.StacksIdentifiers = val
}

// SetSources sets the value of Sources.
func (s *ImageIncludes) SetSources(val OptImageSourceIncludes) {
	s.Sources = val
}

// SetSourcesIdentifiers sets the value of SourcesIdentifiers.
func (s *ImageIncludes) SetSourcesIdentifiers(val OptIdentifierIncludes) {
	s.SourcesIdentifiers = val
}

// SetIntegrations sets the value of Integrations.
func (s *ImageIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// SetIntegrationsIdentifiers sets the value of IntegrationsIdentifiers.
func (s *ImageIncludes) SetIntegrationsIdentifiers(val OptIdentifierIncludes) {
	s.IntegrationsIdentifiers = val
}

// A list of meta fields that can be applied to the image.
// Ref: #/components/schemas/ImageMeta
type ImageMeta struct {
	ContainersCount OptStateCountSummary `json:"containers_count"`
}

// GetContainersCount returns the value of ContainersCount.
func (s *ImageMeta) GetContainersCount() OptStateCountSummary {
	return s.ContainersCount
}

// SetContainersCount sets the value of ContainersCount.
func (s *ImageMeta) SetContainersCount(val OptStateCountSummary) {
	s.ContainersCount = val
}

// The origin of the given image source.
// Ref: #/components/schemas/ImageOrigin
type ImageOrigin struct {
	OneOf ImageOriginSum
}

// GetOneOf returns the value of OneOf.
func (s *ImageOrigin) GetOneOf() ImageOriginSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *ImageOrigin) SetOneOf(val ImageOriginSum) {
	s.OneOf = val
}

// ImageOriginSum represents sum type.
type ImageOriginSum struct {
	Type                 ImageOriginSumType // switch on this field
	DockerHubOrigin      DockerHubOrigin
	DockerFileOrigin     DockerFileOrigin
	DockerRegistryOrigin DockerRegistryOrigin
	OciRegistryOrigin    OciRegistryOrigin
	CycleUploadOrigin    CycleUploadOrigin
	CycleSourceOrigin    CycleSourceOrigin
	NoneOrigin           NoneOrigin
}

// ImageOriginSumType is oneOf type of ImageOriginSum.
type ImageOriginSumType string

// Possible values for ImageOriginSumType.
const (
	DockerHubOriginImageOriginSum      ImageOriginSumType = "docker-hub"
	DockerFileOriginImageOriginSum     ImageOriginSumType = "docker-file"
	DockerRegistryOriginImageOriginSum ImageOriginSumType = "docker-registry"
	OciRegistryOriginImageOriginSum    ImageOriginSumType = "oci-registry"
	CycleUploadOriginImageOriginSum    ImageOriginSumType = "cycle-upload"
	CycleSourceOriginImageOriginSum    ImageOriginSumType = "cycle-source"
	NoneOriginImageOriginSum           ImageOriginSumType = "none"
)

// IsDockerHubOrigin reports whether ImageOriginSum is DockerHubOrigin.
func (s ImageOriginSum) IsDockerHubOrigin() bool { return s.Type == DockerHubOriginImageOriginSum }

// IsDockerFileOrigin reports whether ImageOriginSum is DockerFileOrigin.
func (s ImageOriginSum) IsDockerFileOrigin() bool { return s.Type == DockerFileOriginImageOriginSum }

// IsDockerRegistryOrigin reports whether ImageOriginSum is DockerRegistryOrigin.
func (s ImageOriginSum) IsDockerRegistryOrigin() bool {
	return s.Type == DockerRegistryOriginImageOriginSum
}

// IsOciRegistryOrigin reports whether ImageOriginSum is OciRegistryOrigin.
func (s ImageOriginSum) IsOciRegistryOrigin() bool { return s.Type == OciRegistryOriginImageOriginSum }

// IsCycleUploadOrigin reports whether ImageOriginSum is CycleUploadOrigin.
func (s ImageOriginSum) IsCycleUploadOrigin() bool { return s.Type == CycleUploadOriginImageOriginSum }

// IsCycleSourceOrigin reports whether ImageOriginSum is CycleSourceOrigin.
func (s ImageOriginSum) IsCycleSourceOrigin() bool { return s.Type == CycleSourceOriginImageOriginSum }

// IsNoneOrigin reports whether ImageOriginSum is NoneOrigin.
func (s ImageOriginSum) IsNoneOrigin() bool { return s.Type == NoneOriginImageOriginSum }

// SetDockerHubOrigin sets ImageOriginSum to DockerHubOrigin.
func (s *ImageOriginSum) SetDockerHubOrigin(v DockerHubOrigin) {
	s.Type = DockerHubOriginImageOriginSum
	s.DockerHubOrigin = v
}

// GetDockerHubOrigin returns DockerHubOrigin and true boolean if ImageOriginSum is DockerHubOrigin.
func (s ImageOriginSum) GetDockerHubOrigin() (v DockerHubOrigin, ok bool) {
	if !s.IsDockerHubOrigin() {
		return v, false
	}
	return s.DockerHubOrigin, true
}

// NewDockerHubOriginImageOriginSum returns new ImageOriginSum from DockerHubOrigin.
func NewDockerHubOriginImageOriginSum(v DockerHubOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetDockerHubOrigin(v)
	return s
}

// SetDockerFileOrigin sets ImageOriginSum to DockerFileOrigin.
func (s *ImageOriginSum) SetDockerFileOrigin(v DockerFileOrigin) {
	s.Type = DockerFileOriginImageOriginSum
	s.DockerFileOrigin = v
}

// GetDockerFileOrigin returns DockerFileOrigin and true boolean if ImageOriginSum is DockerFileOrigin.
func (s ImageOriginSum) GetDockerFileOrigin() (v DockerFileOrigin, ok bool) {
	if !s.IsDockerFileOrigin() {
		return v, false
	}
	return s.DockerFileOrigin, true
}

// NewDockerFileOriginImageOriginSum returns new ImageOriginSum from DockerFileOrigin.
func NewDockerFileOriginImageOriginSum(v DockerFileOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetDockerFileOrigin(v)
	return s
}

// SetDockerRegistryOrigin sets ImageOriginSum to DockerRegistryOrigin.
func (s *ImageOriginSum) SetDockerRegistryOrigin(v DockerRegistryOrigin) {
	s.Type = DockerRegistryOriginImageOriginSum
	s.DockerRegistryOrigin = v
}

// GetDockerRegistryOrigin returns DockerRegistryOrigin and true boolean if ImageOriginSum is DockerRegistryOrigin.
func (s ImageOriginSum) GetDockerRegistryOrigin() (v DockerRegistryOrigin, ok bool) {
	if !s.IsDockerRegistryOrigin() {
		return v, false
	}
	return s.DockerRegistryOrigin, true
}

// NewDockerRegistryOriginImageOriginSum returns new ImageOriginSum from DockerRegistryOrigin.
func NewDockerRegistryOriginImageOriginSum(v DockerRegistryOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetDockerRegistryOrigin(v)
	return s
}

// SetOciRegistryOrigin sets ImageOriginSum to OciRegistryOrigin.
func (s *ImageOriginSum) SetOciRegistryOrigin(v OciRegistryOrigin) {
	s.Type = OciRegistryOriginImageOriginSum
	s.OciRegistryOrigin = v
}

// GetOciRegistryOrigin returns OciRegistryOrigin and true boolean if ImageOriginSum is OciRegistryOrigin.
func (s ImageOriginSum) GetOciRegistryOrigin() (v OciRegistryOrigin, ok bool) {
	if !s.IsOciRegistryOrigin() {
		return v, false
	}
	return s.OciRegistryOrigin, true
}

// NewOciRegistryOriginImageOriginSum returns new ImageOriginSum from OciRegistryOrigin.
func NewOciRegistryOriginImageOriginSum(v OciRegistryOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetOciRegistryOrigin(v)
	return s
}

// SetCycleUploadOrigin sets ImageOriginSum to CycleUploadOrigin.
func (s *ImageOriginSum) SetCycleUploadOrigin(v CycleUploadOrigin) {
	s.Type = CycleUploadOriginImageOriginSum
	s.CycleUploadOrigin = v
}

// GetCycleUploadOrigin returns CycleUploadOrigin and true boolean if ImageOriginSum is CycleUploadOrigin.
func (s ImageOriginSum) GetCycleUploadOrigin() (v CycleUploadOrigin, ok bool) {
	if !s.IsCycleUploadOrigin() {
		return v, false
	}
	return s.CycleUploadOrigin, true
}

// NewCycleUploadOriginImageOriginSum returns new ImageOriginSum from CycleUploadOrigin.
func NewCycleUploadOriginImageOriginSum(v CycleUploadOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetCycleUploadOrigin(v)
	return s
}

// SetCycleSourceOrigin sets ImageOriginSum to CycleSourceOrigin.
func (s *ImageOriginSum) SetCycleSourceOrigin(v CycleSourceOrigin) {
	s.Type = CycleSourceOriginImageOriginSum
	s.CycleSourceOrigin = v
}

// GetCycleSourceOrigin returns CycleSourceOrigin and true boolean if ImageOriginSum is CycleSourceOrigin.
func (s ImageOriginSum) GetCycleSourceOrigin() (v CycleSourceOrigin, ok bool) {
	if !s.IsCycleSourceOrigin() {
		return v, false
	}
	return s.CycleSourceOrigin, true
}

// NewCycleSourceOriginImageOriginSum returns new ImageOriginSum from CycleSourceOrigin.
func NewCycleSourceOriginImageOriginSum(v CycleSourceOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetCycleSourceOrigin(v)
	return s
}

// SetNoneOrigin sets ImageOriginSum to NoneOrigin.
func (s *ImageOriginSum) SetNoneOrigin(v NoneOrigin) {
	s.Type = NoneOriginImageOriginSum
	s.NoneOrigin = v
}

// GetNoneOrigin returns NoneOrigin and true boolean if ImageOriginSum is NoneOrigin.
func (s ImageOriginSum) GetNoneOrigin() (v NoneOrigin, ok bool) {
	if !s.IsNoneOrigin() {
		return v, false
	}
	return s.NoneOrigin, true
}

// NewNoneOriginImageOriginSum returns new ImageOriginSum from NoneOrigin.
func NewNoneOriginImageOriginSum(v NoneOrigin) ImageOriginSum {
	var s ImageOriginSum
	s.SetNoneOrigin(v)
	return s
}

// Any restrictions or requirements needed to run this image as a container.
type ImageRequires struct {
	NvidiaGpu OptBool `json:"nvidia_gpu"`
}

// GetNvidiaGpu returns the value of NvidiaGpu.
func (s *ImageRequires) GetNvidiaGpu() OptBool {
	return s.NvidiaGpu
}

// SetNvidiaGpu sets the value of NvidiaGpu.
func (s *ImageRequires) SetNvidiaGpu(val OptBool) {
	s.NvidiaGpu = val
}

// An image source is a set of resources that direct the platform on where it can find the resources
// needed to build an image resource.
// Ref: #/components/schemas/ImageSource
type ImageSource struct {
	ID         ID              `json:"id"`
	Identifier Identifier      `json:"identifier"`
	Type       ImageSourceType `json:"type"`
	HubID      HubID           `json:"hub_id"`
	// A name for the image source resource.
	Name   string              `json:"name"`
	About  OptImageSourceAbout `json:"about"`
	Origin ImageOrigin         `json:"origin"`
	// Configuration options regarding the builder used to create/import Images using this Image Source.
	Builder OptNilImageSourceBuilder `json:"builder"`
	Creator CreatorScope             `json:"creator"`
	State   ImageSourceState         `json:"state"`
	// A collection of timestamps for each event in the image source's lifetime.
	Events ImageSourceEvents  `json:"events"`
	Meta   OptImageSourceMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *ImageSource) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *ImageSource) GetIdentifier() Identifier {
	return s.Identifier
}

// GetType returns the value of Type.
func (s *ImageSource) GetType() ImageSourceType {
	return s.Type
}

// GetHubID returns the value of HubID.
func (s *ImageSource) GetHubID() HubID {
	return s.HubID
}

// GetName returns the value of Name.
func (s *ImageSource) GetName() string {
	return s.Name
}

// GetAbout returns the value of About.
func (s *ImageSource) GetAbout() OptImageSourceAbout {
	return s.About
}

// GetOrigin returns the value of Origin.
func (s *ImageSource) GetOrigin() ImageOrigin {
	return s.Origin
}

// GetBuilder returns the value of Builder.
func (s *ImageSource) GetBuilder() OptNilImageSourceBuilder {
	return s.Builder
}

// GetCreator returns the value of Creator.
func (s *ImageSource) GetCreator() CreatorScope {
	return s.Creator
}

// GetState returns the value of State.
func (s *ImageSource) GetState() ImageSourceState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ImageSource) GetEvents() ImageSourceEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *ImageSource) GetMeta() OptImageSourceMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *ImageSource) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *ImageSource) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetType sets the value of Type.
func (s *ImageSource) SetType(val ImageSourceType) {
	s.Type = val
}

// SetHubID sets the value of HubID.
func (s *ImageSource) SetHubID(val HubID) {
	s.HubID = val
}

// SetName sets the value of Name.
func (s *ImageSource) SetName(val string) {
	s.Name = val
}

// SetAbout sets the value of About.
func (s *ImageSource) SetAbout(val OptImageSourceAbout) {
	s.About = val
}

// SetOrigin sets the value of Origin.
func (s *ImageSource) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

// SetBuilder sets the value of Builder.
func (s *ImageSource) SetBuilder(val OptNilImageSourceBuilder) {
	s.Builder = val
}

// SetCreator sets the value of Creator.
func (s *ImageSource) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetState sets the value of State.
func (s *ImageSource) SetState(val ImageSourceState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ImageSource) SetEvents(val ImageSourceEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *ImageSource) SetMeta(val OptImageSourceMeta) {
	s.Meta = val
}

// Information about the image source resource.
// Ref: #/components/schemas/ImageSourceAbout
type ImageSourceAbout struct {
	// Some information about the image source resource.
	Description OptNilString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *ImageSourceAbout) GetDescription() OptNilString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *ImageSourceAbout) SetDescription(val OptNilString) {
	s.Description = val
}

// Configuration options regarding the builder used to create/import Images using this Image Source.
type ImageSourceBuilder struct {
	IntegrationID OptHybridIdentifier `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ImageSourceBuilder) GetIntegrationID() OptHybridIdentifier {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ImageSourceBuilder) SetIntegrationID(val OptHybridIdentifier) {
	s.IntegrationID = val
}

// Settings for the image source create step for a pipeline.
// Ref: #/components/schemas/ImageSourceCreateStep
type ImageSourceCreateStep struct {
	// An identifier for the step.
	Identifier OptString                       `json:"identifier"`
	Options    OptImageSourceCreateStepOptions `json:"options"`
	Details    ImageSourceCreateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImageSourceCreateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ImageSourceCreateStep) GetOptions() OptImageSourceCreateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ImageSourceCreateStep) GetDetails() ImageSourceCreateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ImageSourceCreateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ImageSourceCreateStep) SetOptions(val OptImageSourceCreateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ImageSourceCreateStep) SetDetails(val ImageSourceCreateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ImageSourceCreateStepAction string

const (
	ImageSourceCreateStepActionImageSourceCreate ImageSourceCreateStepAction = "image.source.create"
)

// AllValues returns all ImageSourceCreateStepAction values.
func (ImageSourceCreateStepAction) AllValues() []ImageSourceCreateStepAction {
	return []ImageSourceCreateStepAction{
		ImageSourceCreateStepActionImageSourceCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageSourceCreateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ImageSourceCreateStepActionImageSourceCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageSourceCreateStepAction) UnmarshalText(data []byte) error {
	switch ImageSourceCreateStepAction(data) {
	case ImageSourceCreateStepActionImageSourceCreate:
		*s = ImageSourceCreateStepActionImageSourceCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ImageSourceCreateStepDetails struct {
	Name   string              `json:"name"`
	Type   string              `json:"type"`
	About  OptImageSourceAbout `json:"about"`
	Origin ImageOrigin         `json:"origin"`
}

// GetName returns the value of Name.
func (s *ImageSourceCreateStepDetails) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *ImageSourceCreateStepDetails) GetType() string {
	return s.Type
}

// GetAbout returns the value of About.
func (s *ImageSourceCreateStepDetails) GetAbout() OptImageSourceAbout {
	return s.About
}

// GetOrigin returns the value of Origin.
func (s *ImageSourceCreateStepDetails) GetOrigin() ImageOrigin {
	return s.Origin
}

// SetName sets the value of Name.
func (s *ImageSourceCreateStepDetails) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *ImageSourceCreateStepDetails) SetType(val string) {
	s.Type = val
}

// SetAbout sets the value of About.
func (s *ImageSourceCreateStepDetails) SetAbout(val OptImageSourceAbout) {
	s.About = val
}

// SetOrigin sets the value of Origin.
func (s *ImageSourceCreateStepDetails) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

type ImageSourceCreateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ImageSourceCreateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ImageSourceCreateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

type ImageSourceDetails struct {
	OneOf ImageSourceDetailsSum
}

// GetOneOf returns the value of OneOf.
func (s *ImageSourceDetails) GetOneOf() ImageSourceDetailsSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *ImageSourceDetails) SetOneOf(val ImageSourceDetailsSum) {
	s.OneOf = val
}

// ImageSourceDetailsSum represents sum type.
type ImageSourceDetailsSum struct {
	Type                  ImageSourceDetailsSumType // switch on this field
	DirectImageSourceType DirectImageSourceType
	StackImageSourceType  StackImageSourceType
	BucketImageSourceType BucketImageSourceType
}

// ImageSourceDetailsSumType is oneOf type of ImageSourceDetailsSum.
type ImageSourceDetailsSumType string

// Possible values for ImageSourceDetailsSumType.
const (
	DirectImageSourceTypeImageSourceDetailsSum ImageSourceDetailsSumType = "direct"
	StackImageSourceTypeImageSourceDetailsSum  ImageSourceDetailsSumType = "stack-build"
	BucketImageSourceTypeImageSourceDetailsSum ImageSourceDetailsSumType = "bucket"
)

// IsDirectImageSourceType reports whether ImageSourceDetailsSum is DirectImageSourceType.
func (s ImageSourceDetailsSum) IsDirectImageSourceType() bool {
	return s.Type == DirectImageSourceTypeImageSourceDetailsSum
}

// IsStackImageSourceType reports whether ImageSourceDetailsSum is StackImageSourceType.
func (s ImageSourceDetailsSum) IsStackImageSourceType() bool {
	return s.Type == StackImageSourceTypeImageSourceDetailsSum
}

// IsBucketImageSourceType reports whether ImageSourceDetailsSum is BucketImageSourceType.
func (s ImageSourceDetailsSum) IsBucketImageSourceType() bool {
	return s.Type == BucketImageSourceTypeImageSourceDetailsSum
}

// SetDirectImageSourceType sets ImageSourceDetailsSum to DirectImageSourceType.
func (s *ImageSourceDetailsSum) SetDirectImageSourceType(v DirectImageSourceType) {
	s.Type = DirectImageSourceTypeImageSourceDetailsSum
	s.DirectImageSourceType = v
}

// GetDirectImageSourceType returns DirectImageSourceType and true boolean if ImageSourceDetailsSum is DirectImageSourceType.
func (s ImageSourceDetailsSum) GetDirectImageSourceType() (v DirectImageSourceType, ok bool) {
	if !s.IsDirectImageSourceType() {
		return v, false
	}
	return s.DirectImageSourceType, true
}

// NewDirectImageSourceTypeImageSourceDetailsSum returns new ImageSourceDetailsSum from DirectImageSourceType.
func NewDirectImageSourceTypeImageSourceDetailsSum(v DirectImageSourceType) ImageSourceDetailsSum {
	var s ImageSourceDetailsSum
	s.SetDirectImageSourceType(v)
	return s
}

// SetStackImageSourceType sets ImageSourceDetailsSum to StackImageSourceType.
func (s *ImageSourceDetailsSum) SetStackImageSourceType(v StackImageSourceType) {
	s.Type = StackImageSourceTypeImageSourceDetailsSum
	s.StackImageSourceType = v
}

// GetStackImageSourceType returns StackImageSourceType and true boolean if ImageSourceDetailsSum is StackImageSourceType.
func (s ImageSourceDetailsSum) GetStackImageSourceType() (v StackImageSourceType, ok bool) {
	if !s.IsStackImageSourceType() {
		return v, false
	}
	return s.StackImageSourceType, true
}

// NewStackImageSourceTypeImageSourceDetailsSum returns new ImageSourceDetailsSum from StackImageSourceType.
func NewStackImageSourceTypeImageSourceDetailsSum(v StackImageSourceType) ImageSourceDetailsSum {
	var s ImageSourceDetailsSum
	s.SetStackImageSourceType(v)
	return s
}

// SetBucketImageSourceType sets ImageSourceDetailsSum to BucketImageSourceType.
func (s *ImageSourceDetailsSum) SetBucketImageSourceType(v BucketImageSourceType) {
	s.Type = BucketImageSourceTypeImageSourceDetailsSum
	s.BucketImageSourceType = v
}

// GetBucketImageSourceType returns BucketImageSourceType and true boolean if ImageSourceDetailsSum is BucketImageSourceType.
func (s ImageSourceDetailsSum) GetBucketImageSourceType() (v BucketImageSourceType, ok bool) {
	if !s.IsBucketImageSourceType() {
		return v, false
	}
	return s.BucketImageSourceType, true
}

// NewBucketImageSourceTypeImageSourceDetailsSum returns new ImageSourceDetailsSum from BucketImageSourceType.
func NewBucketImageSourceTypeImageSourceDetailsSum(v BucketImageSourceType) ImageSourceDetailsSum {
	var s ImageSourceDetailsSum
	s.SetBucketImageSourceType(v)
	return s
}

// A collection of timestamps for each event in the image source's lifetime.
type ImageSourceEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ImageSourceEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ImageSourceEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ImageSourceEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ImageSourceEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ImageSourceEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ImageSourceEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// A resource associated with an image source.
// Ref: #/components/schemas/ImageSourceIncludes
type ImageSourceIncludes map[string]ImageSource

func (s *ImageSourceIncludes) init() ImageSourceIncludes {
	m := *s
	if m == nil {
		m = map[string]ImageSource{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to this environment.
// Ref: #/components/schemas/ImageSourceMeta
type ImageSourceMeta struct {
	ImagesCount OptImageSourceMetaImagesCount `json:"images_count"`
}

// GetImagesCount returns the value of ImagesCount.
func (s *ImageSourceMeta) GetImagesCount() OptImageSourceMetaImagesCount {
	return s.ImagesCount
}

// SetImagesCount sets the value of ImagesCount.
func (s *ImageSourceMeta) SetImagesCount(val OptImageSourceMetaImagesCount) {
	s.ImagesCount = val
}

type ImageSourceMetaImagesCount struct {
	// Number of image sources.
	Total float64                         `json:"total"`
	State ImageSourceMetaImagesCountState `json:"state"`
}

// GetTotal returns the value of Total.
func (s *ImageSourceMetaImagesCount) GetTotal() float64 {
	return s.Total
}

// GetState returns the value of State.
func (s *ImageSourceMetaImagesCount) GetState() ImageSourceMetaImagesCountState {
	return s.State
}

// SetTotal sets the value of Total.
func (s *ImageSourceMetaImagesCount) SetTotal(val float64) {
	s.Total = val
}

// SetState sets the value of State.
func (s *ImageSourceMetaImagesCount) SetState(val ImageSourceMetaImagesCountState) {
	s.State = val
}

type ImageSourceMetaImagesCountState struct {
	// Number of images in this source with state new.
	New float64 `json:"new"`
	// Number of images in this source with state downloading.
	Downloading float64 `json:"downloading"`
	// Number of images in this source with state building.
	Building float64 `json:"building"`
	// Number of images in this source with state verifying.
	Verifying float64 `json:"verifying"`
	// Number of images in this source with state saving.
	Saving float64 `json:"saving"`
	// Number of images in this source with state live.
	Live float64 `json:"live"`
	// Number of images in this source with state deleting.
	Deleting float64 `json:"deleting"`
}

// GetNew returns the value of New.
func (s *ImageSourceMetaImagesCountState) GetNew() float64 {
	return s.New
}

// GetDownloading returns the value of Downloading.
func (s *ImageSourceMetaImagesCountState) GetDownloading() float64 {
	return s.Downloading
}

// GetBuilding returns the value of Building.
func (s *ImageSourceMetaImagesCountState) GetBuilding() float64 {
	return s.Building
}

// GetVerifying returns the value of Verifying.
func (s *ImageSourceMetaImagesCountState) GetVerifying() float64 {
	return s.Verifying
}

// GetSaving returns the value of Saving.
func (s *ImageSourceMetaImagesCountState) GetSaving() float64 {
	return s.Saving
}

// GetLive returns the value of Live.
func (s *ImageSourceMetaImagesCountState) GetLive() float64 {
	return s.Live
}

// GetDeleting returns the value of Deleting.
func (s *ImageSourceMetaImagesCountState) GetDeleting() float64 {
	return s.Deleting
}

// SetNew sets the value of New.
func (s *ImageSourceMetaImagesCountState) SetNew(val float64) {
	s.New = val
}

// SetDownloading sets the value of Downloading.
func (s *ImageSourceMetaImagesCountState) SetDownloading(val float64) {
	s.Downloading = val
}

// SetBuilding sets the value of Building.
func (s *ImageSourceMetaImagesCountState) SetBuilding(val float64) {
	s.Building = val
}

// SetVerifying sets the value of Verifying.
func (s *ImageSourceMetaImagesCountState) SetVerifying(val float64) {
	s.Verifying = val
}

// SetSaving sets the value of Saving.
func (s *ImageSourceMetaImagesCountState) SetSaving(val float64) {
	s.Saving = val
}

// SetLive sets the value of Live.
func (s *ImageSourceMetaImagesCountState) SetLive(val float64) {
	s.Live = val
}

// SetDeleting sets the value of Deleting.
func (s *ImageSourceMetaImagesCountState) SetDeleting(val float64) {
	s.Deleting = val
}

// Merged schema.
// Ref: #/components/schemas/ImageSourceState
type ImageSourceState struct {
	// The current state of the image source.
	Current ImageSourceStateCurrent `json:"current"`
	Changed DateTime                `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptImageSourceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ImageSourceState) GetCurrent() ImageSourceStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ImageSourceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ImageSourceState) GetError() OptImageSourceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ImageSourceState) SetCurrent(val ImageSourceStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ImageSourceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ImageSourceState) SetError(val OptImageSourceStateError) {
	s.Error = val
}

// The current state of the image source.
type ImageSourceStateCurrent string

const (
	ImageSourceStateCurrentLive     ImageSourceStateCurrent = "live"
	ImageSourceStateCurrentDeleting ImageSourceStateCurrent = "deleting"
	ImageSourceStateCurrentDeleted  ImageSourceStateCurrent = "deleted"
)

// AllValues returns all ImageSourceStateCurrent values.
func (ImageSourceStateCurrent) AllValues() []ImageSourceStateCurrent {
	return []ImageSourceStateCurrent{
		ImageSourceStateCurrentLive,
		ImageSourceStateCurrentDeleting,
		ImageSourceStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageSourceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ImageSourceStateCurrentLive:
		return []byte(s), nil
	case ImageSourceStateCurrentDeleting:
		return []byte(s), nil
	case ImageSourceStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageSourceStateCurrent) UnmarshalText(data []byte) error {
	switch ImageSourceStateCurrent(data) {
	case ImageSourceStateCurrentLive:
		*s = ImageSourceStateCurrentLive
		return nil
	case ImageSourceStateCurrentDeleting:
		*s = ImageSourceStateCurrentDeleting
		return nil
	case ImageSourceStateCurrentDeleted:
		*s = ImageSourceStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ImageSourceStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ImageSourceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ImageSourceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ImageSourceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ImageSourceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// The type of images in this source.
// Ref: #/components/schemas/ImageSourceType
type ImageSourceType string

const (
	ImageSourceTypeStackBuild ImageSourceType = "stack-build"
	ImageSourceTypeDirect     ImageSourceType = "direct"
	ImageSourceTypeBucket     ImageSourceType = "bucket"
)

// AllValues returns all ImageSourceType values.
func (ImageSourceType) AllValues() []ImageSourceType {
	return []ImageSourceType{
		ImageSourceTypeStackBuild,
		ImageSourceTypeDirect,
		ImageSourceTypeBucket,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageSourceType) MarshalText() ([]byte, error) {
	switch s {
	case ImageSourceTypeStackBuild:
		return []byte(s), nil
	case ImageSourceTypeDirect:
		return []byte(s), nil
	case ImageSourceTypeBucket:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageSourceType) UnmarshalText(data []byte) error {
	switch ImageSourceType(data) {
	case ImageSourceTypeStackBuild:
		*s = ImageSourceTypeStackBuild
		return nil
	case ImageSourceTypeDirect:
		*s = ImageSourceTypeDirect
		return nil
	case ImageSourceTypeBucket:
		*s = ImageSourceTypeBucket
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/ImageState
type ImageState struct {
	// The current state of the image.
	Current ImageStateCurrent `json:"current"`
	Changed DateTime          `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptImageStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ImageState) GetCurrent() ImageStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ImageState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ImageState) GetError() OptImageStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ImageState) SetCurrent(val ImageStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ImageState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ImageState) SetError(val OptImageStateError) {
	s.Error = val
}

// The current state of the image.
type ImageStateCurrent string

const (
	ImageStateCurrentNew         ImageStateCurrent = "new"
	ImageStateCurrentUploading   ImageStateCurrent = "uploading"
	ImageStateCurrentDownloading ImageStateCurrent = "downloading"
	ImageStateCurrentBuilding    ImageStateCurrent = "building"
	ImageStateCurrentVerifying   ImageStateCurrent = "verifying"
	ImageStateCurrentSaving      ImageStateCurrent = "saving"
	ImageStateCurrentLive        ImageStateCurrent = "live"
	ImageStateCurrentDeleting    ImageStateCurrent = "deleting"
	ImageStateCurrentDeleted     ImageStateCurrent = "deleted"
)

// AllValues returns all ImageStateCurrent values.
func (ImageStateCurrent) AllValues() []ImageStateCurrent {
	return []ImageStateCurrent{
		ImageStateCurrentNew,
		ImageStateCurrentUploading,
		ImageStateCurrentDownloading,
		ImageStateCurrentBuilding,
		ImageStateCurrentVerifying,
		ImageStateCurrentSaving,
		ImageStateCurrentLive,
		ImageStateCurrentDeleting,
		ImageStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ImageStateCurrentNew:
		return []byte(s), nil
	case ImageStateCurrentUploading:
		return []byte(s), nil
	case ImageStateCurrentDownloading:
		return []byte(s), nil
	case ImageStateCurrentBuilding:
		return []byte(s), nil
	case ImageStateCurrentVerifying:
		return []byte(s), nil
	case ImageStateCurrentSaving:
		return []byte(s), nil
	case ImageStateCurrentLive:
		return []byte(s), nil
	case ImageStateCurrentDeleting:
		return []byte(s), nil
	case ImageStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageStateCurrent) UnmarshalText(data []byte) error {
	switch ImageStateCurrent(data) {
	case ImageStateCurrentNew:
		*s = ImageStateCurrentNew
		return nil
	case ImageStateCurrentUploading:
		*s = ImageStateCurrentUploading
		return nil
	case ImageStateCurrentDownloading:
		*s = ImageStateCurrentDownloading
		return nil
	case ImageStateCurrentBuilding:
		*s = ImageStateCurrentBuilding
		return nil
	case ImageStateCurrentVerifying:
		*s = ImageStateCurrentVerifying
		return nil
	case ImageStateCurrentSaving:
		*s = ImageStateCurrentSaving
		return nil
	case ImageStateCurrentLive:
		*s = ImageStateCurrentLive
		return nil
	case ImageStateCurrentDeleting:
		*s = ImageStateCurrentDeleting
		return nil
	case ImageStateCurrentDeleted:
		*s = ImageStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ImageStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ImageStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ImageStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ImageStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ImageStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A summary of the image this container was created from.
// Ref: #/components/schemas/ImageSummary
type ImageSummary struct {
	ID NilString `json:"id"`
	// An image that is packaged with Cycle directly, such as the global load balancer.
	Extension NilImageSummaryExtension `json:"extension"`
	// If a service container, the identifier specifying which service it is.
	Service NilImageSummaryService `json:"service"`
}

// GetID returns the value of ID.
func (s *ImageSummary) GetID() NilString {
	return s.ID
}

// GetExtension returns the value of Extension.
func (s *ImageSummary) GetExtension() NilImageSummaryExtension {
	return s.Extension
}

// GetService returns the value of Service.
func (s *ImageSummary) GetService() NilImageSummaryService {
	return s.Service
}

// SetID sets the value of ID.
func (s *ImageSummary) SetID(val NilString) {
	s.ID = val
}

// SetExtension sets the value of Extension.
func (s *ImageSummary) SetExtension(val NilImageSummaryExtension) {
	s.Extension = val
}

// SetService sets the value of Service.
func (s *ImageSummary) SetService(val NilImageSummaryService) {
	s.Service = val
}

// An image that is packaged with Cycle directly, such as the global load balancer.
type ImageSummaryExtension struct {
	Identifier Identifier `json:"identifier"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImageSummaryExtension) GetIdentifier() Identifier {
	return s.Identifier
}

// SetIdentifier sets the value of Identifier.
func (s *ImageSummaryExtension) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// Identifier of a service Container within an Environment.
type ImageSummaryService string

const (
	ImageSummaryServiceDiscovery    ImageSummaryService = "discovery"
	ImageSummaryServiceVpn          ImageSummaryService = "vpn"
	ImageSummaryServiceLoadbalancer ImageSummaryService = "loadbalancer"
	ImageSummaryServiceScheduler    ImageSummaryService = "scheduler"
)

// AllValues returns all ImageSummaryService values.
func (ImageSummaryService) AllValues() []ImageSummaryService {
	return []ImageSummaryService{
		ImageSummaryServiceDiscovery,
		ImageSummaryServiceVpn,
		ImageSummaryServiceLoadbalancer,
		ImageSummaryServiceScheduler,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImageSummaryService) MarshalText() ([]byte, error) {
	switch s {
	case ImageSummaryServiceDiscovery:
		return []byte(s), nil
	case ImageSummaryServiceVpn:
		return []byte(s), nil
	case ImageSummaryServiceLoadbalancer:
		return []byte(s), nil
	case ImageSummaryServiceScheduler:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImageSummaryService) UnmarshalText(data []byte) error {
	switch ImageSummaryService(data) {
	case ImageSummaryServiceDiscovery:
		*s = ImageSummaryServiceDiscovery
		return nil
	case ImageSummaryServiceVpn:
		*s = ImageSummaryServiceVpn
		return nil
	case ImageSummaryServiceLoadbalancer:
		*s = ImageSummaryServiceLoadbalancer
		return nil
	case ImageSummaryServiceScheduler:
		*s = ImageSummaryServiceScheduler
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A resource associated with an image.
// Ref: #/components/schemas/ImagesIncludes
type ImagesIncludes map[string]Image

func (s *ImagesIncludes) init() ImagesIncludes {
	m := *s
	if m == nil {
		m = map[string]Image{}
		*s = m
	}
	return m
}

// Settings for the images prune step for a pipeline.
// Ref: #/components/schemas/ImagesPruneStep
type ImagesPruneStep struct {
	// An identifier for the step.
	Identifier OptString                 `json:"identifier"`
	Options    OptImagesPruneStepOptions `json:"options"`
	Details    ImagesPruneStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *ImagesPruneStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *ImagesPruneStep) GetOptions() OptImagesPruneStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *ImagesPruneStep) GetDetails() ImagesPruneStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *ImagesPruneStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *ImagesPruneStep) SetOptions(val OptImagesPruneStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *ImagesPruneStep) SetDetails(val ImagesPruneStepDetails) {
	s.Details = val
}

// The action that the step takes.
type ImagesPruneStepAction string

const (
	ImagesPruneStepActionImagesPrune ImagesPruneStepAction = "images.prune"
)

// AllValues returns all ImagesPruneStepAction values.
func (ImagesPruneStepAction) AllValues() []ImagesPruneStepAction {
	return []ImagesPruneStepAction{
		ImagesPruneStepActionImagesPrune,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ImagesPruneStepAction) MarshalText() ([]byte, error) {
	switch s {
	case ImagesPruneStepActionImagesPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ImagesPruneStepAction) UnmarshalText(data []byte) error {
	switch ImagesPruneStepAction(data) {
	case ImagesPruneStepActionImagesPrune:
		*s = ImagesPruneStepActionImagesPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ImagesPruneStepDetails struct {
	SourceIds []ID `json:"source_ids"`
}

// GetSourceIds returns the value of SourceIds.
func (s *ImagesPruneStepDetails) GetSourceIds() []ID {
	return s.SourceIds
}

// SetSourceIds sets the value of SourceIds.
func (s *ImagesPruneStepDetails) SetSourceIds(val []ID) {
	s.SourceIds = val
}

type ImagesPruneStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *ImagesPruneStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *ImagesPruneStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// An index that enables search in the portal.
// Ref: #/components/schemas/Index
type Index struct {
	Generated DateTime `json:"generated"`
	// Id describing the Hub.
	HubID        string            `json:"hub_id"`
	Containers   IndexContainers   `json:"containers"`
	Environments IndexEnvironments `json:"environments"`
	ImageSources IndexImageSources `json:"image_sources"`
	DNSZones     IndexDNSZones     `json:"dns_zones"`
	Stacks       IndexStacks       `json:"stacks"`
	Servers      IndexServers      `json:"servers"`
}

// GetGenerated returns the value of Generated.
func (s *Index) GetGenerated() DateTime {
	return s.Generated
}

// GetHubID returns the value of HubID.
func (s *Index) GetHubID() string {
	return s.HubID
}

// GetContainers returns the value of Containers.
func (s *Index) GetContainers() IndexContainers {
	return s.Containers
}

// GetEnvironments returns the value of Environments.
func (s *Index) GetEnvironments() IndexEnvironments {
	return s.Environments
}

// GetImageSources returns the value of ImageSources.
func (s *Index) GetImageSources() IndexImageSources {
	return s.ImageSources
}

// GetDNSZones returns the value of DNSZones.
func (s *Index) GetDNSZones() IndexDNSZones {
	return s.DNSZones
}

// GetStacks returns the value of Stacks.
func (s *Index) GetStacks() IndexStacks {
	return s.Stacks
}

// GetServers returns the value of Servers.
func (s *Index) GetServers() IndexServers {
	return s.Servers
}

// SetGenerated sets the value of Generated.
func (s *Index) SetGenerated(val DateTime) {
	s.Generated = val
}

// SetHubID sets the value of HubID.
func (s *Index) SetHubID(val string) {
	s.HubID = val
}

// SetContainers sets the value of Containers.
func (s *Index) SetContainers(val IndexContainers) {
	s.Containers = val
}

// SetEnvironments sets the value of Environments.
func (s *Index) SetEnvironments(val IndexEnvironments) {
	s.Environments = val
}

// SetImageSources sets the value of ImageSources.
func (s *Index) SetImageSources(val IndexImageSources) {
	s.ImageSources = val
}

// SetDNSZones sets the value of DNSZones.
func (s *Index) SetDNSZones(val IndexDNSZones) {
	s.DNSZones = val
}

// SetStacks sets the value of Stacks.
func (s *Index) SetStacks(val IndexStacks) {
	s.Stacks = val
}

// SetServers sets the value of Servers.
func (s *Index) SetServers(val IndexServers) {
	s.Servers = val
}

type IndexContainers map[string]Component

func (s *IndexContainers) init() IndexContainers {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexDNSZones map[string]Component

func (s *IndexDNSZones) init() IndexDNSZones {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexEnvironments map[string]Component

func (s *IndexEnvironments) init() IndexEnvironments {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexImageSources map[string]Component

func (s *IndexImageSources) init() IndexImageSources {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexServers map[string]Component

func (s *IndexServers) init() IndexServers {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

type IndexStacks map[string]Component

func (s *IndexStacks) init() IndexStacks {
	m := *s
	if m == nil {
		m = map[string]Component{}
		*s = m
	}
	return m
}

// The server resource, referring to servers that have been deployed to a Cycle hub.
// Ref: #/components/schemas/Server
type InfraServer struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// An identifier for the location this server is deployed to.
	LocationID string `json:"location_id"`
	// An identifier for the model of server that is deployed.
	ModelID string `json:"model_id"`
	// An identifier for the node.
	NodeID            string                  `json:"node_id"`
	SharedFileSystems ServerSharedFileSystems `json:"shared_file_systems"`
	// The server hostname.
	Hostname string         `json:"hostname"`
	Creator  CreatorScope   `json:"creator"`
	Provider ServerProvider `json:"provider"`
	// The cluster the given server is deployed to.
	Cluster     string                     `json:"cluster"`
	Features    ServerFeatures             `json:"features"`
	Constraints ServerConstraints          `json:"constraints"`
	Autoscale   OptNilInfraServerAutoscale `json:"autoscale"`
	// Set to true when a server is created as part of an auto-scale event.
	Ephemeral bool `json:"ephemeral"`
	// Details about a server's evacuation status. When an evacuation is in progress, no new container
	// instances will be permitted on the server.
	Evacuate OptNilInfraServerEvacuate `json:"evacuate"`
	State    ServerState               `json:"state"`
	// A collection of timestamps for each event in the server's lifetime.
	Events InfraServerEvents `json:"events"`
	Meta   OptServerMeta     `json:"meta"`
}

// GetID returns the value of ID.
func (s *InfraServer) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *InfraServer) GetHubID() HubID {
	return s.HubID
}

// GetLocationID returns the value of LocationID.
func (s *InfraServer) GetLocationID() string {
	return s.LocationID
}

// GetModelID returns the value of ModelID.
func (s *InfraServer) GetModelID() string {
	return s.ModelID
}

// GetNodeID returns the value of NodeID.
func (s *InfraServer) GetNodeID() string {
	return s.NodeID
}

// GetSharedFileSystems returns the value of SharedFileSystems.
func (s *InfraServer) GetSharedFileSystems() ServerSharedFileSystems {
	return s.SharedFileSystems
}

// GetHostname returns the value of Hostname.
func (s *InfraServer) GetHostname() string {
	return s.Hostname
}

// GetCreator returns the value of Creator.
func (s *InfraServer) GetCreator() CreatorScope {
	return s.Creator
}

// GetProvider returns the value of Provider.
func (s *InfraServer) GetProvider() ServerProvider {
	return s.Provider
}

// GetCluster returns the value of Cluster.
func (s *InfraServer) GetCluster() string {
	return s.Cluster
}

// GetFeatures returns the value of Features.
func (s *InfraServer) GetFeatures() ServerFeatures {
	return s.Features
}

// GetConstraints returns the value of Constraints.
func (s *InfraServer) GetConstraints() ServerConstraints {
	return s.Constraints
}

// GetAutoscale returns the value of Autoscale.
func (s *InfraServer) GetAutoscale() OptNilInfraServerAutoscale {
	return s.Autoscale
}

// GetEphemeral returns the value of Ephemeral.
func (s *InfraServer) GetEphemeral() bool {
	return s.Ephemeral
}

// GetEvacuate returns the value of Evacuate.
func (s *InfraServer) GetEvacuate() OptNilInfraServerEvacuate {
	return s.Evacuate
}

// GetState returns the value of State.
func (s *InfraServer) GetState() ServerState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *InfraServer) GetEvents() InfraServerEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *InfraServer) GetMeta() OptServerMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *InfraServer) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *InfraServer) SetHubID(val HubID) {
	s.HubID = val
}

// SetLocationID sets the value of LocationID.
func (s *InfraServer) SetLocationID(val string) {
	s.LocationID = val
}

// SetModelID sets the value of ModelID.
func (s *InfraServer) SetModelID(val string) {
	s.ModelID = val
}

// SetNodeID sets the value of NodeID.
func (s *InfraServer) SetNodeID(val string) {
	s.NodeID = val
}

// SetSharedFileSystems sets the value of SharedFileSystems.
func (s *InfraServer) SetSharedFileSystems(val ServerSharedFileSystems) {
	s.SharedFileSystems = val
}

// SetHostname sets the value of Hostname.
func (s *InfraServer) SetHostname(val string) {
	s.Hostname = val
}

// SetCreator sets the value of Creator.
func (s *InfraServer) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetProvider sets the value of Provider.
func (s *InfraServer) SetProvider(val ServerProvider) {
	s.Provider = val
}

// SetCluster sets the value of Cluster.
func (s *InfraServer) SetCluster(val string) {
	s.Cluster = val
}

// SetFeatures sets the value of Features.
func (s *InfraServer) SetFeatures(val ServerFeatures) {
	s.Features = val
}

// SetConstraints sets the value of Constraints.
func (s *InfraServer) SetConstraints(val ServerConstraints) {
	s.Constraints = val
}

// SetAutoscale sets the value of Autoscale.
func (s *InfraServer) SetAutoscale(val OptNilInfraServerAutoscale) {
	s.Autoscale = val
}

// SetEphemeral sets the value of Ephemeral.
func (s *InfraServer) SetEphemeral(val bool) {
	s.Ephemeral = val
}

// SetEvacuate sets the value of Evacuate.
func (s *InfraServer) SetEvacuate(val OptNilInfraServerEvacuate) {
	s.Evacuate = val
}

// SetState sets the value of State.
func (s *InfraServer) SetState(val ServerState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *InfraServer) SetEvents(val InfraServerEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *InfraServer) SetMeta(val OptServerMeta) {
	s.Meta = val
}

type InfraServerAutoscale struct {
	GroupID ID `json:"group_id"`
}

// GetGroupID returns the value of GroupID.
func (s *InfraServerAutoscale) GetGroupID() ID {
	return s.GroupID
}

// SetGroupID sets the value of GroupID.
func (s *InfraServerAutoscale) SetGroupID(val ID) {
	s.GroupID = val
}

// Details about a server's evacuation status. When an evacuation is in progress, no new container
// instances will be permitted on the server.
type InfraServerEvacuate struct {
	Started DateTime `json:"started"`
}

// GetStarted returns the value of Started.
func (s *InfraServerEvacuate) GetStarted() DateTime {
	return s.Started
}

// SetStarted sets the value of Started.
func (s *InfraServerEvacuate) SetStarted(val DateTime) {
	s.Started = val
}

// A collection of timestamps for each event in the server's lifetime.
type InfraServerEvents struct {
	Created        DateTime `json:"created"`
	Updated        DateTime `json:"updated"`
	Deleted        DateTime `json:"deleted"`
	LatestInstance DateTime `json:"latest_instance"`
	// Information about the provisioning of the server.
	Provisioning InfraServerEventsProvisioning `json:"provisioning"`
}

// GetCreated returns the value of Created.
func (s *InfraServerEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InfraServerEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InfraServerEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLatestInstance returns the value of LatestInstance.
func (s *InfraServerEvents) GetLatestInstance() DateTime {
	return s.LatestInstance
}

// GetProvisioning returns the value of Provisioning.
func (s *InfraServerEvents) GetProvisioning() InfraServerEventsProvisioning {
	return s.Provisioning
}

// SetCreated sets the value of Created.
func (s *InfraServerEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InfraServerEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InfraServerEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLatestInstance sets the value of LatestInstance.
func (s *InfraServerEvents) SetLatestInstance(val DateTime) {
	s.LatestInstance = val
}

// SetProvisioning sets the value of Provisioning.
func (s *InfraServerEvents) SetProvisioning(val InfraServerEventsProvisioning) {
	s.Provisioning = val
}

// Information about the provisioning of the server.
type InfraServerEventsProvisioning struct {
	Started   DateTime `json:"started"`
	Failed    DateTime `json:"failed"`
	Completed DateTime `json:"completed"`
}

// GetStarted returns the value of Started.
func (s *InfraServerEventsProvisioning) GetStarted() DateTime {
	return s.Started
}

// GetFailed returns the value of Failed.
func (s *InfraServerEventsProvisioning) GetFailed() DateTime {
	return s.Failed
}

// GetCompleted returns the value of Completed.
func (s *InfraServerEventsProvisioning) GetCompleted() DateTime {
	return s.Completed
}

// SetStarted sets the value of Started.
func (s *InfraServerEventsProvisioning) SetStarted(val DateTime) {
	s.Started = val
}

// SetFailed sets the value of Failed.
func (s *InfraServerEventsProvisioning) SetFailed(val DateTime) {
	s.Failed = val
}

// SetCompleted sets the value of Completed.
func (s *InfraServerEventsProvisioning) SetCompleted(val DateTime) {
	s.Completed = val
}

// A summary of resource utilization/availability.
// Ref: #/components/schemas/InfrastructureResourceSummary
type InfrastructureResourceSummary struct {
	// Information about RAM Resources.
	RAM InfrastructureResourceSummaryRAM `json:"ram"`
	// Information about CPU resources.
	CPU InfrastructureResourceSummaryCPU `json:"cpu"`
}

// GetRAM returns the value of RAM.
func (s *InfrastructureResourceSummary) GetRAM() InfrastructureResourceSummaryRAM {
	return s.RAM
}

// GetCPU returns the value of CPU.
func (s *InfrastructureResourceSummary) GetCPU() InfrastructureResourceSummaryCPU {
	return s.CPU
}

// SetRAM sets the value of RAM.
func (s *InfrastructureResourceSummary) SetRAM(val InfrastructureResourceSummaryRAM) {
	s.RAM = val
}

// SetCPU sets the value of CPU.
func (s *InfrastructureResourceSummary) SetCPU(val InfrastructureResourceSummaryCPU) {
	s.CPU = val
}

// Information about CPU resources.
type InfrastructureResourceSummaryCPU struct {
	// The number of CPU cores.
	Cores int `json:"cores"`
	// Information about CPU shares.
	Shares InfrastructureResourceSummaryCPUShares `json:"shares"`
	// The ratio of shares allocated to total shares.
	ShareRatio OptInt `json:"share_ratio"`
}

// GetCores returns the value of Cores.
func (s *InfrastructureResourceSummaryCPU) GetCores() int {
	return s.Cores
}

// GetShares returns the value of Shares.
func (s *InfrastructureResourceSummaryCPU) GetShares() InfrastructureResourceSummaryCPUShares {
	return s.Shares
}

// GetShareRatio returns the value of ShareRatio.
func (s *InfrastructureResourceSummaryCPU) GetShareRatio() OptInt {
	return s.ShareRatio
}

// SetCores sets the value of Cores.
func (s *InfrastructureResourceSummaryCPU) SetCores(val int) {
	s.Cores = val
}

// SetShares sets the value of Shares.
func (s *InfrastructureResourceSummaryCPU) SetShares(val InfrastructureResourceSummaryCPUShares) {
	s.Shares = val
}

// SetShareRatio sets the value of ShareRatio.
func (s *InfrastructureResourceSummaryCPU) SetShareRatio(val OptInt) {
	s.ShareRatio = val
}

// Information about CPU shares.
type InfrastructureResourceSummaryCPUShares struct {
	// The number of shares allocated.
	Allocated int `json:"allocated"`
	// The total number of shares available.
	Total int `json:"total"`
}

// GetAllocated returns the value of Allocated.
func (s *InfrastructureResourceSummaryCPUShares) GetAllocated() int {
	return s.Allocated
}

// GetTotal returns the value of Total.
func (s *InfrastructureResourceSummaryCPUShares) GetTotal() int {
	return s.Total
}

// SetAllocated sets the value of Allocated.
func (s *InfrastructureResourceSummaryCPUShares) SetAllocated(val int) {
	s.Allocated = val
}

// SetTotal sets the value of Total.
func (s *InfrastructureResourceSummaryCPUShares) SetTotal(val int) {
	s.Total = val
}

// Information about RAM Resources.
type InfrastructureResourceSummaryRAM struct {
	// The total amount of RAM in MBsr.
	TotalMB int `json:"total_mb"`
	// The total amount of allocated RAM in MBs.
	AllocatedMB int `json:"allocated_mb"`
	// The total amount of used RAM in MBs.
	UsedMB int `json:"used_mb"`
	// The total amount of provisioned RAM in MBs.
	ProvisionedMB OptInt `json:"provisioned_mb"`
}

// GetTotalMB returns the value of TotalMB.
func (s *InfrastructureResourceSummaryRAM) GetTotalMB() int {
	return s.TotalMB
}

// GetAllocatedMB returns the value of AllocatedMB.
func (s *InfrastructureResourceSummaryRAM) GetAllocatedMB() int {
	return s.AllocatedMB
}

// GetUsedMB returns the value of UsedMB.
func (s *InfrastructureResourceSummaryRAM) GetUsedMB() int {
	return s.UsedMB
}

// GetProvisionedMB returns the value of ProvisionedMB.
func (s *InfrastructureResourceSummaryRAM) GetProvisionedMB() OptInt {
	return s.ProvisionedMB
}

// SetTotalMB sets the value of TotalMB.
func (s *InfrastructureResourceSummaryRAM) SetTotalMB(val int) {
	s.TotalMB = val
}

// SetAllocatedMB sets the value of AllocatedMB.
func (s *InfrastructureResourceSummaryRAM) SetAllocatedMB(val int) {
	s.AllocatedMB = val
}

// SetUsedMB sets the value of UsedMB.
func (s *InfrastructureResourceSummaryRAM) SetUsedMB(val int) {
	s.UsedMB = val
}

// SetProvisionedMB sets the value of ProvisionedMB.
func (s *InfrastructureResourceSummaryRAM) SetProvisionedMB(val OptInt) {
	s.ProvisionedMB = val
}

// An infrastructure summary resource.
// Ref: #/components/schemas/InfrastructureSummary
type InfrastructureSummary struct {
	HubID HubID `json:"hub_id"`
	// The number of servers on the cluster.
	Servers float64 `json:"servers"`
	// Statistics about image usage.
	Images InfrastructureSummaryImages `json:"images"`
	// Records pointing to information about clusters that make up this hubs infrastructure.
	Clusters InfrastructureSummaryClusters `json:"clusters"`
	Updated  DateTime                      `json:"updated"`
}

// GetHubID returns the value of HubID.
func (s *InfrastructureSummary) GetHubID() HubID {
	return s.HubID
}

// GetServers returns the value of Servers.
func (s *InfrastructureSummary) GetServers() float64 {
	return s.Servers
}

// GetImages returns the value of Images.
func (s *InfrastructureSummary) GetImages() InfrastructureSummaryImages {
	return s.Images
}

// GetClusters returns the value of Clusters.
func (s *InfrastructureSummary) GetClusters() InfrastructureSummaryClusters {
	return s.Clusters
}

// GetUpdated returns the value of Updated.
func (s *InfrastructureSummary) GetUpdated() DateTime {
	return s.Updated
}

// SetHubID sets the value of HubID.
func (s *InfrastructureSummary) SetHubID(val HubID) {
	s.HubID = val
}

// SetServers sets the value of Servers.
func (s *InfrastructureSummary) SetServers(val float64) {
	s.Servers = val
}

// SetImages sets the value of Images.
func (s *InfrastructureSummary) SetImages(val InfrastructureSummaryImages) {
	s.Images = val
}

// SetClusters sets the value of Clusters.
func (s *InfrastructureSummary) SetClusters(val InfrastructureSummaryClusters) {
	s.Clusters = val
}

// SetUpdated sets the value of Updated.
func (s *InfrastructureSummary) SetUpdated(val DateTime) {
	s.Updated = val
}

// Records pointing to information about clusters that make up this hubs infrastructure.
type InfrastructureSummaryClusters map[string]InfrastructureSummaryClustersItem

func (s *InfrastructureSummaryClusters) init() InfrastructureSummaryClusters {
	m := *s
	if m == nil {
		m = map[string]InfrastructureSummaryClustersItem{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItem struct {
	// The name of the cluster.
	Name      string                        `json:"name"`
	Resources InfrastructureResourceSummary `json:"resources"`
	// Whether Cycle has determined this cluster to be healthy or not.
	Healthy   bool                                     `json:"healthy"`
	Versions  ClusterVersionServerCount                `json:"versions"`
	Instances StateCountSummary                        `json:"instances"`
	Servers   InfrastructureSummaryClustersItemServers `json:"servers"`
}

// GetName returns the value of Name.
func (s *InfrastructureSummaryClustersItem) GetName() string {
	return s.Name
}

// GetResources returns the value of Resources.
func (s *InfrastructureSummaryClustersItem) GetResources() InfrastructureResourceSummary {
	return s.Resources
}

// GetHealthy returns the value of Healthy.
func (s *InfrastructureSummaryClustersItem) GetHealthy() bool {
	return s.Healthy
}

// GetVersions returns the value of Versions.
func (s *InfrastructureSummaryClustersItem) GetVersions() ClusterVersionServerCount {
	return s.Versions
}

// GetInstances returns the value of Instances.
func (s *InfrastructureSummaryClustersItem) GetInstances() StateCountSummary {
	return s.Instances
}

// GetServers returns the value of Servers.
func (s *InfrastructureSummaryClustersItem) GetServers() InfrastructureSummaryClustersItemServers {
	return s.Servers
}

// SetName sets the value of Name.
func (s *InfrastructureSummaryClustersItem) SetName(val string) {
	s.Name = val
}

// SetResources sets the value of Resources.
func (s *InfrastructureSummaryClustersItem) SetResources(val InfrastructureResourceSummary) {
	s.Resources = val
}

// SetHealthy sets the value of Healthy.
func (s *InfrastructureSummaryClustersItem) SetHealthy(val bool) {
	s.Healthy = val
}

// SetVersions sets the value of Versions.
func (s *InfrastructureSummaryClustersItem) SetVersions(val ClusterVersionServerCount) {
	s.Versions = val
}

// SetInstances sets the value of Instances.
func (s *InfrastructureSummaryClustersItem) SetInstances(val StateCountSummary) {
	s.Instances = val
}

// SetServers sets the value of Servers.
func (s *InfrastructureSummaryClustersItem) SetServers(val InfrastructureSummaryClustersItemServers) {
	s.Servers = val
}

type InfrastructureSummaryClustersItemServers struct {
	Count     float64                                           `json:"count"`
	Providers InfrastructureSummaryClustersItemServersProviders `json:"providers"`
	// IDs of all servers in this cluster.
	ServerIds []ID `json:"server_ids"`
}

// GetCount returns the value of Count.
func (s *InfrastructureSummaryClustersItemServers) GetCount() float64 {
	return s.Count
}

// GetProviders returns the value of Providers.
func (s *InfrastructureSummaryClustersItemServers) GetProviders() InfrastructureSummaryClustersItemServersProviders {
	return s.Providers
}

// GetServerIds returns the value of ServerIds.
func (s *InfrastructureSummaryClustersItemServers) GetServerIds() []ID {
	return s.ServerIds
}

// SetCount sets the value of Count.
func (s *InfrastructureSummaryClustersItemServers) SetCount(val float64) {
	s.Count = val
}

// SetProviders sets the value of Providers.
func (s *InfrastructureSummaryClustersItemServers) SetProviders(val InfrastructureSummaryClustersItemServersProviders) {
	s.Providers = val
}

// SetServerIds sets the value of ServerIds.
func (s *InfrastructureSummaryClustersItemServers) SetServerIds(val []ID) {
	s.ServerIds = val
}

type InfrastructureSummaryClustersItemServersProviders map[string]InfrastructureSummaryClustersItemServersProvidersItem

func (s *InfrastructureSummaryClustersItemServersProviders) init() InfrastructureSummaryClustersItemServersProviders {
	m := *s
	if m == nil {
		m = map[string]InfrastructureSummaryClustersItemServersProvidersItem{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItemServersProvidersItem struct {
	Count     float64                                                              `json:"count"`
	Locations OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations `json:"locations"`
	Models    OptNilInfrastructureSummaryClustersItemServersProvidersItemModels    `json:"models"`
	Resources OptInfrastructureResourceSummary                                     `json:"resources"`
}

// GetCount returns the value of Count.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetCount() float64 {
	return s.Count
}

// GetLocations returns the value of Locations.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetLocations() OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations {
	return s.Locations
}

// GetModels returns the value of Models.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetModels() OptNilInfrastructureSummaryClustersItemServersProvidersItemModels {
	return s.Models
}

// GetResources returns the value of Resources.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) GetResources() OptInfrastructureResourceSummary {
	return s.Resources
}

// SetCount sets the value of Count.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetCount(val float64) {
	s.Count = val
}

// SetLocations sets the value of Locations.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetLocations(val OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) {
	s.Locations = val
}

// SetModels sets the value of Models.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetModels(val OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) {
	s.Models = val
}

// SetResources sets the value of Resources.
func (s *InfrastructureSummaryClustersItemServersProvidersItem) SetResources(val OptInfrastructureResourceSummary) {
	s.Resources = val
}

type InfrastructureSummaryClustersItemServersProvidersItemLocations map[string]int

func (s *InfrastructureSummaryClustersItemServersProvidersItemLocations) init() InfrastructureSummaryClustersItemServersProvidersItemLocations {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type InfrastructureSummaryClustersItemServersProvidersItemModels map[string]int

func (s *InfrastructureSummaryClustersItemServersProvidersItemModels) init() InfrastructureSummaryClustersItemServersProvidersItemModels {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Statistics about image usage.
type InfrastructureSummaryImages struct {
	// Image tier information.
	Tier InfrastructureSummaryImagesTier `json:"tier"`
}

// GetTier returns the value of Tier.
func (s *InfrastructureSummaryImages) GetTier() InfrastructureSummaryImagesTier {
	return s.Tier
}

// SetTier sets the value of Tier.
func (s *InfrastructureSummaryImages) SetTier(val InfrastructureSummaryImagesTier) {
	s.Tier = val
}

// Image tier information.
type InfrastructureSummaryImagesTier struct {
	// A value in MB representing the total MB of space on the infrastructure available for images.
	TotalMB int `json:"total_mb"`
	// A value in MB representing the amount of allocated space for images.
	AllocatedMB int `json:"allocated_mb"`
	// A value in MB representing the total MB of space images are taking up out of the total megabytes
	// available.
	UsedMB int `json:"used_mb"`
}

// GetTotalMB returns the value of TotalMB.
func (s *InfrastructureSummaryImagesTier) GetTotalMB() int {
	return s.TotalMB
}

// GetAllocatedMB returns the value of AllocatedMB.
func (s *InfrastructureSummaryImagesTier) GetAllocatedMB() int {
	return s.AllocatedMB
}

// GetUsedMB returns the value of UsedMB.
func (s *InfrastructureSummaryImagesTier) GetUsedMB() int {
	return s.UsedMB
}

// SetTotalMB sets the value of TotalMB.
func (s *InfrastructureSummaryImagesTier) SetTotalMB(val int) {
	s.TotalMB = val
}

// SetAllocatedMB sets the value of AllocatedMB.
func (s *InfrastructureSummaryImagesTier) SetAllocatedMB(val int) {
	s.AllocatedMB = val
}

// SetUsedMB sets the value of UsedMB.
func (s *InfrastructureSummaryImagesTier) SetUsedMB(val int) {
	s.UsedMB = val
}

// An instance of a Container.
// Ref: #/components/schemas/Instance
type Instance struct {
	ID      ID           `json:"id"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// A container identifier for the container that is associated with this instance.
	ContainerID string `json:"container_id"`
	// A location identifier that's associated with the server this instance is deployed to.
	LocationID  string                    `json:"location_id"`
	Environment EnvironmentNetworkSummary `json:"environment"`
	// If the instance is stateful, additional details relating to its stateful properties.
	Stateful OptNilInstanceStateful `json:"stateful"`
	// If the instance is a function, additional details relating to its function properties.
	Function OptInstanceFunction `json:"function"`
	Provider InstanceProvider    `json:"provider"`
	ServerID ID                  `json:"server_id"`
	// The state as it relates to the following. * `active` - instance can be started or stopped. *
	// `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run. *
	// `configuring` - this instance is not allowed to start yet.
	ReadyState InstanceReadyState `json:"ready_state"`
	// The timestamp of when the instance was purged.
	PurgeTime OptNilDateTime `json:"purge_time"`
	// The hostname of the instance.
	Hostname   string                        `json:"hostname"`
	Service    OptServiceContainerIdentifier `json:"service"`
	State      InstanceState                 `json:"state"`
	Autoscale  OptNilInstanceAutoscale       `json:"autoscale"`
	Migration  OptNilInstanceMigration       `json:"migration"`
	Deployment OptNilInstanceDeployment      `json:"deployment"`
	// A collection of timestamps for each event in the instnaces lifetime.
	Events jx.Raw `json:"events"`
}

// GetID returns the value of ID.
func (s *Instance) GetID() ID {
	return s.ID
}

// GetCreator returns the value of Creator.
func (s *Instance) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Instance) GetHubID() HubID {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *Instance) GetContainerID() string {
	return s.ContainerID
}

// GetLocationID returns the value of LocationID.
func (s *Instance) GetLocationID() string {
	return s.LocationID
}

// GetEnvironment returns the value of Environment.
func (s *Instance) GetEnvironment() EnvironmentNetworkSummary {
	return s.Environment
}

// GetStateful returns the value of Stateful.
func (s *Instance) GetStateful() OptNilInstanceStateful {
	return s.Stateful
}

// GetFunction returns the value of Function.
func (s *Instance) GetFunction() OptInstanceFunction {
	return s.Function
}

// GetProvider returns the value of Provider.
func (s *Instance) GetProvider() InstanceProvider {
	return s.Provider
}

// GetServerID returns the value of ServerID.
func (s *Instance) GetServerID() ID {
	return s.ServerID
}

// GetReadyState returns the value of ReadyState.
func (s *Instance) GetReadyState() InstanceReadyState {
	return s.ReadyState
}

// GetPurgeTime returns the value of PurgeTime.
func (s *Instance) GetPurgeTime() OptNilDateTime {
	return s.PurgeTime
}

// GetHostname returns the value of Hostname.
func (s *Instance) GetHostname() string {
	return s.Hostname
}

// GetService returns the value of Service.
func (s *Instance) GetService() OptServiceContainerIdentifier {
	return s.Service
}

// GetState returns the value of State.
func (s *Instance) GetState() InstanceState {
	return s.State
}

// GetAutoscale returns the value of Autoscale.
func (s *Instance) GetAutoscale() OptNilInstanceAutoscale {
	return s.Autoscale
}

// GetMigration returns the value of Migration.
func (s *Instance) GetMigration() OptNilInstanceMigration {
	return s.Migration
}

// GetDeployment returns the value of Deployment.
func (s *Instance) GetDeployment() OptNilInstanceDeployment {
	return s.Deployment
}

// GetEvents returns the value of Events.
func (s *Instance) GetEvents() jx.Raw {
	return s.Events
}

// SetID sets the value of ID.
func (s *Instance) SetID(val ID) {
	s.ID = val
}

// SetCreator sets the value of Creator.
func (s *Instance) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Instance) SetHubID(val HubID) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *Instance) SetContainerID(val string) {
	s.ContainerID = val
}

// SetLocationID sets the value of LocationID.
func (s *Instance) SetLocationID(val string) {
	s.LocationID = val
}

// SetEnvironment sets the value of Environment.
func (s *Instance) SetEnvironment(val EnvironmentNetworkSummary) {
	s.Environment = val
}

// SetStateful sets the value of Stateful.
func (s *Instance) SetStateful(val OptNilInstanceStateful) {
	s.Stateful = val
}

// SetFunction sets the value of Function.
func (s *Instance) SetFunction(val OptInstanceFunction) {
	s.Function = val
}

// SetProvider sets the value of Provider.
func (s *Instance) SetProvider(val InstanceProvider) {
	s.Provider = val
}

// SetServerID sets the value of ServerID.
func (s *Instance) SetServerID(val ID) {
	s.ServerID = val
}

// SetReadyState sets the value of ReadyState.
func (s *Instance) SetReadyState(val InstanceReadyState) {
	s.ReadyState = val
}

// SetPurgeTime sets the value of PurgeTime.
func (s *Instance) SetPurgeTime(val OptNilDateTime) {
	s.PurgeTime = val
}

// SetHostname sets the value of Hostname.
func (s *Instance) SetHostname(val string) {
	s.Hostname = val
}

// SetService sets the value of Service.
func (s *Instance) SetService(val OptServiceContainerIdentifier) {
	s.Service = val
}

// SetState sets the value of State.
func (s *Instance) SetState(val InstanceState) {
	s.State = val
}

// SetAutoscale sets the value of Autoscale.
func (s *Instance) SetAutoscale(val OptNilInstanceAutoscale) {
	s.Autoscale = val
}

// SetMigration sets the value of Migration.
func (s *Instance) SetMigration(val OptNilInstanceMigration) {
	s.Migration = val
}

// SetDeployment sets the value of Deployment.
func (s *Instance) SetDeployment(val OptNilInstanceDeployment) {
	s.Deployment = val
}

// SetEvents sets the value of Events.
func (s *Instance) SetEvents(val jx.Raw) {
	s.Events = val
}

// Auto-scale details for instances created by auto-scale events.
type InstanceAutoscale struct {
	SiblingID ID       `json:"sibling_id"`
	MinTTL    DateTime `json:"min_ttl"`
}

// GetSiblingID returns the value of SiblingID.
func (s *InstanceAutoscale) GetSiblingID() ID {
	return s.SiblingID
}

// GetMinTTL returns the value of MinTTL.
func (s *InstanceAutoscale) GetMinTTL() DateTime {
	return s.MinTTL
}

// SetSiblingID sets the value of SiblingID.
func (s *InstanceAutoscale) SetSiblingID(val ID) {
	s.SiblingID = val
}

// SetMinTTL sets the value of MinTTL.
func (s *InstanceAutoscale) SetMinTTL(val DateTime) {
	s.MinTTL = val
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type InstanceDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *InstanceDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *InstanceDeployment) SetVersion(val Version) {
	s.Version = val
}

// If the instance is a function, additional details relating to its function properties.
type InstanceFunction struct {
	// The seed used for this function.
	Seed int `json:"seed"`
}

// GetSeed returns the value of Seed.
func (s *InstanceFunction) GetSeed() int {
	return s.Seed
}

// SetSeed sets the value of Seed.
func (s *InstanceFunction) SetSeed(val int) {
	s.Seed = val
}

// A resource associated with an instance.
// Ref: #/components/schemas/InstanceIncludes
type InstanceIncludes struct {
	Creators                OptCreatorInclude       `json:"creators"`
	Servers                 OptServersIncludes      `json:"servers"`
	Locations               OptLocationsIncludes    `json:"locations"`
	Integrations            OptIntegrationsIncludes `json:"integrations"`
	IntegrationsIdentifiers OptIdentifierIncludes   `json:"integrations:identifiers"`
	Containers              OptContainersIncludes   `json:"containers"`
	ContainersIdentifiers   OptIdentifierIncludes   `json:"containers:identifiers"`
	Environments            OptEnvironmentIncludes  `json:"environments"`
	EnvironmentsIdentifiers OptIdentifierIncludes   `json:"environments:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *InstanceIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetServers returns the value of Servers.
func (s *InstanceIncludes) GetServers() OptServersIncludes {
	return s.Servers
}

// GetLocations returns the value of Locations.
func (s *InstanceIncludes) GetLocations() OptLocationsIncludes {
	return s.Locations
}

// GetIntegrations returns the value of Integrations.
func (s *InstanceIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// GetIntegrationsIdentifiers returns the value of IntegrationsIdentifiers.
func (s *InstanceIncludes) GetIntegrationsIdentifiers() OptIdentifierIncludes {
	return s.IntegrationsIdentifiers
}

// GetContainers returns the value of Containers.
func (s *InstanceIncludes) GetContainers() OptContainersIncludes {
	return s.Containers
}

// GetContainersIdentifiers returns the value of ContainersIdentifiers.
func (s *InstanceIncludes) GetContainersIdentifiers() OptIdentifierIncludes {
	return s.ContainersIdentifiers
}

// GetEnvironments returns the value of Environments.
func (s *InstanceIncludes) GetEnvironments() OptEnvironmentIncludes {
	return s.Environments
}

// GetEnvironmentsIdentifiers returns the value of EnvironmentsIdentifiers.
func (s *InstanceIncludes) GetEnvironmentsIdentifiers() OptIdentifierIncludes {
	return s.EnvironmentsIdentifiers
}

// SetCreators sets the value of Creators.
func (s *InstanceIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetServers sets the value of Servers.
func (s *InstanceIncludes) SetServers(val OptServersIncludes) {
	s.Servers = val
}

// SetLocations sets the value of Locations.
func (s *InstanceIncludes) SetLocations(val OptLocationsIncludes) {
	s.Locations = val
}

// SetIntegrations sets the value of Integrations.
func (s *InstanceIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// SetIntegrationsIdentifiers sets the value of IntegrationsIdentifiers.
func (s *InstanceIncludes) SetIntegrationsIdentifiers(val OptIdentifierIncludes) {
	s.IntegrationsIdentifiers = val
}

// SetContainers sets the value of Containers.
func (s *InstanceIncludes) SetContainers(val OptContainersIncludes) {
	s.Containers = val
}

// SetContainersIdentifiers sets the value of ContainersIdentifiers.
func (s *InstanceIncludes) SetContainersIdentifiers(val OptIdentifierIncludes) {
	s.ContainersIdentifiers = val
}

// SetEnvironments sets the value of Environments.
func (s *InstanceIncludes) SetEnvironments(val OptEnvironmentIncludes) {
	s.Environments = val
}

// SetEnvironmentsIdentifiers sets the value of EnvironmentsIdentifiers.
func (s *InstanceIncludes) SetEnvironmentsIdentifiers(val OptIdentifierIncludes) {
	s.EnvironmentsIdentifiers = val
}

// Information regarding the migration of an instance, such as the server that the instance came from
// or the server that the instance was moved to.
type InstanceMigration struct {
	To        OptNilInstanceMigrationTo   `json:"to"`
	From      OptNilInstanceMigrationFrom `json:"from"`
	Started   OptDateTime                 `json:"started"`
	Completed OptDateTime                 `json:"completed"`
	// A key used by the platform to verify the migration.
	Key string `json:"key"`
	// A boolean where true represents the volumes for the instance should be copied to the new server as
	// well.
	CopyVolumes bool `json:"copy_volumes"`
}

// GetTo returns the value of To.
func (s *InstanceMigration) GetTo() OptNilInstanceMigrationTo {
	return s.To
}

// GetFrom returns the value of From.
func (s *InstanceMigration) GetFrom() OptNilInstanceMigrationFrom {
	return s.From
}

// GetStarted returns the value of Started.
func (s *InstanceMigration) GetStarted() OptDateTime {
	return s.Started
}

// GetCompleted returns the value of Completed.
func (s *InstanceMigration) GetCompleted() OptDateTime {
	return s.Completed
}

// GetKey returns the value of Key.
func (s *InstanceMigration) GetKey() string {
	return s.Key
}

// GetCopyVolumes returns the value of CopyVolumes.
func (s *InstanceMigration) GetCopyVolumes() bool {
	return s.CopyVolumes
}

// SetTo sets the value of To.
func (s *InstanceMigration) SetTo(val OptNilInstanceMigrationTo) {
	s.To = val
}

// SetFrom sets the value of From.
func (s *InstanceMigration) SetFrom(val OptNilInstanceMigrationFrom) {
	s.From = val
}

// SetStarted sets the value of Started.
func (s *InstanceMigration) SetStarted(val OptDateTime) {
	s.Started = val
}

// SetCompleted sets the value of Completed.
func (s *InstanceMigration) SetCompleted(val OptDateTime) {
	s.Completed = val
}

// SetKey sets the value of Key.
func (s *InstanceMigration) SetKey(val string) {
	s.Key = val
}

// SetCopyVolumes sets the value of CopyVolumes.
func (s *InstanceMigration) SetCopyVolumes(val bool) {
	s.CopyVolumes = val
}

// Information about a migrated instance.
type InstanceMigrationFrom struct {
	// The ID of the instance.
	InstanceID string `json:"instance_id"`
	// The ID of the server.
	ServerID string `json:"server_id"`
}

// GetInstanceID returns the value of InstanceID.
func (s *InstanceMigrationFrom) GetInstanceID() string {
	return s.InstanceID
}

// GetServerID returns the value of ServerID.
func (s *InstanceMigrationFrom) GetServerID() string {
	return s.ServerID
}

// SetInstanceID sets the value of InstanceID.
func (s *InstanceMigrationFrom) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetServerID sets the value of ServerID.
func (s *InstanceMigrationFrom) SetServerID(val string) {
	s.ServerID = val
}

// Information about a migrated instance.
type InstanceMigrationTo struct {
	// The ID of the instance.
	InstanceID string `json:"instance_id"`
	// The ID of the server.
	ServerID string `json:"server_id"`
}

// GetInstanceID returns the value of InstanceID.
func (s *InstanceMigrationTo) GetInstanceID() string {
	return s.InstanceID
}

// GetServerID returns the value of ServerID.
func (s *InstanceMigrationTo) GetServerID() string {
	return s.ServerID
}

// SetInstanceID sets the value of InstanceID.
func (s *InstanceMigrationTo) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetServerID sets the value of ServerID.
func (s *InstanceMigrationTo) SetServerID(val string) {
	s.ServerID = val
}

// Ref: #/components/schemas/InstanceProvider
type InstanceProvider struct {
	// The vendor of the hub provider integration related to the server this instance runs on.
	Vendor        string `json:"vendor"`
	IntegrationID ID     `json:"integration_id"`
	// The identifier of the location related to the server this instance runs on.
	Location string `json:"location"`
}

// GetVendor returns the value of Vendor.
func (s *InstanceProvider) GetVendor() string {
	return s.Vendor
}

// GetIntegrationID returns the value of IntegrationID.
func (s *InstanceProvider) GetIntegrationID() ID {
	return s.IntegrationID
}

// GetLocation returns the value of Location.
func (s *InstanceProvider) GetLocation() string {
	return s.Location
}

// SetVendor sets the value of Vendor.
func (s *InstanceProvider) SetVendor(val string) {
	s.Vendor = val
}

// SetIntegrationID sets the value of IntegrationID.
func (s *InstanceProvider) SetIntegrationID(val ID) {
	s.IntegrationID = val
}

// SetLocation sets the value of Location.
func (s *InstanceProvider) SetLocation(val string) {
	s.Location = val
}

// The state as it relates to the following. * `active` - instance can be started or stopped. *
// `purge` - instance should be deleted. * `hibernate` - instance is active but not allowed to run. *
// `configuring` - this instance is not allowed to start yet.
type InstanceReadyState string

const (
	InstanceReadyStateActive      InstanceReadyState = "active"
	InstanceReadyStatePurge       InstanceReadyState = "purge"
	InstanceReadyStateHibernate   InstanceReadyState = "hibernate"
	InstanceReadyStateConfiguring InstanceReadyState = "configuring"
)

// AllValues returns all InstanceReadyState values.
func (InstanceReadyState) AllValues() []InstanceReadyState {
	return []InstanceReadyState{
		InstanceReadyStateActive,
		InstanceReadyStatePurge,
		InstanceReadyStateHibernate,
		InstanceReadyStateConfiguring,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceReadyState) MarshalText() ([]byte, error) {
	switch s {
	case InstanceReadyStateActive:
		return []byte(s), nil
	case InstanceReadyStatePurge:
		return []byte(s), nil
	case InstanceReadyStateHibernate:
		return []byte(s), nil
	case InstanceReadyStateConfiguring:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceReadyState) UnmarshalText(data []byte) error {
	switch InstanceReadyState(data) {
	case InstanceReadyStateActive:
		*s = InstanceReadyStateActive
		return nil
	case InstanceReadyStatePurge:
		*s = InstanceReadyStatePurge
		return nil
	case InstanceReadyStateHibernate:
		*s = InstanceReadyStateHibernate
		return nil
	case InstanceReadyStateConfiguring:
		*s = InstanceReadyStateConfiguring
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/InstanceState
type InstanceState struct {
	// The current state of the instance.
	Current InstanceStateCurrent `json:"current"`
	// Information about the health of the instance.
	Health  OptNilInstanceStateHealth `json:"health"`
	Changed DateTime                  `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptInstanceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *InstanceState) GetCurrent() InstanceStateCurrent {
	return s.Current
}

// GetHealth returns the value of Health.
func (s *InstanceState) GetHealth() OptNilInstanceStateHealth {
	return s.Health
}

// GetChanged returns the value of Changed.
func (s *InstanceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *InstanceState) GetError() OptInstanceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *InstanceState) SetCurrent(val InstanceStateCurrent) {
	s.Current = val
}

// SetHealth sets the value of Health.
func (s *InstanceState) SetHealth(val OptNilInstanceStateHealth) {
	s.Health = val
}

// SetChanged sets the value of Changed.
func (s *InstanceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *InstanceState) SetError(val OptInstanceStateError) {
	s.Error = val
}

// The current state of the instance.
type InstanceStateCurrent string

const (
	InstanceStateCurrentNew       InstanceStateCurrent = "new"
	InstanceStateCurrentStarting  InstanceStateCurrent = "starting"
	InstanceStateCurrentReimaging InstanceStateCurrent = "reimaging"
	InstanceStateCurrentMigrating InstanceStateCurrent = "migrating"
	InstanceStateCurrentRunning   InstanceStateCurrent = "running"
	InstanceStateCurrentStopping  InstanceStateCurrent = "stopping"
	InstanceStateCurrentStopped   InstanceStateCurrent = "stopped"
	InstanceStateCurrentFailed    InstanceStateCurrent = "failed"
	InstanceStateCurrentDeleting  InstanceStateCurrent = "deleting"
	InstanceStateCurrentDeleted   InstanceStateCurrent = "deleted"
)

// AllValues returns all InstanceStateCurrent values.
func (InstanceStateCurrent) AllValues() []InstanceStateCurrent {
	return []InstanceStateCurrent{
		InstanceStateCurrentNew,
		InstanceStateCurrentStarting,
		InstanceStateCurrentReimaging,
		InstanceStateCurrentMigrating,
		InstanceStateCurrentRunning,
		InstanceStateCurrentStopping,
		InstanceStateCurrentStopped,
		InstanceStateCurrentFailed,
		InstanceStateCurrentDeleting,
		InstanceStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case InstanceStateCurrentNew:
		return []byte(s), nil
	case InstanceStateCurrentStarting:
		return []byte(s), nil
	case InstanceStateCurrentReimaging:
		return []byte(s), nil
	case InstanceStateCurrentMigrating:
		return []byte(s), nil
	case InstanceStateCurrentRunning:
		return []byte(s), nil
	case InstanceStateCurrentStopping:
		return []byte(s), nil
	case InstanceStateCurrentStopped:
		return []byte(s), nil
	case InstanceStateCurrentFailed:
		return []byte(s), nil
	case InstanceStateCurrentDeleting:
		return []byte(s), nil
	case InstanceStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceStateCurrent) UnmarshalText(data []byte) error {
	switch InstanceStateCurrent(data) {
	case InstanceStateCurrentNew:
		*s = InstanceStateCurrentNew
		return nil
	case InstanceStateCurrentStarting:
		*s = InstanceStateCurrentStarting
		return nil
	case InstanceStateCurrentReimaging:
		*s = InstanceStateCurrentReimaging
		return nil
	case InstanceStateCurrentMigrating:
		*s = InstanceStateCurrentMigrating
		return nil
	case InstanceStateCurrentRunning:
		*s = InstanceStateCurrentRunning
		return nil
	case InstanceStateCurrentStopping:
		*s = InstanceStateCurrentStopping
		return nil
	case InstanceStateCurrentStopped:
		*s = InstanceStateCurrentStopped
		return nil
	case InstanceStateCurrentFailed:
		*s = InstanceStateCurrentFailed
		return nil
	case InstanceStateCurrentDeleting:
		*s = InstanceStateCurrentDeleting
		return nil
	case InstanceStateCurrentDeleted:
		*s = InstanceStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type InstanceStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *InstanceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *InstanceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *InstanceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *InstanceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about the health of the instance.
type InstanceStateHealth struct {
	// Describes the healthiness of the instance. Health checks can be configured at the container level.
	// - `true`: The instance is considered healthy.
	// - `false`: The instance is considered unhealthy.
	// - `null`: The instance has not yet reported its health, or a health check has not yet been
	// performed.
	Healthy NilBool  `json:"healthy"`
	Updated DateTime `json:"updated"`
}

// GetHealthy returns the value of Healthy.
func (s *InstanceStateHealth) GetHealthy() NilBool {
	return s.Healthy
}

// GetUpdated returns the value of Updated.
func (s *InstanceStateHealth) GetUpdated() DateTime {
	return s.Updated
}

// SetHealthy sets the value of Healthy.
func (s *InstanceStateHealth) SetHealthy(val NilBool) {
	s.Healthy = val
}

// SetUpdated sets the value of Updated.
func (s *InstanceStateHealth) SetUpdated(val DateTime) {
	s.Updated = val
}

// If the instance is stateful, additional details relating to its stateful properties.
type InstanceStateful struct {
	ID ID `json:"id"`
	// The base hostname for the given instance.
	BaseHostname string `json:"base_hostname"`
}

// GetID returns the value of ID.
func (s *InstanceStateful) GetID() ID {
	return s.ID
}

// GetBaseHostname returns the value of BaseHostname.
func (s *InstanceStateful) GetBaseHostname() string {
	return s.BaseHostname
}

// SetID sets the value of ID.
func (s *InstanceStateful) SetID(val ID) {
	s.ID = val
}

// SetBaseHostname sets the value of BaseHostname.
func (s *InstanceStateful) SetBaseHostname(val string) {
	s.BaseHostname = val
}

// A point-in-time snapshot of a count of instances by state.
// Ref: #/components/schemas/InstanceTelemetryPoint
type InstanceTelemetryPoint struct {
	Time DateTime `json:"time"`
	// Records for instance state and number of instances in that state.
	Instances InstanceTelemetryPointInstances `json:"instances"`
}

// GetTime returns the value of Time.
func (s *InstanceTelemetryPoint) GetTime() DateTime {
	return s.Time
}

// GetInstances returns the value of Instances.
func (s *InstanceTelemetryPoint) GetInstances() InstanceTelemetryPointInstances {
	return s.Instances
}

// SetTime sets the value of Time.
func (s *InstanceTelemetryPoint) SetTime(val DateTime) {
	s.Time = val
}

// SetInstances sets the value of Instances.
func (s *InstanceTelemetryPoint) SetInstances(val InstanceTelemetryPointInstances) {
	s.Instances = val
}

// Records for instance state and number of instances in that state.
type InstanceTelemetryPointInstances map[string]int

func (s *InstanceTelemetryPointInstances) init() InstanceTelemetryPointInstances {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// An Instance telemetry report.
// Ref: #/components/schemas/InstanceTelemetryReport
type InstanceTelemetryReport struct {
	Request TelemetryReportRequest `json:"request"`
	// An array of telemetry snapshots.
	Snapshots []ResourceSnapshot `json:"snapshots"`
}

// GetRequest returns the value of Request.
func (s *InstanceTelemetryReport) GetRequest() TelemetryReportRequest {
	return s.Request
}

// GetSnapshots returns the value of Snapshots.
func (s *InstanceTelemetryReport) GetSnapshots() []ResourceSnapshot {
	return s.Snapshots
}

// SetRequest sets the value of Request.
func (s *InstanceTelemetryReport) SetRequest(val TelemetryReportRequest) {
	s.Request = val
}

// SetSnapshots sets the value of Snapshots.
func (s *InstanceTelemetryReport) SetSnapshots(val []ResourceSnapshot) {
	s.Snapshots = val
}

// A container instance volume resource.
// Ref: #/components/schemas/InstanceVolume
type InstanceVolume struct {
	ID       ID              `json:"id"`
	Config   ContainerVolume `json:"config"`
	Deployed DeployedVolume  `json:"deployed"`
	Sftp     SFTP            `json:"sftp"`
}

// GetID returns the value of ID.
func (s *InstanceVolume) GetID() ID {
	return s.ID
}

// GetConfig returns the value of Config.
func (s *InstanceVolume) GetConfig() ContainerVolume {
	return s.Config
}

// GetDeployed returns the value of Deployed.
func (s *InstanceVolume) GetDeployed() DeployedVolume {
	return s.Deployed
}

// GetSftp returns the value of Sftp.
func (s *InstanceVolume) GetSftp() SFTP {
	return s.Sftp
}

// SetID sets the value of ID.
func (s *InstanceVolume) SetID(val ID) {
	s.ID = val
}

// SetConfig sets the value of Config.
func (s *InstanceVolume) SetConfig(val ContainerVolume) {
	s.Config = val
}

// SetDeployed sets the value of Deployed.
func (s *InstanceVolume) SetDeployed(val DeployedVolume) {
	s.Deployed = val
}

// SetSftp sets the value of Sftp.
func (s *InstanceVolume) SetSftp(val SFTP) {
	s.Sftp = val
}

// Ref: #/components/schemas/Integration
type Integration struct {
	ID ID `json:"id"`
	// Name of the Integration.
	Name OptNilString `json:"name"`
	// Which vendor this Integration is associated with.
	Vendor     string     `json:"vendor"`
	Identifier Identifier `json:"identifier"`
	// Authentication information for the Integration, can be null.
	Auth OptNilIntegrationAuth `json:"auth"`
	// Additional key-value pairs associated with the Integration.
	Extra   OptNilIntegrationExtra `json:"extra"`
	Creator CreatorScope           `json:"creator"`
	HubID   ID                     `json:"hub_id"`
	State   IntegrationState       `json:"state"`
	// A collection of timestamps for each event in the Integration's lifetime.
	Events IntegrationEvents     `json:"events"`
	Meta   OptNilIntegrationMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Integration) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Integration) GetName() OptNilString {
	return s.Name
}

// GetVendor returns the value of Vendor.
func (s *Integration) GetVendor() string {
	return s.Vendor
}

// GetIdentifier returns the value of Identifier.
func (s *Integration) GetIdentifier() Identifier {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *Integration) GetAuth() OptNilIntegrationAuth {
	return s.Auth
}

// GetExtra returns the value of Extra.
func (s *Integration) GetExtra() OptNilIntegrationExtra {
	return s.Extra
}

// GetCreator returns the value of Creator.
func (s *Integration) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Integration) GetHubID() ID {
	return s.HubID
}

// GetState returns the value of State.
func (s *Integration) GetState() IntegrationState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Integration) GetEvents() IntegrationEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *Integration) GetMeta() OptNilIntegrationMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Integration) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Integration) SetName(val OptNilString) {
	s.Name = val
}

// SetVendor sets the value of Vendor.
func (s *Integration) SetVendor(val string) {
	s.Vendor = val
}

// SetIdentifier sets the value of Identifier.
func (s *Integration) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *Integration) SetAuth(val OptNilIntegrationAuth) {
	s.Auth = val
}

// SetExtra sets the value of Extra.
func (s *Integration) SetExtra(val OptNilIntegrationExtra) {
	s.Extra = val
}

// SetCreator sets the value of Creator.
func (s *Integration) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Integration) SetHubID(val ID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *Integration) SetState(val IntegrationState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Integration) SetEvents(val IntegrationEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *Integration) SetMeta(val OptNilIntegrationMeta) {
	s.Meta = val
}

type IntegrationAuth struct {
	// The region associated with the Integration.
	Region OptNilString `json:"region"`
	// The namespace associated with the Integration.
	Namespace OptNilString `json:"namespace"`
	// API key for accessing the Integration.
	APIKey OptNilString `json:"api_key"`
	// Key ID for accessing the Integration.
	KeyID OptNilString `json:"key_id"`
	// Secret for accessing the Integration.
	Secret OptNilString `json:"secret"`
	// Subscription ID for the Integration.
	SubscriptionID OptNilString `json:"subscription_id"`
	// Client ID for the Integration.
	ClientID OptNilString `json:"client_id"`
	// Base64 encoded configuration for the Integration.
	Base64Config OptNilString `json:"base64_config"`
}

// GetRegion returns the value of Region.
func (s *IntegrationAuth) GetRegion() OptNilString {
	return s.Region
}

// GetNamespace returns the value of Namespace.
func (s *IntegrationAuth) GetNamespace() OptNilString {
	return s.Namespace
}

// GetAPIKey returns the value of APIKey.
func (s *IntegrationAuth) GetAPIKey() OptNilString {
	return s.APIKey
}

// GetKeyID returns the value of KeyID.
func (s *IntegrationAuth) GetKeyID() OptNilString {
	return s.KeyID
}

// GetSecret returns the value of Secret.
func (s *IntegrationAuth) GetSecret() OptNilString {
	return s.Secret
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *IntegrationAuth) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetClientID returns the value of ClientID.
func (s *IntegrationAuth) GetClientID() OptNilString {
	return s.ClientID
}

// GetBase64Config returns the value of Base64Config.
func (s *IntegrationAuth) GetBase64Config() OptNilString {
	return s.Base64Config
}

// SetRegion sets the value of Region.
func (s *IntegrationAuth) SetRegion(val OptNilString) {
	s.Region = val
}

// SetNamespace sets the value of Namespace.
func (s *IntegrationAuth) SetNamespace(val OptNilString) {
	s.Namespace = val
}

// SetAPIKey sets the value of APIKey.
func (s *IntegrationAuth) SetAPIKey(val OptNilString) {
	s.APIKey = val
}

// SetKeyID sets the value of KeyID.
func (s *IntegrationAuth) SetKeyID(val OptNilString) {
	s.KeyID = val
}

// SetSecret sets the value of Secret.
func (s *IntegrationAuth) SetSecret(val OptNilString) {
	s.Secret = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *IntegrationAuth) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetClientID sets the value of ClientID.
func (s *IntegrationAuth) SetClientID(val OptNilString) {
	s.ClientID = val
}

// SetBase64Config sets the value of Base64Config.
func (s *IntegrationAuth) SetBase64Config(val OptNilString) {
	s.Base64Config = val
}

// Describes an integration for a Cycle Hub that can be enabled by the Hub owner.
// Ref: #/components/schemas/IntegrationDefinition
type IntegrationDefinition struct {
	Vendor               string `json:"vendor"`
	Name                 string `json:"name"`
	SupportsVerification bool   `json:"supports_verification"`
	SupportsMultiple     bool   `json:"supports_multiple"`
	// A list of additional features supported by this Integration.
	Features OptNilStringArray `json:"features"`
	// A list of functionality that this integration extends. i.e. ["backups"].
	Extends OptNilStringArray `json:"extends"`
	// Additional configuration options that are available when using this Integration. These describe
	// additional functionality that Cycle may utilize.
	ExtendedConfiguration OptNilIntegrationDefinitionExtendedConfiguration `json:"extended_configuration"`
	Fields                OptIntegrationDefinitionFields                   `json:"fields"`
	URL                   url.URL                                          `json:"url"`
	Public                bool                                             `json:"public"`
	Usable                bool                                             `json:"usable"`
	// If true, the Integration can be edited. Otherwise, to make a change it will need to be deleted and
	// recreated.
	Editable bool `json:"editable"`
}

// GetVendor returns the value of Vendor.
func (s *IntegrationDefinition) GetVendor() string {
	return s.Vendor
}

// GetName returns the value of Name.
func (s *IntegrationDefinition) GetName() string {
	return s.Name
}

// GetSupportsVerification returns the value of SupportsVerification.
func (s *IntegrationDefinition) GetSupportsVerification() bool {
	return s.SupportsVerification
}

// GetSupportsMultiple returns the value of SupportsMultiple.
func (s *IntegrationDefinition) GetSupportsMultiple() bool {
	return s.SupportsMultiple
}

// GetFeatures returns the value of Features.
func (s *IntegrationDefinition) GetFeatures() OptNilStringArray {
	return s.Features
}

// GetExtends returns the value of Extends.
func (s *IntegrationDefinition) GetExtends() OptNilStringArray {
	return s.Extends
}

// GetExtendedConfiguration returns the value of ExtendedConfiguration.
func (s *IntegrationDefinition) GetExtendedConfiguration() OptNilIntegrationDefinitionExtendedConfiguration {
	return s.ExtendedConfiguration
}

// GetFields returns the value of Fields.
func (s *IntegrationDefinition) GetFields() OptIntegrationDefinitionFields {
	return s.Fields
}

// GetURL returns the value of URL.
func (s *IntegrationDefinition) GetURL() url.URL {
	return s.URL
}

// GetPublic returns the value of Public.
func (s *IntegrationDefinition) GetPublic() bool {
	return s.Public
}

// GetUsable returns the value of Usable.
func (s *IntegrationDefinition) GetUsable() bool {
	return s.Usable
}

// GetEditable returns the value of Editable.
func (s *IntegrationDefinition) GetEditable() bool {
	return s.Editable
}

// SetVendor sets the value of Vendor.
func (s *IntegrationDefinition) SetVendor(val string) {
	s.Vendor = val
}

// SetName sets the value of Name.
func (s *IntegrationDefinition) SetName(val string) {
	s.Name = val
}

// SetSupportsVerification sets the value of SupportsVerification.
func (s *IntegrationDefinition) SetSupportsVerification(val bool) {
	s.SupportsVerification = val
}

// SetSupportsMultiple sets the value of SupportsMultiple.
func (s *IntegrationDefinition) SetSupportsMultiple(val bool) {
	s.SupportsMultiple = val
}

// SetFeatures sets the value of Features.
func (s *IntegrationDefinition) SetFeatures(val OptNilStringArray) {
	s.Features = val
}

// SetExtends sets the value of Extends.
func (s *IntegrationDefinition) SetExtends(val OptNilStringArray) {
	s.Extends = val
}

// SetExtendedConfiguration sets the value of ExtendedConfiguration.
func (s *IntegrationDefinition) SetExtendedConfiguration(val OptNilIntegrationDefinitionExtendedConfiguration) {
	s.ExtendedConfiguration = val
}

// SetFields sets the value of Fields.
func (s *IntegrationDefinition) SetFields(val OptIntegrationDefinitionFields) {
	s.Fields = val
}

// SetURL sets the value of URL.
func (s *IntegrationDefinition) SetURL(val url.URL) {
	s.URL = val
}

// SetPublic sets the value of Public.
func (s *IntegrationDefinition) SetPublic(val bool) {
	s.Public = val
}

// SetUsable sets the value of Usable.
func (s *IntegrationDefinition) SetUsable(val bool) {
	s.Usable = val
}

// SetEditable sets the value of Editable.
func (s *IntegrationDefinition) SetEditable(val bool) {
	s.Editable = val
}

// Additional configuration options that are available when using this Integration. These describe
// additional functionality that Cycle may utilize.
type IntegrationDefinitionExtendedConfiguration struct {
	Options OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray `json:"options"`
}

// GetOptions returns the value of Options.
func (s *IntegrationDefinitionExtendedConfiguration) GetOptions() OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray {
	return s.Options
}

// SetOptions sets the value of Options.
func (s *IntegrationDefinitionExtendedConfiguration) SetOptions(val OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) {
	s.Options = val
}

type IntegrationDefinitionExtendedConfigurationOptionsItem struct {
	Title OptString `json:"title"`
	Key   OptString `json:"key"`
	Type  OptString `json:"type"`
}

// GetTitle returns the value of Title.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) GetTitle() OptString {
	return s.Title
}

// GetKey returns the value of Key.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) GetKey() OptString {
	return s.Key
}

// GetType returns the value of Type.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) GetType() OptString {
	return s.Type
}

// SetTitle sets the value of Title.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) SetTitle(val OptString) {
	s.Title = val
}

// SetKey sets the value of Key.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) SetKey(val OptString) {
	s.Key = val
}

// SetType sets the value of Type.
func (s *IntegrationDefinitionExtendedConfigurationOptionsItem) SetType(val OptString) {
	s.Type = val
}

type IntegrationDefinitionFields struct {
	Extra OptNilIntegrationDefinitionFieldsExtra `json:"extra"`
	Auth  OptNilIntegrationDefinitionFieldsAuth  `json:"auth"`
}

// GetExtra returns the value of Extra.
func (s *IntegrationDefinitionFields) GetExtra() OptNilIntegrationDefinitionFieldsExtra {
	return s.Extra
}

// GetAuth returns the value of Auth.
func (s *IntegrationDefinitionFields) GetAuth() OptNilIntegrationDefinitionFieldsAuth {
	return s.Auth
}

// SetExtra sets the value of Extra.
func (s *IntegrationDefinitionFields) SetExtra(val OptNilIntegrationDefinitionFieldsExtra) {
	s.Extra = val
}

// SetAuth sets the value of Auth.
func (s *IntegrationDefinitionFields) SetAuth(val OptNilIntegrationDefinitionFieldsAuth) {
	s.Auth = val
}

type IntegrationDefinitionFieldsAuth map[string]IntegrationDefinitionFieldsAuthItem

func (s *IntegrationDefinitionFieldsAuth) init() IntegrationDefinitionFieldsAuth {
	m := *s
	if m == nil {
		m = map[string]IntegrationDefinitionFieldsAuthItem{}
		*s = m
	}
	return m
}

type IntegrationDefinitionFieldsAuthItem struct {
	Regex       OptNilString `json:"regex"`
	Required    bool         `json:"required"`
	Description string       `json:"description"`
}

// GetRegex returns the value of Regex.
func (s *IntegrationDefinitionFieldsAuthItem) GetRegex() OptNilString {
	return s.Regex
}

// GetRequired returns the value of Required.
func (s *IntegrationDefinitionFieldsAuthItem) GetRequired() bool {
	return s.Required
}

// GetDescription returns the value of Description.
func (s *IntegrationDefinitionFieldsAuthItem) GetDescription() string {
	return s.Description
}

// SetRegex sets the value of Regex.
func (s *IntegrationDefinitionFieldsAuthItem) SetRegex(val OptNilString) {
	s.Regex = val
}

// SetRequired sets the value of Required.
func (s *IntegrationDefinitionFieldsAuthItem) SetRequired(val bool) {
	s.Required = val
}

// SetDescription sets the value of Description.
func (s *IntegrationDefinitionFieldsAuthItem) SetDescription(val string) {
	s.Description = val
}

type IntegrationDefinitionFieldsExtra map[string]IntegrationDefinitionFieldsExtraItem

func (s *IntegrationDefinitionFieldsExtra) init() IntegrationDefinitionFieldsExtra {
	m := *s
	if m == nil {
		m = map[string]IntegrationDefinitionFieldsExtraItem{}
		*s = m
	}
	return m
}

type IntegrationDefinitionFieldsExtraItem struct {
	Regex       OptNilString `json:"regex"`
	Required    bool         `json:"required"`
	Description string       `json:"description"`
}

// GetRegex returns the value of Regex.
func (s *IntegrationDefinitionFieldsExtraItem) GetRegex() OptNilString {
	return s.Regex
}

// GetRequired returns the value of Required.
func (s *IntegrationDefinitionFieldsExtraItem) GetRequired() bool {
	return s.Required
}

// GetDescription returns the value of Description.
func (s *IntegrationDefinitionFieldsExtraItem) GetDescription() string {
	return s.Description
}

// SetRegex sets the value of Regex.
func (s *IntegrationDefinitionFieldsExtraItem) SetRegex(val OptNilString) {
	s.Regex = val
}

// SetRequired sets the value of Required.
func (s *IntegrationDefinitionFieldsExtraItem) SetRequired(val bool) {
	s.Required = val
}

// SetDescription sets the value of Description.
func (s *IntegrationDefinitionFieldsExtraItem) SetDescription(val string) {
	s.Description = val
}

// A collection of timestamps for each event in the Integration's lifetime.
type IntegrationEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *IntegrationEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *IntegrationEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *IntegrationEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *IntegrationEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *IntegrationEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *IntegrationEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Additional key-value pairs associated with the Integration.
type IntegrationExtra map[string]string

func (s *IntegrationExtra) init() IntegrationExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Additional fields that can be requested for an Integration on fetch.
type IntegrationMeta struct {
	Definition OptIntegrationDefinition `json:"definition"`
}

// GetDefinition returns the value of Definition.
func (s *IntegrationMeta) GetDefinition() OptIntegrationDefinition {
	return s.Definition
}

// SetDefinition sets the value of Definition.
func (s *IntegrationMeta) SetDefinition(val OptIntegrationDefinition) {
	s.Definition = val
}

// Merged schema.
// Ref: #/components/schemas/IntegrationState
type IntegrationState struct {
	// The current state of the integration.
	Current IntegrationStateCurrent `json:"current"`
	Changed DateTime                `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptIntegrationStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *IntegrationState) GetCurrent() IntegrationStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *IntegrationState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *IntegrationState) GetError() OptIntegrationStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *IntegrationState) SetCurrent(val IntegrationStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *IntegrationState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *IntegrationState) SetError(val OptIntegrationStateError) {
	s.Error = val
}

// The current state of the integration.
type IntegrationStateCurrent string

const (
	IntegrationStateCurrentNew       IntegrationStateCurrent = "new"
	IntegrationStateCurrentVerifying IntegrationStateCurrent = "verifying"
	IntegrationStateCurrentLive      IntegrationStateCurrent = "live"
	IntegrationStateCurrentDeleting  IntegrationStateCurrent = "deleting"
	IntegrationStateCurrentDeleted   IntegrationStateCurrent = "deleted"
)

// AllValues returns all IntegrationStateCurrent values.
func (IntegrationStateCurrent) AllValues() []IntegrationStateCurrent {
	return []IntegrationStateCurrent{
		IntegrationStateCurrentNew,
		IntegrationStateCurrentVerifying,
		IntegrationStateCurrentLive,
		IntegrationStateCurrentDeleting,
		IntegrationStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IntegrationStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case IntegrationStateCurrentNew:
		return []byte(s), nil
	case IntegrationStateCurrentVerifying:
		return []byte(s), nil
	case IntegrationStateCurrentLive:
		return []byte(s), nil
	case IntegrationStateCurrentDeleting:
		return []byte(s), nil
	case IntegrationStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntegrationStateCurrent) UnmarshalText(data []byte) error {
	switch IntegrationStateCurrent(data) {
	case IntegrationStateCurrentNew:
		*s = IntegrationStateCurrentNew
		return nil
	case IntegrationStateCurrentVerifying:
		*s = IntegrationStateCurrentVerifying
		return nil
	case IntegrationStateCurrentLive:
		*s = IntegrationStateCurrentLive
		return nil
	case IntegrationStateCurrentDeleting:
		*s = IntegrationStateCurrentDeleting
		return nil
	case IntegrationStateCurrentDeleted:
		*s = IntegrationStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type IntegrationStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *IntegrationStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *IntegrationStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *IntegrationStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *IntegrationStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A resource thats associated with an integration.
// Ref: #/components/schemas/IntegrationsIncludes
type IntegrationsIncludes map[string]Integration

func (s *IntegrationsIncludes) init() IntegrationsIncludes {
	m := *s
	if m == nil {
		m = map[string]Integration{}
		*s = m
	}
	return m
}

// Information about a hub membership invitation.
// Ref: #/components/schemas/Invitation
type Invitation struct {
	// Information about the origin account of the invitation.
	Sender InvitationSender `json:"sender"`
	// The email address for the invitations recipient.
	Recipient string `json:"recipient"`
	// A collection of timestamps for each event in the invitation's lifetime.
	Events InvitationEvents `json:"events"`
}

// GetSender returns the value of Sender.
func (s *Invitation) GetSender() InvitationSender {
	return s.Sender
}

// GetRecipient returns the value of Recipient.
func (s *Invitation) GetRecipient() string {
	return s.Recipient
}

// GetEvents returns the value of Events.
func (s *Invitation) GetEvents() InvitationEvents {
	return s.Events
}

// SetSender sets the value of Sender.
func (s *Invitation) SetSender(val InvitationSender) {
	s.Sender = val
}

// SetRecipient sets the value of Recipient.
func (s *Invitation) SetRecipient(val string) {
	s.Recipient = val
}

// SetEvents sets the value of Events.
func (s *Invitation) SetEvents(val InvitationEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the invitation's lifetime.
type InvitationEvents struct {
	Created  DateTime `json:"created"`
	Updated  DateTime `json:"updated"`
	Deleted  DateTime `json:"deleted"`
	Accepted DateTime `json:"accepted"`
	Declined DateTime `json:"declined"`
	Revoked  DateTime `json:"revoked"`
}

// GetCreated returns the value of Created.
func (s *InvitationEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InvitationEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InvitationEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetAccepted returns the value of Accepted.
func (s *InvitationEvents) GetAccepted() DateTime {
	return s.Accepted
}

// GetDeclined returns the value of Declined.
func (s *InvitationEvents) GetDeclined() DateTime {
	return s.Declined
}

// GetRevoked returns the value of Revoked.
func (s *InvitationEvents) GetRevoked() DateTime {
	return s.Revoked
}

// SetCreated sets the value of Created.
func (s *InvitationEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InvitationEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InvitationEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetAccepted sets the value of Accepted.
func (s *InvitationEvents) SetAccepted(val DateTime) {
	s.Accepted = val
}

// SetDeclined sets the value of Declined.
func (s *InvitationEvents) SetDeclined(val DateTime) {
	s.Declined = val
}

// SetRevoked sets the value of Revoked.
func (s *InvitationEvents) SetRevoked(val DateTime) {
	s.Revoked = val
}

// Information about the origin account of the invitation.
type InvitationSender struct {
	ID ID `json:"id"`
	// The account type.
	Type string `json:"type"`
}

// GetID returns the value of ID.
func (s *InvitationSender) GetID() ID {
	return s.ID
}

// GetType returns the value of Type.
func (s *InvitationSender) GetType() string {
	return s.Type
}

// SetID sets the value of ID.
func (s *InvitationSender) SetID(val ID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *InvitationSender) SetType(val string) {
	s.Type = val
}

// Information about a billing invoice.
// Ref: #/components/schemas/Invoice
type Invoice struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A boolean where true represents the invoice is approved for collection.
	Approved bool                      `json:"approved"`
	Services OptNilBillingSummaryArray `json:"services"`
	Payments OptNilPaymentArray        `json:"payments"`
	Credits  OptNilInvoiceCreditArray  `json:"credits"`
	LateFees OptNilLateFeeArray        `json:"late_fees"`
	// The amount in charges generated through the licesnse agreement + overages for the billing period
	// covered by the invoice.
	Charges int         `json:"charges"`
	Due     OptDateTime `json:"due"`
	Overdue OptDateTime `json:"overdue"`
	// The number of failed payment attempts for the invoice.
	FailedPaymentAttempts int `json:"failed_payment_attempts"`
	// A collection of timestamps for each event in the billing order's lifetime.
	Events InvoiceEvents  `json:"events"`
	State  InvoiceState   `json:"state"`
	Meta   OptInvoiceMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Invoice) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Invoice) GetHubID() HubID {
	return s.HubID
}

// GetApproved returns the value of Approved.
func (s *Invoice) GetApproved() bool {
	return s.Approved
}

// GetServices returns the value of Services.
func (s *Invoice) GetServices() OptNilBillingSummaryArray {
	return s.Services
}

// GetPayments returns the value of Payments.
func (s *Invoice) GetPayments() OptNilPaymentArray {
	return s.Payments
}

// GetCredits returns the value of Credits.
func (s *Invoice) GetCredits() OptNilInvoiceCreditArray {
	return s.Credits
}

// GetLateFees returns the value of LateFees.
func (s *Invoice) GetLateFees() OptNilLateFeeArray {
	return s.LateFees
}

// GetCharges returns the value of Charges.
func (s *Invoice) GetCharges() int {
	return s.Charges
}

// GetDue returns the value of Due.
func (s *Invoice) GetDue() OptDateTime {
	return s.Due
}

// GetOverdue returns the value of Overdue.
func (s *Invoice) GetOverdue() OptDateTime {
	return s.Overdue
}

// GetFailedPaymentAttempts returns the value of FailedPaymentAttempts.
func (s *Invoice) GetFailedPaymentAttempts() int {
	return s.FailedPaymentAttempts
}

// GetEvents returns the value of Events.
func (s *Invoice) GetEvents() InvoiceEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Invoice) GetState() InvoiceState {
	return s.State
}

// GetMeta returns the value of Meta.
func (s *Invoice) GetMeta() OptInvoiceMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Invoice) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Invoice) SetHubID(val HubID) {
	s.HubID = val
}

// SetApproved sets the value of Approved.
func (s *Invoice) SetApproved(val bool) {
	s.Approved = val
}

// SetServices sets the value of Services.
func (s *Invoice) SetServices(val OptNilBillingSummaryArray) {
	s.Services = val
}

// SetPayments sets the value of Payments.
func (s *Invoice) SetPayments(val OptNilPaymentArray) {
	s.Payments = val
}

// SetCredits sets the value of Credits.
func (s *Invoice) SetCredits(val OptNilInvoiceCreditArray) {
	s.Credits = val
}

// SetLateFees sets the value of LateFees.
func (s *Invoice) SetLateFees(val OptNilLateFeeArray) {
	s.LateFees = val
}

// SetCharges sets the value of Charges.
func (s *Invoice) SetCharges(val int) {
	s.Charges = val
}

// SetDue sets the value of Due.
func (s *Invoice) SetDue(val OptDateTime) {
	s.Due = val
}

// SetOverdue sets the value of Overdue.
func (s *Invoice) SetOverdue(val OptDateTime) {
	s.Overdue = val
}

// SetFailedPaymentAttempts sets the value of FailedPaymentAttempts.
func (s *Invoice) SetFailedPaymentAttempts(val int) {
	s.FailedPaymentAttempts = val
}

// SetEvents sets the value of Events.
func (s *Invoice) SetEvents(val InvoiceEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Invoice) SetState(val InvoiceState) {
	s.State = val
}

// SetMeta sets the value of Meta.
func (s *Invoice) SetMeta(val OptInvoiceMeta) {
	s.Meta = val
}

// A billing credit for a specific invoice.
// Ref: #/components/schemas/InvoiceCredit
type InvoiceCredit struct {
	ID ID `json:"id"`
	// Credit associated with an invoice.
	AssociatedCredit InvoiceCreditAssociatedCredit `json:"associated_credit"`
	Time             DateTime                      `json:"time"`
	// A description of the invoice credit.
	Description string `json:"description"`
	// The amount of credit for the invoice.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *InvoiceCredit) GetID() ID {
	return s.ID
}

// GetAssociatedCredit returns the value of AssociatedCredit.
func (s *InvoiceCredit) GetAssociatedCredit() InvoiceCreditAssociatedCredit {
	return s.AssociatedCredit
}

// GetTime returns the value of Time.
func (s *InvoiceCredit) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *InvoiceCredit) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *InvoiceCredit) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *InvoiceCredit) SetID(val ID) {
	s.ID = val
}

// SetAssociatedCredit sets the value of AssociatedCredit.
func (s *InvoiceCredit) SetAssociatedCredit(val InvoiceCreditAssociatedCredit) {
	s.AssociatedCredit = val
}

// SetTime sets the value of Time.
func (s *InvoiceCredit) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *InvoiceCredit) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *InvoiceCredit) SetAmount(val int) {
	s.Amount = val
}

// Credit associated with an invoice.
type InvoiceCreditAssociatedCredit struct {
	ID ID `json:"id"`
	// The amount of the credit.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *InvoiceCreditAssociatedCredit) GetID() ID {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *InvoiceCreditAssociatedCredit) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *InvoiceCreditAssociatedCredit) SetID(val ID) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *InvoiceCreditAssociatedCredit) SetAmount(val int) {
	s.Amount = val
}

// A collection of timestamps for each event in the billing order's lifetime.
type InvoiceEvents struct {
	Created        DateTime    `json:"created"`
	Updated        DateTime    `json:"updated"`
	Deleted        DateTime    `json:"deleted"`
	Billed         DateTime    `json:"billed"`
	Paid           DateTime    `json:"paid"`
	PaymentAttempt OptDateTime `json:"payment_attempt"`
	Credited       DateTime    `json:"credited"`
	Voided         DateTime    `json:"voided"`
}

// GetCreated returns the value of Created.
func (s *InvoiceEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *InvoiceEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *InvoiceEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetBilled returns the value of Billed.
func (s *InvoiceEvents) GetBilled() DateTime {
	return s.Billed
}

// GetPaid returns the value of Paid.
func (s *InvoiceEvents) GetPaid() DateTime {
	return s.Paid
}

// GetPaymentAttempt returns the value of PaymentAttempt.
func (s *InvoiceEvents) GetPaymentAttempt() OptDateTime {
	return s.PaymentAttempt
}

// GetCredited returns the value of Credited.
func (s *InvoiceEvents) GetCredited() DateTime {
	return s.Credited
}

// GetVoided returns the value of Voided.
func (s *InvoiceEvents) GetVoided() DateTime {
	return s.Voided
}

// SetCreated sets the value of Created.
func (s *InvoiceEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *InvoiceEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *InvoiceEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetBilled sets the value of Billed.
func (s *InvoiceEvents) SetBilled(val DateTime) {
	s.Billed = val
}

// SetPaid sets the value of Paid.
func (s *InvoiceEvents) SetPaid(val DateTime) {
	s.Paid = val
}

// SetPaymentAttempt sets the value of PaymentAttempt.
func (s *InvoiceEvents) SetPaymentAttempt(val OptDateTime) {
	s.PaymentAttempt = val
}

// SetCredited sets the value of Credited.
func (s *InvoiceEvents) SetCredited(val DateTime) {
	s.Credited = val
}

// SetVoided sets the value of Voided.
func (s *InvoiceEvents) SetVoided(val DateTime) {
	s.Voided = val
}

// A list of meta fields that can be applied to a invoice.
// Ref: #/components/schemas/InvoiceMeta
type InvoiceMeta struct {
	// The amount due for a given invoice.
	Due OptInt `json:"due"`
}

// GetDue returns the value of Due.
func (s *InvoiceMeta) GetDue() OptInt {
	return s.Due
}

// SetDue sets the value of Due.
func (s *InvoiceMeta) SetDue(val OptInt) {
	s.Due = val
}

// Merged schema.
// Ref: #/components/schemas/InvoiceState
type InvoiceState struct {
	// The current state of the container.
	Current InvoiceStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptInvoiceStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *InvoiceState) GetCurrent() InvoiceStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *InvoiceState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *InvoiceState) GetError() OptInvoiceStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *InvoiceState) SetCurrent(val InvoiceStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *InvoiceState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *InvoiceState) SetError(val OptInvoiceStateError) {
	s.Error = val
}

// The current state of the container.
type InvoiceStateCurrent string

const (
	InvoiceStateCurrentNew           InvoiceStateCurrent = "new"
	InvoiceStateCurrentBilling       InvoiceStateCurrent = "billing"
	InvoiceStateCurrentBilled        InvoiceStateCurrent = "billed"
	InvoiceStateCurrentProcessing    InvoiceStateCurrent = "processing"
	InvoiceStateCurrentPartiallyPaid InvoiceStateCurrent = "partially-paid"
	InvoiceStateCurrentPaid          InvoiceStateCurrent = "paid"
	InvoiceStateCurrentRefunding     InvoiceStateCurrent = "refunding"
	InvoiceStateCurrentRefunded      InvoiceStateCurrent = "refunded"
	InvoiceStateCurrentCrediting     InvoiceStateCurrent = "crediting"
	InvoiceStateCurrentCredited      InvoiceStateCurrent = "credited"
	InvoiceStateCurrentVoiding       InvoiceStateCurrent = "voiding"
	InvoiceStateCurrentVoided        InvoiceStateCurrent = "voided"
	InvoiceStateCurrentUncollectible InvoiceStateCurrent = "uncollectible"
)

// AllValues returns all InvoiceStateCurrent values.
func (InvoiceStateCurrent) AllValues() []InvoiceStateCurrent {
	return []InvoiceStateCurrent{
		InvoiceStateCurrentNew,
		InvoiceStateCurrentBilling,
		InvoiceStateCurrentBilled,
		InvoiceStateCurrentProcessing,
		InvoiceStateCurrentPartiallyPaid,
		InvoiceStateCurrentPaid,
		InvoiceStateCurrentRefunding,
		InvoiceStateCurrentRefunded,
		InvoiceStateCurrentCrediting,
		InvoiceStateCurrentCredited,
		InvoiceStateCurrentVoiding,
		InvoiceStateCurrentVoided,
		InvoiceStateCurrentUncollectible,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InvoiceStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case InvoiceStateCurrentNew:
		return []byte(s), nil
	case InvoiceStateCurrentBilling:
		return []byte(s), nil
	case InvoiceStateCurrentBilled:
		return []byte(s), nil
	case InvoiceStateCurrentProcessing:
		return []byte(s), nil
	case InvoiceStateCurrentPartiallyPaid:
		return []byte(s), nil
	case InvoiceStateCurrentPaid:
		return []byte(s), nil
	case InvoiceStateCurrentRefunding:
		return []byte(s), nil
	case InvoiceStateCurrentRefunded:
		return []byte(s), nil
	case InvoiceStateCurrentCrediting:
		return []byte(s), nil
	case InvoiceStateCurrentCredited:
		return []byte(s), nil
	case InvoiceStateCurrentVoiding:
		return []byte(s), nil
	case InvoiceStateCurrentVoided:
		return []byte(s), nil
	case InvoiceStateCurrentUncollectible:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InvoiceStateCurrent) UnmarshalText(data []byte) error {
	switch InvoiceStateCurrent(data) {
	case InvoiceStateCurrentNew:
		*s = InvoiceStateCurrentNew
		return nil
	case InvoiceStateCurrentBilling:
		*s = InvoiceStateCurrentBilling
		return nil
	case InvoiceStateCurrentBilled:
		*s = InvoiceStateCurrentBilled
		return nil
	case InvoiceStateCurrentProcessing:
		*s = InvoiceStateCurrentProcessing
		return nil
	case InvoiceStateCurrentPartiallyPaid:
		*s = InvoiceStateCurrentPartiallyPaid
		return nil
	case InvoiceStateCurrentPaid:
		*s = InvoiceStateCurrentPaid
		return nil
	case InvoiceStateCurrentRefunding:
		*s = InvoiceStateCurrentRefunding
		return nil
	case InvoiceStateCurrentRefunded:
		*s = InvoiceStateCurrentRefunded
		return nil
	case InvoiceStateCurrentCrediting:
		*s = InvoiceStateCurrentCrediting
		return nil
	case InvoiceStateCurrentCredited:
		*s = InvoiceStateCurrentCredited
		return nil
	case InvoiceStateCurrentVoiding:
		*s = InvoiceStateCurrentVoiding
		return nil
	case InvoiceStateCurrentVoided:
		*s = InvoiceStateCurrentVoided
		return nil
	case InvoiceStateCurrentUncollectible:
		*s = InvoiceStateCurrentUncollectible
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type InvoiceStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *InvoiceStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *InvoiceStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *InvoiceStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *InvoiceStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Merged schema.
// Ref: #/components/schemas/IpState
type IpState struct {
	// The current state of the IP.
	Current IpStateCurrent `json:"current"`
	Changed DateTime       `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptIpStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *IpState) GetCurrent() IpStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *IpState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *IpState) GetError() OptIpStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *IpState) SetCurrent(val IpStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *IpState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *IpState) SetError(val OptIpStateError) {
	s.Error = val
}

// The current state of the IP.
type IpStateCurrent string

const (
	IpStateCurrentAssigning IpStateCurrent = "assigning"
	IpStateCurrentAssigned  IpStateCurrent = "assigned"
	IpStateCurrentReleasing IpStateCurrent = "releasing"
	IpStateCurrentAvailable IpStateCurrent = "available"
)

// AllValues returns all IpStateCurrent values.
func (IpStateCurrent) AllValues() []IpStateCurrent {
	return []IpStateCurrent{
		IpStateCurrentAssigning,
		IpStateCurrentAssigned,
		IpStateCurrentReleasing,
		IpStateCurrentAvailable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s IpStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case IpStateCurrentAssigning:
		return []byte(s), nil
	case IpStateCurrentAssigned:
		return []byte(s), nil
	case IpStateCurrentReleasing:
		return []byte(s), nil
	case IpStateCurrentAvailable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IpStateCurrent) UnmarshalText(data []byte) error {
	switch IpStateCurrent(data) {
	case IpStateCurrentAssigning:
		*s = IpStateCurrentAssigning
		return nil
	case IpStateCurrentAssigned:
		*s = IpStateCurrentAssigned
		return nil
	case IpStateCurrentReleasing:
		*s = IpStateCurrentReleasing
		return nil
	case IpStateCurrentAvailable:
		*s = IpStateCurrentAvailable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type IpStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *IpStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *IpStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *IpStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *IpStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A job resource.
// Ref: #/components/schemas/Job
type Job struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// A dash separated string showing the environment_id where the job is taking place.
	Queue string `json:"queue"`
	// A short description of the job.
	Caption string `json:"caption"`
	// A collection of timestamps for each event in the job's lifetime.
	Events   JobEvents `json:"events"`
	Schedule DateTime  `json:"schedule"`
	// An array of job tasks.
	Tasks   []JobTask `json:"tasks"`
	Expires DateTime  `json:"expires"`
	// A combination of the individual task details and job details.
	Hash string `json:"hash"`
	// A boolean where true represents the job is set to prevent duplicates of itself quickly after
	// creation.
	LimitDuplicates bool         `json:"limit_duplicates"`
	Creator         CreatorScope `json:"creator"`
	State           JobState     `json:"state"`
}

// GetID returns the value of ID.
func (s *Job) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Job) GetHubID() HubID {
	return s.HubID
}

// GetQueue returns the value of Queue.
func (s *Job) GetQueue() string {
	return s.Queue
}

// GetCaption returns the value of Caption.
func (s *Job) GetCaption() string {
	return s.Caption
}

// GetEvents returns the value of Events.
func (s *Job) GetEvents() JobEvents {
	return s.Events
}

// GetSchedule returns the value of Schedule.
func (s *Job) GetSchedule() DateTime {
	return s.Schedule
}

// GetTasks returns the value of Tasks.
func (s *Job) GetTasks() []JobTask {
	return s.Tasks
}

// GetExpires returns the value of Expires.
func (s *Job) GetExpires() DateTime {
	return s.Expires
}

// GetHash returns the value of Hash.
func (s *Job) GetHash() string {
	return s.Hash
}

// GetLimitDuplicates returns the value of LimitDuplicates.
func (s *Job) GetLimitDuplicates() bool {
	return s.LimitDuplicates
}

// GetCreator returns the value of Creator.
func (s *Job) GetCreator() CreatorScope {
	return s.Creator
}

// GetState returns the value of State.
func (s *Job) GetState() JobState {
	return s.State
}

// SetID sets the value of ID.
func (s *Job) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Job) SetHubID(val HubID) {
	s.HubID = val
}

// SetQueue sets the value of Queue.
func (s *Job) SetQueue(val string) {
	s.Queue = val
}

// SetCaption sets the value of Caption.
func (s *Job) SetCaption(val string) {
	s.Caption = val
}

// SetEvents sets the value of Events.
func (s *Job) SetEvents(val JobEvents) {
	s.Events = val
}

// SetSchedule sets the value of Schedule.
func (s *Job) SetSchedule(val DateTime) {
	s.Schedule = val
}

// SetTasks sets the value of Tasks.
func (s *Job) SetTasks(val []JobTask) {
	s.Tasks = val
}

// SetExpires sets the value of Expires.
func (s *Job) SetExpires(val DateTime) {
	s.Expires = val
}

// SetHash sets the value of Hash.
func (s *Job) SetHash(val string) {
	s.Hash = val
}

// SetLimitDuplicates sets the value of LimitDuplicates.
func (s *Job) SetLimitDuplicates(val bool) {
	s.LimitDuplicates = val
}

// SetCreator sets the value of Creator.
func (s *Job) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetState sets the value of State.
func (s *Job) SetState(val JobState) {
	s.State = val
}

// A Job Descriptor is returned on success by API calls that create jobs. It contains the action that
// was requested, as well as the ID of the job created as a result.
// Ref: #/components/schemas/JobDescriptor
type JobDescriptor struct {
	// The action that was taken.
	Action string `json:"action"`
	// Contains some basic information about the job associated with this task.
	Job OptJobDescriptorJob `json:"job"`
}

// GetAction returns the value of Action.
func (s *JobDescriptor) GetAction() string {
	return s.Action
}

// GetJob returns the value of Job.
func (s *JobDescriptor) GetJob() OptJobDescriptorJob {
	return s.Job
}

// SetAction sets the value of Action.
func (s *JobDescriptor) SetAction(val string) {
	s.Action = val
}

// SetJob sets the value of Job.
func (s *JobDescriptor) SetJob(val OptJobDescriptorJob) {
	s.Job = val
}

// Contains some basic information about the job associated with this task.
type JobDescriptorJob struct {
	// The ID of the job.
	ID string `json:"id"`
	// Describes if the job has been accepted.
	Accepted bool `json:"accepted"`
	// Describes the queue this job is a part of.
	Queue    string                      `json:"queue"`
	Schedule DateTime                    `json:"schedule"`
	Parallel JobDescriptorJobParallel    `json:"parallel"`
	Tasks    []JobDescriptorJobTasksItem `json:"tasks"`
}

// GetID returns the value of ID.
func (s *JobDescriptorJob) GetID() string {
	return s.ID
}

// GetAccepted returns the value of Accepted.
func (s *JobDescriptorJob) GetAccepted() bool {
	return s.Accepted
}

// GetQueue returns the value of Queue.
func (s *JobDescriptorJob) GetQueue() string {
	return s.Queue
}

// GetSchedule returns the value of Schedule.
func (s *JobDescriptorJob) GetSchedule() DateTime {
	return s.Schedule
}

// GetParallel returns the value of Parallel.
func (s *JobDescriptorJob) GetParallel() JobDescriptorJobParallel {
	return s.Parallel
}

// GetTasks returns the value of Tasks.
func (s *JobDescriptorJob) GetTasks() []JobDescriptorJobTasksItem {
	return s.Tasks
}

// SetID sets the value of ID.
func (s *JobDescriptorJob) SetID(val string) {
	s.ID = val
}

// SetAccepted sets the value of Accepted.
func (s *JobDescriptorJob) SetAccepted(val bool) {
	s.Accepted = val
}

// SetQueue sets the value of Queue.
func (s *JobDescriptorJob) SetQueue(val string) {
	s.Queue = val
}

// SetSchedule sets the value of Schedule.
func (s *JobDescriptorJob) SetSchedule(val DateTime) {
	s.Schedule = val
}

// SetParallel sets the value of Parallel.
func (s *JobDescriptorJob) SetParallel(val JobDescriptorJobParallel) {
	s.Parallel = val
}

// SetTasks sets the value of Tasks.
func (s *JobDescriptorJob) SetTasks(val []JobDescriptorJobTasksItem) {
	s.Tasks = val
}

type JobDescriptorJobParallel struct {
	SubQueue OptNilString `json:"sub_queue"`
	Tasks    bool         `json:"tasks"`
}

// GetSubQueue returns the value of SubQueue.
func (s *JobDescriptorJobParallel) GetSubQueue() OptNilString {
	return s.SubQueue
}

// GetTasks returns the value of Tasks.
func (s *JobDescriptorJobParallel) GetTasks() bool {
	return s.Tasks
}

// SetSubQueue sets the value of SubQueue.
func (s *JobDescriptorJobParallel) SetSubQueue(val OptNilString) {
	s.SubQueue = val
}

// SetTasks sets the value of Tasks.
func (s *JobDescriptorJobParallel) SetTasks(val bool) {
	s.Tasks = val
}

type JobDescriptorJobTasksItem struct {
	// A short description of the task.
	Caption string `json:"caption"`
	// The API function called.
	Header string `json:"header"`
	// An array of job task steps.
	Steps []TaskStep `json:"steps"`
	// Input information used for the job tasks.
	Input JobDescriptorJobTasksItemInput `json:"input"`
}

// GetCaption returns the value of Caption.
func (s *JobDescriptorJobTasksItem) GetCaption() string {
	return s.Caption
}

// GetHeader returns the value of Header.
func (s *JobDescriptorJobTasksItem) GetHeader() string {
	return s.Header
}

// GetSteps returns the value of Steps.
func (s *JobDescriptorJobTasksItem) GetSteps() []TaskStep {
	return s.Steps
}

// GetInput returns the value of Input.
func (s *JobDescriptorJobTasksItem) GetInput() JobDescriptorJobTasksItemInput {
	return s.Input
}

// SetCaption sets the value of Caption.
func (s *JobDescriptorJobTasksItem) SetCaption(val string) {
	s.Caption = val
}

// SetHeader sets the value of Header.
func (s *JobDescriptorJobTasksItem) SetHeader(val string) {
	s.Header = val
}

// SetSteps sets the value of Steps.
func (s *JobDescriptorJobTasksItem) SetSteps(val []TaskStep) {
	s.Steps = val
}

// SetInput sets the value of Input.
func (s *JobDescriptorJobTasksItem) SetInput(val JobDescriptorJobTasksItemInput) {
	s.Input = val
}

// Input information used for the job tasks.
type JobDescriptorJobTasksItemInput map[string]jx.Raw

func (s *JobDescriptorJobTasksItemInput) init() JobDescriptorJobTasksItemInput {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A collection of timestamps for each event in the job's lifetime.
type JobEvents struct {
	Queued    DateTime `json:"queued"`
	Completed DateTime `json:"completed"`
	Started   DateTime `json:"started"`
}

// GetQueued returns the value of Queued.
func (s *JobEvents) GetQueued() DateTime {
	return s.Queued
}

// GetCompleted returns the value of Completed.
func (s *JobEvents) GetCompleted() DateTime {
	return s.Completed
}

// GetStarted returns the value of Started.
func (s *JobEvents) GetStarted() DateTime {
	return s.Started
}

// SetQueued sets the value of Queued.
func (s *JobEvents) SetQueued(val DateTime) {
	s.Queued = val
}

// SetCompleted sets the value of Completed.
func (s *JobEvents) SetCompleted(val DateTime) {
	s.Completed = val
}

// SetStarted sets the value of Started.
func (s *JobEvents) SetStarted(val DateTime) {
	s.Started = val
}

// Ref: #/components/schemas/JobIncludes
type JobIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *JobIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *JobIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// Ref: #/components/schemas/JobState
type JobState struct {
	// The current state of the job.
	Current JobStateCurrent `json:"current"`
	Changed OptDateTime     `json:"changed"`
	// An error, if any, that has occurred for this job.
	Error NilJobStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *JobState) GetCurrent() JobStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *JobState) GetChanged() OptDateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *JobState) GetError() NilJobStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *JobState) SetCurrent(val JobStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *JobState) SetChanged(val OptDateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *JobState) SetError(val NilJobStateError) {
	s.Error = val
}

// The current state of the job.
type JobStateCurrent string

const (
	JobStateCurrentNew       JobStateCurrent = "new"
	JobStateCurrentQueued    JobStateCurrent = "queued"
	JobStateCurrentError     JobStateCurrent = "error"
	JobStateCurrentScheduled JobStateCurrent = "scheduled"
	JobStateCurrentExpired   JobStateCurrent = "expired"
	JobStateCurrentRunning   JobStateCurrent = "running"
	JobStateCurrentCompleted JobStateCurrent = "completed"
)

// AllValues returns all JobStateCurrent values.
func (JobStateCurrent) AllValues() []JobStateCurrent {
	return []JobStateCurrent{
		JobStateCurrentNew,
		JobStateCurrentQueued,
		JobStateCurrentError,
		JobStateCurrentScheduled,
		JobStateCurrentExpired,
		JobStateCurrentRunning,
		JobStateCurrentCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JobStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case JobStateCurrentNew:
		return []byte(s), nil
	case JobStateCurrentQueued:
		return []byte(s), nil
	case JobStateCurrentError:
		return []byte(s), nil
	case JobStateCurrentScheduled:
		return []byte(s), nil
	case JobStateCurrentExpired:
		return []byte(s), nil
	case JobStateCurrentRunning:
		return []byte(s), nil
	case JobStateCurrentCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JobStateCurrent) UnmarshalText(data []byte) error {
	switch JobStateCurrent(data) {
	case JobStateCurrentNew:
		*s = JobStateCurrentNew
		return nil
	case JobStateCurrentQueued:
		*s = JobStateCurrentQueued
		return nil
	case JobStateCurrentError:
		*s = JobStateCurrentError
		return nil
	case JobStateCurrentScheduled:
		*s = JobStateCurrentScheduled
		return nil
	case JobStateCurrentExpired:
		*s = JobStateCurrentExpired
		return nil
	case JobStateCurrentRunning:
		*s = JobStateCurrentRunning
		return nil
	case JobStateCurrentCompleted:
		*s = JobStateCurrentCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this job.
type JobStateError struct {
	// Details about the error that has occurred.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobStateError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobStateError) SetMessage(val string) {
	s.Message = val
}

// Information about a job task.
// Ref: #/components/schemas/JobTask
type JobTask struct {
	ID ID `json:"id"`
	// A short description of the task.
	Caption string `json:"caption"`
	// The API function called.
	Header string `json:"header"`
	// A collection of timestamps for each event in the job's lifetime.
	Events JobTaskEvents `json:"events"`
	// An array of job task steps.
	Steps []TaskStep `json:"steps"`
	State TaskState  `json:"state"`
	// Input information used for the job tasks.
	Input JobTaskInput `json:"input"`
	// Output informaiton used for the job tasks.
	Output NilJobTaskOutput `json:"output"`
	// An error object describing issues with the job.
	Error NilJobTaskError `json:"error"`
}

// GetID returns the value of ID.
func (s *JobTask) GetID() ID {
	return s.ID
}

// GetCaption returns the value of Caption.
func (s *JobTask) GetCaption() string {
	return s.Caption
}

// GetHeader returns the value of Header.
func (s *JobTask) GetHeader() string {
	return s.Header
}

// GetEvents returns the value of Events.
func (s *JobTask) GetEvents() JobTaskEvents {
	return s.Events
}

// GetSteps returns the value of Steps.
func (s *JobTask) GetSteps() []TaskStep {
	return s.Steps
}

// GetState returns the value of State.
func (s *JobTask) GetState() TaskState {
	return s.State
}

// GetInput returns the value of Input.
func (s *JobTask) GetInput() JobTaskInput {
	return s.Input
}

// GetOutput returns the value of Output.
func (s *JobTask) GetOutput() NilJobTaskOutput {
	return s.Output
}

// GetError returns the value of Error.
func (s *JobTask) GetError() NilJobTaskError {
	return s.Error
}

// SetID sets the value of ID.
func (s *JobTask) SetID(val ID) {
	s.ID = val
}

// SetCaption sets the value of Caption.
func (s *JobTask) SetCaption(val string) {
	s.Caption = val
}

// SetHeader sets the value of Header.
func (s *JobTask) SetHeader(val string) {
	s.Header = val
}

// SetEvents sets the value of Events.
func (s *JobTask) SetEvents(val JobTaskEvents) {
	s.Events = val
}

// SetSteps sets the value of Steps.
func (s *JobTask) SetSteps(val []TaskStep) {
	s.Steps = val
}

// SetState sets the value of State.
func (s *JobTask) SetState(val TaskState) {
	s.State = val
}

// SetInput sets the value of Input.
func (s *JobTask) SetInput(val JobTaskInput) {
	s.Input = val
}

// SetOutput sets the value of Output.
func (s *JobTask) SetOutput(val NilJobTaskOutput) {
	s.Output = val
}

// SetError sets the value of Error.
func (s *JobTask) SetError(val NilJobTaskError) {
	s.Error = val
}

// An error object describing issues with the job.
type JobTaskError struct {
	// An error message.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *JobTaskError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *JobTaskError) SetMessage(val string) {
	s.Message = val
}

// A collection of timestamps for each event in the job's lifetime.
type JobTaskEvents struct {
	Queued    DateTime `json:"queued"`
	Completed DateTime `json:"completed"`
	Started   DateTime `json:"started"`
}

// GetQueued returns the value of Queued.
func (s *JobTaskEvents) GetQueued() DateTime {
	return s.Queued
}

// GetCompleted returns the value of Completed.
func (s *JobTaskEvents) GetCompleted() DateTime {
	return s.Completed
}

// GetStarted returns the value of Started.
func (s *JobTaskEvents) GetStarted() DateTime {
	return s.Started
}

// SetQueued sets the value of Queued.
func (s *JobTaskEvents) SetQueued(val DateTime) {
	s.Queued = val
}

// SetCompleted sets the value of Completed.
func (s *JobTaskEvents) SetCompleted(val DateTime) {
	s.Completed = val
}

// SetStarted sets the value of Started.
func (s *JobTaskEvents) SetStarted(val DateTime) {
	s.Started = val
}

// Input information used for the job tasks.
type JobTaskInput map[string]jx.Raw

func (s *JobTaskInput) init() JobTaskInput {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Output informaiton used for the job tasks.
type JobTaskOutput map[string]string

func (s *JobTaskOutput) init() JobTaskOutput {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A late fee, applied to an invoice.
// Ref: #/components/schemas/LateFee
type LateFee struct {
	ID   ID       `json:"id"`
	Time DateTime `json:"time"`
	// A description of the late fee.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount int `json:"amount"`
}

// GetID returns the value of ID.
func (s *LateFee) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *LateFee) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *LateFee) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *LateFee) GetAmount() int {
	return s.Amount
}

// SetID sets the value of ID.
func (s *LateFee) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *LateFee) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *LateFee) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *LateFee) SetAmount(val int) {
	s.Amount = val
}

// The config object for the loadbalancer service.
// Ref: #/components/schemas/LoadBalancerConfig
type LoadBalancerConfig struct {
	OneOf LoadBalancerConfigSum
}

// GetOneOf returns the value of OneOf.
func (s *LoadBalancerConfig) GetOneOf() LoadBalancerConfigSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *LoadBalancerConfig) SetOneOf(val LoadBalancerConfigSum) {
	s.OneOf = val
}

// LoadBalancerConfigSum represents sum type.
type LoadBalancerConfigSum struct {
	Type          LoadBalancerConfigSumType // switch on this field
	V1LbType      V1LbType
	HaProxyLbType HaProxyLbType
	DefaultLbType DefaultLbType
}

// LoadBalancerConfigSumType is oneOf type of LoadBalancerConfigSum.
type LoadBalancerConfigSumType string

// Possible values for LoadBalancerConfigSumType.
const (
	V1LbTypeLoadBalancerConfigSum      LoadBalancerConfigSumType = "v1"
	HaProxyLbTypeLoadBalancerConfigSum LoadBalancerConfigSumType = "haproxy"
	DefaultLbTypeLoadBalancerConfigSum LoadBalancerConfigSumType = "default"
)

// IsV1LbType reports whether LoadBalancerConfigSum is V1LbType.
func (s LoadBalancerConfigSum) IsV1LbType() bool { return s.Type == V1LbTypeLoadBalancerConfigSum }

// IsHaProxyLbType reports whether LoadBalancerConfigSum is HaProxyLbType.
func (s LoadBalancerConfigSum) IsHaProxyLbType() bool {
	return s.Type == HaProxyLbTypeLoadBalancerConfigSum
}

// IsDefaultLbType reports whether LoadBalancerConfigSum is DefaultLbType.
func (s LoadBalancerConfigSum) IsDefaultLbType() bool {
	return s.Type == DefaultLbTypeLoadBalancerConfigSum
}

// SetV1LbType sets LoadBalancerConfigSum to V1LbType.
func (s *LoadBalancerConfigSum) SetV1LbType(v V1LbType) {
	s.Type = V1LbTypeLoadBalancerConfigSum
	s.V1LbType = v
}

// GetV1LbType returns V1LbType and true boolean if LoadBalancerConfigSum is V1LbType.
func (s LoadBalancerConfigSum) GetV1LbType() (v V1LbType, ok bool) {
	if !s.IsV1LbType() {
		return v, false
	}
	return s.V1LbType, true
}

// NewV1LbTypeLoadBalancerConfigSum returns new LoadBalancerConfigSum from V1LbType.
func NewV1LbTypeLoadBalancerConfigSum(v V1LbType) LoadBalancerConfigSum {
	var s LoadBalancerConfigSum
	s.SetV1LbType(v)
	return s
}

// SetHaProxyLbType sets LoadBalancerConfigSum to HaProxyLbType.
func (s *LoadBalancerConfigSum) SetHaProxyLbType(v HaProxyLbType) {
	s.Type = HaProxyLbTypeLoadBalancerConfigSum
	s.HaProxyLbType = v
}

// GetHaProxyLbType returns HaProxyLbType and true boolean if LoadBalancerConfigSum is HaProxyLbType.
func (s LoadBalancerConfigSum) GetHaProxyLbType() (v HaProxyLbType, ok bool) {
	if !s.IsHaProxyLbType() {
		return v, false
	}
	return s.HaProxyLbType, true
}

// NewHaProxyLbTypeLoadBalancerConfigSum returns new LoadBalancerConfigSum from HaProxyLbType.
func NewHaProxyLbTypeLoadBalancerConfigSum(v HaProxyLbType) LoadBalancerConfigSum {
	var s LoadBalancerConfigSum
	s.SetHaProxyLbType(v)
	return s
}

// SetDefaultLbType sets LoadBalancerConfigSum to DefaultLbType.
func (s *LoadBalancerConfigSum) SetDefaultLbType(v DefaultLbType) {
	s.Type = DefaultLbTypeLoadBalancerConfigSum
	s.DefaultLbType = v
}

// GetDefaultLbType returns DefaultLbType and true boolean if LoadBalancerConfigSum is DefaultLbType.
func (s LoadBalancerConfigSum) GetDefaultLbType() (v DefaultLbType, ok bool) {
	if !s.IsDefaultLbType() {
		return v, false
	}
	return s.DefaultLbType, true
}

// NewDefaultLbTypeLoadBalancerConfigSum returns new LoadBalancerConfigSum from DefaultLbType.
func NewDefaultLbTypeLoadBalancerConfigSum(v DefaultLbType) LoadBalancerConfigSum {
	var s LoadBalancerConfigSum
	s.SetDefaultLbType(v)
	return s
}

// Information about the latest controllers that generated traffic.
// Ref: #/components/schemas/LoadBalancerLatestControllers
type LoadBalancerLatestControllers struct {
	Created     DateTime                                         `json:"created"`
	Controllers OptNilLoadBalancerLatestTelemetryControllerArray `json:"controllers"`
}

// GetCreated returns the value of Created.
func (s *LoadBalancerLatestControllers) GetCreated() DateTime {
	return s.Created
}

// GetControllers returns the value of Controllers.
func (s *LoadBalancerLatestControllers) GetControllers() OptNilLoadBalancerLatestTelemetryControllerArray {
	return s.Controllers
}

// SetCreated sets the value of Created.
func (s *LoadBalancerLatestControllers) SetCreated(val DateTime) {
	s.Created = val
}

// SetControllers sets the value of Controllers.
func (s *LoadBalancerLatestControllers) SetControllers(val OptNilLoadBalancerLatestTelemetryControllerArray) {
	s.Controllers = val
}

// Snapshots of the latest load balancer telemetry.
// Ref: #/components/schemas/LoadBalancerLatestTelemetry
type LoadBalancerLatestTelemetry struct {
	Created     DateTime                                         `json:"created"`
	Controllers OptNilLoadBalancerLatestTelemetryControllerArray `json:"controllers"`
}

// GetCreated returns the value of Created.
func (s *LoadBalancerLatestTelemetry) GetCreated() DateTime {
	return s.Created
}

// GetControllers returns the value of Controllers.
func (s *LoadBalancerLatestTelemetry) GetControllers() OptNilLoadBalancerLatestTelemetryControllerArray {
	return s.Controllers
}

// SetCreated sets the value of Created.
func (s *LoadBalancerLatestTelemetry) SetCreated(val DateTime) {
	s.Created = val
}

// SetControllers sets the value of Controllers.
func (s *LoadBalancerLatestTelemetry) SetControllers(val OptNilLoadBalancerLatestTelemetryControllerArray) {
	s.Controllers = val
}

// Ref: #/components/schemas/LoadBalancerLatestTelemetryController
type LoadBalancerLatestTelemetryController struct {
	Time       DateTime                                       `json:"time"`
	Controller Identifier                                     `json:"controller"`
	Instances  OptNilLoadBalancerLatestTelemetryInstanceArray `json:"instances"`
}

// GetTime returns the value of Time.
func (s *LoadBalancerLatestTelemetryController) GetTime() DateTime {
	return s.Time
}

// GetController returns the value of Controller.
func (s *LoadBalancerLatestTelemetryController) GetController() Identifier {
	return s.Controller
}

// GetInstances returns the value of Instances.
func (s *LoadBalancerLatestTelemetryController) GetInstances() OptNilLoadBalancerLatestTelemetryInstanceArray {
	return s.Instances
}

// SetTime sets the value of Time.
func (s *LoadBalancerLatestTelemetryController) SetTime(val DateTime) {
	s.Time = val
}

// SetController sets the value of Controller.
func (s *LoadBalancerLatestTelemetryController) SetController(val Identifier) {
	s.Controller = val
}

// SetInstances sets the value of Instances.
func (s *LoadBalancerLatestTelemetryController) SetInstances(val OptNilLoadBalancerLatestTelemetryInstanceArray) {
	s.Instances = val
}

// Detailed telemetry for a load balancer instance at a point in time.
// Ref: #/components/schemas/LoadBalancerLatestTelemetryInstance
type LoadBalancerLatestTelemetryInstance struct {
	ID            ID                                              `json:"id"`
	HubID         HubID                                           `json:"hub_id"`
	EnvironmentID ID                                              `json:"environment_id"`
	ContainerID   ID                                              `json:"container_id"`
	InstanceID    ID                                              `json:"instance_id"`
	ServerID      ID                                              `json:"server_id"`
	Cluster       Identifier                                      `json:"cluster"`
	Time          DateTime                                        `json:"time"`
	Controller    Identifier                                      `json:"controller"`
	Latest        OptNilLoadBalancerLatestTelemetryInstanceLatest `json:"latest"`
	Snapshots     OptNilLoadBalancerTelemetrySnapshotArray        `json:"snapshots"`
}

// GetID returns the value of ID.
func (s *LoadBalancerLatestTelemetryInstance) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *LoadBalancerLatestTelemetryInstance) GetHubID() HubID {
	return s.HubID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *LoadBalancerLatestTelemetryInstance) GetEnvironmentID() ID {
	return s.EnvironmentID
}

// GetContainerID returns the value of ContainerID.
func (s *LoadBalancerLatestTelemetryInstance) GetContainerID() ID {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *LoadBalancerLatestTelemetryInstance) GetInstanceID() ID {
	return s.InstanceID
}

// GetServerID returns the value of ServerID.
func (s *LoadBalancerLatestTelemetryInstance) GetServerID() ID {
	return s.ServerID
}

// GetCluster returns the value of Cluster.
func (s *LoadBalancerLatestTelemetryInstance) GetCluster() Identifier {
	return s.Cluster
}

// GetTime returns the value of Time.
func (s *LoadBalancerLatestTelemetryInstance) GetTime() DateTime {
	return s.Time
}

// GetController returns the value of Controller.
func (s *LoadBalancerLatestTelemetryInstance) GetController() Identifier {
	return s.Controller
}

// GetLatest returns the value of Latest.
func (s *LoadBalancerLatestTelemetryInstance) GetLatest() OptNilLoadBalancerLatestTelemetryInstanceLatest {
	return s.Latest
}

// GetSnapshots returns the value of Snapshots.
func (s *LoadBalancerLatestTelemetryInstance) GetSnapshots() OptNilLoadBalancerTelemetrySnapshotArray {
	return s.Snapshots
}

// SetID sets the value of ID.
func (s *LoadBalancerLatestTelemetryInstance) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *LoadBalancerLatestTelemetryInstance) SetHubID(val HubID) {
	s.HubID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *LoadBalancerLatestTelemetryInstance) SetEnvironmentID(val ID) {
	s.EnvironmentID = val
}

// SetContainerID sets the value of ContainerID.
func (s *LoadBalancerLatestTelemetryInstance) SetContainerID(val ID) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *LoadBalancerLatestTelemetryInstance) SetInstanceID(val ID) {
	s.InstanceID = val
}

// SetServerID sets the value of ServerID.
func (s *LoadBalancerLatestTelemetryInstance) SetServerID(val ID) {
	s.ServerID = val
}

// SetCluster sets the value of Cluster.
func (s *LoadBalancerLatestTelemetryInstance) SetCluster(val Identifier) {
	s.Cluster = val
}

// SetTime sets the value of Time.
func (s *LoadBalancerLatestTelemetryInstance) SetTime(val DateTime) {
	s.Time = val
}

// SetController sets the value of Controller.
func (s *LoadBalancerLatestTelemetryInstance) SetController(val Identifier) {
	s.Controller = val
}

// SetLatest sets the value of Latest.
func (s *LoadBalancerLatestTelemetryInstance) SetLatest(val OptNilLoadBalancerLatestTelemetryInstanceLatest) {
	s.Latest = val
}

// SetSnapshots sets the value of Snapshots.
func (s *LoadBalancerLatestTelemetryInstance) SetSnapshots(val OptNilLoadBalancerTelemetrySnapshotArray) {
	s.Snapshots = val
}

type LoadBalancerLatestTelemetryInstanceLatest struct {
	Time      DateTime                                              `json:"time"`
	Started   DateTime                                              `json:"started"`
	Version   OptString                                             `json:"version"`
	DatasetID int                                                   `json:"dataset_id"`
	Router    OptNilLoadBalancerLatestTelemetryInstanceLatestRouter `json:"router"`
	Urls      OptNilLoadBalancerLatestTelemetryInstanceLatestUrls   `json:"urls"`
	Metrics   LoadBalancerTelemetryControllerMetrics                `json:"metrics"`
}

// GetTime returns the value of Time.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetTime() DateTime {
	return s.Time
}

// GetStarted returns the value of Started.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetStarted() DateTime {
	return s.Started
}

// GetVersion returns the value of Version.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetVersion() OptString {
	return s.Version
}

// GetDatasetID returns the value of DatasetID.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetDatasetID() int {
	return s.DatasetID
}

// GetRouter returns the value of Router.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetRouter() OptNilLoadBalancerLatestTelemetryInstanceLatestRouter {
	return s.Router
}

// GetUrls returns the value of Urls.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetUrls() OptNilLoadBalancerLatestTelemetryInstanceLatestUrls {
	return s.Urls
}

// GetMetrics returns the value of Metrics.
func (s *LoadBalancerLatestTelemetryInstanceLatest) GetMetrics() LoadBalancerTelemetryControllerMetrics {
	return s.Metrics
}

// SetTime sets the value of Time.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetTime(val DateTime) {
	s.Time = val
}

// SetStarted sets the value of Started.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetStarted(val DateTime) {
	s.Started = val
}

// SetVersion sets the value of Version.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetVersion(val OptString) {
	s.Version = val
}

// SetDatasetID sets the value of DatasetID.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetDatasetID(val int) {
	s.DatasetID = val
}

// SetRouter sets the value of Router.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetRouter(val OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) {
	s.Router = val
}

// SetUrls sets the value of Urls.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetUrls(val OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) {
	s.Urls = val
}

// SetMetrics sets the value of Metrics.
func (s *LoadBalancerLatestTelemetryInstanceLatest) SetMetrics(val LoadBalancerTelemetryControllerMetrics) {
	s.Metrics = val
}

type LoadBalancerLatestTelemetryInstanceLatestRouter struct {
	Destinations LoadBalancerLatestTelemetryInstanceLatestRouterDestinations `json:"destinations"`
}

// GetDestinations returns the value of Destinations.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouter) GetDestinations() LoadBalancerLatestTelemetryInstanceLatestRouterDestinations {
	return s.Destinations
}

// SetDestinations sets the value of Destinations.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouter) SetDestinations(val LoadBalancerLatestTelemetryInstanceLatestRouterDestinations) {
	s.Destinations = val
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinations map[string]LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem

func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinations) init() LoadBalancerLatestTelemetryInstanceLatestRouterDestinations {
	m := *s
	if m == nil {
		m = map[string]LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem{}
		*s = m
	}
	return m
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem struct {
	Connections NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections `json:"connections"`
	Requests    NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests    `json:"requests"`
	LatencyMs   []int                                                                         `json:"latency_ms"`
	InstanceID  string                                                                        `json:"instance_id"`
	ContainerID string                                                                        `json:"container_id"`
}

// GetConnections returns the value of Connections.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) GetConnections() NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections {
	return s.Connections
}

// GetRequests returns the value of Requests.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) GetRequests() NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests {
	return s.Requests
}

// GetLatencyMs returns the value of LatencyMs.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) GetLatencyMs() []int {
	return s.LatencyMs
}

// GetInstanceID returns the value of InstanceID.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) GetInstanceID() string {
	return s.InstanceID
}

// GetContainerID returns the value of ContainerID.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) GetContainerID() string {
	return s.ContainerID
}

// SetConnections sets the value of Connections.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) SetConnections(val NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) {
	s.Connections = val
}

// SetRequests sets the value of Requests.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) SetRequests(val NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) {
	s.Requests = val
}

// SetLatencyMs sets the value of LatencyMs.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) SetLatencyMs(val []int) {
	s.LatencyMs = val
}

// SetInstanceID sets the value of InstanceID.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetContainerID sets the value of ContainerID.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItem) SetContainerID(val string) {
	s.ContainerID = val
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections struct {
	Success          int                                                                                 `json:"success"`
	Unavailable      int                                                                                 `json:"unavailable"`
	Errors           OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors `json:"errors"`
	BytesTransmitted OptInt                                                                              `json:"bytes_transmitted"`
	BytesReceived    OptInt                                                                              `json:"bytes_received"`
}

// GetSuccess returns the value of Success.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) GetSuccess() int {
	return s.Success
}

// GetUnavailable returns the value of Unavailable.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) GetUnavailable() int {
	return s.Unavailable
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) GetErrors() OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors {
	return s.Errors
}

// GetBytesTransmitted returns the value of BytesTransmitted.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) GetBytesTransmitted() OptInt {
	return s.BytesTransmitted
}

// GetBytesReceived returns the value of BytesReceived.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) GetBytesReceived() OptInt {
	return s.BytesReceived
}

// SetSuccess sets the value of Success.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetSuccess(val int) {
	s.Success = val
}

// SetUnavailable sets the value of Unavailable.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetUnavailable(val int) {
	s.Unavailable = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetErrors(val OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) {
	s.Errors = val
}

// SetBytesTransmitted sets the value of BytesTransmitted.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetBytesTransmitted(val OptInt) {
	s.BytesTransmitted = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetBytesReceived(val OptInt) {
	s.BytesReceived = val
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors map[string]int

func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) init() LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests struct {
	Total     int                                                                                 `json:"total"`
	Responses OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses `json:"responses"`
	Errors    OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors    `json:"errors"`
}

// GetTotal returns the value of Total.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) GetTotal() int {
	return s.Total
}

// GetResponses returns the value of Responses.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) GetResponses() OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses {
	return s.Responses
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) GetErrors() OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors {
	return s.Errors
}

// SetTotal sets the value of Total.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) SetTotal(val int) {
	s.Total = val
}

// SetResponses sets the value of Responses.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) SetResponses(val OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) {
	s.Responses = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) SetErrors(val OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) {
	s.Errors = val
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors map[string]int

func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) init() LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses map[string]int

func (s *LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) init() LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerLatestTelemetryInstanceLatestUrls struct {
	Destinations LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations `json:"destinations"`
}

// GetDestinations returns the value of Destinations.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrls) GetDestinations() LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations {
	return s.Destinations
}

// SetDestinations sets the value of Destinations.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrls) SetDestinations(val LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations) {
	s.Destinations = val
}

type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations map[string]LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItem

func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations) init() LoadBalancerLatestTelemetryInstanceLatestUrlsDestinations {
	m := *s
	if m == nil {
		m = map[string]LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItem{}
		*s = m
	}
	return m
}

type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItem struct {
	Requests NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests `json:"requests"`
}

// GetRequests returns the value of Requests.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItem) GetRequests() NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests {
	return s.Requests
}

// SetRequests sets the value of Requests.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItem) SetRequests(val NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) {
	s.Requests = val
}

type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests struct {
	// The host name of the URL request.
	Host string `json:"host"`
	// The HTTP method of the URL request.
	Method string `json:"method"`
	// The path portion of the inbound URL request.
	Path string `json:"path"`
	// The number of requests to a this URL.
	Total   int      `json:"total"`
	LastHit DateTime `json:"last_hit"`
	// An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
	Handlers LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers `json:"handlers"`
	// An object where the key is the response type and the value is the number of hits with that
	// response.
	Responses OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses `json:"responses"`
	// An object where the key is the error type and the value is the number of hits with that error.
	Errors OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors `json:"errors"`
}

// GetHost returns the value of Host.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetHost() string {
	return s.Host
}

// GetMethod returns the value of Method.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetMethod() string {
	return s.Method
}

// GetPath returns the value of Path.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetPath() string {
	return s.Path
}

// GetTotal returns the value of Total.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetTotal() int {
	return s.Total
}

// GetLastHit returns the value of LastHit.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetLastHit() DateTime {
	return s.LastHit
}

// GetHandlers returns the value of Handlers.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetHandlers() LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers {
	return s.Handlers
}

// GetResponses returns the value of Responses.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetResponses() OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses {
	return s.Responses
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) GetErrors() OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors {
	return s.Errors
}

// SetHost sets the value of Host.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetHost(val string) {
	s.Host = val
}

// SetMethod sets the value of Method.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetMethod(val string) {
	s.Method = val
}

// SetPath sets the value of Path.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetPath(val string) {
	s.Path = val
}

// SetTotal sets the value of Total.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetTotal(val int) {
	s.Total = val
}

// SetLastHit sets the value of LastHit.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetLastHit(val DateTime) {
	s.LastHit = val
}

// SetHandlers sets the value of Handlers.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetHandlers(val LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) {
	s.Handlers = val
}

// SetResponses sets the value of Responses.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetResponses(val OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) {
	s.Responses = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetErrors(val OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) {
	s.Errors = val
}

// An object where the key is the error type and the value is the number of hits with that error.
type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors map[string]int

func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) init() LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers struct {
	Proxy    LoadBalancerTelemetryUrlRequestHandler `json:"proxy"`
	Cache    LoadBalancerTelemetryUrlRequestHandler `json:"cache"`
	Forward  LoadBalancerTelemetryUrlRequestHandler `json:"forward"`
	Redirect LoadBalancerTelemetryUrlRequestHandler `json:"redirect"`
}

// GetProxy returns the value of Proxy.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) GetProxy() LoadBalancerTelemetryUrlRequestHandler {
	return s.Proxy
}

// GetCache returns the value of Cache.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) GetCache() LoadBalancerTelemetryUrlRequestHandler {
	return s.Cache
}

// GetForward returns the value of Forward.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) GetForward() LoadBalancerTelemetryUrlRequestHandler {
	return s.Forward
}

// GetRedirect returns the value of Redirect.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) GetRedirect() LoadBalancerTelemetryUrlRequestHandler {
	return s.Redirect
}

// SetProxy sets the value of Proxy.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) SetProxy(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Proxy = val
}

// SetCache sets the value of Cache.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) SetCache(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Cache = val
}

// SetForward sets the value of Forward.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) SetForward(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Forward = val
}

// SetRedirect sets the value of Redirect.
func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsHandlers) SetRedirect(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Redirect = val
}

// An object where the key is the response type and the value is the number of hits with that
// response.
type LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses map[string]int

func (s *LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) init() LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/LoadBalancerTelemetryControllerMetrics
type LoadBalancerTelemetryControllerMetrics struct {
	Disconnects      LoadBalancerTelemetryControllerMetricsDisconnects `json:"disconnects"`
	Connections      int                                               `json:"connections"`
	Requests         int                                               `json:"requests"`
	BytesTransmitted int                                               `json:"bytes_transmitted"`
	BytesReceived    int                                               `json:"bytes_received"`
}

// GetDisconnects returns the value of Disconnects.
func (s *LoadBalancerTelemetryControllerMetrics) GetDisconnects() LoadBalancerTelemetryControllerMetricsDisconnects {
	return s.Disconnects
}

// GetConnections returns the value of Connections.
func (s *LoadBalancerTelemetryControllerMetrics) GetConnections() int {
	return s.Connections
}

// GetRequests returns the value of Requests.
func (s *LoadBalancerTelemetryControllerMetrics) GetRequests() int {
	return s.Requests
}

// GetBytesTransmitted returns the value of BytesTransmitted.
func (s *LoadBalancerTelemetryControllerMetrics) GetBytesTransmitted() int {
	return s.BytesTransmitted
}

// GetBytesReceived returns the value of BytesReceived.
func (s *LoadBalancerTelemetryControllerMetrics) GetBytesReceived() int {
	return s.BytesReceived
}

// SetDisconnects sets the value of Disconnects.
func (s *LoadBalancerTelemetryControllerMetrics) SetDisconnects(val LoadBalancerTelemetryControllerMetricsDisconnects) {
	s.Disconnects = val
}

// SetConnections sets the value of Connections.
func (s *LoadBalancerTelemetryControllerMetrics) SetConnections(val int) {
	s.Connections = val
}

// SetRequests sets the value of Requests.
func (s *LoadBalancerTelemetryControllerMetrics) SetRequests(val int) {
	s.Requests = val
}

// SetBytesTransmitted sets the value of BytesTransmitted.
func (s *LoadBalancerTelemetryControllerMetrics) SetBytesTransmitted(val int) {
	s.BytesTransmitted = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *LoadBalancerTelemetryControllerMetrics) SetBytesReceived(val int) {
	s.BytesReceived = val
}

type LoadBalancerTelemetryControllerMetricsDisconnects struct {
	NoError                int `json:"no_error"`
	RequestInvalid         int `json:"request_invalid"`
	TimeoutIdle            int `json:"timeout_idle"`
	RouterNone             int `json:"router_none"`
	RouterNomatch          int `json:"router_nomatch"`
	DestinationUnavailable int `json:"destination_unavailable"`
	UnknownError           int `json:"unknown_error"`
}

// GetNoError returns the value of NoError.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetNoError() int {
	return s.NoError
}

// GetRequestInvalid returns the value of RequestInvalid.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetRequestInvalid() int {
	return s.RequestInvalid
}

// GetTimeoutIdle returns the value of TimeoutIdle.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetTimeoutIdle() int {
	return s.TimeoutIdle
}

// GetRouterNone returns the value of RouterNone.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetRouterNone() int {
	return s.RouterNone
}

// GetRouterNomatch returns the value of RouterNomatch.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetRouterNomatch() int {
	return s.RouterNomatch
}

// GetDestinationUnavailable returns the value of DestinationUnavailable.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetDestinationUnavailable() int {
	return s.DestinationUnavailable
}

// GetUnknownError returns the value of UnknownError.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) GetUnknownError() int {
	return s.UnknownError
}

// SetNoError sets the value of NoError.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetNoError(val int) {
	s.NoError = val
}

// SetRequestInvalid sets the value of RequestInvalid.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetRequestInvalid(val int) {
	s.RequestInvalid = val
}

// SetTimeoutIdle sets the value of TimeoutIdle.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetTimeoutIdle(val int) {
	s.TimeoutIdle = val
}

// SetRouterNone sets the value of RouterNone.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetRouterNone(val int) {
	s.RouterNone = val
}

// SetRouterNomatch sets the value of RouterNomatch.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetRouterNomatch(val int) {
	s.RouterNomatch = val
}

// SetDestinationUnavailable sets the value of DestinationUnavailable.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetDestinationUnavailable(val int) {
	s.DestinationUnavailable = val
}

// SetUnknownError sets the value of UnknownError.
func (s *LoadBalancerTelemetryControllerMetricsDisconnects) SetUnknownError(val int) {
	s.UnknownError = val
}

// Aggregated load balancer telemetry across all instances for a given range.
// Ref: #/components/schemas/LoadBalancerTelemetryReport
type LoadBalancerTelemetryReport struct {
	Created   DateTime                                   `json:"created"`
	Range     Range                                      `json:"range"`
	Snapshots []LoadBalancerTelemetryReportSnapshotsItem `json:"snapshots"`
}

// GetCreated returns the value of Created.
func (s *LoadBalancerTelemetryReport) GetCreated() DateTime {
	return s.Created
}

// GetRange returns the value of Range.
func (s *LoadBalancerTelemetryReport) GetRange() Range {
	return s.Range
}

// GetSnapshots returns the value of Snapshots.
func (s *LoadBalancerTelemetryReport) GetSnapshots() []LoadBalancerTelemetryReportSnapshotsItem {
	return s.Snapshots
}

// SetCreated sets the value of Created.
func (s *LoadBalancerTelemetryReport) SetCreated(val DateTime) {
	s.Created = val
}

// SetRange sets the value of Range.
func (s *LoadBalancerTelemetryReport) SetRange(val Range) {
	s.Range = val
}

// SetSnapshots sets the value of Snapshots.
func (s *LoadBalancerTelemetryReport) SetSnapshots(val []LoadBalancerTelemetryReportSnapshotsItem) {
	s.Snapshots = val
}

type LoadBalancerTelemetryReportSnapshotsItem struct {
	Time       DateTime                               `json:"time"`
	Controller Identifier                             `json:"controller"`
	Metrics    LoadBalancerTelemetryControllerMetrics `json:"metrics"`
}

// GetTime returns the value of Time.
func (s *LoadBalancerTelemetryReportSnapshotsItem) GetTime() DateTime {
	return s.Time
}

// GetController returns the value of Controller.
func (s *LoadBalancerTelemetryReportSnapshotsItem) GetController() Identifier {
	return s.Controller
}

// GetMetrics returns the value of Metrics.
func (s *LoadBalancerTelemetryReportSnapshotsItem) GetMetrics() LoadBalancerTelemetryControllerMetrics {
	return s.Metrics
}

// SetTime sets the value of Time.
func (s *LoadBalancerTelemetryReportSnapshotsItem) SetTime(val DateTime) {
	s.Time = val
}

// SetController sets the value of Controller.
func (s *LoadBalancerTelemetryReportSnapshotsItem) SetController(val Identifier) {
	s.Controller = val
}

// SetMetrics sets the value of Metrics.
func (s *LoadBalancerTelemetryReportSnapshotsItem) SetMetrics(val LoadBalancerTelemetryControllerMetrics) {
	s.Metrics = val
}

// Ref: #/components/schemas/LoadBalancerTelemetrySnapshot
type LoadBalancerTelemetrySnapshot struct {
	Time      DateTime                                  `json:"time"`
	Started   DateTime                                  `json:"started"`
	Version   OptString                                 `json:"version"`
	DatasetID int                                       `json:"dataset_id"`
	Router    OptNilLoadBalancerTelemetrySnapshotRouter `json:"router"`
	Urls      OptNilLoadBalancerTelemetrySnapshotUrls   `json:"urls"`
	Metrics   LoadBalancerTelemetryControllerMetrics    `json:"metrics"`
}

// GetTime returns the value of Time.
func (s *LoadBalancerTelemetrySnapshot) GetTime() DateTime {
	return s.Time
}

// GetStarted returns the value of Started.
func (s *LoadBalancerTelemetrySnapshot) GetStarted() DateTime {
	return s.Started
}

// GetVersion returns the value of Version.
func (s *LoadBalancerTelemetrySnapshot) GetVersion() OptString {
	return s.Version
}

// GetDatasetID returns the value of DatasetID.
func (s *LoadBalancerTelemetrySnapshot) GetDatasetID() int {
	return s.DatasetID
}

// GetRouter returns the value of Router.
func (s *LoadBalancerTelemetrySnapshot) GetRouter() OptNilLoadBalancerTelemetrySnapshotRouter {
	return s.Router
}

// GetUrls returns the value of Urls.
func (s *LoadBalancerTelemetrySnapshot) GetUrls() OptNilLoadBalancerTelemetrySnapshotUrls {
	return s.Urls
}

// GetMetrics returns the value of Metrics.
func (s *LoadBalancerTelemetrySnapshot) GetMetrics() LoadBalancerTelemetryControllerMetrics {
	return s.Metrics
}

// SetTime sets the value of Time.
func (s *LoadBalancerTelemetrySnapshot) SetTime(val DateTime) {
	s.Time = val
}

// SetStarted sets the value of Started.
func (s *LoadBalancerTelemetrySnapshot) SetStarted(val DateTime) {
	s.Started = val
}

// SetVersion sets the value of Version.
func (s *LoadBalancerTelemetrySnapshot) SetVersion(val OptString) {
	s.Version = val
}

// SetDatasetID sets the value of DatasetID.
func (s *LoadBalancerTelemetrySnapshot) SetDatasetID(val int) {
	s.DatasetID = val
}

// SetRouter sets the value of Router.
func (s *LoadBalancerTelemetrySnapshot) SetRouter(val OptNilLoadBalancerTelemetrySnapshotRouter) {
	s.Router = val
}

// SetUrls sets the value of Urls.
func (s *LoadBalancerTelemetrySnapshot) SetUrls(val OptNilLoadBalancerTelemetrySnapshotUrls) {
	s.Urls = val
}

// SetMetrics sets the value of Metrics.
func (s *LoadBalancerTelemetrySnapshot) SetMetrics(val LoadBalancerTelemetryControllerMetrics) {
	s.Metrics = val
}

type LoadBalancerTelemetrySnapshotRouter struct {
	Destinations LoadBalancerTelemetrySnapshotRouterDestinations `json:"destinations"`
}

// GetDestinations returns the value of Destinations.
func (s *LoadBalancerTelemetrySnapshotRouter) GetDestinations() LoadBalancerTelemetrySnapshotRouterDestinations {
	return s.Destinations
}

// SetDestinations sets the value of Destinations.
func (s *LoadBalancerTelemetrySnapshotRouter) SetDestinations(val LoadBalancerTelemetrySnapshotRouterDestinations) {
	s.Destinations = val
}

type LoadBalancerTelemetrySnapshotRouterDestinations map[string]LoadBalancerTelemetrySnapshotRouterDestinationsItem

func (s *LoadBalancerTelemetrySnapshotRouterDestinations) init() LoadBalancerTelemetrySnapshotRouterDestinations {
	m := *s
	if m == nil {
		m = map[string]LoadBalancerTelemetrySnapshotRouterDestinationsItem{}
		*s = m
	}
	return m
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItem struct {
	Connections NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections `json:"connections"`
	Requests    NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests    `json:"requests"`
	LatencyMs   []int                                                             `json:"latency_ms"`
	InstanceID  string                                                            `json:"instance_id"`
	ContainerID string                                                            `json:"container_id"`
}

// GetConnections returns the value of Connections.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) GetConnections() NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections {
	return s.Connections
}

// GetRequests returns the value of Requests.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) GetRequests() NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests {
	return s.Requests
}

// GetLatencyMs returns the value of LatencyMs.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) GetLatencyMs() []int {
	return s.LatencyMs
}

// GetInstanceID returns the value of InstanceID.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) GetInstanceID() string {
	return s.InstanceID
}

// GetContainerID returns the value of ContainerID.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) GetContainerID() string {
	return s.ContainerID
}

// SetConnections sets the value of Connections.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) SetConnections(val NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) {
	s.Connections = val
}

// SetRequests sets the value of Requests.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) SetRequests(val NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) {
	s.Requests = val
}

// SetLatencyMs sets the value of LatencyMs.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) SetLatencyMs(val []int) {
	s.LatencyMs = val
}

// SetInstanceID sets the value of InstanceID.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetContainerID sets the value of ContainerID.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItem) SetContainerID(val string) {
	s.ContainerID = val
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections struct {
	Success          int                                                                     `json:"success"`
	Unavailable      int                                                                     `json:"unavailable"`
	Errors           OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors `json:"errors"`
	BytesTransmitted OptInt                                                                  `json:"bytes_transmitted"`
	BytesReceived    OptInt                                                                  `json:"bytes_received"`
}

// GetSuccess returns the value of Success.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) GetSuccess() int {
	return s.Success
}

// GetUnavailable returns the value of Unavailable.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) GetUnavailable() int {
	return s.Unavailable
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) GetErrors() OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors {
	return s.Errors
}

// GetBytesTransmitted returns the value of BytesTransmitted.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) GetBytesTransmitted() OptInt {
	return s.BytesTransmitted
}

// GetBytesReceived returns the value of BytesReceived.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) GetBytesReceived() OptInt {
	return s.BytesReceived
}

// SetSuccess sets the value of Success.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetSuccess(val int) {
	s.Success = val
}

// SetUnavailable sets the value of Unavailable.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetUnavailable(val int) {
	s.Unavailable = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetErrors(val OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) {
	s.Errors = val
}

// SetBytesTransmitted sets the value of BytesTransmitted.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetBytesTransmitted(val OptInt) {
	s.BytesTransmitted = val
}

// SetBytesReceived sets the value of BytesReceived.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetBytesReceived(val OptInt) {
	s.BytesReceived = val
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors map[string]int

func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) init() LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests struct {
	Total     int                                                                     `json:"total"`
	Responses OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses `json:"responses"`
	Errors    OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors    `json:"errors"`
}

// GetTotal returns the value of Total.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) GetTotal() int {
	return s.Total
}

// GetResponses returns the value of Responses.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) GetResponses() OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses {
	return s.Responses
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) GetErrors() OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors {
	return s.Errors
}

// SetTotal sets the value of Total.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) SetTotal(val int) {
	s.Total = val
}

// SetResponses sets the value of Responses.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) SetResponses(val OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) {
	s.Responses = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) SetErrors(val OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) {
	s.Errors = val
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors map[string]int

func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) init() LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses map[string]int

func (s *LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) init() LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type LoadBalancerTelemetrySnapshotUrls struct {
	Destinations LoadBalancerTelemetrySnapshotUrlsDestinations `json:"destinations"`
}

// GetDestinations returns the value of Destinations.
func (s *LoadBalancerTelemetrySnapshotUrls) GetDestinations() LoadBalancerTelemetrySnapshotUrlsDestinations {
	return s.Destinations
}

// SetDestinations sets the value of Destinations.
func (s *LoadBalancerTelemetrySnapshotUrls) SetDestinations(val LoadBalancerTelemetrySnapshotUrlsDestinations) {
	s.Destinations = val
}

type LoadBalancerTelemetrySnapshotUrlsDestinations map[string]LoadBalancerTelemetrySnapshotUrlsDestinationsItem

func (s *LoadBalancerTelemetrySnapshotUrlsDestinations) init() LoadBalancerTelemetrySnapshotUrlsDestinations {
	m := *s
	if m == nil {
		m = map[string]LoadBalancerTelemetrySnapshotUrlsDestinationsItem{}
		*s = m
	}
	return m
}

type LoadBalancerTelemetrySnapshotUrlsDestinationsItem struct {
	Requests NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests `json:"requests"`
}

// GetRequests returns the value of Requests.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItem) GetRequests() NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests {
	return s.Requests
}

// SetRequests sets the value of Requests.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItem) SetRequests(val NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) {
	s.Requests = val
}

type LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests struct {
	// The host name of the URL request.
	Host string `json:"host"`
	// The HTTP method of the URL request.
	Method string `json:"method"`
	// The path portion of the inbound URL request.
	Path string `json:"path"`
	// The number of requests to a this URL.
	Total   int      `json:"total"`
	LastHit DateTime `json:"last_hit"`
	// An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
	Handlers LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers `json:"handlers"`
	// An object where the key is the response type and the value is the number of hits with that
	// response.
	Responses OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses `json:"responses"`
	// An object where the key is the error type and the value is the number of hits with that error.
	Errors OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors `json:"errors"`
}

// GetHost returns the value of Host.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetHost() string {
	return s.Host
}

// GetMethod returns the value of Method.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetMethod() string {
	return s.Method
}

// GetPath returns the value of Path.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetPath() string {
	return s.Path
}

// GetTotal returns the value of Total.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetTotal() int {
	return s.Total
}

// GetLastHit returns the value of LastHit.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetLastHit() DateTime {
	return s.LastHit
}

// GetHandlers returns the value of Handlers.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetHandlers() LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers {
	return s.Handlers
}

// GetResponses returns the value of Responses.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetResponses() OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses {
	return s.Responses
}

// GetErrors returns the value of Errors.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) GetErrors() OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors {
	return s.Errors
}

// SetHost sets the value of Host.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetHost(val string) {
	s.Host = val
}

// SetMethod sets the value of Method.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetMethod(val string) {
	s.Method = val
}

// SetPath sets the value of Path.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetPath(val string) {
	s.Path = val
}

// SetTotal sets the value of Total.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetTotal(val int) {
	s.Total = val
}

// SetLastHit sets the value of LastHit.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetLastHit(val DateTime) {
	s.LastHit = val
}

// SetHandlers sets the value of Handlers.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetHandlers(val LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) {
	s.Handlers = val
}

// SetResponses sets the value of Responses.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetResponses(val OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) {
	s.Responses = val
}

// SetErrors sets the value of Errors.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetErrors(val OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) {
	s.Errors = val
}

// An object where the key is the error type and the value is the number of hits with that error.
type LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors map[string]int

func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) init() LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// An object describing the relative breakdown of proxy, cache, forward, and redirect URL responses.
type LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers struct {
	Proxy    LoadBalancerTelemetryUrlRequestHandler `json:"proxy"`
	Cache    LoadBalancerTelemetryUrlRequestHandler `json:"cache"`
	Forward  LoadBalancerTelemetryUrlRequestHandler `json:"forward"`
	Redirect LoadBalancerTelemetryUrlRequestHandler `json:"redirect"`
}

// GetProxy returns the value of Proxy.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) GetProxy() LoadBalancerTelemetryUrlRequestHandler {
	return s.Proxy
}

// GetCache returns the value of Cache.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) GetCache() LoadBalancerTelemetryUrlRequestHandler {
	return s.Cache
}

// GetForward returns the value of Forward.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) GetForward() LoadBalancerTelemetryUrlRequestHandler {
	return s.Forward
}

// GetRedirect returns the value of Redirect.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) GetRedirect() LoadBalancerTelemetryUrlRequestHandler {
	return s.Redirect
}

// SetProxy sets the value of Proxy.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) SetProxy(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Proxy = val
}

// SetCache sets the value of Cache.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) SetCache(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Cache = val
}

// SetForward sets the value of Forward.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) SetForward(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Forward = val
}

// SetRedirect sets the value of Redirect.
func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsHandlers) SetRedirect(val LoadBalancerTelemetryUrlRequestHandler) {
	s.Redirect = val
}

// An object where the key is the response type and the value is the number of hits with that
// response.
type LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses map[string]int

func (s *LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) init() LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/LoadBalancerTelemetryUrlRequestHandler
type LoadBalancerTelemetryUrlRequestHandler struct {
	// The number of hits to a specific URL handler.
	Hits int `json:"hits"`
	// The cumulative ms of response time across all hits.
	TimingMs int `json:"timing_ms"`
}

// GetHits returns the value of Hits.
func (s *LoadBalancerTelemetryUrlRequestHandler) GetHits() int {
	return s.Hits
}

// GetTimingMs returns the value of TimingMs.
func (s *LoadBalancerTelemetryUrlRequestHandler) GetTimingMs() int {
	return s.TimingMs
}

// SetHits sets the value of Hits.
func (s *LoadBalancerTelemetryUrlRequestHandler) SetHits(val int) {
	s.Hits = val
}

// SetTimingMs sets the value of TimingMs.
func (s *LoadBalancerTelemetryUrlRequestHandler) SetTimingMs(val int) {
	s.TimingMs = val
}

// A resource thats associated with a provider location.
// Ref: #/components/schemas/LocationsIncludes
type LocationsIncludes map[string]ProviderLocation

func (s *LocationsIncludes) init() LocationsIncludes {
	m := *s
	if m == nil {
		m = map[string]ProviderLocation{}
		*s = m
	}
	return m
}

type LookupIdentifierDesiredComponent string

const (
	LookupIdentifierDesiredComponentCluster     LookupIdentifierDesiredComponent = "cluster"
	LookupIdentifierDesiredComponentEnvironment LookupIdentifierDesiredComponent = "environment"
	LookupIdentifierDesiredComponentImageSource LookupIdentifierDesiredComponent = "image-source"
	LookupIdentifierDesiredComponentStack       LookupIdentifierDesiredComponent = "stack"
	LookupIdentifierDesiredComponentServer      LookupIdentifierDesiredComponent = "server"
	LookupIdentifierDesiredComponentContainer   LookupIdentifierDesiredComponent = "container"
)

// AllValues returns all LookupIdentifierDesiredComponent values.
func (LookupIdentifierDesiredComponent) AllValues() []LookupIdentifierDesiredComponent {
	return []LookupIdentifierDesiredComponent{
		LookupIdentifierDesiredComponentCluster,
		LookupIdentifierDesiredComponentEnvironment,
		LookupIdentifierDesiredComponentImageSource,
		LookupIdentifierDesiredComponentStack,
		LookupIdentifierDesiredComponentServer,
		LookupIdentifierDesiredComponentContainer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s LookupIdentifierDesiredComponent) MarshalText() ([]byte, error) {
	switch s {
	case LookupIdentifierDesiredComponentCluster:
		return []byte(s), nil
	case LookupIdentifierDesiredComponentEnvironment:
		return []byte(s), nil
	case LookupIdentifierDesiredComponentImageSource:
		return []byte(s), nil
	case LookupIdentifierDesiredComponentStack:
		return []byte(s), nil
	case LookupIdentifierDesiredComponentServer:
		return []byte(s), nil
	case LookupIdentifierDesiredComponentContainer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *LookupIdentifierDesiredComponent) UnmarshalText(data []byte) error {
	switch LookupIdentifierDesiredComponent(data) {
	case LookupIdentifierDesiredComponentCluster:
		*s = LookupIdentifierDesiredComponentCluster
		return nil
	case LookupIdentifierDesiredComponentEnvironment:
		*s = LookupIdentifierDesiredComponentEnvironment
		return nil
	case LookupIdentifierDesiredComponentImageSource:
		*s = LookupIdentifierDesiredComponentImageSource
		return nil
	case LookupIdentifierDesiredComponentStack:
		*s = LookupIdentifierDesiredComponentStack
		return nil
	case LookupIdentifierDesiredComponentServer:
		*s = LookupIdentifierDesiredComponentServer
		return nil
	case LookupIdentifierDesiredComponentContainer:
		*s = LookupIdentifierDesiredComponentContainer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type LookupIdentifierOK struct {
	Data LookupIdentifierOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *LookupIdentifierOK) GetData() LookupIdentifierOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *LookupIdentifierOK) SetData(val LookupIdentifierOKData) {
	s.Data = val
}

type LookupIdentifierOKData struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *LookupIdentifierOKData) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *LookupIdentifierOKData) SetID(val string) {
	s.ID = val
}

type LookupStackBuildOK struct {
	Data StackBuild `json:"data"`
}

// GetData returns the value of Data.
func (s *LookupStackBuildOK) GetData() StackBuild {
	return s.Data
}

// SetData sets the value of Data.
func (s *LookupStackBuildOK) SetData(val StackBuild) {
	s.Data = val
}

type LookupTLSCertificateOK struct {
	Data DnsTlsCertificate `json:"data"`
}

// GetData returns the value of Data.
func (s *LookupTLSCertificateOK) GetData() DnsTlsCertificate {
	return s.Data
}

// SetData sets the value of Data.
func (s *LookupTLSCertificateOK) SetData(val DnsTlsCertificate) {
	s.Data = val
}

// Merged schema.
// Ref: #/components/schemas/MembershipState
type MembershipState struct {
	// The current state of the membership.
	Current MembershipStateCurrent `json:"current"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptMembershipStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *MembershipState) GetCurrent() MembershipStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *MembershipState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *MembershipState) GetError() OptMembershipStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *MembershipState) SetCurrent(val MembershipStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *MembershipState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *MembershipState) SetError(val OptMembershipStateError) {
	s.Error = val
}

// The current state of the membership.
type MembershipStateCurrent string

const (
	MembershipStateCurrentPending  MembershipStateCurrent = "pending"
	MembershipStateCurrentAccepted MembershipStateCurrent = "accepted"
	MembershipStateCurrentDeclined MembershipStateCurrent = "declined"
	MembershipStateCurrentRevoked  MembershipStateCurrent = "revoked"
	MembershipStateCurrentDeleted  MembershipStateCurrent = "deleted"
)

// AllValues returns all MembershipStateCurrent values.
func (MembershipStateCurrent) AllValues() []MembershipStateCurrent {
	return []MembershipStateCurrent{
		MembershipStateCurrentPending,
		MembershipStateCurrentAccepted,
		MembershipStateCurrentDeclined,
		MembershipStateCurrentRevoked,
		MembershipStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MembershipStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case MembershipStateCurrentPending:
		return []byte(s), nil
	case MembershipStateCurrentAccepted:
		return []byte(s), nil
	case MembershipStateCurrentDeclined:
		return []byte(s), nil
	case MembershipStateCurrentRevoked:
		return []byte(s), nil
	case MembershipStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MembershipStateCurrent) UnmarshalText(data []byte) error {
	switch MembershipStateCurrent(data) {
	case MembershipStateCurrentPending:
		*s = MembershipStateCurrentPending
		return nil
	case MembershipStateCurrentAccepted:
		*s = MembershipStateCurrentAccepted
		return nil
	case MembershipStateCurrentDeclined:
		*s = MembershipStateCurrentDeclined
		return nil
	case MembershipStateCurrentRevoked:
		*s = MembershipStateCurrentRevoked
		return nil
	case MembershipStateCurrentDeleted:
		*s = MembershipStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type MembershipStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *MembershipStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *MembershipStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *MembershipStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *MembershipStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/MemoryData
type MemoryData struct {
	// The number in bytes of memory being used by the instance at the time of the snapshot.
	Usage OptFloat64 `json:"usage"`
	// The highest amoun tof memory usage since the last restart.
	MaxUsage OptFloat64 `json:"max_usage"`
	// The number of times the memory liimit was exceeded for the instance.
	FailCount OptFloat64 `json:"fail_count"`
	// The maximum number of bytes of memory this instance has acess to.
	Limit OptFloat64 `json:"limit"`
}

// GetUsage returns the value of Usage.
func (s *MemoryData) GetUsage() OptFloat64 {
	return s.Usage
}

// GetMaxUsage returns the value of MaxUsage.
func (s *MemoryData) GetMaxUsage() OptFloat64 {
	return s.MaxUsage
}

// GetFailCount returns the value of FailCount.
func (s *MemoryData) GetFailCount() OptFloat64 {
	return s.FailCount
}

// GetLimit returns the value of Limit.
func (s *MemoryData) GetLimit() OptFloat64 {
	return s.Limit
}

// SetUsage sets the value of Usage.
func (s *MemoryData) SetUsage(val OptFloat64) {
	s.Usage = val
}

// SetMaxUsage sets the value of MaxUsage.
func (s *MemoryData) SetMaxUsage(val OptFloat64) {
	s.MaxUsage = val
}

// SetFailCount sets the value of FailCount.
func (s *MemoryData) SetFailCount(val OptFloat64) {
	s.FailCount = val
}

// SetLimit sets the value of Limit.
func (s *MemoryData) SetLimit(val OptFloat64) {
	s.Limit = val
}

// A snapshot of memory usage statistics.
// Ref: #/components/schemas/MemorySnapshot
type MemorySnapshot struct {
	// The number of bytes of page cache memory being used by this instance.
	Cache          OptFloat64    `json:"cache"`
	Usage          OptMemoryData `json:"usage"`
	SwapUsage      OptMemoryData `json:"swap_usage"`
	KernelUsage    OptMemoryData `json:"kernel_usage"`
	KernelTCPUsage OptMemoryData `json:"kernel_tcp_usage"`
}

// GetCache returns the value of Cache.
func (s *MemorySnapshot) GetCache() OptFloat64 {
	return s.Cache
}

// GetUsage returns the value of Usage.
func (s *MemorySnapshot) GetUsage() OptMemoryData {
	return s.Usage
}

// GetSwapUsage returns the value of SwapUsage.
func (s *MemorySnapshot) GetSwapUsage() OptMemoryData {
	return s.SwapUsage
}

// GetKernelUsage returns the value of KernelUsage.
func (s *MemorySnapshot) GetKernelUsage() OptMemoryData {
	return s.KernelUsage
}

// GetKernelTCPUsage returns the value of KernelTCPUsage.
func (s *MemorySnapshot) GetKernelTCPUsage() OptMemoryData {
	return s.KernelTCPUsage
}

// SetCache sets the value of Cache.
func (s *MemorySnapshot) SetCache(val OptFloat64) {
	s.Cache = val
}

// SetUsage sets the value of Usage.
func (s *MemorySnapshot) SetUsage(val OptMemoryData) {
	s.Usage = val
}

// SetSwapUsage sets the value of SwapUsage.
func (s *MemorySnapshot) SetSwapUsage(val OptMemoryData) {
	s.SwapUsage = val
}

// SetKernelUsage sets the value of KernelUsage.
func (s *MemorySnapshot) SetKernelUsage(val OptMemoryData) {
	s.KernelUsage = val
}

// SetKernelTCPUsage sets the value of KernelTCPUsage.
func (s *MemorySnapshot) SetKernelTCPUsage(val OptMemoryData) {
	s.KernelTCPUsage = val
}

// Information about the memory resources of a given server.
// Ref: #/components/schemas/MemorySpec
type MemorySpec struct {
	// A number that represents the memory resources in GB.
	SizeGB int `json:"size_gb"`
	// The type of the memory resources.
	Type string `json:"type"`
	// Extra inforamtion about the memory resources.
	Extra MemorySpecExtra `json:"extra"`
}

// GetSizeGB returns the value of SizeGB.
func (s *MemorySpec) GetSizeGB() int {
	return s.SizeGB
}

// GetType returns the value of Type.
func (s *MemorySpec) GetType() string {
	return s.Type
}

// GetExtra returns the value of Extra.
func (s *MemorySpec) GetExtra() MemorySpecExtra {
	return s.Extra
}

// SetSizeGB sets the value of SizeGB.
func (s *MemorySpec) SetSizeGB(val int) {
	s.SizeGB = val
}

// SetType sets the value of Type.
func (s *MemorySpec) SetType(val string) {
	s.Type = val
}

// SetExtra sets the value of Extra.
func (s *MemorySpec) SetExtra(val MemorySpecExtra) {
	s.Extra = val
}

// Extra inforamtion about the memory resources.
type MemorySpecExtra map[string]string

func (s *MemorySpecExtra) init() MemorySpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Information about a billing method, usable to pay invoices.
// Ref: #/components/schemas/Method
type Method struct {
	ID ID `json:"id"`
	// A name for the billing method.
	Name string `json:"name"`
	// A boolean where true represents this billing method is set to primary for a given hub.
	Primary    bool         `json:"primary"`
	Address    Address      `json:"address"`
	Creator    CreatorScope `json:"creator"`
	CreditCard CreditCard   `json:"credit_card"`
	State      MethodState  `json:"state"`
	// A collection of timestamps for each event in the credit card's lifetime.
	Events MethodEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Method) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Method) GetName() string {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *Method) GetPrimary() bool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *Method) GetAddress() Address {
	return s.Address
}

// GetCreator returns the value of Creator.
func (s *Method) GetCreator() CreatorScope {
	return s.Creator
}

// GetCreditCard returns the value of CreditCard.
func (s *Method) GetCreditCard() CreditCard {
	return s.CreditCard
}

// GetState returns the value of State.
func (s *Method) GetState() MethodState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Method) GetEvents() MethodEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Method) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Method) SetName(val string) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *Method) SetPrimary(val bool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *Method) SetAddress(val Address) {
	s.Address = val
}

// SetCreator sets the value of Creator.
func (s *Method) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetCreditCard sets the value of CreditCard.
func (s *Method) SetCreditCard(val CreditCard) {
	s.CreditCard = val
}

// SetState sets the value of State.
func (s *Method) SetState(val MethodState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Method) SetEvents(val MethodEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the credit card's lifetime.
type MethodEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *MethodEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *MethodEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *MethodEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *MethodEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *MethodEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *MethodEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Merged schema.
type MethodState struct {
	// The current state of the method.
	Current MethodStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptMethodStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *MethodState) GetCurrent() MethodStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *MethodState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *MethodState) GetError() OptMethodStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *MethodState) SetCurrent(val MethodStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *MethodState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *MethodState) SetError(val OptMethodStateError) {
	s.Error = val
}

// The current state of the method.
type MethodStateCurrent string

const (
	MethodStateCurrentLive     MethodStateCurrent = "live"
	MethodStateCurrentDeleting MethodStateCurrent = "deleting"
	MethodStateCurrentDeleted  MethodStateCurrent = "deleted"
)

// AllValues returns all MethodStateCurrent values.
func (MethodStateCurrent) AllValues() []MethodStateCurrent {
	return []MethodStateCurrent{
		MethodStateCurrentLive,
		MethodStateCurrentDeleting,
		MethodStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MethodStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case MethodStateCurrentLive:
		return []byte(s), nil
	case MethodStateCurrentDeleting:
		return []byte(s), nil
	case MethodStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MethodStateCurrent) UnmarshalText(data []byte) error {
	switch MethodStateCurrent(data) {
	case MethodStateCurrentLive:
		*s = MethodStateCurrentLive
		return nil
	case MethodStateCurrentDeleting:
		*s = MethodStateCurrentDeleting
		return nil
	case MethodStateCurrentDeleted:
		*s = MethodStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type MethodStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *MethodStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *MethodStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *MethodStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *MethodStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/Migrate
type Migrate struct {
	Contents MigrateContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *Migrate) GetContents() MigrateContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *Migrate) SetContents(val MigrateContents) {
	s.Contents = val
}

// The name of the action to perform.
type MigrateAction string

const (
	MigrateActionMigrate MigrateAction = "migrate"
)

// AllValues returns all MigrateAction values.
func (MigrateAction) AllValues() []MigrateAction {
	return []MigrateAction{
		MigrateActionMigrate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MigrateAction) MarshalText() ([]byte, error) {
	switch s {
	case MigrateActionMigrate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MigrateAction) UnmarshalText(data []byte) error {
	switch MigrateAction(data) {
	case MigrateActionMigrate:
		*s = MigrateActionMigrate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type MigrateContents struct {
	// The ID of the server being migrated to.
	DestinationServerID string `json:"destination_server_id"`
	// Information about additonal configuration settings used when migrating a stateful instance.
	Stateful OptMigrateContentsStateful `json:"stateful"`
}

// GetDestinationServerID returns the value of DestinationServerID.
func (s *MigrateContents) GetDestinationServerID() string {
	return s.DestinationServerID
}

// GetStateful returns the value of Stateful.
func (s *MigrateContents) GetStateful() OptMigrateContentsStateful {
	return s.Stateful
}

// SetDestinationServerID sets the value of DestinationServerID.
func (s *MigrateContents) SetDestinationServerID(val string) {
	s.DestinationServerID = val
}

// SetStateful sets the value of Stateful.
func (s *MigrateContents) SetStateful(val OptMigrateContentsStateful) {
	s.Stateful = val
}

// Information about additonal configuration settings used when migrating a stateful instance.
type MigrateContentsStateful struct {
	// A boolean where true represents the desire to copy the contents of the volume for a given stateful
	// instance with the migration.
	CopyVolumes bool `json:"copy_volumes"`
}

// GetCopyVolumes returns the value of CopyVolumes.
func (s *MigrateContentsStateful) GetCopyVolumes() bool {
	return s.CopyVolumes
}

// SetCopyVolumes sets the value of CopyVolumes.
func (s *MigrateContentsStateful) SetCopyVolumes(val bool) {
	s.CopyVolumes = val
}

// SDN Network resource.
// Ref: #/components/schemas/Network
type Network struct {
	ID ID `json:"id"`
	// The name of the network.
	Name string `json:"name"`
	// A network identifier used to construct http calls that specifically use this network over another.
	Identifier string `json:"identifier"`
	// The infrastructure cluster the environments belonging to this network belong to.
	Cluster        string                      `json:"cluster"`
	Creator        CreatorScope                `json:"creator"`
	HubID          HubID                       `json:"hub_id"`
	State          NetworkState                `json:"state"`
	PrivateNetwork OptNilNetworkPrivateNetwork `json:"private_network"`
	// An array of environments and timestamps.
	Environments OptNilNetworkEnvironmentsItemArray `json:"environments"`
	// A collection of timestamps for each event in the network's lifetime.
	Events NetworkEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Network) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Network) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *Network) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *Network) GetCluster() string {
	return s.Cluster
}

// GetCreator returns the value of Creator.
func (s *Network) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Network) GetHubID() HubID {
	return s.HubID
}

// GetState returns the value of State.
func (s *Network) GetState() NetworkState {
	return s.State
}

// GetPrivateNetwork returns the value of PrivateNetwork.
func (s *Network) GetPrivateNetwork() OptNilNetworkPrivateNetwork {
	return s.PrivateNetwork
}

// GetEnvironments returns the value of Environments.
func (s *Network) GetEnvironments() OptNilNetworkEnvironmentsItemArray {
	return s.Environments
}

// GetEvents returns the value of Events.
func (s *Network) GetEvents() NetworkEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Network) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Network) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *Network) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *Network) SetCluster(val string) {
	s.Cluster = val
}

// SetCreator sets the value of Creator.
func (s *Network) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Network) SetHubID(val HubID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *Network) SetState(val NetworkState) {
	s.State = val
}

// SetPrivateNetwork sets the value of PrivateNetwork.
func (s *Network) SetPrivateNetwork(val OptNilNetworkPrivateNetwork) {
	s.PrivateNetwork = val
}

// SetEnvironments sets the value of Environments.
func (s *Network) SetEnvironments(val OptNilNetworkEnvironmentsItemArray) {
	s.Environments = val
}

// SetEvents sets the value of Events.
func (s *Network) SetEvents(val NetworkEvents) {
	s.Events = val
}

type NetworkEnvironmentsItem struct {
	ID    ID       `json:"id"`
	Added DateTime `json:"added"`
}

// GetID returns the value of ID.
func (s *NetworkEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetAdded returns the value of Added.
func (s *NetworkEnvironmentsItem) GetAdded() DateTime {
	return s.Added
}

// SetID sets the value of ID.
func (s *NetworkEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetAdded sets the value of Added.
func (s *NetworkEnvironmentsItem) SetAdded(val DateTime) {
	s.Added = val
}

// A collection of timestamps for each event in the network's lifetime.
type NetworkEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *NetworkEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *NetworkEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *NetworkEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *NetworkEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *NetworkEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *NetworkEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// All includable resource linkable to the given network.
// Ref: #/components/schemas/NetworkIncludes
type NetworkIncludes struct {
	Creators     OptCreatorInclude      `json:"creators"`
	Environments OptEnvironmentIncludes `json:"environments"`
}

// GetCreators returns the value of Creators.
func (s *NetworkIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetEnvironments returns the value of Environments.
func (s *NetworkIncludes) GetEnvironments() OptEnvironmentIncludes {
	return s.Environments
}

// SetCreators sets the value of Creators.
func (s *NetworkIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetEnvironments sets the value of Environments.
func (s *NetworkIncludes) SetEnvironments(val OptEnvironmentIncludes) {
	s.Environments = val
}

// Private network information for a Cycle SDN.
type NetworkPrivateNetwork struct {
	// A tag used to ensure proper routing.
	VxlanTag int `json:"vxlan_tag"`
	// The subnet of the private network.
	Subnet string `json:"subnet"`
	// A number used to ensure a MAC address exists for each network.
	MACAddrSuffix int `json:"mac_addr_suffix"`
	// IPv6 infromation for the network.
	Ipv6 NetworkPrivateNetworkIpv6 `json:"ipv6"`
}

// GetVxlanTag returns the value of VxlanTag.
func (s *NetworkPrivateNetwork) GetVxlanTag() int {
	return s.VxlanTag
}

// GetSubnet returns the value of Subnet.
func (s *NetworkPrivateNetwork) GetSubnet() string {
	return s.Subnet
}

// GetMACAddrSuffix returns the value of MACAddrSuffix.
func (s *NetworkPrivateNetwork) GetMACAddrSuffix() int {
	return s.MACAddrSuffix
}

// GetIpv6 returns the value of Ipv6.
func (s *NetworkPrivateNetwork) GetIpv6() NetworkPrivateNetworkIpv6 {
	return s.Ipv6
}

// SetVxlanTag sets the value of VxlanTag.
func (s *NetworkPrivateNetwork) SetVxlanTag(val int) {
	s.VxlanTag = val
}

// SetSubnet sets the value of Subnet.
func (s *NetworkPrivateNetwork) SetSubnet(val string) {
	s.Subnet = val
}

// SetMACAddrSuffix sets the value of MACAddrSuffix.
func (s *NetworkPrivateNetwork) SetMACAddrSuffix(val int) {
	s.MACAddrSuffix = val
}

// SetIpv6 sets the value of Ipv6.
func (s *NetworkPrivateNetwork) SetIpv6(val NetworkPrivateNetworkIpv6) {
	s.Ipv6 = val
}

// IPv6 infromation for the network.
type NetworkPrivateNetworkIpv6 struct {
	// The networks IPv6 base.
	IP string `json:"ip"`
	// The private network CIDR.
	Cidr string `json:"cidr"`
}

// GetIP returns the value of IP.
func (s *NetworkPrivateNetworkIpv6) GetIP() string {
	return s.IP
}

// GetCidr returns the value of Cidr.
func (s *NetworkPrivateNetworkIpv6) GetCidr() string {
	return s.Cidr
}

// SetIP sets the value of IP.
func (s *NetworkPrivateNetworkIpv6) SetIP(val string) {
	s.IP = val
}

// SetCidr sets the value of Cidr.
func (s *NetworkPrivateNetworkIpv6) SetCidr(val string) {
	s.Cidr = val
}

// A snapshot of network usage statistics.
// Ref: #/components/schemas/NetworkSnapshot
type NetworkSnapshot struct {
	// An array of network interfaces attached to this instance.
	Interfaces []NetworkSnapshotInterfacesItem `json:"interfaces"`
}

// GetInterfaces returns the value of Interfaces.
func (s *NetworkSnapshot) GetInterfaces() []NetworkSnapshotInterfacesItem {
	return s.Interfaces
}

// SetInterfaces sets the value of Interfaces.
func (s *NetworkSnapshot) SetInterfaces(val []NetworkSnapshotInterfacesItem) {
	s.Interfaces = val
}

type NetworkSnapshotInterfacesItem struct {
	Name    string `json:"name"`
	RxBytes int    `json:"rx_bytes"`
	TxBytes int    `json:"tx_bytes"`
}

// GetName returns the value of Name.
func (s *NetworkSnapshotInterfacesItem) GetName() string {
	return s.Name
}

// GetRxBytes returns the value of RxBytes.
func (s *NetworkSnapshotInterfacesItem) GetRxBytes() int {
	return s.RxBytes
}

// GetTxBytes returns the value of TxBytes.
func (s *NetworkSnapshotInterfacesItem) GetTxBytes() int {
	return s.TxBytes
}

// SetName sets the value of Name.
func (s *NetworkSnapshotInterfacesItem) SetName(val string) {
	s.Name = val
}

// SetRxBytes sets the value of RxBytes.
func (s *NetworkSnapshotInterfacesItem) SetRxBytes(val int) {
	s.RxBytes = val
}

// SetTxBytes sets the value of TxBytes.
func (s *NetworkSnapshotInterfacesItem) SetTxBytes(val int) {
	s.TxBytes = val
}

// Information about the network resources for a given server.
// Ref: #/components/schemas/NetworkSpec
type NetworkSpec struct {
	// The number of network resources for a given server.
	Count int `json:"count"`
	// The scope of the interfaces.
	Scope NetworkSpecScope `json:"scope"`
	// The network throughput in MB(per second).
	Throughput int `json:"throughput"`
	// The type of the NIC.
	Type string `json:"type"`
}

// GetCount returns the value of Count.
func (s *NetworkSpec) GetCount() int {
	return s.Count
}

// GetScope returns the value of Scope.
func (s *NetworkSpec) GetScope() NetworkSpecScope {
	return s.Scope
}

// GetThroughput returns the value of Throughput.
func (s *NetworkSpec) GetThroughput() int {
	return s.Throughput
}

// GetType returns the value of Type.
func (s *NetworkSpec) GetType() string {
	return s.Type
}

// SetCount sets the value of Count.
func (s *NetworkSpec) SetCount(val int) {
	s.Count = val
}

// SetScope sets the value of Scope.
func (s *NetworkSpec) SetScope(val NetworkSpecScope) {
	s.Scope = val
}

// SetThroughput sets the value of Throughput.
func (s *NetworkSpec) SetThroughput(val int) {
	s.Throughput = val
}

// SetType sets the value of Type.
func (s *NetworkSpec) SetType(val string) {
	s.Type = val
}

// The scope of the interfaces.
type NetworkSpecScope string

const (
	NetworkSpecScopePublic  NetworkSpecScope = "public"
	NetworkSpecScopePrivate NetworkSpecScope = "private"
	NetworkSpecScopeShared  NetworkSpecScope = "shared"
)

// AllValues returns all NetworkSpecScope values.
func (NetworkSpecScope) AllValues() []NetworkSpecScope {
	return []NetworkSpecScope{
		NetworkSpecScopePublic,
		NetworkSpecScopePrivate,
		NetworkSpecScopeShared,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NetworkSpecScope) MarshalText() ([]byte, error) {
	switch s {
	case NetworkSpecScopePublic:
		return []byte(s), nil
	case NetworkSpecScopePrivate:
		return []byte(s), nil
	case NetworkSpecScopeShared:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NetworkSpecScope) UnmarshalText(data []byte) error {
	switch NetworkSpecScope(data) {
	case NetworkSpecScopePublic:
		*s = NetworkSpecScopePublic
		return nil
	case NetworkSpecScopePrivate:
		*s = NetworkSpecScopePrivate
		return nil
	case NetworkSpecScopeShared:
		*s = NetworkSpecScopeShared
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/NetworkState
type NetworkState struct {
	// The current state of the network.
	Current NetworkStateCurrent `json:"current"`
	Changed DateTime            `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptNetworkStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *NetworkState) GetCurrent() NetworkStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *NetworkState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *NetworkState) GetError() OptNetworkStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *NetworkState) SetCurrent(val NetworkStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *NetworkState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *NetworkState) SetError(val OptNetworkStateError) {
	s.Error = val
}

// The current state of the network.
type NetworkStateCurrent string

const (
	NetworkStateCurrentLive     NetworkStateCurrent = "live"
	NetworkStateCurrentDeleting NetworkStateCurrent = "deleting"
	NetworkStateCurrentDeleted  NetworkStateCurrent = "deleted"
)

// AllValues returns all NetworkStateCurrent values.
func (NetworkStateCurrent) AllValues() []NetworkStateCurrent {
	return []NetworkStateCurrent{
		NetworkStateCurrentLive,
		NetworkStateCurrentDeleting,
		NetworkStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NetworkStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case NetworkStateCurrentLive:
		return []byte(s), nil
	case NetworkStateCurrentDeleting:
		return []byte(s), nil
	case NetworkStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NetworkStateCurrent) UnmarshalText(data []byte) error {
	switch NetworkStateCurrent(data) {
	case NetworkStateCurrentLive:
		*s = NetworkStateCurrentLive
		return nil
	case NetworkStateCurrentDeleting:
		*s = NetworkStateCurrentDeleting
		return nil
	case NetworkStateCurrentDeleted:
		*s = NetworkStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type NetworkStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *NetworkStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *NetworkStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *NetworkStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *NetworkStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// NewNilBool returns new NilBool with value set to v.
func NewNilBool(v bool) NilBool {
	return NilBool{
		Value: v,
	}
}

// NilBool is nullable bool.
type NilBool struct {
	Value bool
	Null  bool
}

// SetTo sets value to v.
func (o *NilBool) SetTo(v bool) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilBool) SetToNull() {
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerEnvironmentSummaryLegacy returns new NilContainerEnvironmentSummaryLegacy with value set to v.
func NewNilContainerEnvironmentSummaryLegacy(v ContainerEnvironmentSummaryLegacy) NilContainerEnvironmentSummaryLegacy {
	return NilContainerEnvironmentSummaryLegacy{
		Value: v,
	}
}

// NilContainerEnvironmentSummaryLegacy is nullable ContainerEnvironmentSummaryLegacy.
type NilContainerEnvironmentSummaryLegacy struct {
	Value ContainerEnvironmentSummaryLegacy
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerEnvironmentSummaryLegacy) SetTo(v ContainerEnvironmentSummaryLegacy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerEnvironmentSummaryLegacy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerEnvironmentSummaryLegacy) SetToNull() {
	o.Null = true
	var v ContainerEnvironmentSummaryLegacy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerEnvironmentSummaryLegacy) Get() (v ContainerEnvironmentSummaryLegacy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerEnvironmentSummaryLegacy) Or(d ContainerEnvironmentSummaryLegacy) ContainerEnvironmentSummaryLegacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerImageSummaryService returns new NilContainerImageSummaryService with value set to v.
func NewNilContainerImageSummaryService(v ContainerImageSummaryService) NilContainerImageSummaryService {
	return NilContainerImageSummaryService{
		Value: v,
	}
}

// NilContainerImageSummaryService is nullable ContainerImageSummaryService.
type NilContainerImageSummaryService struct {
	Value ContainerImageSummaryService
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerImageSummaryService) SetTo(v ContainerImageSummaryService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerImageSummaryService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerImageSummaryService) SetToNull() {
	o.Null = true
	var v ContainerImageSummaryService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerImageSummaryService) Get() (v ContainerImageSummaryService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerImageSummaryService) Or(d ContainerImageSummaryService) ContainerImageSummaryService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerIntegrationsBackupsRestore returns new NilContainerIntegrationsBackupsRestore with value set to v.
func NewNilContainerIntegrationsBackupsRestore(v ContainerIntegrationsBackupsRestore) NilContainerIntegrationsBackupsRestore {
	return NilContainerIntegrationsBackupsRestore{
		Value: v,
	}
}

// NilContainerIntegrationsBackupsRestore is nullable ContainerIntegrationsBackupsRestore.
type NilContainerIntegrationsBackupsRestore struct {
	Value ContainerIntegrationsBackupsRestore
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerIntegrationsBackupsRestore) SetTo(v ContainerIntegrationsBackupsRestore) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerIntegrationsBackupsRestore) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerIntegrationsBackupsRestore) SetToNull() {
	o.Null = true
	var v ContainerIntegrationsBackupsRestore
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerIntegrationsBackupsRestore) Get() (v ContainerIntegrationsBackupsRestore, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerIntegrationsBackupsRestore) Or(d ContainerIntegrationsBackupsRestore) ContainerIntegrationsBackupsRestore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContainerVolumeRemoteAccessPassword returns new NilContainerVolumeRemoteAccessPassword with value set to v.
func NewNilContainerVolumeRemoteAccessPassword(v ContainerVolumeRemoteAccessPassword) NilContainerVolumeRemoteAccessPassword {
	return NilContainerVolumeRemoteAccessPassword{
		Value: v,
	}
}

// NilContainerVolumeRemoteAccessPassword is nullable ContainerVolumeRemoteAccessPassword.
type NilContainerVolumeRemoteAccessPassword struct {
	Value ContainerVolumeRemoteAccessPassword
	Null  bool
}

// SetTo sets value to v.
func (o *NilContainerVolumeRemoteAccessPassword) SetTo(v ContainerVolumeRemoteAccessPassword) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContainerVolumeRemoteAccessPassword) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContainerVolumeRemoteAccessPassword) SetToNull() {
	o.Null = true
	var v ContainerVolumeRemoteAccessPassword
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContainerVolumeRemoteAccessPassword) Get() (v ContainerVolumeRemoteAccessPassword, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContainerVolumeRemoteAccessPassword) Or(d ContainerVolumeRemoteAccessPassword) ContainerVolumeRemoteAccessPassword {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreateLoadBalancerServiceJobReqContentsConfig returns new NilCreateLoadBalancerServiceJobReqContentsConfig with value set to v.
func NewNilCreateLoadBalancerServiceJobReqContentsConfig(v CreateLoadBalancerServiceJobReqContentsConfig) NilCreateLoadBalancerServiceJobReqContentsConfig {
	return NilCreateLoadBalancerServiceJobReqContentsConfig{
		Value: v,
	}
}

// NilCreateLoadBalancerServiceJobReqContentsConfig is nullable CreateLoadBalancerServiceJobReqContentsConfig.
type NilCreateLoadBalancerServiceJobReqContentsConfig struct {
	Value CreateLoadBalancerServiceJobReqContentsConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreateLoadBalancerServiceJobReqContentsConfig) SetTo(v CreateLoadBalancerServiceJobReqContentsConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreateLoadBalancerServiceJobReqContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreateLoadBalancerServiceJobReqContentsConfig) SetToNull() {
	o.Null = true
	var v CreateLoadBalancerServiceJobReqContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreateLoadBalancerServiceJobReqContentsConfig) Get() (v CreateLoadBalancerServiceJobReqContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreateLoadBalancerServiceJobReqContentsConfig) Or(d CreateLoadBalancerServiceJobReqContentsConfig) CreateLoadBalancerServiceJobReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreditExpires returns new NilCreditExpires with value set to v.
func NewNilCreditExpires(v CreditExpires) NilCreditExpires {
	return NilCreditExpires{
		Value: v,
	}
}

// NilCreditExpires is nullable CreditExpires.
type NilCreditExpires struct {
	Value CreditExpires
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreditExpires) SetTo(v CreditExpires) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreditExpires) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreditExpires) SetToNull() {
	o.Null = true
	var v CreditExpires
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreditExpires) Get() (v CreditExpires, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreditExpires) Or(d CreditExpires) CreditExpires {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilDefaultLbTypeDetails returns new NilDefaultLbTypeDetails with value set to v.
func NewNilDefaultLbTypeDetails(v DefaultLbTypeDetails) NilDefaultLbTypeDetails {
	return NilDefaultLbTypeDetails{
		Value: v,
	}
}

// NilDefaultLbTypeDetails is nullable DefaultLbTypeDetails.
type NilDefaultLbTypeDetails struct {
	Value DefaultLbTypeDetails
	Null  bool
}

// SetTo sets value to v.
func (o *NilDefaultLbTypeDetails) SetTo(v DefaultLbTypeDetails) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDefaultLbTypeDetails) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilDefaultLbTypeDetails) SetToNull() {
	o.Null = true
	var v DefaultLbTypeDetails
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDefaultLbTypeDetails) Get() (v DefaultLbTypeDetails, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDefaultLbTypeDetails) Or(d DefaultLbTypeDetails) DefaultLbTypeDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilDeployStackBuildActionContentsUpdateScopedVariables returns new NilDeployStackBuildActionContentsUpdateScopedVariables with value set to v.
func NewNilDeployStackBuildActionContentsUpdateScopedVariables(v DeployStackBuildActionContentsUpdateScopedVariables) NilDeployStackBuildActionContentsUpdateScopedVariables {
	return NilDeployStackBuildActionContentsUpdateScopedVariables{
		Value: v,
	}
}

// NilDeployStackBuildActionContentsUpdateScopedVariables is nullable DeployStackBuildActionContentsUpdateScopedVariables.
type NilDeployStackBuildActionContentsUpdateScopedVariables struct {
	Value DeployStackBuildActionContentsUpdateScopedVariables
	Null  bool
}

// SetTo sets value to v.
func (o *NilDeployStackBuildActionContentsUpdateScopedVariables) SetTo(v DeployStackBuildActionContentsUpdateScopedVariables) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilDeployStackBuildActionContentsUpdateScopedVariables) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilDeployStackBuildActionContentsUpdateScopedVariables) SetToNull() {
	o.Null = true
	var v DeployStackBuildActionContentsUpdateScopedVariables
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilDeployStackBuildActionContentsUpdateScopedVariables) Get() (v DeployStackBuildActionContentsUpdateScopedVariables, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilDeployStackBuildActionContentsUpdateScopedVariables) Or(d DeployStackBuildActionContentsUpdateScopedVariables) DeployStackBuildActionContentsUpdateScopedVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentNetworkSummaryIpv6 returns new NilEnvironmentNetworkSummaryIpv6 with value set to v.
func NewNilEnvironmentNetworkSummaryIpv6(v EnvironmentNetworkSummaryIpv6) NilEnvironmentNetworkSummaryIpv6 {
	return NilEnvironmentNetworkSummaryIpv6{
		Value: v,
	}
}

// NilEnvironmentNetworkSummaryIpv6 is nullable EnvironmentNetworkSummaryIpv6.
type NilEnvironmentNetworkSummaryIpv6 struct {
	Value EnvironmentNetworkSummaryIpv6
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentNetworkSummaryIpv6) SetTo(v EnvironmentNetworkSummaryIpv6) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentNetworkSummaryIpv6) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentNetworkSummaryIpv6) SetToNull() {
	o.Null = true
	var v EnvironmentNetworkSummaryIpv6
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentNetworkSummaryIpv6) Get() (v EnvironmentNetworkSummaryIpv6, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentNetworkSummaryIpv6) Or(d EnvironmentNetworkSummaryIpv6) EnvironmentNetworkSummaryIpv6 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentNetworkSummaryLegacy returns new NilEnvironmentNetworkSummaryLegacy with value set to v.
func NewNilEnvironmentNetworkSummaryLegacy(v EnvironmentNetworkSummaryLegacy) NilEnvironmentNetworkSummaryLegacy {
	return NilEnvironmentNetworkSummaryLegacy{
		Value: v,
	}
}

// NilEnvironmentNetworkSummaryLegacy is nullable EnvironmentNetworkSummaryLegacy.
type NilEnvironmentNetworkSummaryLegacy struct {
	Value EnvironmentNetworkSummaryLegacy
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentNetworkSummaryLegacy) SetTo(v EnvironmentNetworkSummaryLegacy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentNetworkSummaryLegacy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentNetworkSummaryLegacy) SetToNull() {
	o.Null = true
	var v EnvironmentNetworkSummaryLegacy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentNetworkSummaryLegacy) Get() (v EnvironmentNetworkSummaryLegacy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentNetworkSummaryLegacy) Or(d EnvironmentNetworkSummaryLegacy) EnvironmentNetworkSummaryLegacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentNetworkSummaryLegacyIpv4 returns new NilEnvironmentNetworkSummaryLegacyIpv4 with value set to v.
func NewNilEnvironmentNetworkSummaryLegacyIpv4(v EnvironmentNetworkSummaryLegacyIpv4) NilEnvironmentNetworkSummaryLegacyIpv4 {
	return NilEnvironmentNetworkSummaryLegacyIpv4{
		Value: v,
	}
}

// NilEnvironmentNetworkSummaryLegacyIpv4 is nullable EnvironmentNetworkSummaryLegacyIpv4.
type NilEnvironmentNetworkSummaryLegacyIpv4 struct {
	Value EnvironmentNetworkSummaryLegacyIpv4
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentNetworkSummaryLegacyIpv4) SetTo(v EnvironmentNetworkSummaryLegacyIpv4) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentNetworkSummaryLegacyIpv4) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentNetworkSummaryLegacyIpv4) SetToNull() {
	o.Null = true
	var v EnvironmentNetworkSummaryLegacyIpv4
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentNetworkSummaryLegacyIpv4) Get() (v EnvironmentNetworkSummaryLegacyIpv4, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentNetworkSummaryLegacyIpv4) Or(d EnvironmentNetworkSummaryLegacyIpv4) EnvironmentNetworkSummaryLegacyIpv4 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentPrivateNetworkLegacy returns new NilEnvironmentPrivateNetworkLegacy with value set to v.
func NewNilEnvironmentPrivateNetworkLegacy(v EnvironmentPrivateNetworkLegacy) NilEnvironmentPrivateNetworkLegacy {
	return NilEnvironmentPrivateNetworkLegacy{
		Value: v,
	}
}

// NilEnvironmentPrivateNetworkLegacy is nullable EnvironmentPrivateNetworkLegacy.
type NilEnvironmentPrivateNetworkLegacy struct {
	Value EnvironmentPrivateNetworkLegacy
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentPrivateNetworkLegacy) SetTo(v EnvironmentPrivateNetworkLegacy) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentPrivateNetworkLegacy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentPrivateNetworkLegacy) SetToNull() {
	o.Null = true
	var v EnvironmentPrivateNetworkLegacy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentPrivateNetworkLegacy) Get() (v EnvironmentPrivateNetworkLegacy, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentPrivateNetworkLegacy) Or(d EnvironmentPrivateNetworkLegacy) EnvironmentPrivateNetworkLegacy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentServicesDiscoveryConfig returns new NilEnvironmentServicesDiscoveryConfig with value set to v.
func NewNilEnvironmentServicesDiscoveryConfig(v EnvironmentServicesDiscoveryConfig) NilEnvironmentServicesDiscoveryConfig {
	return NilEnvironmentServicesDiscoveryConfig{
		Value: v,
	}
}

// NilEnvironmentServicesDiscoveryConfig is nullable EnvironmentServicesDiscoveryConfig.
type NilEnvironmentServicesDiscoveryConfig struct {
	Value EnvironmentServicesDiscoveryConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentServicesDiscoveryConfig) SetTo(v EnvironmentServicesDiscoveryConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentServicesDiscoveryConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentServicesDiscoveryConfig) SetToNull() {
	o.Null = true
	var v EnvironmentServicesDiscoveryConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentServicesDiscoveryConfig) Get() (v EnvironmentServicesDiscoveryConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentServicesDiscoveryConfig) Or(d EnvironmentServicesDiscoveryConfig) EnvironmentServicesDiscoveryConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentServicesLoadbalancer returns new NilEnvironmentServicesLoadbalancer with value set to v.
func NewNilEnvironmentServicesLoadbalancer(v EnvironmentServicesLoadbalancer) NilEnvironmentServicesLoadbalancer {
	return NilEnvironmentServicesLoadbalancer{
		Value: v,
	}
}

// NilEnvironmentServicesLoadbalancer is nullable EnvironmentServicesLoadbalancer.
type NilEnvironmentServicesLoadbalancer struct {
	Value EnvironmentServicesLoadbalancer
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentServicesLoadbalancer) SetTo(v EnvironmentServicesLoadbalancer) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentServicesLoadbalancer) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentServicesLoadbalancer) SetToNull() {
	o.Null = true
	var v EnvironmentServicesLoadbalancer
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentServicesLoadbalancer) Get() (v EnvironmentServicesLoadbalancer, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentServicesLoadbalancer) Or(d EnvironmentServicesLoadbalancer) EnvironmentServicesLoadbalancer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilEnvironmentServicesVpnConfig returns new NilEnvironmentServicesVpnConfig with value set to v.
func NewNilEnvironmentServicesVpnConfig(v EnvironmentServicesVpnConfig) NilEnvironmentServicesVpnConfig {
	return NilEnvironmentServicesVpnConfig{
		Value: v,
	}
}

// NilEnvironmentServicesVpnConfig is nullable EnvironmentServicesVpnConfig.
type NilEnvironmentServicesVpnConfig struct {
	Value EnvironmentServicesVpnConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilEnvironmentServicesVpnConfig) SetTo(v EnvironmentServicesVpnConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilEnvironmentServicesVpnConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilEnvironmentServicesVpnConfig) SetToNull() {
	o.Null = true
	var v EnvironmentServicesVpnConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilEnvironmentServicesVpnConfig) Get() (v EnvironmentServicesVpnConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilEnvironmentServicesVpnConfig) Or(d EnvironmentServicesVpnConfig) EnvironmentServicesVpnConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilGetLoadBalancerServiceOKDataService returns new NilGetLoadBalancerServiceOKDataService with value set to v.
func NewNilGetLoadBalancerServiceOKDataService(v GetLoadBalancerServiceOKDataService) NilGetLoadBalancerServiceOKDataService {
	return NilGetLoadBalancerServiceOKDataService{
		Value: v,
	}
}

// NilGetLoadBalancerServiceOKDataService is nullable GetLoadBalancerServiceOKDataService.
type NilGetLoadBalancerServiceOKDataService struct {
	Value GetLoadBalancerServiceOKDataService
	Null  bool
}

// SetTo sets value to v.
func (o *NilGetLoadBalancerServiceOKDataService) SetTo(v GetLoadBalancerServiceOKDataService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilGetLoadBalancerServiceOKDataService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilGetLoadBalancerServiceOKDataService) SetToNull() {
	o.Null = true
	var v GetLoadBalancerServiceOKDataService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilGetLoadBalancerServiceOKDataService) Get() (v GetLoadBalancerServiceOKDataService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilGetLoadBalancerServiceOKDataService) Or(d GetLoadBalancerServiceOKDataService) GetLoadBalancerServiceOKDataService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHaProxyConfigSetBackendTimeouts returns new NilHaProxyConfigSetBackendTimeouts with value set to v.
func NewNilHaProxyConfigSetBackendTimeouts(v HaProxyConfigSetBackendTimeouts) NilHaProxyConfigSetBackendTimeouts {
	return NilHaProxyConfigSetBackendTimeouts{
		Value: v,
	}
}

// NilHaProxyConfigSetBackendTimeouts is nullable HaProxyConfigSetBackendTimeouts.
type NilHaProxyConfigSetBackendTimeouts struct {
	Value HaProxyConfigSetBackendTimeouts
	Null  bool
}

// SetTo sets value to v.
func (o *NilHaProxyConfigSetBackendTimeouts) SetTo(v HaProxyConfigSetBackendTimeouts) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHaProxyConfigSetBackendTimeouts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHaProxyConfigSetBackendTimeouts) SetToNull() {
	o.Null = true
	var v HaProxyConfigSetBackendTimeouts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHaProxyConfigSetBackendTimeouts) Get() (v HaProxyConfigSetBackendTimeouts, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHaProxyConfigSetBackendTimeouts) Or(d HaProxyConfigSetBackendTimeouts) HaProxyConfigSetBackendTimeouts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHaProxyConfigSetFrontendTimeouts returns new NilHaProxyConfigSetFrontendTimeouts with value set to v.
func NewNilHaProxyConfigSetFrontendTimeouts(v HaProxyConfigSetFrontendTimeouts) NilHaProxyConfigSetFrontendTimeouts {
	return NilHaProxyConfigSetFrontendTimeouts{
		Value: v,
	}
}

// NilHaProxyConfigSetFrontendTimeouts is nullable HaProxyConfigSetFrontendTimeouts.
type NilHaProxyConfigSetFrontendTimeouts struct {
	Value HaProxyConfigSetFrontendTimeouts
	Null  bool
}

// SetTo sets value to v.
func (o *NilHaProxyConfigSetFrontendTimeouts) SetTo(v HaProxyConfigSetFrontendTimeouts) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHaProxyConfigSetFrontendTimeouts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHaProxyConfigSetFrontendTimeouts) SetToNull() {
	o.Null = true
	var v HaProxyConfigSetFrontendTimeouts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHaProxyConfigSetFrontendTimeouts) Get() (v HaProxyConfigSetFrontendTimeouts, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHaProxyConfigSetFrontendTimeouts) Or(d HaProxyConfigSetFrontendTimeouts) HaProxyConfigSetFrontendTimeouts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHaProxyLbTypeDetails returns new NilHaProxyLbTypeDetails with value set to v.
func NewNilHaProxyLbTypeDetails(v HaProxyLbTypeDetails) NilHaProxyLbTypeDetails {
	return NilHaProxyLbTypeDetails{
		Value: v,
	}
}

// NilHaProxyLbTypeDetails is nullable HaProxyLbTypeDetails.
type NilHaProxyLbTypeDetails struct {
	Value HaProxyLbTypeDetails
	Null  bool
}

// SetTo sets value to v.
func (o *NilHaProxyLbTypeDetails) SetTo(v HaProxyLbTypeDetails) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHaProxyLbTypeDetails) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHaProxyLbTypeDetails) SetToNull() {
	o.Null = true
	var v HaProxyLbTypeDetails
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHaProxyLbTypeDetails) Get() (v HaProxyLbTypeDetails, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHaProxyLbTypeDetails) Or(d HaProxyLbTypeDetails) HaProxyLbTypeDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilHubBilling returns new NilHubBilling with value set to v.
func NewNilHubBilling(v HubBilling) NilHubBilling {
	return NilHubBilling{
		Value: v,
	}
}

// NilHubBilling is nullable HubBilling.
type NilHubBilling struct {
	Value HubBilling
	Null  bool
}

// SetTo sets value to v.
func (o *NilHubBilling) SetTo(v HubBilling) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilHubBilling) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilHubBilling) SetToNull() {
	o.Null = true
	var v HubBilling
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilHubBilling) Get() (v HubBilling, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilHubBilling) Or(d HubBilling) HubBilling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilImageSummaryExtension returns new NilImageSummaryExtension with value set to v.
func NewNilImageSummaryExtension(v ImageSummaryExtension) NilImageSummaryExtension {
	return NilImageSummaryExtension{
		Value: v,
	}
}

// NilImageSummaryExtension is nullable ImageSummaryExtension.
type NilImageSummaryExtension struct {
	Value ImageSummaryExtension
	Null  bool
}

// SetTo sets value to v.
func (o *NilImageSummaryExtension) SetTo(v ImageSummaryExtension) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilImageSummaryExtension) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilImageSummaryExtension) SetToNull() {
	o.Null = true
	var v ImageSummaryExtension
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilImageSummaryExtension) Get() (v ImageSummaryExtension, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilImageSummaryExtension) Or(d ImageSummaryExtension) ImageSummaryExtension {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilImageSummaryService returns new NilImageSummaryService with value set to v.
func NewNilImageSummaryService(v ImageSummaryService) NilImageSummaryService {
	return NilImageSummaryService{
		Value: v,
	}
}

// NilImageSummaryService is nullable ImageSummaryService.
type NilImageSummaryService struct {
	Value ImageSummaryService
	Null  bool
}

// SetTo sets value to v.
func (o *NilImageSummaryService) SetTo(v ImageSummaryService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilImageSummaryService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilImageSummaryService) SetToNull() {
	o.Null = true
	var v ImageSummaryService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilImageSummaryService) Get() (v ImageSummaryService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilImageSummaryService) Or(d ImageSummaryService) ImageSummaryService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilJobStateError returns new NilJobStateError with value set to v.
func NewNilJobStateError(v JobStateError) NilJobStateError {
	return NilJobStateError{
		Value: v,
	}
}

// NilJobStateError is nullable JobStateError.
type NilJobStateError struct {
	Value JobStateError
	Null  bool
}

// SetTo sets value to v.
func (o *NilJobStateError) SetTo(v JobStateError) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilJobStateError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilJobStateError) SetToNull() {
	o.Null = true
	var v JobStateError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilJobStateError) Get() (v JobStateError, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilJobStateError) Or(d JobStateError) JobStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilJobTaskError returns new NilJobTaskError with value set to v.
func NewNilJobTaskError(v JobTaskError) NilJobTaskError {
	return NilJobTaskError{
		Value: v,
	}
}

// NilJobTaskError is nullable JobTaskError.
type NilJobTaskError struct {
	Value JobTaskError
	Null  bool
}

// SetTo sets value to v.
func (o *NilJobTaskError) SetTo(v JobTaskError) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilJobTaskError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilJobTaskError) SetToNull() {
	o.Null = true
	var v JobTaskError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilJobTaskError) Get() (v JobTaskError, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilJobTaskError) Or(d JobTaskError) JobTaskError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilJobTaskOutput returns new NilJobTaskOutput with value set to v.
func NewNilJobTaskOutput(v JobTaskOutput) NilJobTaskOutput {
	return NilJobTaskOutput{
		Value: v,
	}
}

// NilJobTaskOutput is nullable JobTaskOutput.
type NilJobTaskOutput struct {
	Value JobTaskOutput
	Null  bool
}

// SetTo sets value to v.
func (o *NilJobTaskOutput) SetTo(v JobTaskOutput) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilJobTaskOutput) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilJobTaskOutput) SetToNull() {
	o.Null = true
	var v JobTaskOutput
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilJobTaskOutput) Get() (v JobTaskOutput, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilJobTaskOutput) Or(d JobTaskOutput) JobTaskOutput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerConfig returns new NilLoadBalancerConfig with value set to v.
func NewNilLoadBalancerConfig(v LoadBalancerConfig) NilLoadBalancerConfig {
	return NilLoadBalancerConfig{
		Value: v,
	}
}

// NilLoadBalancerConfig is nullable LoadBalancerConfig.
type NilLoadBalancerConfig struct {
	Value LoadBalancerConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerConfig) SetTo(v LoadBalancerConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerConfig) SetToNull() {
	o.Null = true
	var v LoadBalancerConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerConfig) Get() (v LoadBalancerConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerConfig) Or(d LoadBalancerConfig) LoadBalancerConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections returns new NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections with value set to v.
func NewNilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections {
	return NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections{
		Value: v,
	}
}

// NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections is nullable LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections.
type NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) SetToNull() {
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) Or(d LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections) LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnections {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests returns new NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests with value set to v.
func NewNilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests {
	return NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests{
		Value: v,
	}
}

// NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests is nullable LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests.
type NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) SetToNull() {
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) Or(d LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests) LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests returns new NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests with value set to v.
func NewNilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests {
	return NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests{
		Value: v,
	}
}

// NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests is nullable LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests.
type NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests struct {
	Value LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetTo(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) SetToNull() {
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) Get() (v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) Or(d LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests) LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections returns new NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections with value set to v.
func NewNilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections(v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections {
	return NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections{
		Value: v,
	}
}

// NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections is nullable LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections.
type NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections struct {
	Value LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetTo(v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) SetToNull() {
	o.Null = true
	var v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) Get() (v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) Or(d LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections) LoadBalancerTelemetrySnapshotRouterDestinationsItemConnections {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests returns new NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests with value set to v.
func NewNilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests {
	return NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests{
		Value: v,
	}
}

// NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests is nullable LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests.
type NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests struct {
	Value LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) SetTo(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) SetToNull() {
	o.Null = true
	var v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) Get() (v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) Or(d LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests) LoadBalancerTelemetrySnapshotRouterDestinationsItemRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests returns new NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests with value set to v.
func NewNilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests {
	return NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests{
		Value: v,
	}
}

// NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests is nullable LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests.
type NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests struct {
	Value LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests
	Null  bool
}

// SetTo sets value to v.
func (o *NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetTo(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) SetToNull() {
	o.Null = true
	var v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) Get() (v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) Or(d LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests) LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilOciRegistryOriginDetailsAuth returns new NilOciRegistryOriginDetailsAuth with value set to v.
func NewNilOciRegistryOriginDetailsAuth(v OciRegistryOriginDetailsAuth) NilOciRegistryOriginDetailsAuth {
	return NilOciRegistryOriginDetailsAuth{
		Value: v,
	}
}

// NilOciRegistryOriginDetailsAuth is nullable OciRegistryOriginDetailsAuth.
type NilOciRegistryOriginDetailsAuth struct {
	Value OciRegistryOriginDetailsAuth
	Null  bool
}

// SetTo sets value to v.
func (o *NilOciRegistryOriginDetailsAuth) SetTo(v OciRegistryOriginDetailsAuth) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilOciRegistryOriginDetailsAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilOciRegistryOriginDetailsAuth) SetToNull() {
	o.Null = true
	var v OciRegistryOriginDetailsAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilOciRegistryOriginDetailsAuth) Get() (v OciRegistryOriginDetailsAuth, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilOciRegistryOriginDetailsAuth) Or(d OciRegistryOriginDetailsAuth) OciRegistryOriginDetailsAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPromoCodeCredit returns new NilPromoCodeCredit with value set to v.
func NewNilPromoCodeCredit(v PromoCodeCredit) NilPromoCodeCredit {
	return NilPromoCodeCredit{
		Value: v,
	}
}

// NilPromoCodeCredit is nullable PromoCodeCredit.
type NilPromoCodeCredit struct {
	Value PromoCodeCredit
	Null  bool
}

// SetTo sets value to v.
func (o *NilPromoCodeCredit) SetTo(v PromoCodeCredit) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPromoCodeCredit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPromoCodeCredit) SetToNull() {
	o.Null = true
	var v PromoCodeCredit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPromoCodeCredit) Get() (v PromoCodeCredit, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPromoCodeCredit) Or(d PromoCodeCredit) PromoCodeCredit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRecordFeatures returns new NilRecordFeatures with value set to v.
func NewNilRecordFeatures(v RecordFeatures) NilRecordFeatures {
	return NilRecordFeatures{
		Value: v,
	}
}

// NilRecordFeatures is nullable RecordFeatures.
type NilRecordFeatures struct {
	Value RecordFeatures
	Null  bool
}

// SetTo sets value to v.
func (o *NilRecordFeatures) SetTo(v RecordFeatures) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRecordFeatures) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRecordFeatures) SetToNull() {
	o.Null = true
	var v RecordFeatures
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRecordFeatures) Get() (v RecordFeatures, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRecordFeatures) Or(d RecordFeatures) RecordFeatures {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRecordFeaturesCertificate returns new NilRecordFeaturesCertificate with value set to v.
func NewNilRecordFeaturesCertificate(v RecordFeaturesCertificate) NilRecordFeaturesCertificate {
	return NilRecordFeaturesCertificate{
		Value: v,
	}
}

// NilRecordFeaturesCertificate is nullable RecordFeaturesCertificate.
type NilRecordFeaturesCertificate struct {
	Value RecordFeaturesCertificate
	Null  bool
}

// SetTo sets value to v.
func (o *NilRecordFeaturesCertificate) SetTo(v RecordFeaturesCertificate) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRecordFeaturesCertificate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRecordFeaturesCertificate) SetToNull() {
	o.Null = true
	var v RecordFeaturesCertificate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRecordFeaturesCertificate) Get() (v RecordFeaturesCertificate, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRecordFeaturesCertificate) Or(d RecordFeaturesCertificate) RecordFeaturesCertificate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilScopedVariableSource returns new NilScopedVariableSource with value set to v.
func NewNilScopedVariableSource(v ScopedVariableSource) NilScopedVariableSource {
	return NilScopedVariableSource{
		Value: v,
	}
}

// NilScopedVariableSource is nullable ScopedVariableSource.
type NilScopedVariableSource struct {
	Value ScopedVariableSource
	Null  bool
}

// SetTo sets value to v.
func (o *NilScopedVariableSource) SetTo(v ScopedVariableSource) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilScopedVariableSource) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilScopedVariableSource) SetToNull() {
	o.Null = true
	var v ScopedVariableSource
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilScopedVariableSource) Get() (v ScopedVariableSource, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilScopedVariableSource) Or(d ScopedVariableSource) ScopedVariableSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackBuildDeployStepDetailsUpdateScopedVariables returns new NilStackBuildDeployStepDetailsUpdateScopedVariables with value set to v.
func NewNilStackBuildDeployStepDetailsUpdateScopedVariables(v StackBuildDeployStepDetailsUpdateScopedVariables) NilStackBuildDeployStepDetailsUpdateScopedVariables {
	return NilStackBuildDeployStepDetailsUpdateScopedVariables{
		Value: v,
	}
}

// NilStackBuildDeployStepDetailsUpdateScopedVariables is nullable StackBuildDeployStepDetailsUpdateScopedVariables.
type NilStackBuildDeployStepDetailsUpdateScopedVariables struct {
	Value StackBuildDeployStepDetailsUpdateScopedVariables
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackBuildDeployStepDetailsUpdateScopedVariables) SetTo(v StackBuildDeployStepDetailsUpdateScopedVariables) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackBuildDeployStepDetailsUpdateScopedVariables) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackBuildDeployStepDetailsUpdateScopedVariables) SetToNull() {
	o.Null = true
	var v StackBuildDeployStepDetailsUpdateScopedVariables
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackBuildDeployStepDetailsUpdateScopedVariables) Get() (v StackBuildDeployStepDetailsUpdateScopedVariables, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackBuildDeployStepDetailsUpdateScopedVariables) Or(d StackBuildDeployStepDetailsUpdateScopedVariables) StackBuildDeployStepDetailsUpdateScopedVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackContainerConfigDeployStatefulOptions returns new NilStackContainerConfigDeployStatefulOptions with value set to v.
func NewNilStackContainerConfigDeployStatefulOptions(v StackContainerConfigDeployStatefulOptions) NilStackContainerConfigDeployStatefulOptions {
	return NilStackContainerConfigDeployStatefulOptions{
		Value: v,
	}
}

// NilStackContainerConfigDeployStatefulOptions is nullable StackContainerConfigDeployStatefulOptions.
type NilStackContainerConfigDeployStatefulOptions struct {
	Value StackContainerConfigDeployStatefulOptions
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackContainerConfigDeployStatefulOptions) SetTo(v StackContainerConfigDeployStatefulOptions) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackContainerConfigDeployStatefulOptions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackContainerConfigDeployStatefulOptions) SetToNull() {
	o.Null = true
	var v StackContainerConfigDeployStatefulOptions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackContainerConfigDeployStatefulOptions) Get() (v StackContainerConfigDeployStatefulOptions, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackContainerConfigDeployStatefulOptions) Or(d StackContainerConfigDeployStatefulOptions) StackContainerConfigDeployStatefulOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackContainerItemConfigIntegrationsBackupsRestore returns new NilStackContainerItemConfigIntegrationsBackupsRestore with value set to v.
func NewNilStackContainerItemConfigIntegrationsBackupsRestore(v StackContainerItemConfigIntegrationsBackupsRestore) NilStackContainerItemConfigIntegrationsBackupsRestore {
	return NilStackContainerItemConfigIntegrationsBackupsRestore{
		Value: v,
	}
}

// NilStackContainerItemConfigIntegrationsBackupsRestore is nullable StackContainerItemConfigIntegrationsBackupsRestore.
type NilStackContainerItemConfigIntegrationsBackupsRestore struct {
	Value StackContainerItemConfigIntegrationsBackupsRestore
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackContainerItemConfigIntegrationsBackupsRestore) SetTo(v StackContainerItemConfigIntegrationsBackupsRestore) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackContainerItemConfigIntegrationsBackupsRestore) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackContainerItemConfigIntegrationsBackupsRestore) SetToNull() {
	o.Null = true
	var v StackContainerItemConfigIntegrationsBackupsRestore
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackContainerItemConfigIntegrationsBackupsRestore) Get() (v StackContainerItemConfigIntegrationsBackupsRestore, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackContainerItemConfigIntegrationsBackupsRestore) Or(d StackContainerItemConfigIntegrationsBackupsRestore) StackContainerItemConfigIntegrationsBackupsRestore {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackRawSourceDetails returns new NilStackRawSourceDetails with value set to v.
func NewNilStackRawSourceDetails(v StackRawSourceDetails) NilStackRawSourceDetails {
	return NilStackRawSourceDetails{
		Value: v,
	}
}

// NilStackRawSourceDetails is nullable StackRawSourceDetails.
type NilStackRawSourceDetails struct {
	Value StackRawSourceDetails
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackRawSourceDetails) SetTo(v StackRawSourceDetails) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackRawSourceDetails) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackRawSourceDetails) SetToNull() {
	o.Null = true
	var v StackRawSourceDetails
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackRawSourceDetails) Get() (v StackRawSourceDetails, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackRawSourceDetails) Or(d StackRawSourceDetails) StackRawSourceDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackSpecScopedVariableAccessEnvVariable returns new NilStackSpecScopedVariableAccessEnvVariable with value set to v.
func NewNilStackSpecScopedVariableAccessEnvVariable(v StackSpecScopedVariableAccessEnvVariable) NilStackSpecScopedVariableAccessEnvVariable {
	return NilStackSpecScopedVariableAccessEnvVariable{
		Value: v,
	}
}

// NilStackSpecScopedVariableAccessEnvVariable is nullable StackSpecScopedVariableAccessEnvVariable.
type NilStackSpecScopedVariableAccessEnvVariable struct {
	Value StackSpecScopedVariableAccessEnvVariable
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackSpecScopedVariableAccessEnvVariable) SetTo(v StackSpecScopedVariableAccessEnvVariable) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackSpecScopedVariableAccessEnvVariable) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackSpecScopedVariableAccessEnvVariable) SetToNull() {
	o.Null = true
	var v StackSpecScopedVariableAccessEnvVariable
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackSpecScopedVariableAccessEnvVariable) Get() (v StackSpecScopedVariableAccessEnvVariable, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackSpecScopedVariableAccessEnvVariable) Or(d StackSpecScopedVariableAccessEnvVariable) StackSpecScopedVariableAccessEnvVariable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackSpecScopedVariableRawSourceDetailsSecret returns new NilStackSpecScopedVariableRawSourceDetailsSecret with value set to v.
func NewNilStackSpecScopedVariableRawSourceDetailsSecret(v StackSpecScopedVariableRawSourceDetailsSecret) NilStackSpecScopedVariableRawSourceDetailsSecret {
	return NilStackSpecScopedVariableRawSourceDetailsSecret{
		Value: v,
	}
}

// NilStackSpecScopedVariableRawSourceDetailsSecret is nullable StackSpecScopedVariableRawSourceDetailsSecret.
type NilStackSpecScopedVariableRawSourceDetailsSecret struct {
	Value StackSpecScopedVariableRawSourceDetailsSecret
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackSpecScopedVariableRawSourceDetailsSecret) SetTo(v StackSpecScopedVariableRawSourceDetailsSecret) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackSpecScopedVariableRawSourceDetailsSecret) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackSpecScopedVariableRawSourceDetailsSecret) SetToNull() {
	o.Null = true
	var v StackSpecScopedVariableRawSourceDetailsSecret
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackSpecScopedVariableRawSourceDetailsSecret) Get() (v StackSpecScopedVariableRawSourceDetailsSecret, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackSpecScopedVariableRawSourceDetailsSecret) Or(d StackSpecScopedVariableRawSourceDetailsSecret) StackSpecScopedVariableRawSourceDetailsSecret {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackSpecScopedVariableSource returns new NilStackSpecScopedVariableSource with value set to v.
func NewNilStackSpecScopedVariableSource(v StackSpecScopedVariableSource) NilStackSpecScopedVariableSource {
	return NilStackSpecScopedVariableSource{
		Value: v,
	}
}

// NilStackSpecScopedVariableSource is nullable StackSpecScopedVariableSource.
type NilStackSpecScopedVariableSource struct {
	Value StackSpecScopedVariableSource
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackSpecScopedVariableSource) SetTo(v StackSpecScopedVariableSource) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackSpecScopedVariableSource) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackSpecScopedVariableSource) SetToNull() {
	o.Null = true
	var v StackSpecScopedVariableSource
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackSpecScopedVariableSource) Get() (v StackSpecScopedVariableSource, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackSpecScopedVariableSource) Or(d StackSpecScopedVariableSource) StackSpecScopedVariableSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackSpecTestContainerConfig returns new NilStackSpecTestContainerConfig with value set to v.
func NewNilStackSpecTestContainerConfig(v StackSpecTestContainerConfig) NilStackSpecTestContainerConfig {
	return NilStackSpecTestContainerConfig{
		Value: v,
	}
}

// NilStackSpecTestContainerConfig is nullable StackSpecTestContainerConfig.
type NilStackSpecTestContainerConfig struct {
	Value StackSpecTestContainerConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackSpecTestContainerConfig) SetTo(v StackSpecTestContainerConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackSpecTestContainerConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackSpecTestContainerConfig) SetToNull() {
	o.Null = true
	var v StackSpecTestContainerConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackSpecTestContainerConfig) Get() (v StackSpecTestContainerConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackSpecTestContainerConfig) Or(d StackSpecTestContainerConfig) StackSpecTestContainerConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilStackSpecTestContainerImage returns new NilStackSpecTestContainerImage with value set to v.
func NewNilStackSpecTestContainerImage(v StackSpecTestContainerImage) NilStackSpecTestContainerImage {
	return NilStackSpecTestContainerImage{
		Value: v,
	}
}

// NilStackSpecTestContainerImage is nullable StackSpecTestContainerImage.
type NilStackSpecTestContainerImage struct {
	Value StackSpecTestContainerImage
	Null  bool
}

// SetTo sets value to v.
func (o *NilStackSpecTestContainerImage) SetTo(v StackSpecTestContainerImage) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilStackSpecTestContainerImage) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilStackSpecTestContainerImage) SetToNull() {
	o.Null = true
	var v StackSpecTestContainerImage
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilStackSpecTestContainerImage) Get() (v StackSpecTestContainerImage, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilStackSpecTestContainerImage) Or(d StackSpecTestContainerImage) StackSpecTestContainerImage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTermRenew returns new NilTermRenew with value set to v.
func NewNilTermRenew(v TermRenew) NilTermRenew {
	return NilTermRenew{
		Value: v,
	}
}

// NilTermRenew is nullable TermRenew.
type NilTermRenew struct {
	Value TermRenew
	Null  bool
}

// SetTo sets value to v.
func (o *NilTermRenew) SetTo(v TermRenew) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTermRenew) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTermRenew) SetToNull() {
	o.Null = true
	var v TermRenew
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTermRenew) Get() (v TermRenew, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTermRenew) Or(d TermRenew) TermRenew {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilVPNInfoReturnService returns new NilVPNInfoReturnService with value set to v.
func NewNilVPNInfoReturnService(v VPNInfoReturnService) NilVPNInfoReturnService {
	return NilVPNInfoReturnService{
		Value: v,
	}
}

// NilVPNInfoReturnService is nullable VPNInfoReturnService.
type NilVPNInfoReturnService struct {
	Value VPNInfoReturnService
	Null  bool
}

// SetTo sets value to v.
func (o *NilVPNInfoReturnService) SetTo(v VPNInfoReturnService) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilVPNInfoReturnService) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilVPNInfoReturnService) SetToNull() {
	o.Null = true
	var v VPNInfoReturnService
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilVPNInfoReturnService) Get() (v VPNInfoReturnService, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilVPNInfoReturnService) Or(d VPNInfoReturnService) VPNInfoReturnService {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilVPNInfoReturnServiceConfig returns new NilVPNInfoReturnServiceConfig with value set to v.
func NewNilVPNInfoReturnServiceConfig(v VPNInfoReturnServiceConfig) NilVPNInfoReturnServiceConfig {
	return NilVPNInfoReturnServiceConfig{
		Value: v,
	}
}

// NilVPNInfoReturnServiceConfig is nullable VPNInfoReturnServiceConfig.
type NilVPNInfoReturnServiceConfig struct {
	Value VPNInfoReturnServiceConfig
	Null  bool
}

// SetTo sets value to v.
func (o *NilVPNInfoReturnServiceConfig) SetTo(v VPNInfoReturnServiceConfig) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilVPNInfoReturnServiceConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilVPNInfoReturnServiceConfig) SetToNull() {
	o.Null = true
	var v VPNInfoReturnServiceConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilVPNInfoReturnServiceConfig) Get() (v VPNInfoReturnServiceConfig, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilVPNInfoReturnServiceConfig) Or(d VPNInfoReturnServiceConfig) VPNInfoReturnServiceConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Statistics that pertain to a specific node.
// Ref: #/components/schemas/NodeMetaStats
type NodeMetaStats struct {
	Network  ServerStatsNetwork  `json:"network"`
	Uptime   ServerStatsUptime   `json:"uptime"`
	CPU      ServerStatsCpu      `json:"cpu"`
	Load     ServerStatsLoad     `json:"load"`
	RAM      ServerStatsRam      `json:"ram"`
	Storage  ServerStatsStorage  `json:"storage"`
	Os       ServerStatsOS       `json:"os"`
	Versions ServerStatsVersions `json:"versions"`
}

// GetNetwork returns the value of Network.
func (s *NodeMetaStats) GetNetwork() ServerStatsNetwork {
	return s.Network
}

// GetUptime returns the value of Uptime.
func (s *NodeMetaStats) GetUptime() ServerStatsUptime {
	return s.Uptime
}

// GetCPU returns the value of CPU.
func (s *NodeMetaStats) GetCPU() ServerStatsCpu {
	return s.CPU
}

// GetLoad returns the value of Load.
func (s *NodeMetaStats) GetLoad() ServerStatsLoad {
	return s.Load
}

// GetRAM returns the value of RAM.
func (s *NodeMetaStats) GetRAM() ServerStatsRam {
	return s.RAM
}

// GetStorage returns the value of Storage.
func (s *NodeMetaStats) GetStorage() ServerStatsStorage {
	return s.Storage
}

// GetOs returns the value of Os.
func (s *NodeMetaStats) GetOs() ServerStatsOS {
	return s.Os
}

// GetVersions returns the value of Versions.
func (s *NodeMetaStats) GetVersions() ServerStatsVersions {
	return s.Versions
}

// SetNetwork sets the value of Network.
func (s *NodeMetaStats) SetNetwork(val ServerStatsNetwork) {
	s.Network = val
}

// SetUptime sets the value of Uptime.
func (s *NodeMetaStats) SetUptime(val ServerStatsUptime) {
	s.Uptime = val
}

// SetCPU sets the value of CPU.
func (s *NodeMetaStats) SetCPU(val ServerStatsCpu) {
	s.CPU = val
}

// SetLoad sets the value of Load.
func (s *NodeMetaStats) SetLoad(val ServerStatsLoad) {
	s.Load = val
}

// SetRAM sets the value of RAM.
func (s *NodeMetaStats) SetRAM(val ServerStatsRam) {
	s.RAM = val
}

// SetStorage sets the value of Storage.
func (s *NodeMetaStats) SetStorage(val ServerStatsStorage) {
	s.Storage = val
}

// SetOs sets the value of Os.
func (s *NodeMetaStats) SetOs(val ServerStatsOS) {
	s.Os = val
}

// SetVersions sets the value of Versions.
func (s *NodeMetaStats) SetVersions(val ServerStatsVersions) {
	s.Versions = val
}

// Merged schema.
// Ref: #/components/schemas/NodeState
type NodeState struct {
	// The current state of the node.
	Current NodeStateCurrent `json:"current"`
	// Merged property.
	Changed time.Time `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptNodeStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *NodeState) GetCurrent() NodeStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *NodeState) GetChanged() time.Time {
	return s.Changed
}

// GetError returns the value of Error.
func (s *NodeState) GetError() OptNodeStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *NodeState) SetCurrent(val NodeStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *NodeState) SetChanged(val time.Time) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *NodeState) SetError(val OptNodeStateError) {
	s.Error = val
}

// The current state of the node.
type NodeStateCurrent string

const (
	NodeStateCurrentNew            NodeStateCurrent = "new"
	NodeStateCurrentOffline        NodeStateCurrent = "offline"
	NodeStateCurrentAuthorizing    NodeStateCurrent = "authorizing"
	NodeStateCurrentOnline         NodeStateCurrent = "online"
	NodeStateCurrentDecommissioned NodeStateCurrent = "decommissioned"
)

// AllValues returns all NodeStateCurrent values.
func (NodeStateCurrent) AllValues() []NodeStateCurrent {
	return []NodeStateCurrent{
		NodeStateCurrentNew,
		NodeStateCurrentOffline,
		NodeStateCurrentAuthorizing,
		NodeStateCurrentOnline,
		NodeStateCurrentDecommissioned,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NodeStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case NodeStateCurrentNew:
		return []byte(s), nil
	case NodeStateCurrentOffline:
		return []byte(s), nil
	case NodeStateCurrentAuthorizing:
		return []byte(s), nil
	case NodeStateCurrentOnline:
		return []byte(s), nil
	case NodeStateCurrentDecommissioned:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NodeStateCurrent) UnmarshalText(data []byte) error {
	switch NodeStateCurrent(data) {
	case NodeStateCurrentNew:
		*s = NodeStateCurrentNew
		return nil
	case NodeStateCurrentOffline:
		*s = NodeStateCurrentOffline
		return nil
	case NodeStateCurrentAuthorizing:
		*s = NodeStateCurrentAuthorizing
		return nil
	case NodeStateCurrentOnline:
		*s = NodeStateCurrentOnline
		return nil
	case NodeStateCurrentDecommissioned:
		*s = NodeStateCurrentDecommissioned
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type NodeStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *NodeStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *NodeStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *NodeStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *NodeStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// An empty origin. No details are provided for this image.
// Ref: #/components/schemas/NoneOrigin
type NoneOrigin struct {
	Details *NoneOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *NoneOrigin) GetDetails() *NoneOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *NoneOrigin) SetDetails(val *NoneOriginDetails) {
	s.Details = val
}

type NoneOriginDetails struct{}

type NoneOriginType string

const (
	NoneOriginTypeNone NoneOriginType = "none"
)

// AllValues returns all NoneOriginType values.
func (NoneOriginType) AllValues() []NoneOriginType {
	return []NoneOriginType{
		NoneOriginTypeNone,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s NoneOriginType) MarshalText() ([]byte, error) {
	switch s {
	case NoneOriginTypeNone:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *NoneOriginType) UnmarshalText(data []byte) error {
	switch NoneOriginType(data) {
	case NoneOriginTypeNone:
		*s = NoneOriginTypeNone
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An image origin that pulls images fro an OCI-compatible registry. Also used for provider-native
// registries, such as AWS ECR.
// Ref: #/components/schemas/OciRegistryOrigin
type OciRegistryOrigin struct {
	Details OciRegistryOriginDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *OciRegistryOrigin) GetDetails() OciRegistryOriginDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *OciRegistryOrigin) SetDetails(val OciRegistryOriginDetails) {
	s.Details = val
}

type OciRegistryOriginDetails struct {
	Existing OptExistingSource `json:"existing"`
	// The image name on the registry.
	Target string `json:"target"`
	// The url of the remote registry.
	URL  string                          `json:"url"`
	Auth NilOciRegistryOriginDetailsAuth `json:"auth"`
}

// GetExisting returns the value of Existing.
func (s *OciRegistryOriginDetails) GetExisting() OptExistingSource {
	return s.Existing
}

// GetTarget returns the value of Target.
func (s *OciRegistryOriginDetails) GetTarget() string {
	return s.Target
}

// GetURL returns the value of URL.
func (s *OciRegistryOriginDetails) GetURL() string {
	return s.URL
}

// GetAuth returns the value of Auth.
func (s *OciRegistryOriginDetails) GetAuth() NilOciRegistryOriginDetailsAuth {
	return s.Auth
}

// SetExisting sets the value of Existing.
func (s *OciRegistryOriginDetails) SetExisting(val OptExistingSource) {
	s.Existing = val
}

// SetTarget sets the value of Target.
func (s *OciRegistryOriginDetails) SetTarget(val string) {
	s.Target = val
}

// SetURL sets the value of URL.
func (s *OciRegistryOriginDetails) SetURL(val string) {
	s.URL = val
}

// SetAuth sets the value of Auth.
func (s *OciRegistryOriginDetails) SetAuth(val NilOciRegistryOriginDetailsAuth) {
	s.Auth = val
}

// Authentication details for a third party image registry/source.
type OciRegistryOriginDetailsAuth struct {
	OneOf OciRegistryOriginDetailsAuthSum
}

// GetOneOf returns the value of OneOf.
func (s *OciRegistryOriginDetailsAuth) GetOneOf() OciRegistryOriginDetailsAuthSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *OciRegistryOriginDetailsAuth) SetOneOf(val OciRegistryOriginDetailsAuthSum) {
	s.OneOf = val
}

// OciRegistryOriginDetailsAuthSum represents sum type.
type OciRegistryOriginDetailsAuthSum struct {
	Type                 OciRegistryOriginDetailsAuthSumType // switch on this field
	RegistryAuthUser     RegistryAuthUser
	RegistryAuthProvider RegistryAuthProvider
	RegistryAuthWebhook  RegistryAuthWebhook
}

// OciRegistryOriginDetailsAuthSumType is oneOf type of OciRegistryOriginDetailsAuthSum.
type OciRegistryOriginDetailsAuthSumType string

// Possible values for OciRegistryOriginDetailsAuthSumType.
const (
	RegistryAuthUserOciRegistryOriginDetailsAuthSum     OciRegistryOriginDetailsAuthSumType = "user"
	RegistryAuthProviderOciRegistryOriginDetailsAuthSum OciRegistryOriginDetailsAuthSumType = "provider"
	RegistryAuthWebhookOciRegistryOriginDetailsAuthSum  OciRegistryOriginDetailsAuthSumType = "webhook"
)

// IsRegistryAuthUser reports whether OciRegistryOriginDetailsAuthSum is RegistryAuthUser.
func (s OciRegistryOriginDetailsAuthSum) IsRegistryAuthUser() bool {
	return s.Type == RegistryAuthUserOciRegistryOriginDetailsAuthSum
}

// IsRegistryAuthProvider reports whether OciRegistryOriginDetailsAuthSum is RegistryAuthProvider.
func (s OciRegistryOriginDetailsAuthSum) IsRegistryAuthProvider() bool {
	return s.Type == RegistryAuthProviderOciRegistryOriginDetailsAuthSum
}

// IsRegistryAuthWebhook reports whether OciRegistryOriginDetailsAuthSum is RegistryAuthWebhook.
func (s OciRegistryOriginDetailsAuthSum) IsRegistryAuthWebhook() bool {
	return s.Type == RegistryAuthWebhookOciRegistryOriginDetailsAuthSum
}

// SetRegistryAuthUser sets OciRegistryOriginDetailsAuthSum to RegistryAuthUser.
func (s *OciRegistryOriginDetailsAuthSum) SetRegistryAuthUser(v RegistryAuthUser) {
	s.Type = RegistryAuthUserOciRegistryOriginDetailsAuthSum
	s.RegistryAuthUser = v
}

// GetRegistryAuthUser returns RegistryAuthUser and true boolean if OciRegistryOriginDetailsAuthSum is RegistryAuthUser.
func (s OciRegistryOriginDetailsAuthSum) GetRegistryAuthUser() (v RegistryAuthUser, ok bool) {
	if !s.IsRegistryAuthUser() {
		return v, false
	}
	return s.RegistryAuthUser, true
}

// NewRegistryAuthUserOciRegistryOriginDetailsAuthSum returns new OciRegistryOriginDetailsAuthSum from RegistryAuthUser.
func NewRegistryAuthUserOciRegistryOriginDetailsAuthSum(v RegistryAuthUser) OciRegistryOriginDetailsAuthSum {
	var s OciRegistryOriginDetailsAuthSum
	s.SetRegistryAuthUser(v)
	return s
}

// SetRegistryAuthProvider sets OciRegistryOriginDetailsAuthSum to RegistryAuthProvider.
func (s *OciRegistryOriginDetailsAuthSum) SetRegistryAuthProvider(v RegistryAuthProvider) {
	s.Type = RegistryAuthProviderOciRegistryOriginDetailsAuthSum
	s.RegistryAuthProvider = v
}

// GetRegistryAuthProvider returns RegistryAuthProvider and true boolean if OciRegistryOriginDetailsAuthSum is RegistryAuthProvider.
func (s OciRegistryOriginDetailsAuthSum) GetRegistryAuthProvider() (v RegistryAuthProvider, ok bool) {
	if !s.IsRegistryAuthProvider() {
		return v, false
	}
	return s.RegistryAuthProvider, true
}

// NewRegistryAuthProviderOciRegistryOriginDetailsAuthSum returns new OciRegistryOriginDetailsAuthSum from RegistryAuthProvider.
func NewRegistryAuthProviderOciRegistryOriginDetailsAuthSum(v RegistryAuthProvider) OciRegistryOriginDetailsAuthSum {
	var s OciRegistryOriginDetailsAuthSum
	s.SetRegistryAuthProvider(v)
	return s
}

// SetRegistryAuthWebhook sets OciRegistryOriginDetailsAuthSum to RegistryAuthWebhook.
func (s *OciRegistryOriginDetailsAuthSum) SetRegistryAuthWebhook(v RegistryAuthWebhook) {
	s.Type = RegistryAuthWebhookOciRegistryOriginDetailsAuthSum
	s.RegistryAuthWebhook = v
}

// GetRegistryAuthWebhook returns RegistryAuthWebhook and true boolean if OciRegistryOriginDetailsAuthSum is RegistryAuthWebhook.
func (s OciRegistryOriginDetailsAuthSum) GetRegistryAuthWebhook() (v RegistryAuthWebhook, ok bool) {
	if !s.IsRegistryAuthWebhook() {
		return v, false
	}
	return s.RegistryAuthWebhook, true
}

// NewRegistryAuthWebhookOciRegistryOriginDetailsAuthSum returns new OciRegistryOriginDetailsAuthSum from RegistryAuthWebhook.
func NewRegistryAuthWebhookOciRegistryOriginDetailsAuthSum(v RegistryAuthWebhook) OciRegistryOriginDetailsAuthSum {
	var s OciRegistryOriginDetailsAuthSum
	s.SetRegistryAuthWebhook(v)
	return s
}

type OciRegistryOriginType string

const (
	OciRegistryOriginTypeOciRegistry OciRegistryOriginType = "oci-registry"
)

// AllValues returns all OciRegistryOriginType values.
func (OciRegistryOriginType) AllValues() []OciRegistryOriginType {
	return []OciRegistryOriginType{
		OciRegistryOriginTypeOciRegistry,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OciRegistryOriginType) MarshalText() ([]byte, error) {
	switch s {
	case OciRegistryOriginTypeOciRegistry:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OciRegistryOriginType) UnmarshalText(data []byte) error {
	switch OciRegistryOriginType(data) {
	case OciRegistryOriginTypeOciRegistry:
		*s = OciRegistryOriginTypeOciRegistry
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptAccount returns new OptAccount with value set to v.
func NewOptAccount(v Account) OptAccount {
	return OptAccount{
		Value: v,
		Set:   true,
	}
}

// OptAccount is optional Account.
type OptAccount struct {
	Value Account
	Set   bool
}

// IsSet returns true if OptAccount was set.
func (o OptAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccount) Reset() {
	var v Account
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccount) SetTo(v Account) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccount) Get() (v Account, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccount) Or(d Account) Account {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountEmployeeLoginEmployee returns new OptAccountEmployeeLoginEmployee with value set to v.
func NewOptAccountEmployeeLoginEmployee(v AccountEmployeeLoginEmployee) OptAccountEmployeeLoginEmployee {
	return OptAccountEmployeeLoginEmployee{
		Value: v,
		Set:   true,
	}
}

// OptAccountEmployeeLoginEmployee is optional AccountEmployeeLoginEmployee.
type OptAccountEmployeeLoginEmployee struct {
	Value AccountEmployeeLoginEmployee
	Set   bool
}

// IsSet returns true if OptAccountEmployeeLoginEmployee was set.
func (o OptAccountEmployeeLoginEmployee) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountEmployeeLoginEmployee) Reset() {
	var v AccountEmployeeLoginEmployee
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountEmployeeLoginEmployee) SetTo(v AccountEmployeeLoginEmployee) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountEmployeeLoginEmployee) Get() (v AccountEmployeeLoginEmployee, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountEmployeeLoginEmployee) Or(d AccountEmployeeLoginEmployee) AccountEmployeeLoginEmployee {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountStateError returns new OptAccountStateError with value set to v.
func NewOptAccountStateError(v AccountStateError) OptAccountStateError {
	return OptAccountStateError{
		Value: v,
		Set:   true,
	}
}

// OptAccountStateError is optional AccountStateError.
type OptAccountStateError struct {
	Value AccountStateError
	Set   bool
}

// IsSet returns true if OptAccountStateError was set.
func (o OptAccountStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountStateError) Reset() {
	var v AccountStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountStateError) SetTo(v AccountStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountStateError) Get() (v AccountStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountStateError) Or(d AccountStateError) AccountStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAddress returns new OptAddress with value set to v.
func NewOptAddress(v Address) OptAddress {
	return OptAddress{
		Value: v,
		Set:   true,
	}
}

// OptAddress is optional Address.
type OptAddress struct {
	Value Address
	Set   bool
}

// IsSet returns true if OptAddress was set.
func (o OptAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddress) Reset() {
	var v Address
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddress) SetTo(v Address) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddress) Get() (v Address, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddress) Or(d Address) Address {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAnnouncementStateError returns new OptAnnouncementStateError with value set to v.
func NewOptAnnouncementStateError(v AnnouncementStateError) OptAnnouncementStateError {
	return OptAnnouncementStateError{
		Value: v,
		Set:   true,
	}
}

// OptAnnouncementStateError is optional AnnouncementStateError.
type OptAnnouncementStateError struct {
	Value AnnouncementStateError
	Set   bool
}

// IsSet returns true if OptAnnouncementStateError was set.
func (o OptAnnouncementStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnnouncementStateError) Reset() {
	var v AnnouncementStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnnouncementStateError) SetTo(v AnnouncementStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnnouncementStateError) Get() (v AnnouncementStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnnouncementStateError) Or(d AnnouncementStateError) AnnouncementStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKey returns new OptApiKey with value set to v.
func NewOptApiKey(v ApiKey) OptApiKey {
	return OptApiKey{
		Value: v,
		Set:   true,
	}
}

// OptApiKey is optional ApiKey.
type OptApiKey struct {
	Value ApiKey
	Set   bool
}

// IsSet returns true if OptApiKey was set.
func (o OptApiKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKey) Reset() {
	var v ApiKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKey) SetTo(v ApiKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKey) Get() (v ApiKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKey) Or(d ApiKey) ApiKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKeyCreatorStateError returns new OptApiKeyCreatorStateError with value set to v.
func NewOptApiKeyCreatorStateError(v ApiKeyCreatorStateError) OptApiKeyCreatorStateError {
	return OptApiKeyCreatorStateError{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyCreatorStateError is optional ApiKeyCreatorStateError.
type OptApiKeyCreatorStateError struct {
	Value ApiKeyCreatorStateError
	Set   bool
}

// IsSet returns true if OptApiKeyCreatorStateError was set.
func (o OptApiKeyCreatorStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyCreatorStateError) Reset() {
	var v ApiKeyCreatorStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyCreatorStateError) SetTo(v ApiKeyCreatorStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyCreatorStateError) Get() (v ApiKeyCreatorStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyCreatorStateError) Or(d ApiKeyCreatorStateError) ApiKeyCreatorStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptApiKeyStateError returns new OptApiKeyStateError with value set to v.
func NewOptApiKeyStateError(v ApiKeyStateError) OptApiKeyStateError {
	return OptApiKeyStateError{
		Value: v,
		Set:   true,
	}
}

// OptApiKeyStateError is optional ApiKeyStateError.
type OptApiKeyStateError struct {
	Value ApiKeyStateError
	Set   bool
}

// IsSet returns true if OptApiKeyStateError was set.
func (o OptApiKeyStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptApiKeyStateError) Reset() {
	var v ApiKeyStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptApiKeyStateError) SetTo(v ApiKeyStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptApiKeyStateError) Get() (v ApiKeyStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptApiKeyStateError) Or(d ApiKeyStateError) ApiKeyStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupIncludes returns new OptAutoScaleGroupIncludes with value set to v.
func NewOptAutoScaleGroupIncludes(v AutoScaleGroupIncludes) OptAutoScaleGroupIncludes {
	return OptAutoScaleGroupIncludes{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupIncludes is optional AutoScaleGroupIncludes.
type OptAutoScaleGroupIncludes struct {
	Value AutoScaleGroupIncludes
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupIncludes was set.
func (o OptAutoScaleGroupIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupIncludes) Reset() {
	var v AutoScaleGroupIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupIncludes) SetTo(v AutoScaleGroupIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupIncludes) Get() (v AutoScaleGroupIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupIncludes) Or(d AutoScaleGroupIncludes) AutoScaleGroupIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupScale returns new OptAutoScaleGroupScale with value set to v.
func NewOptAutoScaleGroupScale(v AutoScaleGroupScale) OptAutoScaleGroupScale {
	return OptAutoScaleGroupScale{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupScale is optional AutoScaleGroupScale.
type OptAutoScaleGroupScale struct {
	Value AutoScaleGroupScale
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupScale was set.
func (o OptAutoScaleGroupScale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupScale) Reset() {
	var v AutoScaleGroupScale
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupScale) SetTo(v AutoScaleGroupScale) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupScale) Get() (v AutoScaleGroupScale, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupScale) Or(d AutoScaleGroupScale) AutoScaleGroupScale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupScaleDown returns new OptAutoScaleGroupScaleDown with value set to v.
func NewOptAutoScaleGroupScaleDown(v AutoScaleGroupScaleDown) OptAutoScaleGroupScaleDown {
	return OptAutoScaleGroupScaleDown{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupScaleDown is optional AutoScaleGroupScaleDown.
type OptAutoScaleGroupScaleDown struct {
	Value AutoScaleGroupScaleDown
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupScaleDown was set.
func (o OptAutoScaleGroupScaleDown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupScaleDown) Reset() {
	var v AutoScaleGroupScaleDown
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupScaleDown) SetTo(v AutoScaleGroupScaleDown) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupScaleDown) Get() (v AutoScaleGroupScaleDown, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupScaleDown) Or(d AutoScaleGroupScaleDown) AutoScaleGroupScaleDown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupScaleDownMethod returns new OptAutoScaleGroupScaleDownMethod with value set to v.
func NewOptAutoScaleGroupScaleDownMethod(v AutoScaleGroupScaleDownMethod) OptAutoScaleGroupScaleDownMethod {
	return OptAutoScaleGroupScaleDownMethod{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupScaleDownMethod is optional AutoScaleGroupScaleDownMethod.
type OptAutoScaleGroupScaleDownMethod struct {
	Value AutoScaleGroupScaleDownMethod
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupScaleDownMethod was set.
func (o OptAutoScaleGroupScaleDownMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupScaleDownMethod) Reset() {
	var v AutoScaleGroupScaleDownMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupScaleDownMethod) SetTo(v AutoScaleGroupScaleDownMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupScaleDownMethod) Get() (v AutoScaleGroupScaleDownMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupScaleDownMethod) Or(d AutoScaleGroupScaleDownMethod) AutoScaleGroupScaleDownMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupScaleUp returns new OptAutoScaleGroupScaleUp with value set to v.
func NewOptAutoScaleGroupScaleUp(v AutoScaleGroupScaleUp) OptAutoScaleGroupScaleUp {
	return OptAutoScaleGroupScaleUp{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupScaleUp is optional AutoScaleGroupScaleUp.
type OptAutoScaleGroupScaleUp struct {
	Value AutoScaleGroupScaleUp
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupScaleUp was set.
func (o OptAutoScaleGroupScaleUp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupScaleUp) Reset() {
	var v AutoScaleGroupScaleUp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupScaleUp) SetTo(v AutoScaleGroupScaleUp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupScaleUp) Get() (v AutoScaleGroupScaleUp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupScaleUp) Or(d AutoScaleGroupScaleUp) AutoScaleGroupScaleUp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAutoScaleGroupStateError returns new OptAutoScaleGroupStateError with value set to v.
func NewOptAutoScaleGroupStateError(v AutoScaleGroupStateError) OptAutoScaleGroupStateError {
	return OptAutoScaleGroupStateError{
		Value: v,
		Set:   true,
	}
}

// OptAutoScaleGroupStateError is optional AutoScaleGroupStateError.
type OptAutoScaleGroupStateError struct {
	Value AutoScaleGroupStateError
	Set   bool
}

// IsSet returns true if OptAutoScaleGroupStateError was set.
func (o OptAutoScaleGroupStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAutoScaleGroupStateError) Reset() {
	var v AutoScaleGroupStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAutoScaleGroupStateError) SetTo(v AutoScaleGroupStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAutoScaleGroupStateError) Get() (v AutoScaleGroupStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAutoScaleGroupStateError) Or(d AutoScaleGroupStateError) AutoScaleGroupStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingAmount returns new OptBillingAmount with value set to v.
func NewOptBillingAmount(v BillingAmount) OptBillingAmount {
	return OptBillingAmount{
		Value: v,
		Set:   true,
	}
}

// OptBillingAmount is optional BillingAmount.
type OptBillingAmount struct {
	Value BillingAmount
	Set   bool
}

// IsSet returns true if OptBillingAmount was set.
func (o OptBillingAmount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingAmount) Reset() {
	var v BillingAmount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingAmount) SetTo(v BillingAmount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingAmount) Get() (v BillingAmount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingAmount) Or(d BillingAmount) BillingAmount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingOrderIncludes returns new OptBillingOrderIncludes with value set to v.
func NewOptBillingOrderIncludes(v BillingOrderIncludes) OptBillingOrderIncludes {
	return OptBillingOrderIncludes{
		Value: v,
		Set:   true,
	}
}

// OptBillingOrderIncludes is optional BillingOrderIncludes.
type OptBillingOrderIncludes struct {
	Value BillingOrderIncludes
	Set   bool
}

// IsSet returns true if OptBillingOrderIncludes was set.
func (o OptBillingOrderIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingOrderIncludes) Reset() {
	var v BillingOrderIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingOrderIncludes) SetTo(v BillingOrderIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingOrderIncludes) Get() (v BillingOrderIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingOrderIncludes) Or(d BillingOrderIncludes) BillingOrderIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingOrderStateError returns new OptBillingOrderStateError with value set to v.
func NewOptBillingOrderStateError(v BillingOrderStateError) OptBillingOrderStateError {
	return OptBillingOrderStateError{
		Value: v,
		Set:   true,
	}
}

// OptBillingOrderStateError is optional BillingOrderStateError.
type OptBillingOrderStateError struct {
	Value BillingOrderStateError
	Set   bool
}

// IsSet returns true if OptBillingOrderStateError was set.
func (o OptBillingOrderStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingOrderStateError) Reset() {
	var v BillingOrderStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingOrderStateError) SetTo(v BillingOrderStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingOrderStateError) Get() (v BillingOrderStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingOrderStateError) Or(d BillingOrderStateError) BillingOrderStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBillingServiceStateError returns new OptBillingServiceStateError with value set to v.
func NewOptBillingServiceStateError(v BillingServiceStateError) OptBillingServiceStateError {
	return OptBillingServiceStateError{
		Value: v,
		Set:   true,
	}
}

// OptBillingServiceStateError is optional BillingServiceStateError.
type OptBillingServiceStateError struct {
	Value BillingServiceStateError
	Set   bool
}

// IsSet returns true if OptBillingServiceStateError was set.
func (o OptBillingServiceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBillingServiceStateError) Reset() {
	var v BillingServiceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBillingServiceStateError) SetTo(v BillingServiceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBillingServiceStateError) Get() (v BillingServiceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBillingServiceStateError) Or(d BillingServiceStateError) BillingServiceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketImageSourceTypeDetails returns new OptBucketImageSourceTypeDetails with value set to v.
func NewOptBucketImageSourceTypeDetails(v BucketImageSourceTypeDetails) OptBucketImageSourceTypeDetails {
	return OptBucketImageSourceTypeDetails{
		Value: v,
		Set:   true,
	}
}

// OptBucketImageSourceTypeDetails is optional BucketImageSourceTypeDetails.
type OptBucketImageSourceTypeDetails struct {
	Value BucketImageSourceTypeDetails
	Set   bool
}

// IsSet returns true if OptBucketImageSourceTypeDetails was set.
func (o OptBucketImageSourceTypeDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketImageSourceTypeDetails) Reset() {
	var v BucketImageSourceTypeDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketImageSourceTypeDetails) SetTo(v BucketImageSourceTypeDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketImageSourceTypeDetails) Get() (v BucketImageSourceTypeDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketImageSourceTypeDetails) Or(d BucketImageSourceTypeDetails) BucketImageSourceTypeDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketImageSourceTypeOverride returns new OptBucketImageSourceTypeOverride with value set to v.
func NewOptBucketImageSourceTypeOverride(v BucketImageSourceTypeOverride) OptBucketImageSourceTypeOverride {
	return OptBucketImageSourceTypeOverride{
		Value: v,
		Set:   true,
	}
}

// OptBucketImageSourceTypeOverride is optional BucketImageSourceTypeOverride.
type OptBucketImageSourceTypeOverride struct {
	Value BucketImageSourceTypeOverride
	Set   bool
}

// IsSet returns true if OptBucketImageSourceTypeOverride was set.
func (o OptBucketImageSourceTypeOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketImageSourceTypeOverride) Reset() {
	var v BucketImageSourceTypeOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketImageSourceTypeOverride) SetTo(v BucketImageSourceTypeOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketImageSourceTypeOverride) Get() (v BucketImageSourceTypeOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketImageSourceTypeOverride) Or(d BucketImageSourceTypeOverride) BucketImageSourceTypeOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBucketImageSourceTypeType returns new OptBucketImageSourceTypeType with value set to v.
func NewOptBucketImageSourceTypeType(v BucketImageSourceTypeType) OptBucketImageSourceTypeType {
	return OptBucketImageSourceTypeType{
		Value: v,
		Set:   true,
	}
}

// OptBucketImageSourceTypeType is optional BucketImageSourceTypeType.
type OptBucketImageSourceTypeType struct {
	Value BucketImageSourceTypeType
	Set   bool
}

// IsSet returns true if OptBucketImageSourceTypeType was set.
func (o OptBucketImageSourceTypeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBucketImageSourceTypeType) Reset() {
	var v BucketImageSourceTypeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBucketImageSourceTypeType) SetTo(v BucketImageSourceTypeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBucketImageSourceTypeType) Get() (v BucketImageSourceTypeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBucketImageSourceTypeType) Or(d BucketImageSourceTypeType) BucketImageSourceTypeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCPUSpecExtra returns new OptCPUSpecExtra with value set to v.
func NewOptCPUSpecExtra(v CPUSpecExtra) OptCPUSpecExtra {
	return OptCPUSpecExtra{
		Value: v,
		Set:   true,
	}
}

// OptCPUSpecExtra is optional CPUSpecExtra.
type OptCPUSpecExtra struct {
	Value CPUSpecExtra
	Set   bool
}

// IsSet returns true if OptCPUSpecExtra was set.
func (o OptCPUSpecExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCPUSpecExtra) Reset() {
	var v CPUSpecExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCPUSpecExtra) SetTo(v CPUSpecExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCPUSpecExtra) Get() (v CPUSpecExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCPUSpecExtra) Or(d CPUSpecExtra) CPUSpecExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapability returns new OptCapability with value set to v.
func NewOptCapability(v Capability) OptCapability {
	return OptCapability{
		Value: v,
		Set:   true,
	}
}

// OptCapability is optional Capability.
type OptCapability struct {
	Value Capability
	Set   bool
}

// IsSet returns true if OptCapability was set.
func (o OptCapability) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapability) Reset() {
	var v Capability
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapability) SetTo(v Capability) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapability) Get() (v Capability, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapability) Or(d Capability) Capability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangePasswordReq returns new OptChangePasswordReq with value set to v.
func NewOptChangePasswordReq(v ChangePasswordReq) OptChangePasswordReq {
	return OptChangePasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptChangePasswordReq is optional ChangePasswordReq.
type OptChangePasswordReq struct {
	Value ChangePasswordReq
	Set   bool
}

// IsSet returns true if OptChangePasswordReq was set.
func (o OptChangePasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangePasswordReq) Reset() {
	var v ChangePasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangePasswordReq) SetTo(v ChangePasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangePasswordReq) Get() (v ChangePasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangePasswordReq) Or(d ChangePasswordReq) ChangePasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainer returns new OptContainer with value set to v.
func NewOptContainer(v Container) OptContainer {
	return OptContainer{
		Value: v,
		Set:   true,
	}
}

// OptContainer is optional Container.
type OptContainer struct {
	Value Container
	Set   bool
}

// IsSet returns true if OptContainer was set.
func (o OptContainer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainer) Reset() {
	var v Container
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainer) SetTo(v Container) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainer) Get() (v Container, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainer) Or(d Container) Container {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerBackupIncludes returns new OptContainerBackupIncludes with value set to v.
func NewOptContainerBackupIncludes(v ContainerBackupIncludes) OptContainerBackupIncludes {
	return OptContainerBackupIncludes{
		Value: v,
		Set:   true,
	}
}

// OptContainerBackupIncludes is optional ContainerBackupIncludes.
type OptContainerBackupIncludes struct {
	Value ContainerBackupIncludes
	Set   bool
}

// IsSet returns true if OptContainerBackupIncludes was set.
func (o OptContainerBackupIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerBackupIncludes) Reset() {
	var v ContainerBackupIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerBackupIncludes) SetTo(v ContainerBackupIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerBackupIncludes) Get() (v ContainerBackupIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerBackupIncludes) Or(d ContainerBackupIncludes) ContainerBackupIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerBackupStateError returns new OptContainerBackupStateError with value set to v.
func NewOptContainerBackupStateError(v ContainerBackupStateError) OptContainerBackupStateError {
	return OptContainerBackupStateError{
		Value: v,
		Set:   true,
	}
}

// OptContainerBackupStateError is optional ContainerBackupStateError.
type OptContainerBackupStateError struct {
	Value ContainerBackupStateError
	Set   bool
}

// IsSet returns true if OptContainerBackupStateError was set.
func (o OptContainerBackupStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerBackupStateError) Reset() {
	var v ContainerBackupStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerBackupStateError) SetTo(v ContainerBackupStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerBackupStateError) Get() (v ContainerBackupStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerBackupStateError) Or(d ContainerBackupStateError) ContainerBackupStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerCreateStepOptions returns new OptContainerCreateStepOptions with value set to v.
func NewOptContainerCreateStepOptions(v ContainerCreateStepOptions) OptContainerCreateStepOptions {
	return OptContainerCreateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerCreateStepOptions is optional ContainerCreateStepOptions.
type OptContainerCreateStepOptions struct {
	Value ContainerCreateStepOptions
	Set   bool
}

// IsSet returns true if OptContainerCreateStepOptions was set.
func (o OptContainerCreateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerCreateStepOptions) Reset() {
	var v ContainerCreateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerCreateStepOptions) SetTo(v ContainerCreateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerCreateStepOptions) Get() (v ContainerCreateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerCreateStepOptions) Or(d ContainerCreateStepOptions) ContainerCreateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeleteStepOptions returns new OptContainerDeleteStepOptions with value set to v.
func NewOptContainerDeleteStepOptions(v ContainerDeleteStepOptions) OptContainerDeleteStepOptions {
	return OptContainerDeleteStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeleteStepOptions is optional ContainerDeleteStepOptions.
type OptContainerDeleteStepOptions struct {
	Value ContainerDeleteStepOptions
	Set   bool
}

// IsSet returns true if OptContainerDeleteStepOptions was set.
func (o OptContainerDeleteStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeleteStepOptions) Reset() {
	var v ContainerDeleteStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeleteStepOptions) SetTo(v ContainerDeleteStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeleteStepOptions) Get() (v ContainerDeleteStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeleteStepOptions) Or(d ContainerDeleteStepOptions) ContainerDeleteStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployConstraints returns new OptContainerDeployConstraints with value set to v.
func NewOptContainerDeployConstraints(v ContainerDeployConstraints) OptContainerDeployConstraints {
	return OptContainerDeployConstraints{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployConstraints is optional ContainerDeployConstraints.
type OptContainerDeployConstraints struct {
	Value ContainerDeployConstraints
	Set   bool
}

// IsSet returns true if OptContainerDeployConstraints was set.
func (o OptContainerDeployConstraints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployConstraints) Reset() {
	var v ContainerDeployConstraints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployConstraints) SetTo(v ContainerDeployConstraints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployConstraints) Get() (v ContainerDeployConstraints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployConstraints) Or(d ContainerDeployConstraints) ContainerDeployConstraints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployConstraintsNode returns new OptContainerDeployConstraintsNode with value set to v.
func NewOptContainerDeployConstraintsNode(v ContainerDeployConstraintsNode) OptContainerDeployConstraintsNode {
	return OptContainerDeployConstraintsNode{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployConstraintsNode is optional ContainerDeployConstraintsNode.
type OptContainerDeployConstraintsNode struct {
	Value ContainerDeployConstraintsNode
	Set   bool
}

// IsSet returns true if OptContainerDeployConstraintsNode was set.
func (o OptContainerDeployConstraintsNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployConstraintsNode) Reset() {
	var v ContainerDeployConstraintsNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployConstraintsNode) SetTo(v ContainerDeployConstraintsNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployConstraintsNode) Get() (v ContainerDeployConstraintsNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployConstraintsNode) Or(d ContainerDeployConstraintsNode) ContainerDeployConstraintsNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployHealthCheck returns new OptContainerDeployHealthCheck with value set to v.
func NewOptContainerDeployHealthCheck(v ContainerDeployHealthCheck) OptContainerDeployHealthCheck {
	return OptContainerDeployHealthCheck{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployHealthCheck is optional ContainerDeployHealthCheck.
type OptContainerDeployHealthCheck struct {
	Value ContainerDeployHealthCheck
	Set   bool
}

// IsSet returns true if OptContainerDeployHealthCheck was set.
func (o OptContainerDeployHealthCheck) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployHealthCheck) Reset() {
	var v ContainerDeployHealthCheck
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployHealthCheck) SetTo(v ContainerDeployHealthCheck) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployHealthCheck) Get() (v ContainerDeployHealthCheck, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployHealthCheck) Or(d ContainerDeployHealthCheck) ContainerDeployHealthCheck {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployRestart returns new OptContainerDeployRestart with value set to v.
func NewOptContainerDeployRestart(v ContainerDeployRestart) OptContainerDeployRestart {
	return OptContainerDeployRestart{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployRestart is optional ContainerDeployRestart.
type OptContainerDeployRestart struct {
	Value ContainerDeployRestart
	Set   bool
}

// IsSet returns true if OptContainerDeployRestart was set.
func (o OptContainerDeployRestart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployRestart) Reset() {
	var v ContainerDeployRestart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployRestart) SetTo(v ContainerDeployRestart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployRestart) Get() (v ContainerDeployRestart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployRestart) Or(d ContainerDeployRestart) ContainerDeployRestart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployShutdown returns new OptContainerDeployShutdown with value set to v.
func NewOptContainerDeployShutdown(v ContainerDeployShutdown) OptContainerDeployShutdown {
	return OptContainerDeployShutdown{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployShutdown is optional ContainerDeployShutdown.
type OptContainerDeployShutdown struct {
	Value ContainerDeployShutdown
	Set   bool
}

// IsSet returns true if OptContainerDeployShutdown was set.
func (o OptContainerDeployShutdown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployShutdown) Reset() {
	var v ContainerDeployShutdown
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployShutdown) SetTo(v ContainerDeployShutdown) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployShutdown) Get() (v ContainerDeployShutdown, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployShutdown) Or(d ContainerDeployShutdown) ContainerDeployShutdown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployStartup returns new OptContainerDeployStartup with value set to v.
func NewOptContainerDeployStartup(v ContainerDeployStartup) OptContainerDeployStartup {
	return OptContainerDeployStartup{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployStartup is optional ContainerDeployStartup.
type OptContainerDeployStartup struct {
	Value ContainerDeployStartup
	Set   bool
}

// IsSet returns true if OptContainerDeployStartup was set.
func (o OptContainerDeployStartup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployStartup) Reset() {
	var v ContainerDeployStartup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployStartup) SetTo(v ContainerDeployStartup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployStartup) Get() (v ContainerDeployStartup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployStartup) Or(d ContainerDeployStartup) ContainerDeployStartup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployStateful returns new OptContainerDeployStateful with value set to v.
func NewOptContainerDeployStateful(v ContainerDeployStateful) OptContainerDeployStateful {
	return OptContainerDeployStateful{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployStateful is optional ContainerDeployStateful.
type OptContainerDeployStateful struct {
	Value ContainerDeployStateful
	Set   bool
}

// IsSet returns true if OptContainerDeployStateful was set.
func (o OptContainerDeployStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployStateful) Reset() {
	var v ContainerDeployStateful
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployStateful) SetTo(v ContainerDeployStateful) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployStateful) Get() (v ContainerDeployStateful, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployStateful) Or(d ContainerDeployStateful) ContainerDeployStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployTelemetry returns new OptContainerDeployTelemetry with value set to v.
func NewOptContainerDeployTelemetry(v ContainerDeployTelemetry) OptContainerDeployTelemetry {
	return OptContainerDeployTelemetry{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployTelemetry is optional ContainerDeployTelemetry.
type OptContainerDeployTelemetry struct {
	Value ContainerDeployTelemetry
	Set   bool
}

// IsSet returns true if OptContainerDeployTelemetry was set.
func (o OptContainerDeployTelemetry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployTelemetry) Reset() {
	var v ContainerDeployTelemetry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployTelemetry) SetTo(v ContainerDeployTelemetry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployTelemetry) Get() (v ContainerDeployTelemetry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployTelemetry) Or(d ContainerDeployTelemetry) ContainerDeployTelemetry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerDeployUpdate returns new OptContainerDeployUpdate with value set to v.
func NewOptContainerDeployUpdate(v ContainerDeployUpdate) OptContainerDeployUpdate {
	return OptContainerDeployUpdate{
		Value: v,
		Set:   true,
	}
}

// OptContainerDeployUpdate is optional ContainerDeployUpdate.
type OptContainerDeployUpdate struct {
	Value ContainerDeployUpdate
	Set   bool
}

// IsSet returns true if OptContainerDeployUpdate was set.
func (o OptContainerDeployUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerDeployUpdate) Reset() {
	var v ContainerDeployUpdate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerDeployUpdate) SetTo(v ContainerDeployUpdate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerDeployUpdate) Get() (v ContainerDeployUpdate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerDeployUpdate) Or(d ContainerDeployUpdate) ContainerDeployUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIncludes returns new OptContainerIncludes with value set to v.
func NewOptContainerIncludes(v ContainerIncludes) OptContainerIncludes {
	return OptContainerIncludes{
		Value: v,
		Set:   true,
	}
}

// OptContainerIncludes is optional ContainerIncludes.
type OptContainerIncludes struct {
	Value ContainerIncludes
	Set   bool
}

// IsSet returns true if OptContainerIncludes was set.
func (o OptContainerIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIncludes) Reset() {
	var v ContainerIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIncludes) SetTo(v ContainerIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIncludes) Get() (v ContainerIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIncludes) Or(d ContainerIncludes) ContainerIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrations returns new OptContainerIntegrations with value set to v.
func NewOptContainerIntegrations(v ContainerIntegrations) OptContainerIntegrations {
	return OptContainerIntegrations{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrations is optional ContainerIntegrations.
type OptContainerIntegrations struct {
	Value ContainerIntegrations
	Set   bool
}

// IsSet returns true if OptContainerIntegrations was set.
func (o OptContainerIntegrations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrations) Reset() {
	var v ContainerIntegrations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrations) SetTo(v ContainerIntegrations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrations) Get() (v ContainerIntegrations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrations) Or(d ContainerIntegrations) ContainerIntegrations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsBackups returns new OptContainerIntegrationsBackups with value set to v.
func NewOptContainerIntegrationsBackups(v ContainerIntegrationsBackups) OptContainerIntegrationsBackups {
	return OptContainerIntegrationsBackups{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsBackups is optional ContainerIntegrationsBackups.
type OptContainerIntegrationsBackups struct {
	Value ContainerIntegrationsBackups
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsBackups was set.
func (o OptContainerIntegrationsBackups) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsBackups) Reset() {
	var v ContainerIntegrationsBackups
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsBackups) SetTo(v ContainerIntegrationsBackups) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsBackups) Get() (v ContainerIntegrationsBackups, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsBackups) Or(d ContainerIntegrationsBackups) ContainerIntegrationsBackups {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsLetsEncrypt returns new OptContainerIntegrationsLetsEncrypt with value set to v.
func NewOptContainerIntegrationsLetsEncrypt(v ContainerIntegrationsLetsEncrypt) OptContainerIntegrationsLetsEncrypt {
	return OptContainerIntegrationsLetsEncrypt{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsLetsEncrypt is optional ContainerIntegrationsLetsEncrypt.
type OptContainerIntegrationsLetsEncrypt struct {
	Value ContainerIntegrationsLetsEncrypt
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsLetsEncrypt was set.
func (o OptContainerIntegrationsLetsEncrypt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsLetsEncrypt) Reset() {
	var v ContainerIntegrationsLetsEncrypt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsLetsEncrypt) SetTo(v ContainerIntegrationsLetsEncrypt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsLetsEncrypt) Get() (v ContainerIntegrationsLetsEncrypt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsLetsEncrypt) Or(d ContainerIntegrationsLetsEncrypt) ContainerIntegrationsLetsEncrypt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsWebhooks returns new OptContainerIntegrationsWebhooks with value set to v.
func NewOptContainerIntegrationsWebhooks(v ContainerIntegrationsWebhooks) OptContainerIntegrationsWebhooks {
	return OptContainerIntegrationsWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsWebhooks is optional ContainerIntegrationsWebhooks.
type OptContainerIntegrationsWebhooks struct {
	Value ContainerIntegrationsWebhooks
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsWebhooks was set.
func (o OptContainerIntegrationsWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsWebhooks) Reset() {
	var v ContainerIntegrationsWebhooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsWebhooks) SetTo(v ContainerIntegrationsWebhooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsWebhooks) Get() (v ContainerIntegrationsWebhooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsWebhooks) Or(d ContainerIntegrationsWebhooks) ContainerIntegrationsWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerIntegrationsWebhooksEvents returns new OptContainerIntegrationsWebhooksEvents with value set to v.
func NewOptContainerIntegrationsWebhooksEvents(v ContainerIntegrationsWebhooksEvents) OptContainerIntegrationsWebhooksEvents {
	return OptContainerIntegrationsWebhooksEvents{
		Value: v,
		Set:   true,
	}
}

// OptContainerIntegrationsWebhooksEvents is optional ContainerIntegrationsWebhooksEvents.
type OptContainerIntegrationsWebhooksEvents struct {
	Value ContainerIntegrationsWebhooksEvents
	Set   bool
}

// IsSet returns true if OptContainerIntegrationsWebhooksEvents was set.
func (o OptContainerIntegrationsWebhooksEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerIntegrationsWebhooksEvents) Reset() {
	var v ContainerIntegrationsWebhooksEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerIntegrationsWebhooksEvents) SetTo(v ContainerIntegrationsWebhooksEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerIntegrationsWebhooksEvents) Get() (v ContainerIntegrationsWebhooksEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerIntegrationsWebhooksEvents) Or(d ContainerIntegrationsWebhooksEvents) ContainerIntegrationsWebhooksEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerReimageStepDetailsOptions returns new OptContainerReimageStepDetailsOptions with value set to v.
func NewOptContainerReimageStepDetailsOptions(v ContainerReimageStepDetailsOptions) OptContainerReimageStepDetailsOptions {
	return OptContainerReimageStepDetailsOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerReimageStepDetailsOptions is optional ContainerReimageStepDetailsOptions.
type OptContainerReimageStepDetailsOptions struct {
	Value ContainerReimageStepDetailsOptions
	Set   bool
}

// IsSet returns true if OptContainerReimageStepDetailsOptions was set.
func (o OptContainerReimageStepDetailsOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerReimageStepDetailsOptions) Reset() {
	var v ContainerReimageStepDetailsOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerReimageStepDetailsOptions) SetTo(v ContainerReimageStepDetailsOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerReimageStepDetailsOptions) Get() (v ContainerReimageStepDetailsOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerReimageStepDetailsOptions) Or(d ContainerReimageStepDetailsOptions) ContainerReimageStepDetailsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerReimageStepOptions returns new OptContainerReimageStepOptions with value set to v.
func NewOptContainerReimageStepOptions(v ContainerReimageStepOptions) OptContainerReimageStepOptions {
	return OptContainerReimageStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerReimageStepOptions is optional ContainerReimageStepOptions.
type OptContainerReimageStepOptions struct {
	Value ContainerReimageStepOptions
	Set   bool
}

// IsSet returns true if OptContainerReimageStepOptions was set.
func (o OptContainerReimageStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerReimageStepOptions) Reset() {
	var v ContainerReimageStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerReimageStepOptions) SetTo(v ContainerReimageStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerReimageStepOptions) Get() (v ContainerReimageStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerReimageStepOptions) Or(d ContainerReimageStepOptions) ContainerReimageStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerResources returns new OptContainerResources with value set to v.
func NewOptContainerResources(v ContainerResources) OptContainerResources {
	return OptContainerResources{
		Value: v,
		Set:   true,
	}
}

// OptContainerResources is optional ContainerResources.
type OptContainerResources struct {
	Value ContainerResources
	Set   bool
}

// IsSet returns true if OptContainerResources was set.
func (o OptContainerResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerResources) Reset() {
	var v ContainerResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerResources) SetTo(v ContainerResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerResources) Get() (v ContainerResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerResources) Or(d ContainerResources) ContainerResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerResourcesCPUShares returns new OptContainerResourcesCPUShares with value set to v.
func NewOptContainerResourcesCPUShares(v ContainerResourcesCPUShares) OptContainerResourcesCPUShares {
	return OptContainerResourcesCPUShares{
		Value: v,
		Set:   true,
	}
}

// OptContainerResourcesCPUShares is optional ContainerResourcesCPUShares.
type OptContainerResourcesCPUShares struct {
	Value ContainerResourcesCPUShares
	Set   bool
}

// IsSet returns true if OptContainerResourcesCPUShares was set.
func (o OptContainerResourcesCPUShares) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerResourcesCPUShares) Reset() {
	var v ContainerResourcesCPUShares
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerResourcesCPUShares) SetTo(v ContainerResourcesCPUShares) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerResourcesCPUShares) Get() (v ContainerResourcesCPUShares, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerResourcesCPUShares) Or(d ContainerResourcesCPUShares) ContainerResourcesCPUShares {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRestartStepOptions returns new OptContainerRestartStepOptions with value set to v.
func NewOptContainerRestartStepOptions(v ContainerRestartStepOptions) OptContainerRestartStepOptions {
	return OptContainerRestartStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerRestartStepOptions is optional ContainerRestartStepOptions.
type OptContainerRestartStepOptions struct {
	Value ContainerRestartStepOptions
	Set   bool
}

// IsSet returns true if OptContainerRestartStepOptions was set.
func (o OptContainerRestartStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRestartStepOptions) Reset() {
	var v ContainerRestartStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRestartStepOptions) SetTo(v ContainerRestartStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRestartStepOptions) Get() (v ContainerRestartStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRestartStepOptions) Or(d ContainerRestartStepOptions) ContainerRestartStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntime returns new OptContainerRuntime with value set to v.
func NewOptContainerRuntime(v ContainerRuntime) OptContainerRuntime {
	return OptContainerRuntime{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntime is optional ContainerRuntime.
type OptContainerRuntime struct {
	Value ContainerRuntime
	Set   bool
}

// IsSet returns true if OptContainerRuntime was set.
func (o OptContainerRuntime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntime) Reset() {
	var v ContainerRuntime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntime) SetTo(v ContainerRuntime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntime) Get() (v ContainerRuntime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntime) Or(d ContainerRuntime) ContainerRuntime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeEnvironmentVars returns new OptContainerRuntimeEnvironmentVars with value set to v.
func NewOptContainerRuntimeEnvironmentVars(v ContainerRuntimeEnvironmentVars) OptContainerRuntimeEnvironmentVars {
	return OptContainerRuntimeEnvironmentVars{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeEnvironmentVars is optional ContainerRuntimeEnvironmentVars.
type OptContainerRuntimeEnvironmentVars struct {
	Value ContainerRuntimeEnvironmentVars
	Set   bool
}

// IsSet returns true if OptContainerRuntimeEnvironmentVars was set.
func (o OptContainerRuntimeEnvironmentVars) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeEnvironmentVars) Reset() {
	var v ContainerRuntimeEnvironmentVars
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeEnvironmentVars) SetTo(v ContainerRuntimeEnvironmentVars) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeEnvironmentVars) Get() (v ContainerRuntimeEnvironmentVars, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeEnvironmentVars) Or(d ContainerRuntimeEnvironmentVars) ContainerRuntimeEnvironmentVars {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeRlimits returns new OptContainerRuntimeRlimits with value set to v.
func NewOptContainerRuntimeRlimits(v ContainerRuntimeRlimits) OptContainerRuntimeRlimits {
	return OptContainerRuntimeRlimits{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeRlimits is optional ContainerRuntimeRlimits.
type OptContainerRuntimeRlimits struct {
	Value ContainerRuntimeRlimits
	Set   bool
}

// IsSet returns true if OptContainerRuntimeRlimits was set.
func (o OptContainerRuntimeRlimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeRlimits) Reset() {
	var v ContainerRuntimeRlimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeRlimits) SetTo(v ContainerRuntimeRlimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeRlimits) Get() (v ContainerRuntimeRlimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeRlimits) Or(d ContainerRuntimeRlimits) ContainerRuntimeRlimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeRootfs returns new OptContainerRuntimeRootfs with value set to v.
func NewOptContainerRuntimeRootfs(v ContainerRuntimeRootfs) OptContainerRuntimeRootfs {
	return OptContainerRuntimeRootfs{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeRootfs is optional ContainerRuntimeRootfs.
type OptContainerRuntimeRootfs struct {
	Value ContainerRuntimeRootfs
	Set   bool
}

// IsSet returns true if OptContainerRuntimeRootfs was set.
func (o OptContainerRuntimeRootfs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeRootfs) Reset() {
	var v ContainerRuntimeRootfs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeRootfs) SetTo(v ContainerRuntimeRootfs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeRootfs) Get() (v ContainerRuntimeRootfs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeRootfs) Or(d ContainerRuntimeRootfs) ContainerRuntimeRootfs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerRuntimeSysctl returns new OptContainerRuntimeSysctl with value set to v.
func NewOptContainerRuntimeSysctl(v ContainerRuntimeSysctl) OptContainerRuntimeSysctl {
	return OptContainerRuntimeSysctl{
		Value: v,
		Set:   true,
	}
}

// OptContainerRuntimeSysctl is optional ContainerRuntimeSysctl.
type OptContainerRuntimeSysctl struct {
	Value ContainerRuntimeSysctl
	Set   bool
}

// IsSet returns true if OptContainerRuntimeSysctl was set.
func (o OptContainerRuntimeSysctl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerRuntimeSysctl) Reset() {
	var v ContainerRuntimeSysctl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerRuntimeSysctl) SetTo(v ContainerRuntimeSysctl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerRuntimeSysctl) Get() (v ContainerRuntimeSysctl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerRuntimeSysctl) Or(d ContainerRuntimeSysctl) ContainerRuntimeSysctl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerScale returns new OptContainerScale with value set to v.
func NewOptContainerScale(v ContainerScale) OptContainerScale {
	return OptContainerScale{
		Value: v,
		Set:   true,
	}
}

// OptContainerScale is optional ContainerScale.
type OptContainerScale struct {
	Value ContainerScale
	Set   bool
}

// IsSet returns true if OptContainerScale was set.
func (o OptContainerScale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerScale) Reset() {
	var v ContainerScale
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerScale) SetTo(v ContainerScale) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerScale) Get() (v ContainerScale, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerScale) Or(d ContainerScale) ContainerScale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStartStepOptions returns new OptContainerStartStepOptions with value set to v.
func NewOptContainerStartStepOptions(v ContainerStartStepOptions) OptContainerStartStepOptions {
	return OptContainerStartStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerStartStepOptions is optional ContainerStartStepOptions.
type OptContainerStartStepOptions struct {
	Value ContainerStartStepOptions
	Set   bool
}

// IsSet returns true if OptContainerStartStepOptions was set.
func (o OptContainerStartStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStartStepOptions) Reset() {
	var v ContainerStartStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStartStepOptions) SetTo(v ContainerStartStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStartStepOptions) Get() (v ContainerStartStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStartStepOptions) Or(d ContainerStartStepOptions) ContainerStartStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStateDesired returns new OptContainerStateDesired with value set to v.
func NewOptContainerStateDesired(v ContainerStateDesired) OptContainerStateDesired {
	return OptContainerStateDesired{
		Value: v,
		Set:   true,
	}
}

// OptContainerStateDesired is optional ContainerStateDesired.
type OptContainerStateDesired struct {
	Value ContainerStateDesired
	Set   bool
}

// IsSet returns true if OptContainerStateDesired was set.
func (o OptContainerStateDesired) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStateDesired) Reset() {
	var v ContainerStateDesired
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStateDesired) SetTo(v ContainerStateDesired) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStateDesired) Get() (v ContainerStateDesired, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStateDesired) Or(d ContainerStateDesired) ContainerStateDesired {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStateError returns new OptContainerStateError with value set to v.
func NewOptContainerStateError(v ContainerStateError) OptContainerStateError {
	return OptContainerStateError{
		Value: v,
		Set:   true,
	}
}

// OptContainerStateError is optional ContainerStateError.
type OptContainerStateError struct {
	Value ContainerStateError
	Set   bool
}

// IsSet returns true if OptContainerStateError was set.
func (o OptContainerStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStateError) Reset() {
	var v ContainerStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStateError) SetTo(v ContainerStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStateError) Get() (v ContainerStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStateError) Or(d ContainerStateError) ContainerStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerStopStepOptions returns new OptContainerStopStepOptions with value set to v.
func NewOptContainerStopStepOptions(v ContainerStopStepOptions) OptContainerStopStepOptions {
	return OptContainerStopStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptContainerStopStepOptions is optional ContainerStopStepOptions.
type OptContainerStopStepOptions struct {
	Value ContainerStopStepOptions
	Set   bool
}

// IsSet returns true if OptContainerStopStepOptions was set.
func (o OptContainerStopStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerStopStepOptions) Reset() {
	var v ContainerStopStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerStopStepOptions) SetTo(v ContainerStopStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerStopStepOptions) Get() (v ContainerStopStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerStopStepOptions) Or(d ContainerStopStepOptions) ContainerStopStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerVolumeLocal returns new OptContainerVolumeLocal with value set to v.
func NewOptContainerVolumeLocal(v ContainerVolumeLocal) OptContainerVolumeLocal {
	return OptContainerVolumeLocal{
		Value: v,
		Set:   true,
	}
}

// OptContainerVolumeLocal is optional ContainerVolumeLocal.
type OptContainerVolumeLocal struct {
	Value ContainerVolumeLocal
	Set   bool
}

// IsSet returns true if OptContainerVolumeLocal was set.
func (o OptContainerVolumeLocal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerVolumeLocal) Reset() {
	var v ContainerVolumeLocal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerVolumeLocal) SetTo(v ContainerVolumeLocal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerVolumeLocal) Get() (v ContainerVolumeLocal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerVolumeLocal) Or(d ContainerVolumeLocal) ContainerVolumeLocal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainerVolumeRemoteAccess returns new OptContainerVolumeRemoteAccess with value set to v.
func NewOptContainerVolumeRemoteAccess(v ContainerVolumeRemoteAccess) OptContainerVolumeRemoteAccess {
	return OptContainerVolumeRemoteAccess{
		Value: v,
		Set:   true,
	}
}

// OptContainerVolumeRemoteAccess is optional ContainerVolumeRemoteAccess.
type OptContainerVolumeRemoteAccess struct {
	Value ContainerVolumeRemoteAccess
	Set   bool
}

// IsSet returns true if OptContainerVolumeRemoteAccess was set.
func (o OptContainerVolumeRemoteAccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainerVolumeRemoteAccess) Reset() {
	var v ContainerVolumeRemoteAccess
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainerVolumeRemoteAccess) SetTo(v ContainerVolumeRemoteAccess) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainerVolumeRemoteAccess) Get() (v ContainerVolumeRemoteAccess, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainerVolumeRemoteAccess) Or(d ContainerVolumeRemoteAccess) ContainerVolumeRemoteAccess {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainersIncludes returns new OptContainersIncludes with value set to v.
func NewOptContainersIncludes(v ContainersIncludes) OptContainersIncludes {
	return OptContainersIncludes{
		Value: v,
		Set:   true,
	}
}

// OptContainersIncludes is optional ContainersIncludes.
type OptContainersIncludes struct {
	Value ContainersIncludes
	Set   bool
}

// IsSet returns true if OptContainersIncludes was set.
func (o OptContainersIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainersIncludes) Reset() {
	var v ContainersIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainersIncludes) SetTo(v ContainersIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainersIncludes) Get() (v ContainersIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainersIncludes) Or(d ContainersIncludes) ContainersIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContainersMeta returns new OptContainersMeta with value set to v.
func NewOptContainersMeta(v ContainersMeta) OptContainersMeta {
	return OptContainersMeta{
		Value: v,
		Set:   true,
	}
}

// OptContainersMeta is optional ContainersMeta.
type OptContainersMeta struct {
	Value ContainersMeta
	Set   bool
}

// IsSet returns true if OptContainersMeta was set.
func (o OptContainersMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContainersMeta) Reset() {
	var v ContainersMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContainersMeta) SetTo(v ContainersMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContainersMeta) Get() (v ContainersMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContainersMeta) Or(d ContainersMeta) ContainersMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptControllers returns new OptControllers with value set to v.
func NewOptControllers(v Controllers) OptControllers {
	return OptControllers{
		Value: v,
		Set:   true,
	}
}

// OptControllers is optional Controllers.
type OptControllers struct {
	Value Controllers
	Set   bool
}

// IsSet returns true if OptControllers was set.
func (o OptControllers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptControllers) Reset() {
	var v Controllers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptControllers) SetTo(v Controllers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptControllers) Get() (v Controllers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptControllers) Or(d Controllers) Controllers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateApiKeyReq returns new OptCreateApiKeyReq with value set to v.
func NewOptCreateApiKeyReq(v CreateApiKeyReq) OptCreateApiKeyReq {
	return OptCreateApiKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateApiKeyReq is optional CreateApiKeyReq.
type OptCreateApiKeyReq struct {
	Value CreateApiKeyReq
	Set   bool
}

// IsSet returns true if OptCreateApiKeyReq was set.
func (o OptCreateApiKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateApiKeyReq) Reset() {
	var v CreateApiKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateApiKeyReq) SetTo(v CreateApiKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateApiKeyReq) Get() (v CreateApiKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateApiKeyReq) Or(d CreateApiKeyReq) CreateApiKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateApiKeyReqCapabilities returns new OptCreateApiKeyReqCapabilities with value set to v.
func NewOptCreateApiKeyReqCapabilities(v CreateApiKeyReqCapabilities) OptCreateApiKeyReqCapabilities {
	return OptCreateApiKeyReqCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptCreateApiKeyReqCapabilities is optional CreateApiKeyReqCapabilities.
type OptCreateApiKeyReqCapabilities struct {
	Value CreateApiKeyReqCapabilities
	Set   bool
}

// IsSet returns true if OptCreateApiKeyReqCapabilities was set.
func (o OptCreateApiKeyReqCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateApiKeyReqCapabilities) Reset() {
	var v CreateApiKeyReqCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateApiKeyReqCapabilities) SetTo(v CreateApiKeyReqCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateApiKeyReqCapabilities) Get() (v CreateApiKeyReqCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateApiKeyReqCapabilities) Or(d CreateApiKeyReqCapabilities) CreateApiKeyReqCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAutoScaleGroupReq returns new OptCreateAutoScaleGroupReq with value set to v.
func NewOptCreateAutoScaleGroupReq(v CreateAutoScaleGroupReq) OptCreateAutoScaleGroupReq {
	return OptCreateAutoScaleGroupReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateAutoScaleGroupReq is optional CreateAutoScaleGroupReq.
type OptCreateAutoScaleGroupReq struct {
	Value CreateAutoScaleGroupReq
	Set   bool
}

// IsSet returns true if OptCreateAutoScaleGroupReq was set.
func (o OptCreateAutoScaleGroupReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateAutoScaleGroupReq) Reset() {
	var v CreateAutoScaleGroupReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAutoScaleGroupReq) SetTo(v CreateAutoScaleGroupReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAutoScaleGroupReq) Get() (v CreateAutoScaleGroupReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAutoScaleGroupReq) Or(d CreateAutoScaleGroupReq) CreateAutoScaleGroupReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateBillingMethodReq returns new OptCreateBillingMethodReq with value set to v.
func NewOptCreateBillingMethodReq(v CreateBillingMethodReq) OptCreateBillingMethodReq {
	return OptCreateBillingMethodReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateBillingMethodReq is optional CreateBillingMethodReq.
type OptCreateBillingMethodReq struct {
	Value CreateBillingMethodReq
	Set   bool
}

// IsSet returns true if OptCreateBillingMethodReq was set.
func (o OptCreateBillingMethodReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateBillingMethodReq) Reset() {
	var v CreateBillingMethodReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateBillingMethodReq) SetTo(v CreateBillingMethodReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateBillingMethodReq) Get() (v CreateBillingMethodReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateBillingMethodReq) Or(d CreateBillingMethodReq) CreateBillingMethodReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerBackupJobReq returns new OptCreateContainerBackupJobReq with value set to v.
func NewOptCreateContainerBackupJobReq(v CreateContainerBackupJobReq) OptCreateContainerBackupJobReq {
	return OptCreateContainerBackupJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerBackupJobReq is optional CreateContainerBackupJobReq.
type OptCreateContainerBackupJobReq struct {
	Value CreateContainerBackupJobReq
	Set   bool
}

// IsSet returns true if OptCreateContainerBackupJobReq was set.
func (o OptCreateContainerBackupJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerBackupJobReq) Reset() {
	var v CreateContainerBackupJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerBackupJobReq) SetTo(v CreateContainerBackupJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerBackupJobReq) Get() (v CreateContainerBackupJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerBackupJobReq) Or(d CreateContainerBackupJobReq) CreateContainerBackupJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerJobReq returns new OptCreateContainerJobReq with value set to v.
func NewOptCreateContainerJobReq(v CreateContainerJobReq) OptCreateContainerJobReq {
	return OptCreateContainerJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerJobReq is optional CreateContainerJobReq.
type OptCreateContainerJobReq struct {
	Value CreateContainerJobReq
	Set   bool
}

// IsSet returns true if OptCreateContainerJobReq was set.
func (o OptCreateContainerJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerJobReq) Reset() {
	var v CreateContainerJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerJobReq) SetTo(v CreateContainerJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerJobReq) Get() (v CreateContainerJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerJobReq) Or(d CreateContainerJobReq) CreateContainerJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateContainerReq returns new OptCreateContainerReq with value set to v.
func NewOptCreateContainerReq(v CreateContainerReq) OptCreateContainerReq {
	return OptCreateContainerReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateContainerReq is optional CreateContainerReq.
type OptCreateContainerReq struct {
	Value CreateContainerReq
	Set   bool
}

// IsSet returns true if OptCreateContainerReq was set.
func (o OptCreateContainerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateContainerReq) Reset() {
	var v CreateContainerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateContainerReq) SetTo(v CreateContainerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateContainerReq) Get() (v CreateContainerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateContainerReq) Or(d CreateContainerReq) CreateContainerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSZoneJobReq returns new OptCreateDNSZoneJobReq with value set to v.
func NewOptCreateDNSZoneJobReq(v CreateDNSZoneJobReq) OptCreateDNSZoneJobReq {
	return OptCreateDNSZoneJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSZoneJobReq is optional CreateDNSZoneJobReq.
type OptCreateDNSZoneJobReq struct {
	Value CreateDNSZoneJobReq
	Set   bool
}

// IsSet returns true if OptCreateDNSZoneJobReq was set.
func (o OptCreateDNSZoneJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSZoneJobReq) Reset() {
	var v CreateDNSZoneJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSZoneJobReq) SetTo(v CreateDNSZoneJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSZoneJobReq) Get() (v CreateDNSZoneJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSZoneJobReq) Or(d CreateDNSZoneJobReq) CreateDNSZoneJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSZoneRecordJobReq returns new OptCreateDNSZoneRecordJobReq with value set to v.
func NewOptCreateDNSZoneRecordJobReq(v CreateDNSZoneRecordJobReq) OptCreateDNSZoneRecordJobReq {
	return OptCreateDNSZoneRecordJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSZoneRecordJobReq is optional CreateDNSZoneRecordJobReq.
type OptCreateDNSZoneRecordJobReq struct {
	Value CreateDNSZoneRecordJobReq
	Set   bool
}

// IsSet returns true if OptCreateDNSZoneRecordJobReq was set.
func (o OptCreateDNSZoneRecordJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSZoneRecordJobReq) Reset() {
	var v CreateDNSZoneRecordJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSZoneRecordJobReq) SetTo(v CreateDNSZoneRecordJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSZoneRecordJobReq) Get() (v CreateDNSZoneRecordJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSZoneRecordJobReq) Or(d CreateDNSZoneRecordJobReq) CreateDNSZoneRecordJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSZoneRecordReq returns new OptCreateDNSZoneRecordReq with value set to v.
func NewOptCreateDNSZoneRecordReq(v CreateDNSZoneRecordReq) OptCreateDNSZoneRecordReq {
	return OptCreateDNSZoneRecordReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSZoneRecordReq is optional CreateDNSZoneRecordReq.
type OptCreateDNSZoneRecordReq struct {
	Value CreateDNSZoneRecordReq
	Set   bool
}

// IsSet returns true if OptCreateDNSZoneRecordReq was set.
func (o OptCreateDNSZoneRecordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSZoneRecordReq) Reset() {
	var v CreateDNSZoneRecordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSZoneRecordReq) SetTo(v CreateDNSZoneRecordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSZoneRecordReq) Get() (v CreateDNSZoneRecordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSZoneRecordReq) Or(d CreateDNSZoneRecordReq) CreateDNSZoneRecordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDNSZoneReq returns new OptCreateDNSZoneReq with value set to v.
func NewOptCreateDNSZoneReq(v CreateDNSZoneReq) OptCreateDNSZoneReq {
	return OptCreateDNSZoneReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDNSZoneReq is optional CreateDNSZoneReq.
type OptCreateDNSZoneReq struct {
	Value CreateDNSZoneReq
	Set   bool
}

// IsSet returns true if OptCreateDNSZoneReq was set.
func (o OptCreateDNSZoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDNSZoneReq) Reset() {
	var v CreateDNSZoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDNSZoneReq) SetTo(v CreateDNSZoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDNSZoneReq) Get() (v CreateDNSZoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDNSZoneReq) Or(d CreateDNSZoneReq) CreateDNSZoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDiscoveryServiceJobReq returns new OptCreateDiscoveryServiceJobReq with value set to v.
func NewOptCreateDiscoveryServiceJobReq(v CreateDiscoveryServiceJobReq) OptCreateDiscoveryServiceJobReq {
	return OptCreateDiscoveryServiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateDiscoveryServiceJobReq is optional CreateDiscoveryServiceJobReq.
type OptCreateDiscoveryServiceJobReq struct {
	Value CreateDiscoveryServiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateDiscoveryServiceJobReq was set.
func (o OptCreateDiscoveryServiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDiscoveryServiceJobReq) Reset() {
	var v CreateDiscoveryServiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDiscoveryServiceJobReq) SetTo(v CreateDiscoveryServiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDiscoveryServiceJobReq) Get() (v CreateDiscoveryServiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDiscoveryServiceJobReq) Or(d CreateDiscoveryServiceJobReq) CreateDiscoveryServiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateEnvironmentJobReq returns new OptCreateEnvironmentJobReq with value set to v.
func NewOptCreateEnvironmentJobReq(v CreateEnvironmentJobReq) OptCreateEnvironmentJobReq {
	return OptCreateEnvironmentJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateEnvironmentJobReq is optional CreateEnvironmentJobReq.
type OptCreateEnvironmentJobReq struct {
	Value CreateEnvironmentJobReq
	Set   bool
}

// IsSet returns true if OptCreateEnvironmentJobReq was set.
func (o OptCreateEnvironmentJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateEnvironmentJobReq) Reset() {
	var v CreateEnvironmentJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateEnvironmentJobReq) SetTo(v CreateEnvironmentJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateEnvironmentJobReq) Get() (v CreateEnvironmentJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateEnvironmentJobReq) Or(d CreateEnvironmentJobReq) CreateEnvironmentJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateEnvironmentReq returns new OptCreateEnvironmentReq with value set to v.
func NewOptCreateEnvironmentReq(v CreateEnvironmentReq) OptCreateEnvironmentReq {
	return OptCreateEnvironmentReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateEnvironmentReq is optional CreateEnvironmentReq.
type OptCreateEnvironmentReq struct {
	Value CreateEnvironmentReq
	Set   bool
}

// IsSet returns true if OptCreateEnvironmentReq was set.
func (o OptCreateEnvironmentReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateEnvironmentReq) Reset() {
	var v CreateEnvironmentReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateEnvironmentReq) SetTo(v CreateEnvironmentReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateEnvironmentReq) Get() (v CreateEnvironmentReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateEnvironmentReq) Or(d CreateEnvironmentReq) CreateEnvironmentReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubInviteReq returns new OptCreateHubInviteReq with value set to v.
func NewOptCreateHubInviteReq(v CreateHubInviteReq) OptCreateHubInviteReq {
	return OptCreateHubInviteReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubInviteReq is optional CreateHubInviteReq.
type OptCreateHubInviteReq struct {
	Value CreateHubInviteReq
	Set   bool
}

// IsSet returns true if OptCreateHubInviteReq was set.
func (o OptCreateHubInviteReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubInviteReq) Reset() {
	var v CreateHubInviteReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubInviteReq) SetTo(v CreateHubInviteReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubInviteReq) Get() (v CreateHubInviteReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubInviteReq) Or(d CreateHubInviteReq) CreateHubInviteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubInviteReqPermissions returns new OptCreateHubInviteReqPermissions with value set to v.
func NewOptCreateHubInviteReqPermissions(v CreateHubInviteReqPermissions) OptCreateHubInviteReqPermissions {
	return OptCreateHubInviteReqPermissions{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubInviteReqPermissions is optional CreateHubInviteReqPermissions.
type OptCreateHubInviteReqPermissions struct {
	Value CreateHubInviteReqPermissions
	Set   bool
}

// IsSet returns true if OptCreateHubInviteReqPermissions was set.
func (o OptCreateHubInviteReqPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubInviteReqPermissions) Reset() {
	var v CreateHubInviteReqPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubInviteReqPermissions) SetTo(v CreateHubInviteReqPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubInviteReqPermissions) Get() (v CreateHubInviteReqPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubInviteReqPermissions) Or(d CreateHubInviteReqPermissions) CreateHubInviteReqPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateHubReq returns new OptCreateHubReq with value set to v.
func NewOptCreateHubReq(v CreateHubReq) OptCreateHubReq {
	return OptCreateHubReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateHubReq is optional CreateHubReq.
type OptCreateHubReq struct {
	Value CreateHubReq
	Set   bool
}

// IsSet returns true if OptCreateHubReq was set.
func (o OptCreateHubReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateHubReq) Reset() {
	var v CreateHubReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateHubReq) SetTo(v CreateHubReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateHubReq) Get() (v CreateHubReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateHubReq) Or(d CreateHubReq) CreateHubReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageJobReq returns new OptCreateImageJobReq with value set to v.
func NewOptCreateImageJobReq(v CreateImageJobReq) OptCreateImageJobReq {
	return OptCreateImageJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageJobReq is optional CreateImageJobReq.
type OptCreateImageJobReq struct {
	Value CreateImageJobReq
	Set   bool
}

// IsSet returns true if OptCreateImageJobReq was set.
func (o OptCreateImageJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageJobReq) Reset() {
	var v CreateImageJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageJobReq) SetTo(v CreateImageJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageJobReq) Get() (v CreateImageJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageJobReq) Or(d CreateImageJobReq) CreateImageJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageReq returns new OptCreateImageReq with value set to v.
func NewOptCreateImageReq(v CreateImageReq) OptCreateImageReq {
	return OptCreateImageReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageReq is optional CreateImageReq.
type OptCreateImageReq struct {
	Value CreateImageReq
	Set   bool
}

// IsSet returns true if OptCreateImageReq was set.
func (o OptCreateImageReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageReq) Reset() {
	var v CreateImageReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageReq) SetTo(v CreateImageReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageReq) Get() (v CreateImageReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageReq) Or(d CreateImageReq) CreateImageReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageReqBuild returns new OptCreateImageReqBuild with value set to v.
func NewOptCreateImageReqBuild(v CreateImageReqBuild) OptCreateImageReqBuild {
	return OptCreateImageReqBuild{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageReqBuild is optional CreateImageReqBuild.
type OptCreateImageReqBuild struct {
	Value CreateImageReqBuild
	Set   bool
}

// IsSet returns true if OptCreateImageReqBuild was set.
func (o OptCreateImageReqBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageReqBuild) Reset() {
	var v CreateImageReqBuild
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageReqBuild) SetTo(v CreateImageReqBuild) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageReqBuild) Get() (v CreateImageReqBuild, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageReqBuild) Or(d CreateImageReqBuild) CreateImageReqBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageReqBuildArgs returns new OptCreateImageReqBuildArgs with value set to v.
func NewOptCreateImageReqBuildArgs(v CreateImageReqBuildArgs) OptCreateImageReqBuildArgs {
	return OptCreateImageReqBuildArgs{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageReqBuildArgs is optional CreateImageReqBuildArgs.
type OptCreateImageReqBuildArgs struct {
	Value CreateImageReqBuildArgs
	Set   bool
}

// IsSet returns true if OptCreateImageReqBuildArgs was set.
func (o OptCreateImageReqBuildArgs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageReqBuildArgs) Reset() {
	var v CreateImageReqBuildArgs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageReqBuildArgs) SetTo(v CreateImageReqBuildArgs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageReqBuildArgs) Get() (v CreateImageReqBuildArgs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageReqBuildArgs) Or(d CreateImageReqBuildArgs) CreateImageReqBuildArgs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageReqOverride returns new OptCreateImageReqOverride with value set to v.
func NewOptCreateImageReqOverride(v CreateImageReqOverride) OptCreateImageReqOverride {
	return OptCreateImageReqOverride{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageReqOverride is optional CreateImageReqOverride.
type OptCreateImageReqOverride struct {
	Value CreateImageReqOverride
	Set   bool
}

// IsSet returns true if OptCreateImageReqOverride was set.
func (o OptCreateImageReqOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageReqOverride) Reset() {
	var v CreateImageReqOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageReqOverride) SetTo(v CreateImageReqOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageReqOverride) Get() (v CreateImageReqOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageReqOverride) Or(d CreateImageReqOverride) CreateImageReqOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageSourceReq returns new OptCreateImageSourceReq with value set to v.
func NewOptCreateImageSourceReq(v CreateImageSourceReq) OptCreateImageSourceReq {
	return OptCreateImageSourceReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageSourceReq is optional CreateImageSourceReq.
type OptCreateImageSourceReq struct {
	Value CreateImageSourceReq
	Set   bool
}

// IsSet returns true if OptCreateImageSourceReq was set.
func (o OptCreateImageSourceReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageSourceReq) Reset() {
	var v CreateImageSourceReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageSourceReq) SetTo(v CreateImageSourceReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageSourceReq) Get() (v CreateImageSourceReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageSourceReq) Or(d CreateImageSourceReq) CreateImageSourceReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageSourceReqAbout returns new OptCreateImageSourceReqAbout with value set to v.
func NewOptCreateImageSourceReqAbout(v CreateImageSourceReqAbout) OptCreateImageSourceReqAbout {
	return OptCreateImageSourceReqAbout{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageSourceReqAbout is optional CreateImageSourceReqAbout.
type OptCreateImageSourceReqAbout struct {
	Value CreateImageSourceReqAbout
	Set   bool
}

// IsSet returns true if OptCreateImageSourceReqAbout was set.
func (o OptCreateImageSourceReqAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageSourceReqAbout) Reset() {
	var v CreateImageSourceReqAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageSourceReqAbout) SetTo(v CreateImageSourceReqAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageSourceReqAbout) Get() (v CreateImageSourceReqAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageSourceReqAbout) Or(d CreateImageSourceReqAbout) CreateImageSourceReqAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImagesJobReq returns new OptCreateImagesJobReq with value set to v.
func NewOptCreateImagesJobReq(v CreateImagesJobReq) OptCreateImagesJobReq {
	return OptCreateImagesJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateImagesJobReq is optional CreateImagesJobReq.
type OptCreateImagesJobReq struct {
	Value CreateImagesJobReq
	Set   bool
}

// IsSet returns true if OptCreateImagesJobReq was set.
func (o OptCreateImagesJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImagesJobReq) Reset() {
	var v CreateImagesJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImagesJobReq) SetTo(v CreateImagesJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImagesJobReq) Get() (v CreateImagesJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImagesJobReq) Or(d CreateImagesJobReq) CreateImagesJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateInstanceJobReq returns new OptCreateInstanceJobReq with value set to v.
func NewOptCreateInstanceJobReq(v CreateInstanceJobReq) OptCreateInstanceJobReq {
	return OptCreateInstanceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateInstanceJobReq is optional CreateInstanceJobReq.
type OptCreateInstanceJobReq struct {
	Value CreateInstanceJobReq
	Set   bool
}

// IsSet returns true if OptCreateInstanceJobReq was set.
func (o OptCreateInstanceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateInstanceJobReq) Reset() {
	var v CreateInstanceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateInstanceJobReq) SetTo(v CreateInstanceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateInstanceJobReq) Get() (v CreateInstanceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateInstanceJobReq) Or(d CreateInstanceJobReq) CreateInstanceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateIntegrationJobReq returns new OptCreateIntegrationJobReq with value set to v.
func NewOptCreateIntegrationJobReq(v CreateIntegrationJobReq) OptCreateIntegrationJobReq {
	return OptCreateIntegrationJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateIntegrationJobReq is optional CreateIntegrationJobReq.
type OptCreateIntegrationJobReq struct {
	Value CreateIntegrationJobReq
	Set   bool
}

// IsSet returns true if OptCreateIntegrationJobReq was set.
func (o OptCreateIntegrationJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateIntegrationJobReq) Reset() {
	var v CreateIntegrationJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateIntegrationJobReq) SetTo(v CreateIntegrationJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateIntegrationJobReq) Get() (v CreateIntegrationJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateIntegrationJobReq) Or(d CreateIntegrationJobReq) CreateIntegrationJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateIntegrationReqAuth returns new OptCreateIntegrationReqAuth with value set to v.
func NewOptCreateIntegrationReqAuth(v CreateIntegrationReqAuth) OptCreateIntegrationReqAuth {
	return OptCreateIntegrationReqAuth{
		Value: v,
		Set:   true,
	}
}

// OptCreateIntegrationReqAuth is optional CreateIntegrationReqAuth.
type OptCreateIntegrationReqAuth struct {
	Value CreateIntegrationReqAuth
	Set   bool
}

// IsSet returns true if OptCreateIntegrationReqAuth was set.
func (o OptCreateIntegrationReqAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateIntegrationReqAuth) Reset() {
	var v CreateIntegrationReqAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateIntegrationReqAuth) SetTo(v CreateIntegrationReqAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateIntegrationReqAuth) Get() (v CreateIntegrationReqAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateIntegrationReqAuth) Or(d CreateIntegrationReqAuth) CreateIntegrationReqAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateIntegrationReqExtra returns new OptCreateIntegrationReqExtra with value set to v.
func NewOptCreateIntegrationReqExtra(v CreateIntegrationReqExtra) OptCreateIntegrationReqExtra {
	return OptCreateIntegrationReqExtra{
		Value: v,
		Set:   true,
	}
}

// OptCreateIntegrationReqExtra is optional CreateIntegrationReqExtra.
type OptCreateIntegrationReqExtra struct {
	Value CreateIntegrationReqExtra
	Set   bool
}

// IsSet returns true if OptCreateIntegrationReqExtra was set.
func (o OptCreateIntegrationReqExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateIntegrationReqExtra) Reset() {
	var v CreateIntegrationReqExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateIntegrationReqExtra) SetTo(v CreateIntegrationReqExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateIntegrationReqExtra) Get() (v CreateIntegrationReqExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateIntegrationReqExtra) Or(d CreateIntegrationReqExtra) CreateIntegrationReqExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateInvoiceJobReq returns new OptCreateInvoiceJobReq with value set to v.
func NewOptCreateInvoiceJobReq(v CreateInvoiceJobReq) OptCreateInvoiceJobReq {
	return OptCreateInvoiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateInvoiceJobReq is optional CreateInvoiceJobReq.
type OptCreateInvoiceJobReq struct {
	Value CreateInvoiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateInvoiceJobReq was set.
func (o OptCreateInvoiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateInvoiceJobReq) Reset() {
	var v CreateInvoiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateInvoiceJobReq) SetTo(v CreateInvoiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateInvoiceJobReq) Get() (v CreateInvoiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateInvoiceJobReq) Or(d CreateInvoiceJobReq) CreateInvoiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateLoadBalancerServiceJobReq returns new OptCreateLoadBalancerServiceJobReq with value set to v.
func NewOptCreateLoadBalancerServiceJobReq(v CreateLoadBalancerServiceJobReq) OptCreateLoadBalancerServiceJobReq {
	return OptCreateLoadBalancerServiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateLoadBalancerServiceJobReq is optional CreateLoadBalancerServiceJobReq.
type OptCreateLoadBalancerServiceJobReq struct {
	Value CreateLoadBalancerServiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateLoadBalancerServiceJobReq was set.
func (o OptCreateLoadBalancerServiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateLoadBalancerServiceJobReq) Reset() {
	var v CreateLoadBalancerServiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateLoadBalancerServiceJobReq) SetTo(v CreateLoadBalancerServiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateLoadBalancerServiceJobReq) Get() (v CreateLoadBalancerServiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateLoadBalancerServiceJobReq) Or(d CreateLoadBalancerServiceJobReq) CreateLoadBalancerServiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNetworkJobReq returns new OptCreateNetworkJobReq with value set to v.
func NewOptCreateNetworkJobReq(v CreateNetworkJobReq) OptCreateNetworkJobReq {
	return OptCreateNetworkJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateNetworkJobReq is optional CreateNetworkJobReq.
type OptCreateNetworkJobReq struct {
	Value CreateNetworkJobReq
	Set   bool
}

// IsSet returns true if OptCreateNetworkJobReq was set.
func (o OptCreateNetworkJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNetworkJobReq) Reset() {
	var v CreateNetworkJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNetworkJobReq) SetTo(v CreateNetworkJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNetworkJobReq) Get() (v CreateNetworkJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNetworkJobReq) Or(d CreateNetworkJobReq) CreateNetworkJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateNetworkReq returns new OptCreateNetworkReq with value set to v.
func NewOptCreateNetworkReq(v CreateNetworkReq) OptCreateNetworkReq {
	return OptCreateNetworkReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateNetworkReq is optional CreateNetworkReq.
type OptCreateNetworkReq struct {
	Value CreateNetworkReq
	Set   bool
}

// IsSet returns true if OptCreateNetworkReq was set.
func (o OptCreateNetworkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateNetworkReq) Reset() {
	var v CreateNetworkReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateNetworkReq) SetTo(v CreateNetworkReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateNetworkReq) Get() (v CreateNetworkReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateNetworkReq) Or(d CreateNetworkReq) CreateNetworkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderJobReq returns new OptCreateOrderJobReq with value set to v.
func NewOptCreateOrderJobReq(v CreateOrderJobReq) OptCreateOrderJobReq {
	return OptCreateOrderJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderJobReq is optional CreateOrderJobReq.
type OptCreateOrderJobReq struct {
	Value CreateOrderJobReq
	Set   bool
}

// IsSet returns true if OptCreateOrderJobReq was set.
func (o OptCreateOrderJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderJobReq) Reset() {
	var v CreateOrderJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderJobReq) SetTo(v CreateOrderJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderJobReq) Get() (v CreateOrderJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderJobReq) Or(d CreateOrderJobReq) CreateOrderJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderReq returns new OptCreateOrderReq with value set to v.
func NewOptCreateOrderReq(v CreateOrderReq) OptCreateOrderReq {
	return OptCreateOrderReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderReq is optional CreateOrderReq.
type OptCreateOrderReq struct {
	Value CreateOrderReq
	Set   bool
}

// IsSet returns true if OptCreateOrderReq was set.
func (o OptCreateOrderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderReq) Reset() {
	var v CreateOrderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderReq) SetTo(v CreateOrderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderReq) Get() (v CreateOrderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderReq) Or(d CreateOrderReq) CreateOrderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateOrderReqTermLength returns new OptCreateOrderReqTermLength with value set to v.
func NewOptCreateOrderReqTermLength(v CreateOrderReqTermLength) OptCreateOrderReqTermLength {
	return OptCreateOrderReqTermLength{
		Value: v,
		Set:   true,
	}
}

// OptCreateOrderReqTermLength is optional CreateOrderReqTermLength.
type OptCreateOrderReqTermLength struct {
	Value CreateOrderReqTermLength
	Set   bool
}

// IsSet returns true if OptCreateOrderReqTermLength was set.
func (o OptCreateOrderReqTermLength) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateOrderReqTermLength) Reset() {
	var v CreateOrderReqTermLength
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateOrderReqTermLength) SetTo(v CreateOrderReqTermLength) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateOrderReqTermLength) Get() (v CreateOrderReqTermLength, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateOrderReqTermLength) Or(d CreateOrderReqTermLength) CreateOrderReqTermLength {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineJobReq returns new OptCreatePipelineJobReq with value set to v.
func NewOptCreatePipelineJobReq(v CreatePipelineJobReq) OptCreatePipelineJobReq {
	return OptCreatePipelineJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineJobReq is optional CreatePipelineJobReq.
type OptCreatePipelineJobReq struct {
	Value CreatePipelineJobReq
	Set   bool
}

// IsSet returns true if OptCreatePipelineJobReq was set.
func (o OptCreatePipelineJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineJobReq) Reset() {
	var v CreatePipelineJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineJobReq) SetTo(v CreatePipelineJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineJobReq) Get() (v CreatePipelineJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineJobReq) Or(d CreatePipelineJobReq) CreatePipelineJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineJobReqContents returns new OptCreatePipelineJobReqContents with value set to v.
func NewOptCreatePipelineJobReqContents(v CreatePipelineJobReqContents) OptCreatePipelineJobReqContents {
	return OptCreatePipelineJobReqContents{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineJobReqContents is optional CreatePipelineJobReqContents.
type OptCreatePipelineJobReqContents struct {
	Value CreatePipelineJobReqContents
	Set   bool
}

// IsSet returns true if OptCreatePipelineJobReqContents was set.
func (o OptCreatePipelineJobReqContents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineJobReqContents) Reset() {
	var v CreatePipelineJobReqContents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineJobReqContents) SetTo(v CreatePipelineJobReqContents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineJobReqContents) Get() (v CreatePipelineJobReqContents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineJobReqContents) Or(d CreatePipelineJobReqContents) CreatePipelineJobReqContents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineJobReqContentsVariables returns new OptCreatePipelineJobReqContentsVariables with value set to v.
func NewOptCreatePipelineJobReqContentsVariables(v CreatePipelineJobReqContentsVariables) OptCreatePipelineJobReqContentsVariables {
	return OptCreatePipelineJobReqContentsVariables{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineJobReqContentsVariables is optional CreatePipelineJobReqContentsVariables.
type OptCreatePipelineJobReqContentsVariables struct {
	Value CreatePipelineJobReqContentsVariables
	Set   bool
}

// IsSet returns true if OptCreatePipelineJobReqContentsVariables was set.
func (o OptCreatePipelineJobReqContentsVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineJobReqContentsVariables) Reset() {
	var v CreatePipelineJobReqContentsVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineJobReqContentsVariables) SetTo(v CreatePipelineJobReqContentsVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineJobReqContentsVariables) Get() (v CreatePipelineJobReqContentsVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineJobReqContentsVariables) Or(d CreatePipelineJobReqContentsVariables) CreatePipelineJobReqContentsVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineReq returns new OptCreatePipelineReq with value set to v.
func NewOptCreatePipelineReq(v CreatePipelineReq) OptCreatePipelineReq {
	return OptCreatePipelineReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineReq is optional CreatePipelineReq.
type OptCreatePipelineReq struct {
	Value CreatePipelineReq
	Set   bool
}

// IsSet returns true if OptCreatePipelineReq was set.
func (o OptCreatePipelineReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineReq) Reset() {
	var v CreatePipelineReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineReq) SetTo(v CreatePipelineReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineReq) Get() (v CreatePipelineReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineReq) Or(d CreatePipelineReq) CreatePipelineReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePipelineTriggerKeyReq returns new OptCreatePipelineTriggerKeyReq with value set to v.
func NewOptCreatePipelineTriggerKeyReq(v CreatePipelineTriggerKeyReq) OptCreatePipelineTriggerKeyReq {
	return OptCreatePipelineTriggerKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptCreatePipelineTriggerKeyReq is optional CreatePipelineTriggerKeyReq.
type OptCreatePipelineTriggerKeyReq struct {
	Value CreatePipelineTriggerKeyReq
	Set   bool
}

// IsSet returns true if OptCreatePipelineTriggerKeyReq was set.
func (o OptCreatePipelineTriggerKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePipelineTriggerKeyReq) Reset() {
	var v CreatePipelineTriggerKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePipelineTriggerKeyReq) SetTo(v CreatePipelineTriggerKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePipelineTriggerKeyReq) Get() (v CreatePipelineTriggerKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePipelineTriggerKeyReq) Or(d CreatePipelineTriggerKeyReq) CreatePipelineTriggerKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateRoleReq returns new OptCreateRoleReq with value set to v.
func NewOptCreateRoleReq(v CreateRoleReq) OptCreateRoleReq {
	return OptCreateRoleReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateRoleReq is optional CreateRoleReq.
type OptCreateRoleReq struct {
	Value CreateRoleReq
	Set   bool
}

// IsSet returns true if OptCreateRoleReq was set.
func (o OptCreateRoleReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateRoleReq) Reset() {
	var v CreateRoleReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateRoleReq) SetTo(v CreateRoleReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateRoleReq) Get() (v CreateRoleReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateRoleReq) Or(d CreateRoleReq) CreateRoleReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSchedulerServiceJobReq returns new OptCreateSchedulerServiceJobReq with value set to v.
func NewOptCreateSchedulerServiceJobReq(v CreateSchedulerServiceJobReq) OptCreateSchedulerServiceJobReq {
	return OptCreateSchedulerServiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateSchedulerServiceJobReq is optional CreateSchedulerServiceJobReq.
type OptCreateSchedulerServiceJobReq struct {
	Value CreateSchedulerServiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateSchedulerServiceJobReq was set.
func (o OptCreateSchedulerServiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSchedulerServiceJobReq) Reset() {
	var v CreateSchedulerServiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSchedulerServiceJobReq) SetTo(v CreateSchedulerServiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSchedulerServiceJobReq) Get() (v CreateSchedulerServiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSchedulerServiceJobReq) Or(d CreateSchedulerServiceJobReq) CreateSchedulerServiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateScopedVariableReq returns new OptCreateScopedVariableReq with value set to v.
func NewOptCreateScopedVariableReq(v CreateScopedVariableReq) OptCreateScopedVariableReq {
	return OptCreateScopedVariableReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateScopedVariableReq is optional CreateScopedVariableReq.
type OptCreateScopedVariableReq struct {
	Value CreateScopedVariableReq
	Set   bool
}

// IsSet returns true if OptCreateScopedVariableReq was set.
func (o OptCreateScopedVariableReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateScopedVariableReq) Reset() {
	var v CreateScopedVariableReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateScopedVariableReq) SetTo(v CreateScopedVariableReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateScopedVariableReq) Get() (v CreateScopedVariableReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateScopedVariableReq) Or(d CreateScopedVariableReq) CreateScopedVariableReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServerJobReq returns new OptCreateServerJobReq with value set to v.
func NewOptCreateServerJobReq(v CreateServerJobReq) OptCreateServerJobReq {
	return OptCreateServerJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateServerJobReq is optional CreateServerJobReq.
type OptCreateServerJobReq struct {
	Value CreateServerJobReq
	Set   bool
}

// IsSet returns true if OptCreateServerJobReq was set.
func (o OptCreateServerJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServerJobReq) Reset() {
	var v CreateServerJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServerJobReq) SetTo(v CreateServerJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServerJobReq) Get() (v CreateServerJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServerJobReq) Or(d CreateServerJobReq) CreateServerJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServerReq returns new OptCreateServerReq with value set to v.
func NewOptCreateServerReq(v CreateServerReq) OptCreateServerReq {
	return OptCreateServerReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateServerReq is optional CreateServerReq.
type OptCreateServerReq struct {
	Value CreateServerReq
	Set   bool
}

// IsSet returns true if OptCreateServerReq was set.
func (o OptCreateServerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServerReq) Reset() {
	var v CreateServerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServerReq) SetTo(v CreateServerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServerReq) Get() (v CreateServerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServerReq) Or(d CreateServerReq) CreateServerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateServerReqServersItemAdvancedItemProvisionOptions returns new OptCreateServerReqServersItemAdvancedItemProvisionOptions with value set to v.
func NewOptCreateServerReqServersItemAdvancedItemProvisionOptions(v CreateServerReqServersItemAdvancedItemProvisionOptions) OptCreateServerReqServersItemAdvancedItemProvisionOptions {
	return OptCreateServerReqServersItemAdvancedItemProvisionOptions{
		Value: v,
		Set:   true,
	}
}

// OptCreateServerReqServersItemAdvancedItemProvisionOptions is optional CreateServerReqServersItemAdvancedItemProvisionOptions.
type OptCreateServerReqServersItemAdvancedItemProvisionOptions struct {
	Value CreateServerReqServersItemAdvancedItemProvisionOptions
	Set   bool
}

// IsSet returns true if OptCreateServerReqServersItemAdvancedItemProvisionOptions was set.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateServerReqServersItemAdvancedItemProvisionOptions) Reset() {
	var v CreateServerReqServersItemAdvancedItemProvisionOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateServerReqServersItemAdvancedItemProvisionOptions) SetTo(v CreateServerReqServersItemAdvancedItemProvisionOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) Get() (v CreateServerReqServersItemAdvancedItemProvisionOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateServerReqServersItemAdvancedItemProvisionOptions) Or(d CreateServerReqServersItemAdvancedItemProvisionOptions) CreateServerReqServersItemAdvancedItemProvisionOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackBuildJobReq returns new OptCreateStackBuildJobReq with value set to v.
func NewOptCreateStackBuildJobReq(v CreateStackBuildJobReq) OptCreateStackBuildJobReq {
	return OptCreateStackBuildJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackBuildJobReq is optional CreateStackBuildJobReq.
type OptCreateStackBuildJobReq struct {
	Value CreateStackBuildJobReq
	Set   bool
}

// IsSet returns true if OptCreateStackBuildJobReq was set.
func (o OptCreateStackBuildJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackBuildJobReq) Reset() {
	var v CreateStackBuildJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackBuildJobReq) SetTo(v CreateStackBuildJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackBuildJobReq) Get() (v CreateStackBuildJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackBuildJobReq) Or(d CreateStackBuildJobReq) CreateStackBuildJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackBuildReq returns new OptCreateStackBuildReq with value set to v.
func NewOptCreateStackBuildReq(v CreateStackBuildReq) OptCreateStackBuildReq {
	return OptCreateStackBuildReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackBuildReq is optional CreateStackBuildReq.
type OptCreateStackBuildReq struct {
	Value CreateStackBuildReq
	Set   bool
}

// IsSet returns true if OptCreateStackBuildReq was set.
func (o OptCreateStackBuildReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackBuildReq) Reset() {
	var v CreateStackBuildReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackBuildReq) SetTo(v CreateStackBuildReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackBuildReq) Get() (v CreateStackBuildReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackBuildReq) Or(d CreateStackBuildReq) CreateStackBuildReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackJobReq returns new OptCreateStackJobReq with value set to v.
func NewOptCreateStackJobReq(v CreateStackJobReq) OptCreateStackJobReq {
	return OptCreateStackJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackJobReq is optional CreateStackJobReq.
type OptCreateStackJobReq struct {
	Value CreateStackJobReq
	Set   bool
}

// IsSet returns true if OptCreateStackJobReq was set.
func (o OptCreateStackJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackJobReq) Reset() {
	var v CreateStackJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackJobReq) SetTo(v CreateStackJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackJobReq) Get() (v CreateStackJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackJobReq) Or(d CreateStackJobReq) CreateStackJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackReq returns new OptCreateStackReq with value set to v.
func NewOptCreateStackReq(v CreateStackReq) OptCreateStackReq {
	return OptCreateStackReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackReq is optional CreateStackReq.
type OptCreateStackReq struct {
	Value CreateStackReq
	Set   bool
}

// IsSet returns true if OptCreateStackReq was set.
func (o OptCreateStackReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackReq) Reset() {
	var v CreateStackReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackReq) SetTo(v CreateStackReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackReq) Get() (v CreateStackReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackReq) Or(d CreateStackReq) CreateStackReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateStackReqVariables returns new OptCreateStackReqVariables with value set to v.
func NewOptCreateStackReqVariables(v CreateStackReqVariables) OptCreateStackReqVariables {
	return OptCreateStackReqVariables{
		Value: v,
		Set:   true,
	}
}

// OptCreateStackReqVariables is optional CreateStackReqVariables.
type OptCreateStackReqVariables struct {
	Value CreateStackReqVariables
	Set   bool
}

// IsSet returns true if OptCreateStackReqVariables was set.
func (o OptCreateStackReqVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateStackReqVariables) Reset() {
	var v CreateStackReqVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateStackReqVariables) SetTo(v CreateStackReqVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateStackReqVariables) Get() (v CreateStackReqVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateStackReqVariables) Or(d CreateStackReqVariables) CreateStackReqVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVPNServiceJobReq returns new OptCreateVPNServiceJobReq with value set to v.
func NewOptCreateVPNServiceJobReq(v CreateVPNServiceJobReq) OptCreateVPNServiceJobReq {
	return OptCreateVPNServiceJobReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateVPNServiceJobReq is optional CreateVPNServiceJobReq.
type OptCreateVPNServiceJobReq struct {
	Value CreateVPNServiceJobReq
	Set   bool
}

// IsSet returns true if OptCreateVPNServiceJobReq was set.
func (o OptCreateVPNServiceJobReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVPNServiceJobReq) Reset() {
	var v CreateVPNServiceJobReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVPNServiceJobReq) SetTo(v CreateVPNServiceJobReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVPNServiceJobReq) Get() (v CreateVPNServiceJobReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVPNServiceJobReq) Or(d CreateVPNServiceJobReq) CreateVPNServiceJobReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateVPNUserReq returns new OptCreateVPNUserReq with value set to v.
func NewOptCreateVPNUserReq(v CreateVPNUserReq) OptCreateVPNUserReq {
	return OptCreateVPNUserReq{
		Value: v,
		Set:   true,
	}
}

// OptCreateVPNUserReq is optional CreateVPNUserReq.
type OptCreateVPNUserReq struct {
	Value CreateVPNUserReq
	Set   bool
}

// IsSet returns true if OptCreateVPNUserReq was set.
func (o OptCreateVPNUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateVPNUserReq) Reset() {
	var v CreateVPNUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateVPNUserReq) SetTo(v CreateVPNUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateVPNUserReq) Get() (v CreateVPNUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateVPNUserReq) Or(d CreateVPNUserReq) CreateVPNUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorInclude returns new OptCreatorInclude with value set to v.
func NewOptCreatorInclude(v CreatorInclude) OptCreatorInclude {
	return OptCreatorInclude{
		Value: v,
		Set:   true,
	}
}

// OptCreatorInclude is optional CreatorInclude.
type OptCreatorInclude struct {
	Value CreatorInclude
	Set   bool
}

// IsSet returns true if OptCreatorInclude was set.
func (o OptCreatorInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorInclude) Reset() {
	var v CreatorInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorInclude) SetTo(v CreatorInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorInclude) Get() (v CreatorInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorInclude) Or(d CreatorInclude) CreatorInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeAPIKeys returns new OptCreatorIncludeAPIKeys with value set to v.
func NewOptCreatorIncludeAPIKeys(v CreatorIncludeAPIKeys) OptCreatorIncludeAPIKeys {
	return OptCreatorIncludeAPIKeys{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeAPIKeys is optional CreatorIncludeAPIKeys.
type OptCreatorIncludeAPIKeys struct {
	Value CreatorIncludeAPIKeys
	Set   bool
}

// IsSet returns true if OptCreatorIncludeAPIKeys was set.
func (o OptCreatorIncludeAPIKeys) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeAPIKeys) Reset() {
	var v CreatorIncludeAPIKeys
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeAPIKeys) SetTo(v CreatorIncludeAPIKeys) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeAPIKeys) Get() (v CreatorIncludeAPIKeys, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeAPIKeys) Or(d CreatorIncludeAPIKeys) CreatorIncludeAPIKeys {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeAccounts returns new OptCreatorIncludeAccounts with value set to v.
func NewOptCreatorIncludeAccounts(v CreatorIncludeAccounts) OptCreatorIncludeAccounts {
	return OptCreatorIncludeAccounts{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeAccounts is optional CreatorIncludeAccounts.
type OptCreatorIncludeAccounts struct {
	Value CreatorIncludeAccounts
	Set   bool
}

// IsSet returns true if OptCreatorIncludeAccounts was set.
func (o OptCreatorIncludeAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeAccounts) Reset() {
	var v CreatorIncludeAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeAccounts) SetTo(v CreatorIncludeAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeAccounts) Get() (v CreatorIncludeAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeAccounts) Or(d CreatorIncludeAccounts) CreatorIncludeAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeEmployees returns new OptCreatorIncludeEmployees with value set to v.
func NewOptCreatorIncludeEmployees(v CreatorIncludeEmployees) OptCreatorIncludeEmployees {
	return OptCreatorIncludeEmployees{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeEmployees is optional CreatorIncludeEmployees.
type OptCreatorIncludeEmployees struct {
	Value CreatorIncludeEmployees
	Set   bool
}

// IsSet returns true if OptCreatorIncludeEmployees was set.
func (o OptCreatorIncludeEmployees) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeEmployees) Reset() {
	var v CreatorIncludeEmployees
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeEmployees) SetTo(v CreatorIncludeEmployees) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeEmployees) Get() (v CreatorIncludeEmployees, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeEmployees) Or(d CreatorIncludeEmployees) CreatorIncludeEmployees {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeEnvironments returns new OptCreatorIncludeEnvironments with value set to v.
func NewOptCreatorIncludeEnvironments(v CreatorIncludeEnvironments) OptCreatorIncludeEnvironments {
	return OptCreatorIncludeEnvironments{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeEnvironments is optional CreatorIncludeEnvironments.
type OptCreatorIncludeEnvironments struct {
	Value CreatorIncludeEnvironments
	Set   bool
}

// IsSet returns true if OptCreatorIncludeEnvironments was set.
func (o OptCreatorIncludeEnvironments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeEnvironments) Reset() {
	var v CreatorIncludeEnvironments
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeEnvironments) SetTo(v CreatorIncludeEnvironments) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeEnvironments) Get() (v CreatorIncludeEnvironments, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeEnvironments) Or(d CreatorIncludeEnvironments) CreatorIncludeEnvironments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorIncludeVisitors returns new OptCreatorIncludeVisitors with value set to v.
func NewOptCreatorIncludeVisitors(v CreatorIncludeVisitors) OptCreatorIncludeVisitors {
	return OptCreatorIncludeVisitors{
		Value: v,
		Set:   true,
	}
}

// OptCreatorIncludeVisitors is optional CreatorIncludeVisitors.
type OptCreatorIncludeVisitors struct {
	Value CreatorIncludeVisitors
	Set   bool
}

// IsSet returns true if OptCreatorIncludeVisitors was set.
func (o OptCreatorIncludeVisitors) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorIncludeVisitors) Reset() {
	var v CreatorIncludeVisitors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorIncludeVisitors) SetTo(v CreatorIncludeVisitors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorIncludeVisitors) Get() (v CreatorIncludeVisitors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorIncludeVisitors) Or(d CreatorIncludeVisitors) CreatorIncludeVisitors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatorScope returns new OptCreatorScope with value set to v.
func NewOptCreatorScope(v CreatorScope) OptCreatorScope {
	return OptCreatorScope{
		Value: v,
		Set:   true,
	}
}

// OptCreatorScope is optional CreatorScope.
type OptCreatorScope struct {
	Value CreatorScope
	Set   bool
}

// IsSet returns true if OptCreatorScope was set.
func (o OptCreatorScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatorScope) Reset() {
	var v CreatorScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatorScope) SetTo(v CreatorScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatorScope) Get() (v CreatorScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatorScope) Or(d CreatorScope) CreatorScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreditCard returns new OptCreditCard with value set to v.
func NewOptCreditCard(v CreditCard) OptCreditCard {
	return OptCreditCard{
		Value: v,
		Set:   true,
	}
}

// OptCreditCard is optional CreditCard.
type OptCreditCard struct {
	Value CreditCard
	Set   bool
}

// IsSet returns true if OptCreditCard was set.
func (o OptCreditCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreditCard) Reset() {
	var v CreditCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreditCard) SetTo(v CreditCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreditCard) Get() (v CreditCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreditCard) Or(d CreditCard) CreditCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreditStateError returns new OptCreditStateError with value set to v.
func NewOptCreditStateError(v CreditStateError) OptCreditStateError {
	return OptCreditStateError{
		Value: v,
		Set:   true,
	}
}

// OptCreditStateError is optional CreditStateError.
type OptCreditStateError struct {
	Value CreditStateError
	Set   bool
}

// IsSet returns true if OptCreditStateError was set.
func (o OptCreditStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreditStateError) Reset() {
	var v CreditStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreditStateError) SetTo(v CreditStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreditStateError) Get() (v CreditStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreditStateError) Or(d CreditStateError) CreditStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCycleUploadOriginDetails returns new OptCycleUploadOriginDetails with value set to v.
func NewOptCycleUploadOriginDetails(v CycleUploadOriginDetails) OptCycleUploadOriginDetails {
	return OptCycleUploadOriginDetails{
		Value: v,
		Set:   true,
	}
}

// OptCycleUploadOriginDetails is optional CycleUploadOriginDetails.
type OptCycleUploadOriginDetails struct {
	Value CycleUploadOriginDetails
	Set   bool
}

// IsSet returns true if OptCycleUploadOriginDetails was set.
func (o OptCycleUploadOriginDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCycleUploadOriginDetails) Reset() {
	var v CycleUploadOriginDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCycleUploadOriginDetails) SetTo(v CycleUploadOriginDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCycleUploadOriginDetails) Get() (v CycleUploadOriginDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCycleUploadOriginDetails) Or(d CycleUploadOriginDetails) CycleUploadOriginDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCycleUploadOriginType returns new OptCycleUploadOriginType with value set to v.
func NewOptCycleUploadOriginType(v CycleUploadOriginType) OptCycleUploadOriginType {
	return OptCycleUploadOriginType{
		Value: v,
		Set:   true,
	}
}

// OptCycleUploadOriginType is optional CycleUploadOriginType.
type OptCycleUploadOriginType struct {
	Value CycleUploadOriginType
	Set   bool
}

// IsSet returns true if OptCycleUploadOriginType was set.
func (o OptCycleUploadOriginType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCycleUploadOriginType) Reset() {
	var v CycleUploadOriginType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCycleUploadOriginType) SetTo(v CycleUploadOriginType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCycleUploadOriginType) Get() (v CycleUploadOriginType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCycleUploadOriginType) Or(d CycleUploadOriginType) CycleUploadOriginType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v DateTime) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional DateTime.
type OptDateTime struct {
	Value DateTime
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v DateTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v DateTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v DateTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d DateTime) DateTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteServerOptions returns new OptDeleteServerOptions with value set to v.
func NewOptDeleteServerOptions(v DeleteServerOptions) OptDeleteServerOptions {
	return OptDeleteServerOptions{
		Value: v,
		Set:   true,
	}
}

// OptDeleteServerOptions is optional DeleteServerOptions.
type OptDeleteServerOptions struct {
	Value DeleteServerOptions
	Set   bool
}

// IsSet returns true if OptDeleteServerOptions was set.
func (o OptDeleteServerOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteServerOptions) Reset() {
	var v DeleteServerOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteServerOptions) SetTo(v DeleteServerOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteServerOptions) Get() (v DeleteServerOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteServerOptions) Or(d DeleteServerOptions) DeleteServerOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentStrategy returns new OptDeploymentStrategy with value set to v.
func NewOptDeploymentStrategy(v DeploymentStrategy) OptDeploymentStrategy {
	return OptDeploymentStrategy{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentStrategy is optional DeploymentStrategy.
type OptDeploymentStrategy struct {
	Value DeploymentStrategy
	Set   bool
}

// IsSet returns true if OptDeploymentStrategy was set.
func (o OptDeploymentStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentStrategy) Reset() {
	var v DeploymentStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentStrategy) SetTo(v DeploymentStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentStrategy) Get() (v DeploymentStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentStrategy) Or(d DeploymentStrategy) DeploymentStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeploymentStrategyName returns new OptDeploymentStrategyName with value set to v.
func NewOptDeploymentStrategyName(v DeploymentStrategyName) OptDeploymentStrategyName {
	return OptDeploymentStrategyName{
		Value: v,
		Set:   true,
	}
}

// OptDeploymentStrategyName is optional DeploymentStrategyName.
type OptDeploymentStrategyName struct {
	Value DeploymentStrategyName
	Set   bool
}

// IsSet returns true if OptDeploymentStrategyName was set.
func (o OptDeploymentStrategyName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeploymentStrategyName) Reset() {
	var v DeploymentStrategyName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeploymentStrategyName) SetTo(v DeploymentStrategyName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeploymentStrategyName) Get() (v DeploymentStrategyName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeploymentStrategyName) Or(d DeploymentStrategyName) DeploymentStrategyName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDirectImageSourceTypeDetails returns new OptDirectImageSourceTypeDetails with value set to v.
func NewOptDirectImageSourceTypeDetails(v DirectImageSourceTypeDetails) OptDirectImageSourceTypeDetails {
	return OptDirectImageSourceTypeDetails{
		Value: v,
		Set:   true,
	}
}

// OptDirectImageSourceTypeDetails is optional DirectImageSourceTypeDetails.
type OptDirectImageSourceTypeDetails struct {
	Value DirectImageSourceTypeDetails
	Set   bool
}

// IsSet returns true if OptDirectImageSourceTypeDetails was set.
func (o OptDirectImageSourceTypeDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDirectImageSourceTypeDetails) Reset() {
	var v DirectImageSourceTypeDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDirectImageSourceTypeDetails) SetTo(v DirectImageSourceTypeDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDirectImageSourceTypeDetails) Get() (v DirectImageSourceTypeDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDirectImageSourceTypeDetails) Or(d DirectImageSourceTypeDetails) DirectImageSourceTypeDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDirectImageSourceTypeOverride returns new OptDirectImageSourceTypeOverride with value set to v.
func NewOptDirectImageSourceTypeOverride(v DirectImageSourceTypeOverride) OptDirectImageSourceTypeOverride {
	return OptDirectImageSourceTypeOverride{
		Value: v,
		Set:   true,
	}
}

// OptDirectImageSourceTypeOverride is optional DirectImageSourceTypeOverride.
type OptDirectImageSourceTypeOverride struct {
	Value DirectImageSourceTypeOverride
	Set   bool
}

// IsSet returns true if OptDirectImageSourceTypeOverride was set.
func (o OptDirectImageSourceTypeOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDirectImageSourceTypeOverride) Reset() {
	var v DirectImageSourceTypeOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDirectImageSourceTypeOverride) SetTo(v DirectImageSourceTypeOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDirectImageSourceTypeOverride) Get() (v DirectImageSourceTypeOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDirectImageSourceTypeOverride) Or(d DirectImageSourceTypeOverride) DirectImageSourceTypeOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDirectImageSourceTypeType returns new OptDirectImageSourceTypeType with value set to v.
func NewOptDirectImageSourceTypeType(v DirectImageSourceTypeType) OptDirectImageSourceTypeType {
	return OptDirectImageSourceTypeType{
		Value: v,
		Set:   true,
	}
}

// OptDirectImageSourceTypeType is optional DirectImageSourceTypeType.
type OptDirectImageSourceTypeType struct {
	Value DirectImageSourceTypeType
	Set   bool
}

// IsSet returns true if OptDirectImageSourceTypeType was set.
func (o OptDirectImageSourceTypeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDirectImageSourceTypeType) Reset() {
	var v DirectImageSourceTypeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDirectImageSourceTypeType) SetTo(v DirectImageSourceTypeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDirectImageSourceTypeType) Get() (v DirectImageSourceTypeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDirectImageSourceTypeType) Or(d DirectImageSourceTypeType) DirectImageSourceTypeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDisableTwoFactorAuthReq returns new OptDisableTwoFactorAuthReq with value set to v.
func NewOptDisableTwoFactorAuthReq(v DisableTwoFactorAuthReq) OptDisableTwoFactorAuthReq {
	return OptDisableTwoFactorAuthReq{
		Value: v,
		Set:   true,
	}
}

// OptDisableTwoFactorAuthReq is optional DisableTwoFactorAuthReq.
type OptDisableTwoFactorAuthReq struct {
	Value DisableTwoFactorAuthReq
	Set   bool
}

// IsSet returns true if OptDisableTwoFactorAuthReq was set.
func (o OptDisableTwoFactorAuthReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDisableTwoFactorAuthReq) Reset() {
	var v DisableTwoFactorAuthReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDisableTwoFactorAuthReq) SetTo(v DisableTwoFactorAuthReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDisableTwoFactorAuthReq) Get() (v DisableTwoFactorAuthReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDisableTwoFactorAuthReq) Or(d DisableTwoFactorAuthReq) DisableTwoFactorAuthReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDuration returns new OptDuration with value set to v.
func NewOptDuration(v Duration) OptDuration {
	return OptDuration{
		Value: v,
		Set:   true,
	}
}

// OptDuration is optional Duration.
type OptDuration struct {
	Value Duration
	Set   bool
}

// IsSet returns true if OptDuration was set.
func (o OptDuration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDuration) Reset() {
	var v Duration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDuration) SetTo(v Duration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDuration) Get() (v Duration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDuration) Or(d Duration) Duration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnableTwoFactorAuthReq returns new OptEnableTwoFactorAuthReq with value set to v.
func NewOptEnableTwoFactorAuthReq(v EnableTwoFactorAuthReq) OptEnableTwoFactorAuthReq {
	return OptEnableTwoFactorAuthReq{
		Value: v,
		Set:   true,
	}
}

// OptEnableTwoFactorAuthReq is optional EnableTwoFactorAuthReq.
type OptEnableTwoFactorAuthReq struct {
	Value EnableTwoFactorAuthReq
	Set   bool
}

// IsSet returns true if OptEnableTwoFactorAuthReq was set.
func (o OptEnableTwoFactorAuthReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnableTwoFactorAuthReq) Reset() {
	var v EnableTwoFactorAuthReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnableTwoFactorAuthReq) SetTo(v EnableTwoFactorAuthReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnableTwoFactorAuthReq) Get() (v EnableTwoFactorAuthReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnableTwoFactorAuthReq) Or(d EnableTwoFactorAuthReq) EnableTwoFactorAuthReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentAbout returns new OptEnvironmentAbout with value set to v.
func NewOptEnvironmentAbout(v EnvironmentAbout) OptEnvironmentAbout {
	return OptEnvironmentAbout{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentAbout is optional EnvironmentAbout.
type OptEnvironmentAbout struct {
	Value EnvironmentAbout
	Set   bool
}

// IsSet returns true if OptEnvironmentAbout was set.
func (o OptEnvironmentAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentAbout) Reset() {
	var v EnvironmentAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentAbout) SetTo(v EnvironmentAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentAbout) Get() (v EnvironmentAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentAbout) Or(d EnvironmentAbout) EnvironmentAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentCreateStepOptions returns new OptEnvironmentCreateStepOptions with value set to v.
func NewOptEnvironmentCreateStepOptions(v EnvironmentCreateStepOptions) OptEnvironmentCreateStepOptions {
	return OptEnvironmentCreateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentCreateStepOptions is optional EnvironmentCreateStepOptions.
type OptEnvironmentCreateStepOptions struct {
	Value EnvironmentCreateStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentCreateStepOptions was set.
func (o OptEnvironmentCreateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentCreateStepOptions) Reset() {
	var v EnvironmentCreateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentCreateStepOptions) SetTo(v EnvironmentCreateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentCreateStepOptions) Get() (v EnvironmentCreateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentCreateStepOptions) Or(d EnvironmentCreateStepOptions) EnvironmentCreateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeleteStepOptions returns new OptEnvironmentDeleteStepOptions with value set to v.
func NewOptEnvironmentDeleteStepOptions(v EnvironmentDeleteStepOptions) OptEnvironmentDeleteStepOptions {
	return OptEnvironmentDeleteStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeleteStepOptions is optional EnvironmentDeleteStepOptions.
type OptEnvironmentDeleteStepOptions struct {
	Value EnvironmentDeleteStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeleteStepOptions was set.
func (o OptEnvironmentDeleteStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeleteStepOptions) Reset() {
	var v EnvironmentDeleteStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeleteStepOptions) SetTo(v EnvironmentDeleteStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeleteStepOptions) Get() (v EnvironmentDeleteStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeleteStepOptions) Or(d EnvironmentDeleteStepOptions) EnvironmentDeleteStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeploymentHealthyWatchStepOptions returns new OptEnvironmentDeploymentHealthyWatchStepOptions with value set to v.
func NewOptEnvironmentDeploymentHealthyWatchStepOptions(v EnvironmentDeploymentHealthyWatchStepOptions) OptEnvironmentDeploymentHealthyWatchStepOptions {
	return OptEnvironmentDeploymentHealthyWatchStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeploymentHealthyWatchStepOptions is optional EnvironmentDeploymentHealthyWatchStepOptions.
type OptEnvironmentDeploymentHealthyWatchStepOptions struct {
	Value EnvironmentDeploymentHealthyWatchStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeploymentHealthyWatchStepOptions was set.
func (o OptEnvironmentDeploymentHealthyWatchStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeploymentHealthyWatchStepOptions) Reset() {
	var v EnvironmentDeploymentHealthyWatchStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeploymentHealthyWatchStepOptions) SetTo(v EnvironmentDeploymentHealthyWatchStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeploymentHealthyWatchStepOptions) Get() (v EnvironmentDeploymentHealthyWatchStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeploymentHealthyWatchStepOptions) Or(d EnvironmentDeploymentHealthyWatchStepOptions) EnvironmentDeploymentHealthyWatchStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeploymentStartStepOptions returns new OptEnvironmentDeploymentStartStepOptions with value set to v.
func NewOptEnvironmentDeploymentStartStepOptions(v EnvironmentDeploymentStartStepOptions) OptEnvironmentDeploymentStartStepOptions {
	return OptEnvironmentDeploymentStartStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeploymentStartStepOptions is optional EnvironmentDeploymentStartStepOptions.
type OptEnvironmentDeploymentStartStepOptions struct {
	Value EnvironmentDeploymentStartStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeploymentStartStepOptions was set.
func (o OptEnvironmentDeploymentStartStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeploymentStartStepOptions) Reset() {
	var v EnvironmentDeploymentStartStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeploymentStartStepOptions) SetTo(v EnvironmentDeploymentStartStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeploymentStartStepOptions) Get() (v EnvironmentDeploymentStartStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeploymentStartStepOptions) Or(d EnvironmentDeploymentStartStepOptions) EnvironmentDeploymentStartStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeploymentStopStepOptions returns new OptEnvironmentDeploymentStopStepOptions with value set to v.
func NewOptEnvironmentDeploymentStopStepOptions(v EnvironmentDeploymentStopStepOptions) OptEnvironmentDeploymentStopStepOptions {
	return OptEnvironmentDeploymentStopStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeploymentStopStepOptions is optional EnvironmentDeploymentStopStepOptions.
type OptEnvironmentDeploymentStopStepOptions struct {
	Value EnvironmentDeploymentStopStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeploymentStopStepOptions was set.
func (o OptEnvironmentDeploymentStopStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeploymentStopStepOptions) Reset() {
	var v EnvironmentDeploymentStopStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeploymentStopStepOptions) SetTo(v EnvironmentDeploymentStopStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeploymentStopStepOptions) Get() (v EnvironmentDeploymentStopStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeploymentStopStepOptions) Or(d EnvironmentDeploymentStopStepOptions) EnvironmentDeploymentStopStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeploymentsPruneStepOptions returns new OptEnvironmentDeploymentsPruneStepOptions with value set to v.
func NewOptEnvironmentDeploymentsPruneStepOptions(v EnvironmentDeploymentsPruneStepOptions) OptEnvironmentDeploymentsPruneStepOptions {
	return OptEnvironmentDeploymentsPruneStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeploymentsPruneStepOptions is optional EnvironmentDeploymentsPruneStepOptions.
type OptEnvironmentDeploymentsPruneStepOptions struct {
	Value EnvironmentDeploymentsPruneStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeploymentsPruneStepOptions was set.
func (o OptEnvironmentDeploymentsPruneStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeploymentsPruneStepOptions) Reset() {
	var v EnvironmentDeploymentsPruneStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeploymentsPruneStepOptions) SetTo(v EnvironmentDeploymentsPruneStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeploymentsPruneStepOptions) Get() (v EnvironmentDeploymentsPruneStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeploymentsPruneStepOptions) Or(d EnvironmentDeploymentsPruneStepOptions) EnvironmentDeploymentsPruneStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentDeploymentsTagStepOptions returns new OptEnvironmentDeploymentsTagStepOptions with value set to v.
func NewOptEnvironmentDeploymentsTagStepOptions(v EnvironmentDeploymentsTagStepOptions) OptEnvironmentDeploymentsTagStepOptions {
	return OptEnvironmentDeploymentsTagStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentDeploymentsTagStepOptions is optional EnvironmentDeploymentsTagStepOptions.
type OptEnvironmentDeploymentsTagStepOptions struct {
	Value EnvironmentDeploymentsTagStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentDeploymentsTagStepOptions was set.
func (o OptEnvironmentDeploymentsTagStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentDeploymentsTagStepOptions) Reset() {
	var v EnvironmentDeploymentsTagStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentDeploymentsTagStepOptions) SetTo(v EnvironmentDeploymentsTagStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentDeploymentsTagStepOptions) Get() (v EnvironmentDeploymentsTagStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentDeploymentsTagStepOptions) Or(d EnvironmentDeploymentsTagStepOptions) EnvironmentDeploymentsTagStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentIncludes returns new OptEnvironmentIncludes with value set to v.
func NewOptEnvironmentIncludes(v EnvironmentIncludes) OptEnvironmentIncludes {
	return OptEnvironmentIncludes{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentIncludes is optional EnvironmentIncludes.
type OptEnvironmentIncludes struct {
	Value EnvironmentIncludes
	Set   bool
}

// IsSet returns true if OptEnvironmentIncludes was set.
func (o OptEnvironmentIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentIncludes) Reset() {
	var v EnvironmentIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentIncludes) SetTo(v EnvironmentIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentIncludes) Get() (v EnvironmentIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentIncludes) Or(d EnvironmentIncludes) EnvironmentIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentMeta returns new OptEnvironmentMeta with value set to v.
func NewOptEnvironmentMeta(v EnvironmentMeta) OptEnvironmentMeta {
	return OptEnvironmentMeta{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentMeta is optional EnvironmentMeta.
type OptEnvironmentMeta struct {
	Value EnvironmentMeta
	Set   bool
}

// IsSet returns true if OptEnvironmentMeta was set.
func (o OptEnvironmentMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentMeta) Reset() {
	var v EnvironmentMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentMeta) SetTo(v EnvironmentMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentMeta) Get() (v EnvironmentMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentMeta) Or(d EnvironmentMeta) EnvironmentMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentStartStepOptions returns new OptEnvironmentStartStepOptions with value set to v.
func NewOptEnvironmentStartStepOptions(v EnvironmentStartStepOptions) OptEnvironmentStartStepOptions {
	return OptEnvironmentStartStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentStartStepOptions is optional EnvironmentStartStepOptions.
type OptEnvironmentStartStepOptions struct {
	Value EnvironmentStartStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentStartStepOptions was set.
func (o OptEnvironmentStartStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentStartStepOptions) Reset() {
	var v EnvironmentStartStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentStartStepOptions) SetTo(v EnvironmentStartStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentStartStepOptions) Get() (v EnvironmentStartStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentStartStepOptions) Or(d EnvironmentStartStepOptions) EnvironmentStartStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentStateError returns new OptEnvironmentStateError with value set to v.
func NewOptEnvironmentStateError(v EnvironmentStateError) OptEnvironmentStateError {
	return OptEnvironmentStateError{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentStateError is optional EnvironmentStateError.
type OptEnvironmentStateError struct {
	Value EnvironmentStateError
	Set   bool
}

// IsSet returns true if OptEnvironmentStateError was set.
func (o OptEnvironmentStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentStateError) Reset() {
	var v EnvironmentStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentStateError) SetTo(v EnvironmentStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentStateError) Get() (v EnvironmentStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentStateError) Or(d EnvironmentStateError) EnvironmentStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnvironmentStopStepOptions returns new OptEnvironmentStopStepOptions with value set to v.
func NewOptEnvironmentStopStepOptions(v EnvironmentStopStepOptions) OptEnvironmentStopStepOptions {
	return OptEnvironmentStopStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptEnvironmentStopStepOptions is optional EnvironmentStopStepOptions.
type OptEnvironmentStopStepOptions struct {
	Value EnvironmentStopStepOptions
	Set   bool
}

// IsSet returns true if OptEnvironmentStopStepOptions was set.
func (o OptEnvironmentStopStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnvironmentStopStepOptions) Reset() {
	var v EnvironmentStopStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnvironmentStopStepOptions) SetTo(v EnvironmentStopStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnvironmentStopStepOptions) Get() (v EnvironmentStopStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnvironmentStopStepOptions) Or(d EnvironmentStopStepOptions) EnvironmentStopStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorCode returns new OptErrorCode with value set to v.
func NewOptErrorCode(v ErrorCode) OptErrorCode {
	return OptErrorCode{
		Value: v,
		Set:   true,
	}
}

// OptErrorCode is optional ErrorCode.
type OptErrorCode struct {
	Value ErrorCode
	Set   bool
}

// IsSet returns true if OptErrorCode was set.
func (o OptErrorCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorCode) Reset() {
	var v ErrorCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorCode) SetTo(v ErrorCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorCode) Get() (v ErrorCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorCode) Or(d ErrorCode) ErrorCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorExtra returns new OptErrorExtra with value set to v.
func NewOptErrorExtra(v ErrorExtra) OptErrorExtra {
	return OptErrorExtra{
		Value: v,
		Set:   true,
	}
}

// OptErrorExtra is optional ErrorExtra.
type OptErrorExtra struct {
	Value ErrorExtra
	Set   bool
}

// IsSet returns true if OptErrorExtra was set.
func (o OptErrorExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorExtra) Reset() {
	var v ErrorExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorExtra) SetTo(v ErrorExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorExtra) Get() (v ErrorExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorExtra) Or(d ErrorExtra) ErrorExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorStatus returns new OptErrorStatus with value set to v.
func NewOptErrorStatus(v ErrorStatus) OptErrorStatus {
	return OptErrorStatus{
		Value: v,
		Set:   true,
	}
}

// OptErrorStatus is optional ErrorStatus.
type OptErrorStatus struct {
	Value ErrorStatus
	Set   bool
}

// IsSet returns true if OptErrorStatus was set.
func (o OptErrorStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorStatus) Reset() {
	var v ErrorStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorStatus) SetTo(v ErrorStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorStatus) Get() (v ErrorStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorStatus) Or(d ErrorStatus) ErrorStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExistingSource returns new OptExistingSource with value set to v.
func NewOptExistingSource(v ExistingSource) OptExistingSource {
	return OptExistingSource{
		Value: v,
		Set:   true,
	}
}

// OptExistingSource is optional ExistingSource.
type OptExistingSource struct {
	Value ExistingSource
	Set   bool
}

// IsSet returns true if OptExistingSource was set.
func (o OptExistingSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExistingSource) Reset() {
	var v ExistingSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExistingSource) SetTo(v ExistingSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExistingSource) Get() (v ExistingSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExistingSource) Or(d ExistingSource) ExistingSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFeaturesSpecAWS returns new OptFeaturesSpecAWS with value set to v.
func NewOptFeaturesSpecAWS(v FeaturesSpecAWS) OptFeaturesSpecAWS {
	return OptFeaturesSpecAWS{
		Value: v,
		Set:   true,
	}
}

// OptFeaturesSpecAWS is optional FeaturesSpecAWS.
type OptFeaturesSpecAWS struct {
	Value FeaturesSpecAWS
	Set   bool
}

// IsSet returns true if OptFeaturesSpecAWS was set.
func (o OptFeaturesSpecAWS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFeaturesSpecAWS) Reset() {
	var v FeaturesSpecAWS
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFeaturesSpecAWS) SetTo(v FeaturesSpecAWS) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFeaturesSpecAWS) Get() (v FeaturesSpecAWS, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFeaturesSpecAWS) Or(d FeaturesSpecAWS) FeaturesSpecAWS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGPUSpecExtra returns new OptGPUSpecExtra with value set to v.
func NewOptGPUSpecExtra(v GPUSpecExtra) OptGPUSpecExtra {
	return OptGPUSpecExtra{
		Value: v,
		Set:   true,
	}
}

// OptGPUSpecExtra is optional GPUSpecExtra.
type OptGPUSpecExtra struct {
	Value GPUSpecExtra
	Set   bool
}

// IsSet returns true if OptGPUSpecExtra was set.
func (o OptGPUSpecExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGPUSpecExtra) Reset() {
	var v GPUSpecExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGPUSpecExtra) SetTo(v GPUSpecExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGPUSpecExtra) Get() (v GPUSpecExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGPUSpecExtra) Or(d GPUSpecExtra) GPUSpecExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountInvitesPage returns new OptGetAccountInvitesPage with value set to v.
func NewOptGetAccountInvitesPage(v GetAccountInvitesPage) OptGetAccountInvitesPage {
	return OptGetAccountInvitesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountInvitesPage is optional GetAccountInvitesPage.
type OptGetAccountInvitesPage struct {
	Value GetAccountInvitesPage
	Set   bool
}

// IsSet returns true if OptGetAccountInvitesPage was set.
func (o OptGetAccountInvitesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountInvitesPage) Reset() {
	var v GetAccountInvitesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountInvitesPage) SetTo(v GetAccountInvitesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountInvitesPage) Get() (v GetAccountInvitesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountInvitesPage) Or(d GetAccountInvitesPage) GetAccountInvitesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountLoginsPage returns new OptGetAccountLoginsPage with value set to v.
func NewOptGetAccountLoginsPage(v GetAccountLoginsPage) OptGetAccountLoginsPage {
	return OptGetAccountLoginsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountLoginsPage is optional GetAccountLoginsPage.
type OptGetAccountLoginsPage struct {
	Value GetAccountLoginsPage
	Set   bool
}

// IsSet returns true if OptGetAccountLoginsPage was set.
func (o OptGetAccountLoginsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountLoginsPage) Reset() {
	var v GetAccountLoginsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountLoginsPage) SetTo(v GetAccountLoginsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountLoginsPage) Get() (v GetAccountLoginsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountLoginsPage) Or(d GetAccountLoginsPage) GetAccountLoginsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountMembershipsPage returns new OptGetAccountMembershipsPage with value set to v.
func NewOptGetAccountMembershipsPage(v GetAccountMembershipsPage) OptGetAccountMembershipsPage {
	return OptGetAccountMembershipsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountMembershipsPage is optional GetAccountMembershipsPage.
type OptGetAccountMembershipsPage struct {
	Value GetAccountMembershipsPage
	Set   bool
}

// IsSet returns true if OptGetAccountMembershipsPage was set.
func (o OptGetAccountMembershipsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountMembershipsPage) Reset() {
	var v GetAccountMembershipsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountMembershipsPage) SetTo(v GetAccountMembershipsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountMembershipsPage) Get() (v GetAccountMembershipsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountMembershipsPage) Or(d GetAccountMembershipsPage) GetAccountMembershipsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsFilter returns new OptGetAnnouncementsFilter with value set to v.
func NewOptGetAnnouncementsFilter(v GetAnnouncementsFilter) OptGetAnnouncementsFilter {
	return OptGetAnnouncementsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsFilter is optional GetAnnouncementsFilter.
type OptGetAnnouncementsFilter struct {
	Value GetAnnouncementsFilter
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsFilter was set.
func (o OptGetAnnouncementsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsFilter) Reset() {
	var v GetAnnouncementsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsFilter) SetTo(v GetAnnouncementsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsFilter) Get() (v GetAnnouncementsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsFilter) Or(d GetAnnouncementsFilter) GetAnnouncementsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsFilterRange returns new OptGetAnnouncementsFilterRange with value set to v.
func NewOptGetAnnouncementsFilterRange(v GetAnnouncementsFilterRange) OptGetAnnouncementsFilterRange {
	return OptGetAnnouncementsFilterRange{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsFilterRange is optional GetAnnouncementsFilterRange.
type OptGetAnnouncementsFilterRange struct {
	Value GetAnnouncementsFilterRange
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsFilterRange was set.
func (o OptGetAnnouncementsFilterRange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsFilterRange) Reset() {
	var v GetAnnouncementsFilterRange
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsFilterRange) SetTo(v GetAnnouncementsFilterRange) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsFilterRange) Get() (v GetAnnouncementsFilterRange, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsFilterRange) Or(d GetAnnouncementsFilterRange) GetAnnouncementsFilterRange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsFilterResolved returns new OptGetAnnouncementsFilterResolved with value set to v.
func NewOptGetAnnouncementsFilterResolved(v GetAnnouncementsFilterResolved) OptGetAnnouncementsFilterResolved {
	return OptGetAnnouncementsFilterResolved{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsFilterResolved is optional GetAnnouncementsFilterResolved.
type OptGetAnnouncementsFilterResolved struct {
	Value GetAnnouncementsFilterResolved
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsFilterResolved was set.
func (o OptGetAnnouncementsFilterResolved) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsFilterResolved) Reset() {
	var v GetAnnouncementsFilterResolved
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsFilterResolved) SetTo(v GetAnnouncementsFilterResolved) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsFilterResolved) Get() (v GetAnnouncementsFilterResolved, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsFilterResolved) Or(d GetAnnouncementsFilterResolved) GetAnnouncementsFilterResolved {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAnnouncementsPage returns new OptGetAnnouncementsPage with value set to v.
func NewOptGetAnnouncementsPage(v GetAnnouncementsPage) OptGetAnnouncementsPage {
	return OptGetAnnouncementsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAnnouncementsPage is optional GetAnnouncementsPage.
type OptGetAnnouncementsPage struct {
	Value GetAnnouncementsPage
	Set   bool
}

// IsSet returns true if OptGetAnnouncementsPage was set.
func (o OptGetAnnouncementsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAnnouncementsPage) Reset() {
	var v GetAnnouncementsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAnnouncementsPage) SetTo(v GetAnnouncementsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAnnouncementsPage) Get() (v GetAnnouncementsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAnnouncementsPage) Or(d GetAnnouncementsPage) GetAnnouncementsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetApiKeysPage returns new OptGetApiKeysPage with value set to v.
func NewOptGetApiKeysPage(v GetApiKeysPage) OptGetApiKeysPage {
	return OptGetApiKeysPage{
		Value: v,
		Set:   true,
	}
}

// OptGetApiKeysPage is optional GetApiKeysPage.
type OptGetApiKeysPage struct {
	Value GetApiKeysPage
	Set   bool
}

// IsSet returns true if OptGetApiKeysPage was set.
func (o OptGetApiKeysPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetApiKeysPage) Reset() {
	var v GetApiKeysPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetApiKeysPage) SetTo(v GetApiKeysPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetApiKeysPage) Get() (v GetApiKeysPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetApiKeysPage) Or(d GetApiKeysPage) GetApiKeysPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAutoScaleGroupsFilter returns new OptGetAutoScaleGroupsFilter with value set to v.
func NewOptGetAutoScaleGroupsFilter(v GetAutoScaleGroupsFilter) OptGetAutoScaleGroupsFilter {
	return OptGetAutoScaleGroupsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetAutoScaleGroupsFilter is optional GetAutoScaleGroupsFilter.
type OptGetAutoScaleGroupsFilter struct {
	Value GetAutoScaleGroupsFilter
	Set   bool
}

// IsSet returns true if OptGetAutoScaleGroupsFilter was set.
func (o OptGetAutoScaleGroupsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAutoScaleGroupsFilter) Reset() {
	var v GetAutoScaleGroupsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAutoScaleGroupsFilter) SetTo(v GetAutoScaleGroupsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAutoScaleGroupsFilter) Get() (v GetAutoScaleGroupsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAutoScaleGroupsFilter) Or(d GetAutoScaleGroupsFilter) GetAutoScaleGroupsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAutoScaleGroupsPage returns new OptGetAutoScaleGroupsPage with value set to v.
func NewOptGetAutoScaleGroupsPage(v GetAutoScaleGroupsPage) OptGetAutoScaleGroupsPage {
	return OptGetAutoScaleGroupsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetAutoScaleGroupsPage is optional GetAutoScaleGroupsPage.
type OptGetAutoScaleGroupsPage struct {
	Value GetAutoScaleGroupsPage
	Set   bool
}

// IsSet returns true if OptGetAutoScaleGroupsPage was set.
func (o OptGetAutoScaleGroupsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAutoScaleGroupsPage) Reset() {
	var v GetAutoScaleGroupsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAutoScaleGroupsPage) SetTo(v GetAutoScaleGroupsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAutoScaleGroupsPage) Get() (v GetAutoScaleGroupsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAutoScaleGroupsPage) Or(d GetAutoScaleGroupsPage) GetAutoScaleGroupsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingMethodsPage returns new OptGetBillingMethodsPage with value set to v.
func NewOptGetBillingMethodsPage(v GetBillingMethodsPage) OptGetBillingMethodsPage {
	return OptGetBillingMethodsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingMethodsPage is optional GetBillingMethodsPage.
type OptGetBillingMethodsPage struct {
	Value GetBillingMethodsPage
	Set   bool
}

// IsSet returns true if OptGetBillingMethodsPage was set.
func (o OptGetBillingMethodsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingMethodsPage) Reset() {
	var v GetBillingMethodsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingMethodsPage) SetTo(v GetBillingMethodsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingMethodsPage) Get() (v GetBillingMethodsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingMethodsPage) Or(d GetBillingMethodsPage) GetBillingMethodsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingOveragesPage returns new OptGetBillingOveragesPage with value set to v.
func NewOptGetBillingOveragesPage(v GetBillingOveragesPage) OptGetBillingOveragesPage {
	return OptGetBillingOveragesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingOveragesPage is optional GetBillingOveragesPage.
type OptGetBillingOveragesPage struct {
	Value GetBillingOveragesPage
	Set   bool
}

// IsSet returns true if OptGetBillingOveragesPage was set.
func (o OptGetBillingOveragesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingOveragesPage) Reset() {
	var v GetBillingOveragesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingOveragesPage) SetTo(v GetBillingOveragesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingOveragesPage) Get() (v GetBillingOveragesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingOveragesPage) Or(d GetBillingOveragesPage) GetBillingOveragesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingServicesPage returns new OptGetBillingServicesPage with value set to v.
func NewOptGetBillingServicesPage(v GetBillingServicesPage) OptGetBillingServicesPage {
	return OptGetBillingServicesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingServicesPage is optional GetBillingServicesPage.
type OptGetBillingServicesPage struct {
	Value GetBillingServicesPage
	Set   bool
}

// IsSet returns true if OptGetBillingServicesPage was set.
func (o OptGetBillingServicesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingServicesPage) Reset() {
	var v GetBillingServicesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingServicesPage) SetTo(v GetBillingServicesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingServicesPage) Get() (v GetBillingServicesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingServicesPage) Or(d GetBillingServicesPage) GetBillingServicesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetBillingSupportPlansPage returns new OptGetBillingSupportPlansPage with value set to v.
func NewOptGetBillingSupportPlansPage(v GetBillingSupportPlansPage) OptGetBillingSupportPlansPage {
	return OptGetBillingSupportPlansPage{
		Value: v,
		Set:   true,
	}
}

// OptGetBillingSupportPlansPage is optional GetBillingSupportPlansPage.
type OptGetBillingSupportPlansPage struct {
	Value GetBillingSupportPlansPage
	Set   bool
}

// IsSet returns true if OptGetBillingSupportPlansPage was set.
func (o OptGetBillingSupportPlansPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetBillingSupportPlansPage) Reset() {
	var v GetBillingSupportPlansPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetBillingSupportPlansPage) SetTo(v GetBillingSupportPlansPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetBillingSupportPlansPage) Get() (v GetBillingSupportPlansPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetBillingSupportPlansPage) Or(d GetBillingSupportPlansPage) GetBillingSupportPlansPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCompatibleImagesPage returns new OptGetCompatibleImagesPage with value set to v.
func NewOptGetCompatibleImagesPage(v GetCompatibleImagesPage) OptGetCompatibleImagesPage {
	return OptGetCompatibleImagesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetCompatibleImagesPage is optional GetCompatibleImagesPage.
type OptGetCompatibleImagesPage struct {
	Value GetCompatibleImagesPage
	Set   bool
}

// IsSet returns true if OptGetCompatibleImagesPage was set.
func (o OptGetCompatibleImagesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCompatibleImagesPage) Reset() {
	var v GetCompatibleImagesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCompatibleImagesPage) SetTo(v GetCompatibleImagesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCompatibleImagesPage) Get() (v GetCompatibleImagesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCompatibleImagesPage) Or(d GetCompatibleImagesPage) GetCompatibleImagesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCompatibleServersPage returns new OptGetCompatibleServersPage with value set to v.
func NewOptGetCompatibleServersPage(v GetCompatibleServersPage) OptGetCompatibleServersPage {
	return OptGetCompatibleServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetCompatibleServersPage is optional GetCompatibleServersPage.
type OptGetCompatibleServersPage struct {
	Value GetCompatibleServersPage
	Set   bool
}

// IsSet returns true if OptGetCompatibleServersPage was set.
func (o OptGetCompatibleServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCompatibleServersPage) Reset() {
	var v GetCompatibleServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCompatibleServersPage) SetTo(v GetCompatibleServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCompatibleServersPage) Get() (v GetCompatibleServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCompatibleServersPage) Or(d GetCompatibleServersPage) GetCompatibleServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainerBackupsPage returns new OptGetContainerBackupsPage with value set to v.
func NewOptGetContainerBackupsPage(v GetContainerBackupsPage) OptGetContainerBackupsPage {
	return OptGetContainerBackupsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetContainerBackupsPage is optional GetContainerBackupsPage.
type OptGetContainerBackupsPage struct {
	Value GetContainerBackupsPage
	Set   bool
}

// IsSet returns true if OptGetContainerBackupsPage was set.
func (o OptGetContainerBackupsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainerBackupsPage) Reset() {
	var v GetContainerBackupsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainerBackupsPage) SetTo(v GetContainerBackupsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainerBackupsPage) Get() (v GetContainerBackupsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainerBackupsPage) Or(d GetContainerBackupsPage) GetContainerBackupsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainerInstancesTelemetryFilter returns new OptGetContainerInstancesTelemetryFilter with value set to v.
func NewOptGetContainerInstancesTelemetryFilter(v GetContainerInstancesTelemetryFilter) OptGetContainerInstancesTelemetryFilter {
	return OptGetContainerInstancesTelemetryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetContainerInstancesTelemetryFilter is optional GetContainerInstancesTelemetryFilter.
type OptGetContainerInstancesTelemetryFilter struct {
	Value GetContainerInstancesTelemetryFilter
	Set   bool
}

// IsSet returns true if OptGetContainerInstancesTelemetryFilter was set.
func (o OptGetContainerInstancesTelemetryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainerInstancesTelemetryFilter) Reset() {
	var v GetContainerInstancesTelemetryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainerInstancesTelemetryFilter) SetTo(v GetContainerInstancesTelemetryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainerInstancesTelemetryFilter) Get() (v GetContainerInstancesTelemetryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainerInstancesTelemetryFilter) Or(d GetContainerInstancesTelemetryFilter) GetContainerInstancesTelemetryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainerServersPage returns new OptGetContainerServersPage with value set to v.
func NewOptGetContainerServersPage(v GetContainerServersPage) OptGetContainerServersPage {
	return OptGetContainerServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetContainerServersPage is optional GetContainerServersPage.
type OptGetContainerServersPage struct {
	Value GetContainerServersPage
	Set   bool
}

// IsSet returns true if OptGetContainerServersPage was set.
func (o OptGetContainerServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainerServersPage) Reset() {
	var v GetContainerServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainerServersPage) SetTo(v GetContainerServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainerServersPage) Get() (v GetContainerServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainerServersPage) Or(d GetContainerServersPage) GetContainerServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainersFilter returns new OptGetContainersFilter with value set to v.
func NewOptGetContainersFilter(v GetContainersFilter) OptGetContainersFilter {
	return OptGetContainersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetContainersFilter is optional GetContainersFilter.
type OptGetContainersFilter struct {
	Value GetContainersFilter
	Set   bool
}

// IsSet returns true if OptGetContainersFilter was set.
func (o OptGetContainersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainersFilter) Reset() {
	var v GetContainersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainersFilter) SetTo(v GetContainersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainersFilter) Get() (v GetContainersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainersFilter) Or(d GetContainersFilter) GetContainersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetContainersPage returns new OptGetContainersPage with value set to v.
func NewOptGetContainersPage(v GetContainersPage) OptGetContainersPage {
	return OptGetContainersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetContainersPage is optional GetContainersPage.
type OptGetContainersPage struct {
	Value GetContainersPage
	Set   bool
}

// IsSet returns true if OptGetContainersPage was set.
func (o OptGetContainersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetContainersPage) Reset() {
	var v GetContainersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetContainersPage) SetTo(v GetContainersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetContainersPage) Get() (v GetContainersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetContainersPage) Or(d GetContainersPage) GetContainersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCreditsFilter returns new OptGetCreditsFilter with value set to v.
func NewOptGetCreditsFilter(v GetCreditsFilter) OptGetCreditsFilter {
	return OptGetCreditsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetCreditsFilter is optional GetCreditsFilter.
type OptGetCreditsFilter struct {
	Value GetCreditsFilter
	Set   bool
}

// IsSet returns true if OptGetCreditsFilter was set.
func (o OptGetCreditsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCreditsFilter) Reset() {
	var v GetCreditsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCreditsFilter) SetTo(v GetCreditsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCreditsFilter) Get() (v GetCreditsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCreditsFilter) Or(d GetCreditsFilter) GetCreditsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetCreditsPage returns new OptGetCreditsPage with value set to v.
func NewOptGetCreditsPage(v GetCreditsPage) OptGetCreditsPage {
	return OptGetCreditsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetCreditsPage is optional GetCreditsPage.
type OptGetCreditsPage struct {
	Value GetCreditsPage
	Set   bool
}

// IsSet returns true if OptGetCreditsPage was set.
func (o OptGetCreditsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetCreditsPage) Reset() {
	var v GetCreditsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetCreditsPage) SetTo(v GetCreditsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetCreditsPage) Get() (v GetCreditsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetCreditsPage) Or(d GetCreditsPage) GetCreditsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDNSZoneRecordsFilter returns new OptGetDNSZoneRecordsFilter with value set to v.
func NewOptGetDNSZoneRecordsFilter(v GetDNSZoneRecordsFilter) OptGetDNSZoneRecordsFilter {
	return OptGetDNSZoneRecordsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetDNSZoneRecordsFilter is optional GetDNSZoneRecordsFilter.
type OptGetDNSZoneRecordsFilter struct {
	Value GetDNSZoneRecordsFilter
	Set   bool
}

// IsSet returns true if OptGetDNSZoneRecordsFilter was set.
func (o OptGetDNSZoneRecordsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDNSZoneRecordsFilter) Reset() {
	var v GetDNSZoneRecordsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDNSZoneRecordsFilter) SetTo(v GetDNSZoneRecordsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDNSZoneRecordsFilter) Get() (v GetDNSZoneRecordsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDNSZoneRecordsFilter) Or(d GetDNSZoneRecordsFilter) GetDNSZoneRecordsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDNSZoneRecordsPage returns new OptGetDNSZoneRecordsPage with value set to v.
func NewOptGetDNSZoneRecordsPage(v GetDNSZoneRecordsPage) OptGetDNSZoneRecordsPage {
	return OptGetDNSZoneRecordsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetDNSZoneRecordsPage is optional GetDNSZoneRecordsPage.
type OptGetDNSZoneRecordsPage struct {
	Value GetDNSZoneRecordsPage
	Set   bool
}

// IsSet returns true if OptGetDNSZoneRecordsPage was set.
func (o OptGetDNSZoneRecordsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDNSZoneRecordsPage) Reset() {
	var v GetDNSZoneRecordsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDNSZoneRecordsPage) SetTo(v GetDNSZoneRecordsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDNSZoneRecordsPage) Get() (v GetDNSZoneRecordsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDNSZoneRecordsPage) Or(d GetDNSZoneRecordsPage) GetDNSZoneRecordsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDNSZonesFilter returns new OptGetDNSZonesFilter with value set to v.
func NewOptGetDNSZonesFilter(v GetDNSZonesFilter) OptGetDNSZonesFilter {
	return OptGetDNSZonesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetDNSZonesFilter is optional GetDNSZonesFilter.
type OptGetDNSZonesFilter struct {
	Value GetDNSZonesFilter
	Set   bool
}

// IsSet returns true if OptGetDNSZonesFilter was set.
func (o OptGetDNSZonesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDNSZonesFilter) Reset() {
	var v GetDNSZonesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDNSZonesFilter) SetTo(v GetDNSZonesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDNSZonesFilter) Get() (v GetDNSZonesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDNSZonesFilter) Or(d GetDNSZonesFilter) GetDNSZonesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetDNSZonesPage returns new OptGetDNSZonesPage with value set to v.
func NewOptGetDNSZonesPage(v GetDNSZonesPage) OptGetDNSZonesPage {
	return OptGetDNSZonesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetDNSZonesPage is optional GetDNSZonesPage.
type OptGetDNSZonesPage struct {
	Value GetDNSZonesPage
	Set   bool
}

// IsSet returns true if OptGetDNSZonesPage was set.
func (o OptGetDNSZonesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetDNSZonesPage) Reset() {
	var v GetDNSZonesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetDNSZonesPage) SetTo(v GetDNSZonesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetDNSZonesPage) Get() (v GetDNSZonesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetDNSZonesPage) Or(d GetDNSZonesPage) GetDNSZonesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentInstancesTelemetryFilter returns new OptGetEnvironmentInstancesTelemetryFilter with value set to v.
func NewOptGetEnvironmentInstancesTelemetryFilter(v GetEnvironmentInstancesTelemetryFilter) OptGetEnvironmentInstancesTelemetryFilter {
	return OptGetEnvironmentInstancesTelemetryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentInstancesTelemetryFilter is optional GetEnvironmentInstancesTelemetryFilter.
type OptGetEnvironmentInstancesTelemetryFilter struct {
	Value GetEnvironmentInstancesTelemetryFilter
	Set   bool
}

// IsSet returns true if OptGetEnvironmentInstancesTelemetryFilter was set.
func (o OptGetEnvironmentInstancesTelemetryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentInstancesTelemetryFilter) Reset() {
	var v GetEnvironmentInstancesTelemetryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentInstancesTelemetryFilter) SetTo(v GetEnvironmentInstancesTelemetryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentInstancesTelemetryFilter) Get() (v GetEnvironmentInstancesTelemetryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentInstancesTelemetryFilter) Or(d GetEnvironmentInstancesTelemetryFilter) GetEnvironmentInstancesTelemetryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentOKIncludes returns new OptGetEnvironmentOKIncludes with value set to v.
func NewOptGetEnvironmentOKIncludes(v GetEnvironmentOKIncludes) OptGetEnvironmentOKIncludes {
	return OptGetEnvironmentOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentOKIncludes is optional GetEnvironmentOKIncludes.
type OptGetEnvironmentOKIncludes struct {
	Value GetEnvironmentOKIncludes
	Set   bool
}

// IsSet returns true if OptGetEnvironmentOKIncludes was set.
func (o OptGetEnvironmentOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentOKIncludes) Reset() {
	var v GetEnvironmentOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentOKIncludes) SetTo(v GetEnvironmentOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentOKIncludes) Get() (v GetEnvironmentOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentOKIncludes) Or(d GetEnvironmentOKIncludes) GetEnvironmentOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsFilter returns new OptGetEnvironmentsFilter with value set to v.
func NewOptGetEnvironmentsFilter(v GetEnvironmentsFilter) OptGetEnvironmentsFilter {
	return OptGetEnvironmentsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsFilter is optional GetEnvironmentsFilter.
type OptGetEnvironmentsFilter struct {
	Value GetEnvironmentsFilter
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsFilter was set.
func (o OptGetEnvironmentsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsFilter) Reset() {
	var v GetEnvironmentsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsFilter) SetTo(v GetEnvironmentsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsFilter) Get() (v GetEnvironmentsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsFilter) Or(d GetEnvironmentsFilter) GetEnvironmentsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsOKIncludes returns new OptGetEnvironmentsOKIncludes with value set to v.
func NewOptGetEnvironmentsOKIncludes(v GetEnvironmentsOKIncludes) OptGetEnvironmentsOKIncludes {
	return OptGetEnvironmentsOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsOKIncludes is optional GetEnvironmentsOKIncludes.
type OptGetEnvironmentsOKIncludes struct {
	Value GetEnvironmentsOKIncludes
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsOKIncludes was set.
func (o OptGetEnvironmentsOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsOKIncludes) Reset() {
	var v GetEnvironmentsOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsOKIncludes) SetTo(v GetEnvironmentsOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsOKIncludes) Get() (v GetEnvironmentsOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsOKIncludes) Or(d GetEnvironmentsOKIncludes) GetEnvironmentsOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetEnvironmentsPage returns new OptGetEnvironmentsPage with value set to v.
func NewOptGetEnvironmentsPage(v GetEnvironmentsPage) OptGetEnvironmentsPage {
	return OptGetEnvironmentsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetEnvironmentsPage is optional GetEnvironmentsPage.
type OptGetEnvironmentsPage struct {
	Value GetEnvironmentsPage
	Set   bool
}

// IsSet returns true if OptGetEnvironmentsPage was set.
func (o OptGetEnvironmentsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetEnvironmentsPage) Reset() {
	var v GetEnvironmentsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetEnvironmentsPage) SetTo(v GetEnvironmentsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetEnvironmentsPage) Get() (v GetEnvironmentsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetEnvironmentsPage) Or(d GetEnvironmentsPage) GetEnvironmentsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubInvitesPage returns new OptGetHubInvitesPage with value set to v.
func NewOptGetHubInvitesPage(v GetHubInvitesPage) OptGetHubInvitesPage {
	return OptGetHubInvitesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubInvitesPage is optional GetHubInvitesPage.
type OptGetHubInvitesPage struct {
	Value GetHubInvitesPage
	Set   bool
}

// IsSet returns true if OptGetHubInvitesPage was set.
func (o OptGetHubInvitesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubInvitesPage) Reset() {
	var v GetHubInvitesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubInvitesPage) SetTo(v GetHubInvitesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubInvitesPage) Get() (v GetHubInvitesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubInvitesPage) Or(d GetHubInvitesPage) GetHubInvitesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubMembersPage returns new OptGetHubMembersPage with value set to v.
func NewOptGetHubMembersPage(v GetHubMembersPage) OptGetHubMembersPage {
	return OptGetHubMembersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubMembersPage is optional GetHubMembersPage.
type OptGetHubMembersPage struct {
	Value GetHubMembersPage
	Set   bool
}

// IsSet returns true if OptGetHubMembersPage was set.
func (o OptGetHubMembersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubMembersPage) Reset() {
	var v GetHubMembersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubMembersPage) SetTo(v GetHubMembersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubMembersPage) Get() (v GetHubMembersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubMembersPage) Or(d GetHubMembersPage) GetHubMembersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubMembershipPage returns new OptGetHubMembershipPage with value set to v.
func NewOptGetHubMembershipPage(v GetHubMembershipPage) OptGetHubMembershipPage {
	return OptGetHubMembershipPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubMembershipPage is optional GetHubMembershipPage.
type OptGetHubMembershipPage struct {
	Value GetHubMembershipPage
	Set   bool
}

// IsSet returns true if OptGetHubMembershipPage was set.
func (o OptGetHubMembershipPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubMembershipPage) Reset() {
	var v GetHubMembershipPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubMembershipPage) SetTo(v GetHubMembershipPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubMembershipPage) Get() (v GetHubMembershipPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubMembershipPage) Or(d GetHubMembershipPage) GetHubMembershipPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade returns new OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade with value set to v.
func NewOptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade(v GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade {
	return OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade{
		Value: v,
		Set:   true,
	}
}

// OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade is optional GetHubNotificationSocketAuthSwitchingProtocolsUpgrade.
type OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade struct {
	Value GetHubNotificationSocketAuthSwitchingProtocolsUpgrade
	Set   bool
}

// IsSet returns true if OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade was set.
func (o OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) Reset() {
	var v GetHubNotificationSocketAuthSwitchingProtocolsUpgrade
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) SetTo(v GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) Get() (v GetHubNotificationSocketAuthSwitchingProtocolsUpgrade, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubNotificationSocketAuthSwitchingProtocolsUpgrade) Or(d GetHubNotificationSocketAuthSwitchingProtocolsUpgrade) GetHubNotificationSocketAuthSwitchingProtocolsUpgrade {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubsFilter returns new OptGetHubsFilter with value set to v.
func NewOptGetHubsFilter(v GetHubsFilter) OptGetHubsFilter {
	return OptGetHubsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetHubsFilter is optional GetHubsFilter.
type OptGetHubsFilter struct {
	Value GetHubsFilter
	Set   bool
}

// IsSet returns true if OptGetHubsFilter was set.
func (o OptGetHubsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubsFilter) Reset() {
	var v GetHubsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubsFilter) SetTo(v GetHubsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubsFilter) Get() (v GetHubsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubsFilter) Or(d GetHubsFilter) GetHubsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetHubsPage returns new OptGetHubsPage with value set to v.
func NewOptGetHubsPage(v GetHubsPage) OptGetHubsPage {
	return OptGetHubsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetHubsPage is optional GetHubsPage.
type OptGetHubsPage struct {
	Value GetHubsPage
	Set   bool
}

// IsSet returns true if OptGetHubsPage was set.
func (o OptGetHubsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetHubsPage) Reset() {
	var v GetHubsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetHubsPage) SetTo(v GetHubsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetHubsPage) Get() (v GetHubsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetHubsPage) Or(d GetHubsPage) GetHubsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetImagePage returns new OptGetImagePage with value set to v.
func NewOptGetImagePage(v GetImagePage) OptGetImagePage {
	return OptGetImagePage{
		Value: v,
		Set:   true,
	}
}

// OptGetImagePage is optional GetImagePage.
type OptGetImagePage struct {
	Value GetImagePage
	Set   bool
}

// IsSet returns true if OptGetImagePage was set.
func (o OptGetImagePage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetImagePage) Reset() {
	var v GetImagePage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetImagePage) SetTo(v GetImagePage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetImagePage) Get() (v GetImagePage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetImagePage) Or(d GetImagePage) GetImagePage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetImageSourcesFilter returns new OptGetImageSourcesFilter with value set to v.
func NewOptGetImageSourcesFilter(v GetImageSourcesFilter) OptGetImageSourcesFilter {
	return OptGetImageSourcesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetImageSourcesFilter is optional GetImageSourcesFilter.
type OptGetImageSourcesFilter struct {
	Value GetImageSourcesFilter
	Set   bool
}

// IsSet returns true if OptGetImageSourcesFilter was set.
func (o OptGetImageSourcesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetImageSourcesFilter) Reset() {
	var v GetImageSourcesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetImageSourcesFilter) SetTo(v GetImageSourcesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetImageSourcesFilter) Get() (v GetImageSourcesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetImageSourcesFilter) Or(d GetImageSourcesFilter) GetImageSourcesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetImageSourcesPage returns new OptGetImageSourcesPage with value set to v.
func NewOptGetImageSourcesPage(v GetImageSourcesPage) OptGetImageSourcesPage {
	return OptGetImageSourcesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetImageSourcesPage is optional GetImageSourcesPage.
type OptGetImageSourcesPage struct {
	Value GetImageSourcesPage
	Set   bool
}

// IsSet returns true if OptGetImageSourcesPage was set.
func (o OptGetImageSourcesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetImageSourcesPage) Reset() {
	var v GetImageSourcesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetImageSourcesPage) SetTo(v GetImageSourcesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetImageSourcesPage) Get() (v GetImageSourcesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetImageSourcesPage) Or(d GetImageSourcesPage) GetImageSourcesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetImagesFilter returns new OptGetImagesFilter with value set to v.
func NewOptGetImagesFilter(v GetImagesFilter) OptGetImagesFilter {
	return OptGetImagesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetImagesFilter is optional GetImagesFilter.
type OptGetImagesFilter struct {
	Value GetImagesFilter
	Set   bool
}

// IsSet returns true if OptGetImagesFilter was set.
func (o OptGetImagesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetImagesFilter) Reset() {
	var v GetImagesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetImagesFilter) SetTo(v GetImagesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetImagesFilter) Get() (v GetImagesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetImagesFilter) Or(d GetImagesFilter) GetImagesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetImagesPage returns new OptGetImagesPage with value set to v.
func NewOptGetImagesPage(v GetImagesPage) OptGetImagesPage {
	return OptGetImagesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetImagesPage is optional GetImagesPage.
type OptGetImagesPage struct {
	Value GetImagesPage
	Set   bool
}

// IsSet returns true if OptGetImagesPage was set.
func (o OptGetImagesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetImagesPage) Reset() {
	var v GetImagesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetImagesPage) SetTo(v GetImagesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetImagesPage) Get() (v GetImagesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetImagesPage) Or(d GetImagesPage) GetImagesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInfrastructureIPPoolsFilter returns new OptGetInfrastructureIPPoolsFilter with value set to v.
func NewOptGetInfrastructureIPPoolsFilter(v GetInfrastructureIPPoolsFilter) OptGetInfrastructureIPPoolsFilter {
	return OptGetInfrastructureIPPoolsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInfrastructureIPPoolsFilter is optional GetInfrastructureIPPoolsFilter.
type OptGetInfrastructureIPPoolsFilter struct {
	Value GetInfrastructureIPPoolsFilter
	Set   bool
}

// IsSet returns true if OptGetInfrastructureIPPoolsFilter was set.
func (o OptGetInfrastructureIPPoolsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInfrastructureIPPoolsFilter) Reset() {
	var v GetInfrastructureIPPoolsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInfrastructureIPPoolsFilter) SetTo(v GetInfrastructureIPPoolsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInfrastructureIPPoolsFilter) Get() (v GetInfrastructureIPPoolsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInfrastructureIPPoolsFilter) Or(d GetInfrastructureIPPoolsFilter) GetInfrastructureIPPoolsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInfrastructureIPPoolsPage returns new OptGetInfrastructureIPPoolsPage with value set to v.
func NewOptGetInfrastructureIPPoolsPage(v GetInfrastructureIPPoolsPage) OptGetInfrastructureIPPoolsPage {
	return OptGetInfrastructureIPPoolsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInfrastructureIPPoolsPage is optional GetInfrastructureIPPoolsPage.
type OptGetInfrastructureIPPoolsPage struct {
	Value GetInfrastructureIPPoolsPage
	Set   bool
}

// IsSet returns true if OptGetInfrastructureIPPoolsPage was set.
func (o OptGetInfrastructureIPPoolsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInfrastructureIPPoolsPage) Reset() {
	var v GetInfrastructureIPPoolsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInfrastructureIPPoolsPage) SetTo(v GetInfrastructureIPPoolsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInfrastructureIPPoolsPage) Get() (v GetInfrastructureIPPoolsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInfrastructureIPPoolsPage) Or(d GetInfrastructureIPPoolsPage) GetInfrastructureIPPoolsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInfrastructureSummaryFilter returns new OptGetInfrastructureSummaryFilter with value set to v.
func NewOptGetInfrastructureSummaryFilter(v GetInfrastructureSummaryFilter) OptGetInfrastructureSummaryFilter {
	return OptGetInfrastructureSummaryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInfrastructureSummaryFilter is optional GetInfrastructureSummaryFilter.
type OptGetInfrastructureSummaryFilter struct {
	Value GetInfrastructureSummaryFilter
	Set   bool
}

// IsSet returns true if OptGetInfrastructureSummaryFilter was set.
func (o OptGetInfrastructureSummaryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInfrastructureSummaryFilter) Reset() {
	var v GetInfrastructureSummaryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInfrastructureSummaryFilter) SetTo(v GetInfrastructureSummaryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInfrastructureSummaryFilter) Get() (v GetInfrastructureSummaryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInfrastructureSummaryFilter) Or(d GetInfrastructureSummaryFilter) GetInfrastructureSummaryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstanceTelemetryReportFilter returns new OptGetInstanceTelemetryReportFilter with value set to v.
func NewOptGetInstanceTelemetryReportFilter(v GetInstanceTelemetryReportFilter) OptGetInstanceTelemetryReportFilter {
	return OptGetInstanceTelemetryReportFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInstanceTelemetryReportFilter is optional GetInstanceTelemetryReportFilter.
type OptGetInstanceTelemetryReportFilter struct {
	Value GetInstanceTelemetryReportFilter
	Set   bool
}

// IsSet returns true if OptGetInstanceTelemetryReportFilter was set.
func (o OptGetInstanceTelemetryReportFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstanceTelemetryReportFilter) Reset() {
	var v GetInstanceTelemetryReportFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstanceTelemetryReportFilter) SetTo(v GetInstanceTelemetryReportFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstanceTelemetryReportFilter) Get() (v GetInstanceTelemetryReportFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstanceTelemetryReportFilter) Or(d GetInstanceTelemetryReportFilter) GetInstanceTelemetryReportFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstanceVolumesPage returns new OptGetInstanceVolumesPage with value set to v.
func NewOptGetInstanceVolumesPage(v GetInstanceVolumesPage) OptGetInstanceVolumesPage {
	return OptGetInstanceVolumesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInstanceVolumesPage is optional GetInstanceVolumesPage.
type OptGetInstanceVolumesPage struct {
	Value GetInstanceVolumesPage
	Set   bool
}

// IsSet returns true if OptGetInstanceVolumesPage was set.
func (o OptGetInstanceVolumesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstanceVolumesPage) Reset() {
	var v GetInstanceVolumesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstanceVolumesPage) SetTo(v GetInstanceVolumesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstanceVolumesPage) Get() (v GetInstanceVolumesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstanceVolumesPage) Or(d GetInstanceVolumesPage) GetInstanceVolumesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstancesFilter returns new OptGetInstancesFilter with value set to v.
func NewOptGetInstancesFilter(v GetInstancesFilter) OptGetInstancesFilter {
	return OptGetInstancesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInstancesFilter is optional GetInstancesFilter.
type OptGetInstancesFilter struct {
	Value GetInstancesFilter
	Set   bool
}

// IsSet returns true if OptGetInstancesFilter was set.
func (o OptGetInstancesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstancesFilter) Reset() {
	var v GetInstancesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstancesFilter) SetTo(v GetInstancesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstancesFilter) Get() (v GetInstancesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstancesFilter) Or(d GetInstancesFilter) GetInstancesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInstancesPage returns new OptGetInstancesPage with value set to v.
func NewOptGetInstancesPage(v GetInstancesPage) OptGetInstancesPage {
	return OptGetInstancesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInstancesPage is optional GetInstancesPage.
type OptGetInstancesPage struct {
	Value GetInstancesPage
	Set   bool
}

// IsSet returns true if OptGetInstancesPage was set.
func (o OptGetInstancesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInstancesPage) Reset() {
	var v GetInstancesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInstancesPage) SetTo(v GetInstancesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInstancesPage) Get() (v GetInstancesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInstancesPage) Or(d GetInstancesPage) GetInstancesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetIntegrationsFilter returns new OptGetIntegrationsFilter with value set to v.
func NewOptGetIntegrationsFilter(v GetIntegrationsFilter) OptGetIntegrationsFilter {
	return OptGetIntegrationsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetIntegrationsFilter is optional GetIntegrationsFilter.
type OptGetIntegrationsFilter struct {
	Value GetIntegrationsFilter
	Set   bool
}

// IsSet returns true if OptGetIntegrationsFilter was set.
func (o OptGetIntegrationsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetIntegrationsFilter) Reset() {
	var v GetIntegrationsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetIntegrationsFilter) SetTo(v GetIntegrationsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetIntegrationsFilter) Get() (v GetIntegrationsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetIntegrationsFilter) Or(d GetIntegrationsFilter) GetIntegrationsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetIntegrationsPage returns new OptGetIntegrationsPage with value set to v.
func NewOptGetIntegrationsPage(v GetIntegrationsPage) OptGetIntegrationsPage {
	return OptGetIntegrationsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetIntegrationsPage is optional GetIntegrationsPage.
type OptGetIntegrationsPage struct {
	Value GetIntegrationsPage
	Set   bool
}

// IsSet returns true if OptGetIntegrationsPage was set.
func (o OptGetIntegrationsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetIntegrationsPage) Reset() {
	var v GetIntegrationsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetIntegrationsPage) SetTo(v GetIntegrationsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetIntegrationsPage) Get() (v GetIntegrationsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetIntegrationsPage) Or(d GetIntegrationsPage) GetIntegrationsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInvoicesFilter returns new OptGetInvoicesFilter with value set to v.
func NewOptGetInvoicesFilter(v GetInvoicesFilter) OptGetInvoicesFilter {
	return OptGetInvoicesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetInvoicesFilter is optional GetInvoicesFilter.
type OptGetInvoicesFilter struct {
	Value GetInvoicesFilter
	Set   bool
}

// IsSet returns true if OptGetInvoicesFilter was set.
func (o OptGetInvoicesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInvoicesFilter) Reset() {
	var v GetInvoicesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInvoicesFilter) SetTo(v GetInvoicesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInvoicesFilter) Get() (v GetInvoicesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInvoicesFilter) Or(d GetInvoicesFilter) GetInvoicesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetInvoicesPage returns new OptGetInvoicesPage with value set to v.
func NewOptGetInvoicesPage(v GetInvoicesPage) OptGetInvoicesPage {
	return OptGetInvoicesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetInvoicesPage is optional GetInvoicesPage.
type OptGetInvoicesPage struct {
	Value GetInvoicesPage
	Set   bool
}

// IsSet returns true if OptGetInvoicesPage was set.
func (o OptGetInvoicesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetInvoicesPage) Reset() {
	var v GetInvoicesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetInvoicesPage) SetTo(v GetInvoicesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetInvoicesPage) Get() (v GetInvoicesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetInvoicesPage) Or(d GetInvoicesPage) GetInvoicesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetJobsFilter returns new OptGetJobsFilter with value set to v.
func NewOptGetJobsFilter(v GetJobsFilter) OptGetJobsFilter {
	return OptGetJobsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetJobsFilter is optional GetJobsFilter.
type OptGetJobsFilter struct {
	Value GetJobsFilter
	Set   bool
}

// IsSet returns true if OptGetJobsFilter was set.
func (o OptGetJobsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetJobsFilter) Reset() {
	var v GetJobsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetJobsFilter) SetTo(v GetJobsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetJobsFilter) Get() (v GetJobsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetJobsFilter) Or(d GetJobsFilter) GetJobsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetJobsPage returns new OptGetJobsPage with value set to v.
func NewOptGetJobsPage(v GetJobsPage) OptGetJobsPage {
	return OptGetJobsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetJobsPage is optional GetJobsPage.
type OptGetJobsPage struct {
	Value GetJobsPage
	Set   bool
}

// IsSet returns true if OptGetJobsPage was set.
func (o OptGetJobsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetJobsPage) Reset() {
	var v GetJobsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetJobsPage) SetTo(v GetJobsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetJobsPage) Get() (v GetJobsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetJobsPage) Or(d GetJobsPage) GetJobsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLoadBalancerServiceOKDataBaseConfigs returns new OptGetLoadBalancerServiceOKDataBaseConfigs with value set to v.
func NewOptGetLoadBalancerServiceOKDataBaseConfigs(v GetLoadBalancerServiceOKDataBaseConfigs) OptGetLoadBalancerServiceOKDataBaseConfigs {
	return OptGetLoadBalancerServiceOKDataBaseConfigs{
		Value: v,
		Set:   true,
	}
}

// OptGetLoadBalancerServiceOKDataBaseConfigs is optional GetLoadBalancerServiceOKDataBaseConfigs.
type OptGetLoadBalancerServiceOKDataBaseConfigs struct {
	Value GetLoadBalancerServiceOKDataBaseConfigs
	Set   bool
}

// IsSet returns true if OptGetLoadBalancerServiceOKDataBaseConfigs was set.
func (o OptGetLoadBalancerServiceOKDataBaseConfigs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLoadBalancerServiceOKDataBaseConfigs) Reset() {
	var v GetLoadBalancerServiceOKDataBaseConfigs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLoadBalancerServiceOKDataBaseConfigs) SetTo(v GetLoadBalancerServiceOKDataBaseConfigs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLoadBalancerServiceOKDataBaseConfigs) Get() (v GetLoadBalancerServiceOKDataBaseConfigs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLoadBalancerServiceOKDataBaseConfigs) Or(d GetLoadBalancerServiceOKDataBaseConfigs) GetLoadBalancerServiceOKDataBaseConfigs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetLoadBalancerTelemetryReportFilter returns new OptGetLoadBalancerTelemetryReportFilter with value set to v.
func NewOptGetLoadBalancerTelemetryReportFilter(v GetLoadBalancerTelemetryReportFilter) OptGetLoadBalancerTelemetryReportFilter {
	return OptGetLoadBalancerTelemetryReportFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetLoadBalancerTelemetryReportFilter is optional GetLoadBalancerTelemetryReportFilter.
type OptGetLoadBalancerTelemetryReportFilter struct {
	Value GetLoadBalancerTelemetryReportFilter
	Set   bool
}

// IsSet returns true if OptGetLoadBalancerTelemetryReportFilter was set.
func (o OptGetLoadBalancerTelemetryReportFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetLoadBalancerTelemetryReportFilter) Reset() {
	var v GetLoadBalancerTelemetryReportFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetLoadBalancerTelemetryReportFilter) SetTo(v GetLoadBalancerTelemetryReportFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetLoadBalancerTelemetryReportFilter) Get() (v GetLoadBalancerTelemetryReportFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetLoadBalancerTelemetryReportFilter) Or(d GetLoadBalancerTelemetryReportFilter) GetLoadBalancerTelemetryReportFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNetworksFilter returns new OptGetNetworksFilter with value set to v.
func NewOptGetNetworksFilter(v GetNetworksFilter) OptGetNetworksFilter {
	return OptGetNetworksFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetNetworksFilter is optional GetNetworksFilter.
type OptGetNetworksFilter struct {
	Value GetNetworksFilter
	Set   bool
}

// IsSet returns true if OptGetNetworksFilter was set.
func (o OptGetNetworksFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNetworksFilter) Reset() {
	var v GetNetworksFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNetworksFilter) SetTo(v GetNetworksFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNetworksFilter) Get() (v GetNetworksFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNetworksFilter) Or(d GetNetworksFilter) GetNetworksFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetNetworksPage returns new OptGetNetworksPage with value set to v.
func NewOptGetNetworksPage(v GetNetworksPage) OptGetNetworksPage {
	return OptGetNetworksPage{
		Value: v,
		Set:   true,
	}
}

// OptGetNetworksPage is optional GetNetworksPage.
type OptGetNetworksPage struct {
	Value GetNetworksPage
	Set   bool
}

// IsSet returns true if OptGetNetworksPage was set.
func (o OptGetNetworksPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetNetworksPage) Reset() {
	var v GetNetworksPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetNetworksPage) SetTo(v GetNetworksPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetNetworksPage) Get() (v GetNetworksPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetNetworksPage) Or(d GetNetworksPage) GetNetworksPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrdersPage returns new OptGetOrdersPage with value set to v.
func NewOptGetOrdersPage(v GetOrdersPage) OptGetOrdersPage {
	return OptGetOrdersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetOrdersPage is optional GetOrdersPage.
type OptGetOrdersPage struct {
	Value GetOrdersPage
	Set   bool
}

// IsSet returns true if OptGetOrdersPage was set.
func (o OptGetOrdersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrdersPage) Reset() {
	var v GetOrdersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrdersPage) SetTo(v GetOrdersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrdersPage) Get() (v GetOrdersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrdersPage) Or(d GetOrdersPage) GetOrdersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineRunsOKIncludes returns new OptGetPipelineRunsOKIncludes with value set to v.
func NewOptGetPipelineRunsOKIncludes(v GetPipelineRunsOKIncludes) OptGetPipelineRunsOKIncludes {
	return OptGetPipelineRunsOKIncludes{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineRunsOKIncludes is optional GetPipelineRunsOKIncludes.
type OptGetPipelineRunsOKIncludes struct {
	Value GetPipelineRunsOKIncludes
	Set   bool
}

// IsSet returns true if OptGetPipelineRunsOKIncludes was set.
func (o OptGetPipelineRunsOKIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineRunsOKIncludes) Reset() {
	var v GetPipelineRunsOKIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineRunsOKIncludes) SetTo(v GetPipelineRunsOKIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineRunsOKIncludes) Get() (v GetPipelineRunsOKIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineRunsOKIncludes) Or(d GetPipelineRunsOKIncludes) GetPipelineRunsOKIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineTriggerKeysFilter returns new OptGetPipelineTriggerKeysFilter with value set to v.
func NewOptGetPipelineTriggerKeysFilter(v GetPipelineTriggerKeysFilter) OptGetPipelineTriggerKeysFilter {
	return OptGetPipelineTriggerKeysFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineTriggerKeysFilter is optional GetPipelineTriggerKeysFilter.
type OptGetPipelineTriggerKeysFilter struct {
	Value GetPipelineTriggerKeysFilter
	Set   bool
}

// IsSet returns true if OptGetPipelineTriggerKeysFilter was set.
func (o OptGetPipelineTriggerKeysFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineTriggerKeysFilter) Reset() {
	var v GetPipelineTriggerKeysFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineTriggerKeysFilter) SetTo(v GetPipelineTriggerKeysFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineTriggerKeysFilter) Get() (v GetPipelineTriggerKeysFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineTriggerKeysFilter) Or(d GetPipelineTriggerKeysFilter) GetPipelineTriggerKeysFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelineTriggerKeysPage returns new OptGetPipelineTriggerKeysPage with value set to v.
func NewOptGetPipelineTriggerKeysPage(v GetPipelineTriggerKeysPage) OptGetPipelineTriggerKeysPage {
	return OptGetPipelineTriggerKeysPage{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelineTriggerKeysPage is optional GetPipelineTriggerKeysPage.
type OptGetPipelineTriggerKeysPage struct {
	Value GetPipelineTriggerKeysPage
	Set   bool
}

// IsSet returns true if OptGetPipelineTriggerKeysPage was set.
func (o OptGetPipelineTriggerKeysPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelineTriggerKeysPage) Reset() {
	var v GetPipelineTriggerKeysPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelineTriggerKeysPage) SetTo(v GetPipelineTriggerKeysPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelineTriggerKeysPage) Get() (v GetPipelineTriggerKeysPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelineTriggerKeysPage) Or(d GetPipelineTriggerKeysPage) GetPipelineTriggerKeysPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelinesFilter returns new OptGetPipelinesFilter with value set to v.
func NewOptGetPipelinesFilter(v GetPipelinesFilter) OptGetPipelinesFilter {
	return OptGetPipelinesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelinesFilter is optional GetPipelinesFilter.
type OptGetPipelinesFilter struct {
	Value GetPipelinesFilter
	Set   bool
}

// IsSet returns true if OptGetPipelinesFilter was set.
func (o OptGetPipelinesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelinesFilter) Reset() {
	var v GetPipelinesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelinesFilter) SetTo(v GetPipelinesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelinesFilter) Get() (v GetPipelinesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelinesFilter) Or(d GetPipelinesFilter) GetPipelinesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetPipelinesPage returns new OptGetPipelinesPage with value set to v.
func NewOptGetPipelinesPage(v GetPipelinesPage) OptGetPipelinesPage {
	return OptGetPipelinesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetPipelinesPage is optional GetPipelinesPage.
type OptGetPipelinesPage struct {
	Value GetPipelinesPage
	Set   bool
}

// IsSet returns true if OptGetPipelinesPage was set.
func (o OptGetPipelinesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetPipelinesPage) Reset() {
	var v GetPipelinesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetPipelinesPage) SetTo(v GetPipelinesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetPipelinesPage) Get() (v GetPipelinesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetPipelinesPage) Or(d GetPipelinesPage) GetPipelinesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProviderLocationsPage returns new OptGetProviderLocationsPage with value set to v.
func NewOptGetProviderLocationsPage(v GetProviderLocationsPage) OptGetProviderLocationsPage {
	return OptGetProviderLocationsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetProviderLocationsPage is optional GetProviderLocationsPage.
type OptGetProviderLocationsPage struct {
	Value GetProviderLocationsPage
	Set   bool
}

// IsSet returns true if OptGetProviderLocationsPage was set.
func (o OptGetProviderLocationsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProviderLocationsPage) Reset() {
	var v GetProviderLocationsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProviderLocationsPage) SetTo(v GetProviderLocationsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProviderLocationsPage) Get() (v GetProviderLocationsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProviderLocationsPage) Or(d GetProviderLocationsPage) GetProviderLocationsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProviderServersFilter returns new OptGetProviderServersFilter with value set to v.
func NewOptGetProviderServersFilter(v GetProviderServersFilter) OptGetProviderServersFilter {
	return OptGetProviderServersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetProviderServersFilter is optional GetProviderServersFilter.
type OptGetProviderServersFilter struct {
	Value GetProviderServersFilter
	Set   bool
}

// IsSet returns true if OptGetProviderServersFilter was set.
func (o OptGetProviderServersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProviderServersFilter) Reset() {
	var v GetProviderServersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProviderServersFilter) SetTo(v GetProviderServersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProviderServersFilter) Get() (v GetProviderServersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProviderServersFilter) Or(d GetProviderServersFilter) GetProviderServersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetProviderServersPage returns new OptGetProviderServersPage with value set to v.
func NewOptGetProviderServersPage(v GetProviderServersPage) OptGetProviderServersPage {
	return OptGetProviderServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetProviderServersPage is optional GetProviderServersPage.
type OptGetProviderServersPage struct {
	Value GetProviderServersPage
	Set   bool
}

// IsSet returns true if OptGetProviderServersPage was set.
func (o OptGetProviderServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetProviderServersPage) Reset() {
	var v GetProviderServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetProviderServersPage) SetTo(v GetProviderServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetProviderServersPage) Get() (v GetProviderServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetProviderServersPage) Or(d GetProviderServersPage) GetProviderServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetRolesPage returns new OptGetRolesPage with value set to v.
func NewOptGetRolesPage(v GetRolesPage) OptGetRolesPage {
	return OptGetRolesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetRolesPage is optional GetRolesPage.
type OptGetRolesPage struct {
	Value GetRolesPage
	Set   bool
}

// IsSet returns true if OptGetRolesPage was set.
func (o OptGetRolesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetRolesPage) Reset() {
	var v GetRolesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetRolesPage) SetTo(v GetRolesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetRolesPage) Get() (v GetRolesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetRolesPage) Or(d GetRolesPage) GetRolesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetScopedVariablesFilter returns new OptGetScopedVariablesFilter with value set to v.
func NewOptGetScopedVariablesFilter(v GetScopedVariablesFilter) OptGetScopedVariablesFilter {
	return OptGetScopedVariablesFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetScopedVariablesFilter is optional GetScopedVariablesFilter.
type OptGetScopedVariablesFilter struct {
	Value GetScopedVariablesFilter
	Set   bool
}

// IsSet returns true if OptGetScopedVariablesFilter was set.
func (o OptGetScopedVariablesFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetScopedVariablesFilter) Reset() {
	var v GetScopedVariablesFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetScopedVariablesFilter) SetTo(v GetScopedVariablesFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetScopedVariablesFilter) Get() (v GetScopedVariablesFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetScopedVariablesFilter) Or(d GetScopedVariablesFilter) GetScopedVariablesFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetScopedVariablesPage returns new OptGetScopedVariablesPage with value set to v.
func NewOptGetScopedVariablesPage(v GetScopedVariablesPage) OptGetScopedVariablesPage {
	return OptGetScopedVariablesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetScopedVariablesPage is optional GetScopedVariablesPage.
type OptGetScopedVariablesPage struct {
	Value GetScopedVariablesPage
	Set   bool
}

// IsSet returns true if OptGetScopedVariablesPage was set.
func (o OptGetScopedVariablesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetScopedVariablesPage) Reset() {
	var v GetScopedVariablesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetScopedVariablesPage) SetTo(v GetScopedVariablesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetScopedVariablesPage) Get() (v GetScopedVariablesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetScopedVariablesPage) Or(d GetScopedVariablesPage) GetScopedVariablesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetSecurityReportFilter returns new OptGetSecurityReportFilter with value set to v.
func NewOptGetSecurityReportFilter(v GetSecurityReportFilter) OptGetSecurityReportFilter {
	return OptGetSecurityReportFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetSecurityReportFilter is optional GetSecurityReportFilter.
type OptGetSecurityReportFilter struct {
	Value GetSecurityReportFilter
	Set   bool
}

// IsSet returns true if OptGetSecurityReportFilter was set.
func (o OptGetSecurityReportFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetSecurityReportFilter) Reset() {
	var v GetSecurityReportFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetSecurityReportFilter) SetTo(v GetSecurityReportFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetSecurityReportFilter) Get() (v GetSecurityReportFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetSecurityReportFilter) Or(d GetSecurityReportFilter) GetSecurityReportFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerInstancesPage returns new OptGetServerInstancesPage with value set to v.
func NewOptGetServerInstancesPage(v GetServerInstancesPage) OptGetServerInstancesPage {
	return OptGetServerInstancesPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServerInstancesPage is optional GetServerInstancesPage.
type OptGetServerInstancesPage struct {
	Value GetServerInstancesPage
	Set   bool
}

// IsSet returns true if OptGetServerInstancesPage was set.
func (o OptGetServerInstancesPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerInstancesPage) Reset() {
	var v GetServerInstancesPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerInstancesPage) SetTo(v GetServerInstancesPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerInstancesPage) Get() (v GetServerInstancesPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerInstancesPage) Or(d GetServerInstancesPage) GetServerInstancesPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTagsFilter returns new OptGetServerTagsFilter with value set to v.
func NewOptGetServerTagsFilter(v GetServerTagsFilter) OptGetServerTagsFilter {
	return OptGetServerTagsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTagsFilter is optional GetServerTagsFilter.
type OptGetServerTagsFilter struct {
	Value GetServerTagsFilter
	Set   bool
}

// IsSet returns true if OptGetServerTagsFilter was set.
func (o OptGetServerTagsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTagsFilter) Reset() {
	var v GetServerTagsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTagsFilter) SetTo(v GetServerTagsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTagsFilter) Get() (v GetServerTagsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTagsFilter) Or(d GetServerTagsFilter) GetServerTagsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTelemetryFilter returns new OptGetServerTelemetryFilter with value set to v.
func NewOptGetServerTelemetryFilter(v GetServerTelemetryFilter) OptGetServerTelemetryFilter {
	return OptGetServerTelemetryFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTelemetryFilter is optional GetServerTelemetryFilter.
type OptGetServerTelemetryFilter struct {
	Value GetServerTelemetryFilter
	Set   bool
}

// IsSet returns true if OptGetServerTelemetryFilter was set.
func (o OptGetServerTelemetryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTelemetryFilter) Reset() {
	var v GetServerTelemetryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTelemetryFilter) SetTo(v GetServerTelemetryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTelemetryFilter) Get() (v GetServerTelemetryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTelemetryFilter) Or(d GetServerTelemetryFilter) GetServerTelemetryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServerTelemetryPage returns new OptGetServerTelemetryPage with value set to v.
func NewOptGetServerTelemetryPage(v GetServerTelemetryPage) OptGetServerTelemetryPage {
	return OptGetServerTelemetryPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServerTelemetryPage is optional GetServerTelemetryPage.
type OptGetServerTelemetryPage struct {
	Value GetServerTelemetryPage
	Set   bool
}

// IsSet returns true if OptGetServerTelemetryPage was set.
func (o OptGetServerTelemetryPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServerTelemetryPage) Reset() {
	var v GetServerTelemetryPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServerTelemetryPage) SetTo(v GetServerTelemetryPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServerTelemetryPage) Get() (v GetServerTelemetryPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServerTelemetryPage) Or(d GetServerTelemetryPage) GetServerTelemetryPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServersFilter returns new OptGetServersFilter with value set to v.
func NewOptGetServersFilter(v GetServersFilter) OptGetServersFilter {
	return OptGetServersFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetServersFilter is optional GetServersFilter.
type OptGetServersFilter struct {
	Value GetServersFilter
	Set   bool
}

// IsSet returns true if OptGetServersFilter was set.
func (o OptGetServersFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServersFilter) Reset() {
	var v GetServersFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServersFilter) SetTo(v GetServersFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServersFilter) Get() (v GetServersFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServersFilter) Or(d GetServersFilter) GetServersFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetServersPage returns new OptGetServersPage with value set to v.
func NewOptGetServersPage(v GetServersPage) OptGetServersPage {
	return OptGetServersPage{
		Value: v,
		Set:   true,
	}
}

// OptGetServersPage is optional GetServersPage.
type OptGetServersPage struct {
	Value GetServersPage
	Set   bool
}

// IsSet returns true if OptGetServersPage was set.
func (o OptGetServersPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetServersPage) Reset() {
	var v GetServersPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetServersPage) SetTo(v GetServersPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetServersPage) Get() (v GetServersPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetServersPage) Or(d GetServersPage) GetServersPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStackBuildsFilter returns new OptGetStackBuildsFilter with value set to v.
func NewOptGetStackBuildsFilter(v GetStackBuildsFilter) OptGetStackBuildsFilter {
	return OptGetStackBuildsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetStackBuildsFilter is optional GetStackBuildsFilter.
type OptGetStackBuildsFilter struct {
	Value GetStackBuildsFilter
	Set   bool
}

// IsSet returns true if OptGetStackBuildsFilter was set.
func (o OptGetStackBuildsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStackBuildsFilter) Reset() {
	var v GetStackBuildsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStackBuildsFilter) SetTo(v GetStackBuildsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStackBuildsFilter) Get() (v GetStackBuildsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStackBuildsFilter) Or(d GetStackBuildsFilter) GetStackBuildsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStackBuildsPage returns new OptGetStackBuildsPage with value set to v.
func NewOptGetStackBuildsPage(v GetStackBuildsPage) OptGetStackBuildsPage {
	return OptGetStackBuildsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetStackBuildsPage is optional GetStackBuildsPage.
type OptGetStackBuildsPage struct {
	Value GetStackBuildsPage
	Set   bool
}

// IsSet returns true if OptGetStackBuildsPage was set.
func (o OptGetStackBuildsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStackBuildsPage) Reset() {
	var v GetStackBuildsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStackBuildsPage) SetTo(v GetStackBuildsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStackBuildsPage) Get() (v GetStackBuildsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStackBuildsPage) Or(d GetStackBuildsPage) GetStackBuildsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStacksFilter returns new OptGetStacksFilter with value set to v.
func NewOptGetStacksFilter(v GetStacksFilter) OptGetStacksFilter {
	return OptGetStacksFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetStacksFilter is optional GetStacksFilter.
type OptGetStacksFilter struct {
	Value GetStacksFilter
	Set   bool
}

// IsSet returns true if OptGetStacksFilter was set.
func (o OptGetStacksFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStacksFilter) Reset() {
	var v GetStacksFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStacksFilter) SetTo(v GetStacksFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStacksFilter) Get() (v GetStacksFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStacksFilter) Or(d GetStacksFilter) GetStacksFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStacksPage returns new OptGetStacksPage with value set to v.
func NewOptGetStacksPage(v GetStacksPage) OptGetStacksPage {
	return OptGetStacksPage{
		Value: v,
		Set:   true,
	}
}

// OptGetStacksPage is optional GetStacksPage.
type OptGetStacksPage struct {
	Value GetStacksPage
	Set   bool
}

// IsSet returns true if OptGetStacksPage was set.
func (o OptGetStacksPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStacksPage) Reset() {
	var v GetStacksPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStacksPage) SetTo(v GetStacksPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStacksPage) Get() (v GetStacksPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStacksPage) Or(d GetStacksPage) GetStacksPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetTLSGenerationAttemptsFilter returns new OptGetTLSGenerationAttemptsFilter with value set to v.
func NewOptGetTLSGenerationAttemptsFilter(v GetTLSGenerationAttemptsFilter) OptGetTLSGenerationAttemptsFilter {
	return OptGetTLSGenerationAttemptsFilter{
		Value: v,
		Set:   true,
	}
}

// OptGetTLSGenerationAttemptsFilter is optional GetTLSGenerationAttemptsFilter.
type OptGetTLSGenerationAttemptsFilter struct {
	Value GetTLSGenerationAttemptsFilter
	Set   bool
}

// IsSet returns true if OptGetTLSGenerationAttemptsFilter was set.
func (o OptGetTLSGenerationAttemptsFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetTLSGenerationAttemptsFilter) Reset() {
	var v GetTLSGenerationAttemptsFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetTLSGenerationAttemptsFilter) SetTo(v GetTLSGenerationAttemptsFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetTLSGenerationAttemptsFilter) Get() (v GetTLSGenerationAttemptsFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetTLSGenerationAttemptsFilter) Or(d GetTLSGenerationAttemptsFilter) GetTLSGenerationAttemptsFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetTLSGenerationAttemptsPage returns new OptGetTLSGenerationAttemptsPage with value set to v.
func NewOptGetTLSGenerationAttemptsPage(v GetTLSGenerationAttemptsPage) OptGetTLSGenerationAttemptsPage {
	return OptGetTLSGenerationAttemptsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetTLSGenerationAttemptsPage is optional GetTLSGenerationAttemptsPage.
type OptGetTLSGenerationAttemptsPage struct {
	Value GetTLSGenerationAttemptsPage
	Set   bool
}

// IsSet returns true if OptGetTLSGenerationAttemptsPage was set.
func (o OptGetTLSGenerationAttemptsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetTLSGenerationAttemptsPage) Reset() {
	var v GetTLSGenerationAttemptsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetTLSGenerationAttemptsPage) SetTo(v GetTLSGenerationAttemptsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetTLSGenerationAttemptsPage) Get() (v GetTLSGenerationAttemptsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetTLSGenerationAttemptsPage) Or(d GetTLSGenerationAttemptsPage) GetTLSGenerationAttemptsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetVPNLoginsPage returns new OptGetVPNLoginsPage with value set to v.
func NewOptGetVPNLoginsPage(v GetVPNLoginsPage) OptGetVPNLoginsPage {
	return OptGetVPNLoginsPage{
		Value: v,
		Set:   true,
	}
}

// OptGetVPNLoginsPage is optional GetVPNLoginsPage.
type OptGetVPNLoginsPage struct {
	Value GetVPNLoginsPage
	Set   bool
}

// IsSet returns true if OptGetVPNLoginsPage was set.
func (o OptGetVPNLoginsPage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetVPNLoginsPage) Reset() {
	var v GetVPNLoginsPage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetVPNLoginsPage) SetTo(v GetVPNLoginsPage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetVPNLoginsPage) Get() (v GetVPNLoginsPage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetVPNLoginsPage) Or(d GetVPNLoginsPage) GetVPNLoginsPage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHub returns new OptHub with value set to v.
func NewOptHub(v Hub) OptHub {
	return OptHub{
		Value: v,
		Set:   true,
	}
}

// OptHub is optional Hub.
type OptHub struct {
	Value Hub
	Set   bool
}

// IsSet returns true if OptHub was set.
func (o OptHub) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHub) Reset() {
	var v Hub
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHub) SetTo(v Hub) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHub) Get() (v Hub, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHub) Or(d Hub) Hub {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembership returns new OptHubMembership with value set to v.
func NewOptHubMembership(v HubMembership) OptHubMembership {
	return OptHubMembership{
		Value: v,
		Set:   true,
	}
}

// OptHubMembership is optional HubMembership.
type OptHubMembership struct {
	Value HubMembership
	Set   bool
}

// IsSet returns true if OptHubMembership was set.
func (o OptHubMembership) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembership) Reset() {
	var v HubMembership
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembership) SetTo(v HubMembership) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembership) Get() (v HubMembership, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembership) Or(d HubMembership) HubMembership {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipCycle returns new OptHubMembershipCycle with value set to v.
func NewOptHubMembershipCycle(v HubMembershipCycle) OptHubMembershipCycle {
	return OptHubMembershipCycle{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipCycle is optional HubMembershipCycle.
type OptHubMembershipCycle struct {
	Value HubMembershipCycle
	Set   bool
}

// IsSet returns true if OptHubMembershipCycle was set.
func (o OptHubMembershipCycle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipCycle) Reset() {
	var v HubMembershipCycle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipCycle) SetTo(v HubMembershipCycle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipCycle) Get() (v HubMembershipCycle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipCycle) Or(d HubMembershipCycle) HubMembershipCycle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludes returns new OptHubMembershipIncludes with value set to v.
func NewOptHubMembershipIncludes(v HubMembershipIncludes) OptHubMembershipIncludes {
	return OptHubMembershipIncludes{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludes is optional HubMembershipIncludes.
type OptHubMembershipIncludes struct {
	Value HubMembershipIncludes
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludes was set.
func (o OptHubMembershipIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludes) Reset() {
	var v HubMembershipIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludes) SetTo(v HubMembershipIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludes) Get() (v HubMembershipIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludes) Or(d HubMembershipIncludes) HubMembershipIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesAccounts returns new OptHubMembershipIncludesAccounts with value set to v.
func NewOptHubMembershipIncludesAccounts(v HubMembershipIncludesAccounts) OptHubMembershipIncludesAccounts {
	return OptHubMembershipIncludesAccounts{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesAccounts is optional HubMembershipIncludesAccounts.
type OptHubMembershipIncludesAccounts struct {
	Value HubMembershipIncludesAccounts
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesAccounts was set.
func (o OptHubMembershipIncludesAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesAccounts) Reset() {
	var v HubMembershipIncludesAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesAccounts) SetTo(v HubMembershipIncludesAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesAccounts) Get() (v HubMembershipIncludesAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesAccounts) Or(d HubMembershipIncludesAccounts) HubMembershipIncludesAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesHubs returns new OptHubMembershipIncludesHubs with value set to v.
func NewOptHubMembershipIncludesHubs(v HubMembershipIncludesHubs) OptHubMembershipIncludesHubs {
	return OptHubMembershipIncludesHubs{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesHubs is optional HubMembershipIncludesHubs.
type OptHubMembershipIncludesHubs struct {
	Value HubMembershipIncludesHubs
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesHubs was set.
func (o OptHubMembershipIncludesHubs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesHubs) Reset() {
	var v HubMembershipIncludesHubs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesHubs) SetTo(v HubMembershipIncludesHubs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesHubs) Get() (v HubMembershipIncludesHubs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesHubs) Or(d HubMembershipIncludesHubs) HubMembershipIncludesHubs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesRoles returns new OptHubMembershipIncludesRoles with value set to v.
func NewOptHubMembershipIncludesRoles(v HubMembershipIncludesRoles) OptHubMembershipIncludesRoles {
	return OptHubMembershipIncludesRoles{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesRoles is optional HubMembershipIncludesRoles.
type OptHubMembershipIncludesRoles struct {
	Value HubMembershipIncludesRoles
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesRoles was set.
func (o OptHubMembershipIncludesRoles) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesRoles) Reset() {
	var v HubMembershipIncludesRoles
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesRoles) SetTo(v HubMembershipIncludesRoles) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesRoles) Get() (v HubMembershipIncludesRoles, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesRoles) Or(d HubMembershipIncludesRoles) HubMembershipIncludesRoles {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesRolesIdentifiers returns new OptHubMembershipIncludesRolesIdentifiers with value set to v.
func NewOptHubMembershipIncludesRolesIdentifiers(v HubMembershipIncludesRolesIdentifiers) OptHubMembershipIncludesRolesIdentifiers {
	return OptHubMembershipIncludesRolesIdentifiers{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesRolesIdentifiers is optional HubMembershipIncludesRolesIdentifiers.
type OptHubMembershipIncludesRolesIdentifiers struct {
	Value HubMembershipIncludesRolesIdentifiers
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesRolesIdentifiers was set.
func (o OptHubMembershipIncludesRolesIdentifiers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesRolesIdentifiers) Reset() {
	var v HubMembershipIncludesRolesIdentifiers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesRolesIdentifiers) SetTo(v HubMembershipIncludesRolesIdentifiers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesRolesIdentifiers) Get() (v HubMembershipIncludesRolesIdentifiers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesRolesIdentifiers) Or(d HubMembershipIncludesRolesIdentifiers) HubMembershipIncludesRolesIdentifiers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesSenders returns new OptHubMembershipIncludesSenders with value set to v.
func NewOptHubMembershipIncludesSenders(v HubMembershipIncludesSenders) OptHubMembershipIncludesSenders {
	return OptHubMembershipIncludesSenders{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesSenders is optional HubMembershipIncludesSenders.
type OptHubMembershipIncludesSenders struct {
	Value HubMembershipIncludesSenders
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesSenders was set.
func (o OptHubMembershipIncludesSenders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesSenders) Reset() {
	var v HubMembershipIncludesSenders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesSenders) SetTo(v HubMembershipIncludesSenders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesSenders) Get() (v HubMembershipIncludesSenders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesSenders) Or(d HubMembershipIncludesSenders) HubMembershipIncludesSenders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipIncludesSendersAccounts returns new OptHubMembershipIncludesSendersAccounts with value set to v.
func NewOptHubMembershipIncludesSendersAccounts(v HubMembershipIncludesSendersAccounts) OptHubMembershipIncludesSendersAccounts {
	return OptHubMembershipIncludesSendersAccounts{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipIncludesSendersAccounts is optional HubMembershipIncludesSendersAccounts.
type OptHubMembershipIncludesSendersAccounts struct {
	Value HubMembershipIncludesSendersAccounts
	Set   bool
}

// IsSet returns true if OptHubMembershipIncludesSendersAccounts was set.
func (o OptHubMembershipIncludesSendersAccounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipIncludesSendersAccounts) Reset() {
	var v HubMembershipIncludesSendersAccounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipIncludesSendersAccounts) SetTo(v HubMembershipIncludesSendersAccounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipIncludesSendersAccounts) Get() (v HubMembershipIncludesSendersAccounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipIncludesSendersAccounts) Or(d HubMembershipIncludesSendersAccounts) HubMembershipIncludesSendersAccounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipMeta returns new OptHubMembershipMeta with value set to v.
func NewOptHubMembershipMeta(v HubMembershipMeta) OptHubMembershipMeta {
	return OptHubMembershipMeta{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipMeta is optional HubMembershipMeta.
type OptHubMembershipMeta struct {
	Value HubMembershipMeta
	Set   bool
}

// IsSet returns true if OptHubMembershipMeta was set.
func (o OptHubMembershipMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipMeta) Reset() {
	var v HubMembershipMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipMeta) SetTo(v HubMembershipMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipMeta) Get() (v HubMembershipMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipMeta) Or(d HubMembershipMeta) HubMembershipMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipMetaCapabilities returns new OptHubMembershipMetaCapabilities with value set to v.
func NewOptHubMembershipMetaCapabilities(v HubMembershipMetaCapabilities) OptHubMembershipMetaCapabilities {
	return OptHubMembershipMetaCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipMetaCapabilities is optional HubMembershipMetaCapabilities.
type OptHubMembershipMetaCapabilities struct {
	Value HubMembershipMetaCapabilities
	Set   bool
}

// IsSet returns true if OptHubMembershipMetaCapabilities was set.
func (o OptHubMembershipMetaCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipMetaCapabilities) Reset() {
	var v HubMembershipMetaCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipMetaCapabilities) SetTo(v HubMembershipMetaCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipMetaCapabilities) Get() (v HubMembershipMetaCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipMetaCapabilities) Or(d HubMembershipMetaCapabilities) HubMembershipMetaCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipPreferences returns new OptHubMembershipPreferences with value set to v.
func NewOptHubMembershipPreferences(v HubMembershipPreferences) OptHubMembershipPreferences {
	return OptHubMembershipPreferences{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipPreferences is optional HubMembershipPreferences.
type OptHubMembershipPreferences struct {
	Value HubMembershipPreferences
	Set   bool
}

// IsSet returns true if OptHubMembershipPreferences was set.
func (o OptHubMembershipPreferences) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipPreferences) Reset() {
	var v HubMembershipPreferences
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipPreferences) SetTo(v HubMembershipPreferences) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipPreferences) Get() (v HubMembershipPreferences, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipPreferences) Or(d HubMembershipPreferences) HubMembershipPreferences {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMembershipPreferencesEmailNotificaitons returns new OptHubMembershipPreferencesEmailNotificaitons with value set to v.
func NewOptHubMembershipPreferencesEmailNotificaitons(v HubMembershipPreferencesEmailNotificaitons) OptHubMembershipPreferencesEmailNotificaitons {
	return OptHubMembershipPreferencesEmailNotificaitons{
		Value: v,
		Set:   true,
	}
}

// OptHubMembershipPreferencesEmailNotificaitons is optional HubMembershipPreferencesEmailNotificaitons.
type OptHubMembershipPreferencesEmailNotificaitons struct {
	Value HubMembershipPreferencesEmailNotificaitons
	Set   bool
}

// IsSet returns true if OptHubMembershipPreferencesEmailNotificaitons was set.
func (o OptHubMembershipPreferencesEmailNotificaitons) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMembershipPreferencesEmailNotificaitons) Reset() {
	var v HubMembershipPreferencesEmailNotificaitons
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMembershipPreferencesEmailNotificaitons) SetTo(v HubMembershipPreferencesEmailNotificaitons) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMembershipPreferencesEmailNotificaitons) Get() (v HubMembershipPreferencesEmailNotificaitons, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMembershipPreferencesEmailNotificaitons) Or(d HubMembershipPreferencesEmailNotificaitons) HubMembershipPreferencesEmailNotificaitons {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubMeta returns new OptHubMeta with value set to v.
func NewOptHubMeta(v HubMeta) OptHubMeta {
	return OptHubMeta{
		Value: v,
		Set:   true,
	}
}

// OptHubMeta is optional HubMeta.
type OptHubMeta struct {
	Value HubMeta
	Set   bool
}

// IsSet returns true if OptHubMeta was set.
func (o OptHubMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubMeta) Reset() {
	var v HubMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubMeta) SetTo(v HubMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubMeta) Get() (v HubMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubMeta) Or(d HubMeta) HubMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubStateError returns new OptHubStateError with value set to v.
func NewOptHubStateError(v HubStateError) OptHubStateError {
	return OptHubStateError{
		Value: v,
		Set:   true,
	}
}

// OptHubStateError is optional HubStateError.
type OptHubStateError struct {
	Value HubStateError
	Set   bool
}

// IsSet returns true if OptHubStateError was set.
func (o OptHubStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubStateError) Reset() {
	var v HubStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubStateError) SetTo(v HubStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubStateError) Get() (v HubStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubStateError) Or(d HubStateError) HubStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHubWebhooks returns new OptHubWebhooks with value set to v.
func NewOptHubWebhooks(v HubWebhooks) OptHubWebhooks {
	return OptHubWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptHubWebhooks is optional HubWebhooks.
type OptHubWebhooks struct {
	Value HubWebhooks
	Set   bool
}

// IsSet returns true if OptHubWebhooks was set.
func (o OptHubWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHubWebhooks) Reset() {
	var v HubWebhooks
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHubWebhooks) SetTo(v HubWebhooks) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHubWebhooks) Get() (v HubWebhooks, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHubWebhooks) Or(d HubWebhooks) HubWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHugeTLB returns new OptHugeTLB with value set to v.
func NewOptHugeTLB(v HugeTLB) OptHugeTLB {
	return OptHugeTLB{
		Value: v,
		Set:   true,
	}
}

// OptHugeTLB is optional HugeTLB.
type OptHugeTLB struct {
	Value HugeTLB
	Set   bool
}

// IsSet returns true if OptHugeTLB was set.
func (o OptHugeTLB) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHugeTLB) Reset() {
	var v HugeTLB
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHugeTLB) SetTo(v HugeTLB) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHugeTLB) Get() (v HugeTLB, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHugeTLB) Or(d HugeTLB) HugeTLB {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHybridIdentifier returns new OptHybridIdentifier with value set to v.
func NewOptHybridIdentifier(v HybridIdentifier) OptHybridIdentifier {
	return OptHybridIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptHybridIdentifier is optional HybridIdentifier.
type OptHybridIdentifier struct {
	Value HybridIdentifier
	Set   bool
}

// IsSet returns true if OptHybridIdentifier was set.
func (o OptHybridIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHybridIdentifier) Reset() {
	var v HybridIdentifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHybridIdentifier) SetTo(v HybridIdentifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHybridIdentifier) Get() (v HybridIdentifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHybridIdentifier) Or(d HybridIdentifier) HybridIdentifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentifier returns new OptIdentifier with value set to v.
func NewOptIdentifier(v Identifier) OptIdentifier {
	return OptIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptIdentifier is optional Identifier.
type OptIdentifier struct {
	Value Identifier
	Set   bool
}

// IsSet returns true if OptIdentifier was set.
func (o OptIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentifier) Reset() {
	var v Identifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentifier) SetTo(v Identifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentifier) Get() (v Identifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentifier) Or(d Identifier) Identifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIdentifierIncludes returns new OptIdentifierIncludes with value set to v.
func NewOptIdentifierIncludes(v IdentifierIncludes) OptIdentifierIncludes {
	return OptIdentifierIncludes{
		Value: v,
		Set:   true,
	}
}

// OptIdentifierIncludes is optional IdentifierIncludes.
type OptIdentifierIncludes struct {
	Value IdentifierIncludes
	Set   bool
}

// IsSet returns true if OptIdentifierIncludes was set.
func (o OptIdentifierIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIdentifierIncludes) Reset() {
	var v IdentifierIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIdentifierIncludes) SetTo(v IdentifierIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIdentifierIncludes) Get() (v IdentifierIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIdentifierIncludes) Or(d IdentifierIncludes) IdentifierIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageAbout returns new OptImageAbout with value set to v.
func NewOptImageAbout(v ImageAbout) OptImageAbout {
	return OptImageAbout{
		Value: v,
		Set:   true,
	}
}

// OptImageAbout is optional ImageAbout.
type OptImageAbout struct {
	Value ImageAbout
	Set   bool
}

// IsSet returns true if OptImageAbout was set.
func (o OptImageAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageAbout) Reset() {
	var v ImageAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageAbout) SetTo(v ImageAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageAbout) Get() (v ImageAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageAbout) Or(d ImageAbout) ImageAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageBuildArgs returns new OptImageBuildArgs with value set to v.
func NewOptImageBuildArgs(v ImageBuildArgs) OptImageBuildArgs {
	return OptImageBuildArgs{
		Value: v,
		Set:   true,
	}
}

// OptImageBuildArgs is optional ImageBuildArgs.
type OptImageBuildArgs struct {
	Value ImageBuildArgs
	Set   bool
}

// IsSet returns true if OptImageBuildArgs was set.
func (o OptImageBuildArgs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageBuildArgs) Reset() {
	var v ImageBuildArgs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageBuildArgs) SetTo(v ImageBuildArgs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageBuildArgs) Get() (v ImageBuildArgs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageBuildArgs) Or(d ImageBuildArgs) ImageBuildArgs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageConfigVolumesItemMode returns new OptImageConfigVolumesItemMode with value set to v.
func NewOptImageConfigVolumesItemMode(v ImageConfigVolumesItemMode) OptImageConfigVolumesItemMode {
	return OptImageConfigVolumesItemMode{
		Value: v,
		Set:   true,
	}
}

// OptImageConfigVolumesItemMode is optional ImageConfigVolumesItemMode.
type OptImageConfigVolumesItemMode struct {
	Value ImageConfigVolumesItemMode
	Set   bool
}

// IsSet returns true if OptImageConfigVolumesItemMode was set.
func (o OptImageConfigVolumesItemMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageConfigVolumesItemMode) Reset() {
	var v ImageConfigVolumesItemMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageConfigVolumesItemMode) SetTo(v ImageConfigVolumesItemMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageConfigVolumesItemMode) Get() (v ImageConfigVolumesItemMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageConfigVolumesItemMode) Or(d ImageConfigVolumesItemMode) ImageConfigVolumesItemMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageCreateImportStepDetailsBuild returns new OptImageCreateImportStepDetailsBuild with value set to v.
func NewOptImageCreateImportStepDetailsBuild(v ImageCreateImportStepDetailsBuild) OptImageCreateImportStepDetailsBuild {
	return OptImageCreateImportStepDetailsBuild{
		Value: v,
		Set:   true,
	}
}

// OptImageCreateImportStepDetailsBuild is optional ImageCreateImportStepDetailsBuild.
type OptImageCreateImportStepDetailsBuild struct {
	Value ImageCreateImportStepDetailsBuild
	Set   bool
}

// IsSet returns true if OptImageCreateImportStepDetailsBuild was set.
func (o OptImageCreateImportStepDetailsBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageCreateImportStepDetailsBuild) Reset() {
	var v ImageCreateImportStepDetailsBuild
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageCreateImportStepDetailsBuild) SetTo(v ImageCreateImportStepDetailsBuild) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageCreateImportStepDetailsBuild) Get() (v ImageCreateImportStepDetailsBuild, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageCreateImportStepDetailsBuild) Or(d ImageCreateImportStepDetailsBuild) ImageCreateImportStepDetailsBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageCreateImportStepOptions returns new OptImageCreateImportStepOptions with value set to v.
func NewOptImageCreateImportStepOptions(v ImageCreateImportStepOptions) OptImageCreateImportStepOptions {
	return OptImageCreateImportStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptImageCreateImportStepOptions is optional ImageCreateImportStepOptions.
type OptImageCreateImportStepOptions struct {
	Value ImageCreateImportStepOptions
	Set   bool
}

// IsSet returns true if OptImageCreateImportStepOptions was set.
func (o OptImageCreateImportStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageCreateImportStepOptions) Reset() {
	var v ImageCreateImportStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageCreateImportStepOptions) SetTo(v ImageCreateImportStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageCreateImportStepOptions) Get() (v ImageCreateImportStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageCreateImportStepOptions) Or(d ImageCreateImportStepOptions) ImageCreateImportStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageCreateStepDetailsBuild returns new OptImageCreateStepDetailsBuild with value set to v.
func NewOptImageCreateStepDetailsBuild(v ImageCreateStepDetailsBuild) OptImageCreateStepDetailsBuild {
	return OptImageCreateStepDetailsBuild{
		Value: v,
		Set:   true,
	}
}

// OptImageCreateStepDetailsBuild is optional ImageCreateStepDetailsBuild.
type OptImageCreateStepDetailsBuild struct {
	Value ImageCreateStepDetailsBuild
	Set   bool
}

// IsSet returns true if OptImageCreateStepDetailsBuild was set.
func (o OptImageCreateStepDetailsBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageCreateStepDetailsBuild) Reset() {
	var v ImageCreateStepDetailsBuild
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageCreateStepDetailsBuild) SetTo(v ImageCreateStepDetailsBuild) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageCreateStepDetailsBuild) Get() (v ImageCreateStepDetailsBuild, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageCreateStepDetailsBuild) Or(d ImageCreateStepDetailsBuild) ImageCreateStepDetailsBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageCreateStepOptions returns new OptImageCreateStepOptions with value set to v.
func NewOptImageCreateStepOptions(v ImageCreateStepOptions) OptImageCreateStepOptions {
	return OptImageCreateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptImageCreateStepOptions is optional ImageCreateStepOptions.
type OptImageCreateStepOptions struct {
	Value ImageCreateStepOptions
	Set   bool
}

// IsSet returns true if OptImageCreateStepOptions was set.
func (o OptImageCreateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageCreateStepOptions) Reset() {
	var v ImageCreateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageCreateStepOptions) SetTo(v ImageCreateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageCreateStepOptions) Get() (v ImageCreateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageCreateStepOptions) Or(d ImageCreateStepOptions) ImageCreateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageImportStepOptions returns new OptImageImportStepOptions with value set to v.
func NewOptImageImportStepOptions(v ImageImportStepOptions) OptImageImportStepOptions {
	return OptImageImportStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptImageImportStepOptions is optional ImageImportStepOptions.
type OptImageImportStepOptions struct {
	Value ImageImportStepOptions
	Set   bool
}

// IsSet returns true if OptImageImportStepOptions was set.
func (o OptImageImportStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageImportStepOptions) Reset() {
	var v ImageImportStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageImportStepOptions) SetTo(v ImageImportStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageImportStepOptions) Get() (v ImageImportStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageImportStepOptions) Or(d ImageImportStepOptions) ImageImportStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageIncludes returns new OptImageIncludes with value set to v.
func NewOptImageIncludes(v ImageIncludes) OptImageIncludes {
	return OptImageIncludes{
		Value: v,
		Set:   true,
	}
}

// OptImageIncludes is optional ImageIncludes.
type OptImageIncludes struct {
	Value ImageIncludes
	Set   bool
}

// IsSet returns true if OptImageIncludes was set.
func (o OptImageIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageIncludes) Reset() {
	var v ImageIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageIncludes) SetTo(v ImageIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageIncludes) Get() (v ImageIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageIncludes) Or(d ImageIncludes) ImageIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageMeta returns new OptImageMeta with value set to v.
func NewOptImageMeta(v ImageMeta) OptImageMeta {
	return OptImageMeta{
		Value: v,
		Set:   true,
	}
}

// OptImageMeta is optional ImageMeta.
type OptImageMeta struct {
	Value ImageMeta
	Set   bool
}

// IsSet returns true if OptImageMeta was set.
func (o OptImageMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageMeta) Reset() {
	var v ImageMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageMeta) SetTo(v ImageMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageMeta) Get() (v ImageMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageMeta) Or(d ImageMeta) ImageMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageOrigin returns new OptImageOrigin with value set to v.
func NewOptImageOrigin(v ImageOrigin) OptImageOrigin {
	return OptImageOrigin{
		Value: v,
		Set:   true,
	}
}

// OptImageOrigin is optional ImageOrigin.
type OptImageOrigin struct {
	Value ImageOrigin
	Set   bool
}

// IsSet returns true if OptImageOrigin was set.
func (o OptImageOrigin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageOrigin) Reset() {
	var v ImageOrigin
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageOrigin) SetTo(v ImageOrigin) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageOrigin) Get() (v ImageOrigin, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageOrigin) Or(d ImageOrigin) ImageOrigin {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceAbout returns new OptImageSourceAbout with value set to v.
func NewOptImageSourceAbout(v ImageSourceAbout) OptImageSourceAbout {
	return OptImageSourceAbout{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceAbout is optional ImageSourceAbout.
type OptImageSourceAbout struct {
	Value ImageSourceAbout
	Set   bool
}

// IsSet returns true if OptImageSourceAbout was set.
func (o OptImageSourceAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceAbout) Reset() {
	var v ImageSourceAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceAbout) SetTo(v ImageSourceAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceAbout) Get() (v ImageSourceAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceAbout) Or(d ImageSourceAbout) ImageSourceAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceCreateStepOptions returns new OptImageSourceCreateStepOptions with value set to v.
func NewOptImageSourceCreateStepOptions(v ImageSourceCreateStepOptions) OptImageSourceCreateStepOptions {
	return OptImageSourceCreateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceCreateStepOptions is optional ImageSourceCreateStepOptions.
type OptImageSourceCreateStepOptions struct {
	Value ImageSourceCreateStepOptions
	Set   bool
}

// IsSet returns true if OptImageSourceCreateStepOptions was set.
func (o OptImageSourceCreateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceCreateStepOptions) Reset() {
	var v ImageSourceCreateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceCreateStepOptions) SetTo(v ImageSourceCreateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceCreateStepOptions) Get() (v ImageSourceCreateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceCreateStepOptions) Or(d ImageSourceCreateStepOptions) ImageSourceCreateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceDetails returns new OptImageSourceDetails with value set to v.
func NewOptImageSourceDetails(v ImageSourceDetails) OptImageSourceDetails {
	return OptImageSourceDetails{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceDetails is optional ImageSourceDetails.
type OptImageSourceDetails struct {
	Value ImageSourceDetails
	Set   bool
}

// IsSet returns true if OptImageSourceDetails was set.
func (o OptImageSourceDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceDetails) Reset() {
	var v ImageSourceDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceDetails) SetTo(v ImageSourceDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceDetails) Get() (v ImageSourceDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceDetails) Or(d ImageSourceDetails) ImageSourceDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceIncludes returns new OptImageSourceIncludes with value set to v.
func NewOptImageSourceIncludes(v ImageSourceIncludes) OptImageSourceIncludes {
	return OptImageSourceIncludes{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceIncludes is optional ImageSourceIncludes.
type OptImageSourceIncludes struct {
	Value ImageSourceIncludes
	Set   bool
}

// IsSet returns true if OptImageSourceIncludes was set.
func (o OptImageSourceIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceIncludes) Reset() {
	var v ImageSourceIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceIncludes) SetTo(v ImageSourceIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceIncludes) Get() (v ImageSourceIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceIncludes) Or(d ImageSourceIncludes) ImageSourceIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceMeta returns new OptImageSourceMeta with value set to v.
func NewOptImageSourceMeta(v ImageSourceMeta) OptImageSourceMeta {
	return OptImageSourceMeta{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceMeta is optional ImageSourceMeta.
type OptImageSourceMeta struct {
	Value ImageSourceMeta
	Set   bool
}

// IsSet returns true if OptImageSourceMeta was set.
func (o OptImageSourceMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceMeta) Reset() {
	var v ImageSourceMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceMeta) SetTo(v ImageSourceMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceMeta) Get() (v ImageSourceMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceMeta) Or(d ImageSourceMeta) ImageSourceMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceMetaImagesCount returns new OptImageSourceMetaImagesCount with value set to v.
func NewOptImageSourceMetaImagesCount(v ImageSourceMetaImagesCount) OptImageSourceMetaImagesCount {
	return OptImageSourceMetaImagesCount{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceMetaImagesCount is optional ImageSourceMetaImagesCount.
type OptImageSourceMetaImagesCount struct {
	Value ImageSourceMetaImagesCount
	Set   bool
}

// IsSet returns true if OptImageSourceMetaImagesCount was set.
func (o OptImageSourceMetaImagesCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceMetaImagesCount) Reset() {
	var v ImageSourceMetaImagesCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceMetaImagesCount) SetTo(v ImageSourceMetaImagesCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceMetaImagesCount) Get() (v ImageSourceMetaImagesCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceMetaImagesCount) Or(d ImageSourceMetaImagesCount) ImageSourceMetaImagesCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageSourceStateError returns new OptImageSourceStateError with value set to v.
func NewOptImageSourceStateError(v ImageSourceStateError) OptImageSourceStateError {
	return OptImageSourceStateError{
		Value: v,
		Set:   true,
	}
}

// OptImageSourceStateError is optional ImageSourceStateError.
type OptImageSourceStateError struct {
	Value ImageSourceStateError
	Set   bool
}

// IsSet returns true if OptImageSourceStateError was set.
func (o OptImageSourceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageSourceStateError) Reset() {
	var v ImageSourceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageSourceStateError) SetTo(v ImageSourceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageSourceStateError) Get() (v ImageSourceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageSourceStateError) Or(d ImageSourceStateError) ImageSourceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImageStateError returns new OptImageStateError with value set to v.
func NewOptImageStateError(v ImageStateError) OptImageStateError {
	return OptImageStateError{
		Value: v,
		Set:   true,
	}
}

// OptImageStateError is optional ImageStateError.
type OptImageStateError struct {
	Value ImageStateError
	Set   bool
}

// IsSet returns true if OptImageStateError was set.
func (o OptImageStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImageStateError) Reset() {
	var v ImageStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImageStateError) SetTo(v ImageStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImageStateError) Get() (v ImageStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImageStateError) Or(d ImageStateError) ImageStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImagesIncludes returns new OptImagesIncludes with value set to v.
func NewOptImagesIncludes(v ImagesIncludes) OptImagesIncludes {
	return OptImagesIncludes{
		Value: v,
		Set:   true,
	}
}

// OptImagesIncludes is optional ImagesIncludes.
type OptImagesIncludes struct {
	Value ImagesIncludes
	Set   bool
}

// IsSet returns true if OptImagesIncludes was set.
func (o OptImagesIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImagesIncludes) Reset() {
	var v ImagesIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImagesIncludes) SetTo(v ImagesIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImagesIncludes) Get() (v ImagesIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImagesIncludes) Or(d ImagesIncludes) ImagesIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptImagesPruneStepOptions returns new OptImagesPruneStepOptions with value set to v.
func NewOptImagesPruneStepOptions(v ImagesPruneStepOptions) OptImagesPruneStepOptions {
	return OptImagesPruneStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptImagesPruneStepOptions is optional ImagesPruneStepOptions.
type OptImagesPruneStepOptions struct {
	Value ImagesPruneStepOptions
	Set   bool
}

// IsSet returns true if OptImagesPruneStepOptions was set.
func (o OptImagesPruneStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImagesPruneStepOptions) Reset() {
	var v ImagesPruneStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImagesPruneStepOptions) SetTo(v ImagesPruneStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImagesPruneStepOptions) Get() (v ImagesPruneStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImagesPruneStepOptions) Or(d ImagesPruneStepOptions) ImagesPruneStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInfrastructureResourceSummary returns new OptInfrastructureResourceSummary with value set to v.
func NewOptInfrastructureResourceSummary(v InfrastructureResourceSummary) OptInfrastructureResourceSummary {
	return OptInfrastructureResourceSummary{
		Value: v,
		Set:   true,
	}
}

// OptInfrastructureResourceSummary is optional InfrastructureResourceSummary.
type OptInfrastructureResourceSummary struct {
	Value InfrastructureResourceSummary
	Set   bool
}

// IsSet returns true if OptInfrastructureResourceSummary was set.
func (o OptInfrastructureResourceSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInfrastructureResourceSummary) Reset() {
	var v InfrastructureResourceSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInfrastructureResourceSummary) SetTo(v InfrastructureResourceSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInfrastructureResourceSummary) Get() (v InfrastructureResourceSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInfrastructureResourceSummary) Or(d InfrastructureResourceSummary) InfrastructureResourceSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceFunction returns new OptInstanceFunction with value set to v.
func NewOptInstanceFunction(v InstanceFunction) OptInstanceFunction {
	return OptInstanceFunction{
		Value: v,
		Set:   true,
	}
}

// OptInstanceFunction is optional InstanceFunction.
type OptInstanceFunction struct {
	Value InstanceFunction
	Set   bool
}

// IsSet returns true if OptInstanceFunction was set.
func (o OptInstanceFunction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceFunction) Reset() {
	var v InstanceFunction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceFunction) SetTo(v InstanceFunction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceFunction) Get() (v InstanceFunction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceFunction) Or(d InstanceFunction) InstanceFunction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceIncludes returns new OptInstanceIncludes with value set to v.
func NewOptInstanceIncludes(v InstanceIncludes) OptInstanceIncludes {
	return OptInstanceIncludes{
		Value: v,
		Set:   true,
	}
}

// OptInstanceIncludes is optional InstanceIncludes.
type OptInstanceIncludes struct {
	Value InstanceIncludes
	Set   bool
}

// IsSet returns true if OptInstanceIncludes was set.
func (o OptInstanceIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceIncludes) Reset() {
	var v InstanceIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceIncludes) SetTo(v InstanceIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceIncludes) Get() (v InstanceIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceIncludes) Or(d InstanceIncludes) InstanceIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceStateError returns new OptInstanceStateError with value set to v.
func NewOptInstanceStateError(v InstanceStateError) OptInstanceStateError {
	return OptInstanceStateError{
		Value: v,
		Set:   true,
	}
}

// OptInstanceStateError is optional InstanceStateError.
type OptInstanceStateError struct {
	Value InstanceStateError
	Set   bool
}

// IsSet returns true if OptInstanceStateError was set.
func (o OptInstanceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceStateError) Reset() {
	var v InstanceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceStateError) SetTo(v InstanceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceStateError) Get() (v InstanceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceStateError) Or(d InstanceStateError) InstanceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntegrationDefinition returns new OptIntegrationDefinition with value set to v.
func NewOptIntegrationDefinition(v IntegrationDefinition) OptIntegrationDefinition {
	return OptIntegrationDefinition{
		Value: v,
		Set:   true,
	}
}

// OptIntegrationDefinition is optional IntegrationDefinition.
type OptIntegrationDefinition struct {
	Value IntegrationDefinition
	Set   bool
}

// IsSet returns true if OptIntegrationDefinition was set.
func (o OptIntegrationDefinition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntegrationDefinition) Reset() {
	var v IntegrationDefinition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntegrationDefinition) SetTo(v IntegrationDefinition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntegrationDefinition) Get() (v IntegrationDefinition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntegrationDefinition) Or(d IntegrationDefinition) IntegrationDefinition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntegrationDefinitionFields returns new OptIntegrationDefinitionFields with value set to v.
func NewOptIntegrationDefinitionFields(v IntegrationDefinitionFields) OptIntegrationDefinitionFields {
	return OptIntegrationDefinitionFields{
		Value: v,
		Set:   true,
	}
}

// OptIntegrationDefinitionFields is optional IntegrationDefinitionFields.
type OptIntegrationDefinitionFields struct {
	Value IntegrationDefinitionFields
	Set   bool
}

// IsSet returns true if OptIntegrationDefinitionFields was set.
func (o OptIntegrationDefinitionFields) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntegrationDefinitionFields) Reset() {
	var v IntegrationDefinitionFields
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntegrationDefinitionFields) SetTo(v IntegrationDefinitionFields) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntegrationDefinitionFields) Get() (v IntegrationDefinitionFields, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntegrationDefinitionFields) Or(d IntegrationDefinitionFields) IntegrationDefinitionFields {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntegrationStateError returns new OptIntegrationStateError with value set to v.
func NewOptIntegrationStateError(v IntegrationStateError) OptIntegrationStateError {
	return OptIntegrationStateError{
		Value: v,
		Set:   true,
	}
}

// OptIntegrationStateError is optional IntegrationStateError.
type OptIntegrationStateError struct {
	Value IntegrationStateError
	Set   bool
}

// IsSet returns true if OptIntegrationStateError was set.
func (o OptIntegrationStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntegrationStateError) Reset() {
	var v IntegrationStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntegrationStateError) SetTo(v IntegrationStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntegrationStateError) Get() (v IntegrationStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntegrationStateError) Or(d IntegrationStateError) IntegrationStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntegrationsIncludes returns new OptIntegrationsIncludes with value set to v.
func NewOptIntegrationsIncludes(v IntegrationsIncludes) OptIntegrationsIncludes {
	return OptIntegrationsIncludes{
		Value: v,
		Set:   true,
	}
}

// OptIntegrationsIncludes is optional IntegrationsIncludes.
type OptIntegrationsIncludes struct {
	Value IntegrationsIncludes
	Set   bool
}

// IsSet returns true if OptIntegrationsIncludes was set.
func (o OptIntegrationsIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntegrationsIncludes) Reset() {
	var v IntegrationsIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntegrationsIncludes) SetTo(v IntegrationsIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntegrationsIncludes) Get() (v IntegrationsIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntegrationsIncludes) Or(d IntegrationsIncludes) IntegrationsIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoiceMeta returns new OptInvoiceMeta with value set to v.
func NewOptInvoiceMeta(v InvoiceMeta) OptInvoiceMeta {
	return OptInvoiceMeta{
		Value: v,
		Set:   true,
	}
}

// OptInvoiceMeta is optional InvoiceMeta.
type OptInvoiceMeta struct {
	Value InvoiceMeta
	Set   bool
}

// IsSet returns true if OptInvoiceMeta was set.
func (o OptInvoiceMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoiceMeta) Reset() {
	var v InvoiceMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoiceMeta) SetTo(v InvoiceMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoiceMeta) Get() (v InvoiceMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoiceMeta) Or(d InvoiceMeta) InvoiceMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoiceStateError returns new OptInvoiceStateError with value set to v.
func NewOptInvoiceStateError(v InvoiceStateError) OptInvoiceStateError {
	return OptInvoiceStateError{
		Value: v,
		Set:   true,
	}
}

// OptInvoiceStateError is optional InvoiceStateError.
type OptInvoiceStateError struct {
	Value InvoiceStateError
	Set   bool
}

// IsSet returns true if OptInvoiceStateError was set.
func (o OptInvoiceStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoiceStateError) Reset() {
	var v InvoiceStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoiceStateError) SetTo(v InvoiceStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoiceStateError) Get() (v InvoiceStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoiceStateError) Or(d InvoiceStateError) InvoiceStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIpStateError returns new OptIpStateError with value set to v.
func NewOptIpStateError(v IpStateError) OptIpStateError {
	return OptIpStateError{
		Value: v,
		Set:   true,
	}
}

// OptIpStateError is optional IpStateError.
type OptIpStateError struct {
	Value IpStateError
	Set   bool
}

// IsSet returns true if OptIpStateError was set.
func (o OptIpStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIpStateError) Reset() {
	var v IpStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIpStateError) SetTo(v IpStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIpStateError) Get() (v IpStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIpStateError) Or(d IpStateError) IpStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobDescriptor returns new OptJobDescriptor with value set to v.
func NewOptJobDescriptor(v JobDescriptor) OptJobDescriptor {
	return OptJobDescriptor{
		Value: v,
		Set:   true,
	}
}

// OptJobDescriptor is optional JobDescriptor.
type OptJobDescriptor struct {
	Value JobDescriptor
	Set   bool
}

// IsSet returns true if OptJobDescriptor was set.
func (o OptJobDescriptor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobDescriptor) Reset() {
	var v JobDescriptor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobDescriptor) SetTo(v JobDescriptor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobDescriptor) Get() (v JobDescriptor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobDescriptor) Or(d JobDescriptor) JobDescriptor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobDescriptorJob returns new OptJobDescriptorJob with value set to v.
func NewOptJobDescriptorJob(v JobDescriptorJob) OptJobDescriptorJob {
	return OptJobDescriptorJob{
		Value: v,
		Set:   true,
	}
}

// OptJobDescriptorJob is optional JobDescriptorJob.
type OptJobDescriptorJob struct {
	Value JobDescriptorJob
	Set   bool
}

// IsSet returns true if OptJobDescriptorJob was set.
func (o OptJobDescriptorJob) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobDescriptorJob) Reset() {
	var v JobDescriptorJob
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobDescriptorJob) SetTo(v JobDescriptorJob) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobDescriptorJob) Get() (v JobDescriptorJob, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobDescriptorJob) Or(d JobDescriptorJob) JobDescriptorJob {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJobIncludes returns new OptJobIncludes with value set to v.
func NewOptJobIncludes(v JobIncludes) OptJobIncludes {
	return OptJobIncludes{
		Value: v,
		Set:   true,
	}
}

// OptJobIncludes is optional JobIncludes.
type OptJobIncludes struct {
	Value JobIncludes
	Set   bool
}

// IsSet returns true if OptJobIncludes was set.
func (o OptJobIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJobIncludes) Reset() {
	var v JobIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJobIncludes) SetTo(v JobIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJobIncludes) Get() (v JobIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJobIncludes) Or(d JobIncludes) JobIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors returns new OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors with value set to v.
func NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors {
	return OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors is optional LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors.
type OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) Or(d LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors) LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemConnectionsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors returns new OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors with value set to v.
func NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors {
	return OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors is optional LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors.
type OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) Or(d LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors) LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses returns new OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses with value set to v.
func NewOptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses {
	return OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses is optional LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses.
type OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses
	Set   bool
}

// IsSet returns true if OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) Or(d LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses) LoadBalancerLatestTelemetryInstanceLatestRouterDestinationsItemRequestsResponses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors returns new OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors with value set to v.
func NewOptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors {
	return OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors is optional LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors.
type OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors struct {
	Value LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) SetTo(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) Get() (v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) Or(d LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors) LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses returns new OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses with value set to v.
func NewOptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses {
	return OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses is optional LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses.
type OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses struct {
	Value LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses
	Set   bool
}

// IsSet returns true if OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) SetTo(v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) Get() (v LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) Or(d LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses) LoadBalancerLatestTelemetryInstanceLatestUrlsDestinationsItemRequestsResponses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors returns new OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors with value set to v.
func NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors(v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors {
	return OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors is optional LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors.
type OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors struct {
	Value LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) Reset() {
	var v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) SetTo(v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) Get() (v LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) Or(d LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors) LoadBalancerTelemetrySnapshotRouterDestinationsItemConnectionsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors returns new OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors with value set to v.
func NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors {
	return OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors is optional LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors.
type OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors struct {
	Value LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) Reset() {
	var v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) SetTo(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) Get() (v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) Or(d LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors) LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses returns new OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses with value set to v.
func NewOptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses {
	return OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses is optional LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses.
type OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses struct {
	Value LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses
	Set   bool
}

// IsSet returns true if OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) Reset() {
	var v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) SetTo(v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) Get() (v LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) Or(d LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses) LoadBalancerTelemetrySnapshotRouterDestinationsItemRequestsResponses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors returns new OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors with value set to v.
func NewOptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors {
	return OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors is optional LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors.
type OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors struct {
	Value LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors
	Set   bool
}

// IsSet returns true if OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors was set.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) Reset() {
	var v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) SetTo(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) Get() (v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) Or(d LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors) LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsErrors {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses returns new OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses with value set to v.
func NewOptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses {
	return OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses{
		Value: v,
		Set:   true,
	}
}

// OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses is optional LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses.
type OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses struct {
	Value LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses
	Set   bool
}

// IsSet returns true if OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses was set.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) Reset() {
	var v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) SetTo(v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) Get() (v LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) Or(d LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses) LoadBalancerTelemetrySnapshotUrlsDestinationsItemRequestsResponses {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLocationsIncludes returns new OptLocationsIncludes with value set to v.
func NewOptLocationsIncludes(v LocationsIncludes) OptLocationsIncludes {
	return OptLocationsIncludes{
		Value: v,
		Set:   true,
	}
}

// OptLocationsIncludes is optional LocationsIncludes.
type OptLocationsIncludes struct {
	Value LocationsIncludes
	Set   bool
}

// IsSet returns true if OptLocationsIncludes was set.
func (o OptLocationsIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocationsIncludes) Reset() {
	var v LocationsIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocationsIncludes) SetTo(v LocationsIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocationsIncludes) Get() (v LocationsIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLocationsIncludes) Or(d LocationsIncludes) LocationsIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMembershipStateError returns new OptMembershipStateError with value set to v.
func NewOptMembershipStateError(v MembershipStateError) OptMembershipStateError {
	return OptMembershipStateError{
		Value: v,
		Set:   true,
	}
}

// OptMembershipStateError is optional MembershipStateError.
type OptMembershipStateError struct {
	Value MembershipStateError
	Set   bool
}

// IsSet returns true if OptMembershipStateError was set.
func (o OptMembershipStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMembershipStateError) Reset() {
	var v MembershipStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMembershipStateError) SetTo(v MembershipStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMembershipStateError) Get() (v MembershipStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMembershipStateError) Or(d MembershipStateError) MembershipStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMemoryData returns new OptMemoryData with value set to v.
func NewOptMemoryData(v MemoryData) OptMemoryData {
	return OptMemoryData{
		Value: v,
		Set:   true,
	}
}

// OptMemoryData is optional MemoryData.
type OptMemoryData struct {
	Value MemoryData
	Set   bool
}

// IsSet returns true if OptMemoryData was set.
func (o OptMemoryData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMemoryData) Reset() {
	var v MemoryData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMemoryData) SetTo(v MemoryData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMemoryData) Get() (v MemoryData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMemoryData) Or(d MemoryData) MemoryData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMethodStateError returns new OptMethodStateError with value set to v.
func NewOptMethodStateError(v MethodStateError) OptMethodStateError {
	return OptMethodStateError{
		Value: v,
		Set:   true,
	}
}

// OptMethodStateError is optional MethodStateError.
type OptMethodStateError struct {
	Value MethodStateError
	Set   bool
}

// IsSet returns true if OptMethodStateError was set.
func (o OptMethodStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMethodStateError) Reset() {
	var v MethodStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMethodStateError) SetTo(v MethodStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMethodStateError) Get() (v MethodStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMethodStateError) Or(d MethodStateError) MethodStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMigrateContentsStateful returns new OptMigrateContentsStateful with value set to v.
func NewOptMigrateContentsStateful(v MigrateContentsStateful) OptMigrateContentsStateful {
	return OptMigrateContentsStateful{
		Value: v,
		Set:   true,
	}
}

// OptMigrateContentsStateful is optional MigrateContentsStateful.
type OptMigrateContentsStateful struct {
	Value MigrateContentsStateful
	Set   bool
}

// IsSet returns true if OptMigrateContentsStateful was set.
func (o OptMigrateContentsStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMigrateContentsStateful) Reset() {
	var v MigrateContentsStateful
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMigrateContentsStateful) SetTo(v MigrateContentsStateful) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMigrateContentsStateful) Get() (v MigrateContentsStateful, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMigrateContentsStateful) Or(d MigrateContentsStateful) MigrateContentsStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkIncludes returns new OptNetworkIncludes with value set to v.
func NewOptNetworkIncludes(v NetworkIncludes) OptNetworkIncludes {
	return OptNetworkIncludes{
		Value: v,
		Set:   true,
	}
}

// OptNetworkIncludes is optional NetworkIncludes.
type OptNetworkIncludes struct {
	Value NetworkIncludes
	Set   bool
}

// IsSet returns true if OptNetworkIncludes was set.
func (o OptNetworkIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkIncludes) Reset() {
	var v NetworkIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkIncludes) SetTo(v NetworkIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkIncludes) Get() (v NetworkIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkIncludes) Or(d NetworkIncludes) NetworkIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNetworkStateError returns new OptNetworkStateError with value set to v.
func NewOptNetworkStateError(v NetworkStateError) OptNetworkStateError {
	return OptNetworkStateError{
		Value: v,
		Set:   true,
	}
}

// OptNetworkStateError is optional NetworkStateError.
type OptNetworkStateError struct {
	Value NetworkStateError
	Set   bool
}

// IsSet returns true if OptNetworkStateError was set.
func (o OptNetworkStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNetworkStateError) Reset() {
	var v NetworkStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNetworkStateError) SetTo(v NetworkStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNetworkStateError) Get() (v NetworkStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNetworkStateError) Or(d NetworkStateError) NetworkStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountTwoFactorAuth returns new OptNilAccountTwoFactorAuth with value set to v.
func NewOptNilAccountTwoFactorAuth(v AccountTwoFactorAuth) OptNilAccountTwoFactorAuth {
	return OptNilAccountTwoFactorAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountTwoFactorAuth is optional nullable AccountTwoFactorAuth.
type OptNilAccountTwoFactorAuth struct {
	Value AccountTwoFactorAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountTwoFactorAuth was set.
func (o OptNilAccountTwoFactorAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountTwoFactorAuth) Reset() {
	var v AccountTwoFactorAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountTwoFactorAuth) SetTo(v AccountTwoFactorAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountTwoFactorAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountTwoFactorAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountTwoFactorAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountTwoFactorAuth) Get() (v AccountTwoFactorAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountTwoFactorAuth) Or(d AccountTwoFactorAuth) AccountTwoFactorAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBillingSummaryArray returns new OptNilBillingSummaryArray with value set to v.
func NewOptNilBillingSummaryArray(v []BillingSummary) OptNilBillingSummaryArray {
	return OptNilBillingSummaryArray{
		Value: v,
		Set:   true,
	}
}

// OptNilBillingSummaryArray is optional nullable []BillingSummary.
type OptNilBillingSummaryArray struct {
	Value []BillingSummary
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBillingSummaryArray was set.
func (o OptNilBillingSummaryArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBillingSummaryArray) Reset() {
	var v []BillingSummary
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBillingSummaryArray) SetTo(v []BillingSummary) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBillingSummaryArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBillingSummaryArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []BillingSummary
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBillingSummaryArray) Get() (v []BillingSummary, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBillingSummaryArray) Or(d []BillingSummary) []BillingSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapabilityArray returns new OptNilCapabilityArray with value set to v.
func NewOptNilCapabilityArray(v []Capability) OptNilCapabilityArray {
	return OptNilCapabilityArray{
		Value: v,
		Set:   true,
	}
}

// OptNilCapabilityArray is optional nullable []Capability.
type OptNilCapabilityArray struct {
	Value []Capability
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapabilityArray was set.
func (o OptNilCapabilityArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapabilityArray) Reset() {
	var v []Capability
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapabilityArray) SetTo(v []Capability) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapabilityArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapabilityArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []Capability
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapabilityArray) Get() (v []Capability, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapabilityArray) Or(d []Capability) []Capability {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerAnnotations returns new OptNilContainerAnnotations with value set to v.
func NewOptNilContainerAnnotations(v ContainerAnnotations) OptNilContainerAnnotations {
	return OptNilContainerAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerAnnotations is optional nullable ContainerAnnotations.
type OptNilContainerAnnotations struct {
	Value ContainerAnnotations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerAnnotations was set.
func (o OptNilContainerAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerAnnotations) Reset() {
	var v ContainerAnnotations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerAnnotations) SetTo(v ContainerAnnotations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerAnnotations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerAnnotations) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerAnnotations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerAnnotations) Get() (v ContainerAnnotations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerAnnotations) Or(d ContainerAnnotations) ContainerAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerBackupLogsError returns new OptNilContainerBackupLogsError with value set to v.
func NewOptNilContainerBackupLogsError(v ContainerBackupLogsError) OptNilContainerBackupLogsError {
	return OptNilContainerBackupLogsError{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerBackupLogsError is optional nullable ContainerBackupLogsError.
type OptNilContainerBackupLogsError struct {
	Value ContainerBackupLogsError
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerBackupLogsError was set.
func (o OptNilContainerBackupLogsError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerBackupLogsError) Reset() {
	var v ContainerBackupLogsError
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerBackupLogsError) SetTo(v ContainerBackupLogsError) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerBackupLogsError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerBackupLogsError) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerBackupLogsError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerBackupLogsError) Get() (v ContainerBackupLogsError, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerBackupLogsError) Or(d ContainerBackupLogsError) ContainerBackupLogsError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerCreateStepDetailsAnnotations returns new OptNilContainerCreateStepDetailsAnnotations with value set to v.
func NewOptNilContainerCreateStepDetailsAnnotations(v ContainerCreateStepDetailsAnnotations) OptNilContainerCreateStepDetailsAnnotations {
	return OptNilContainerCreateStepDetailsAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerCreateStepDetailsAnnotations is optional nullable ContainerCreateStepDetailsAnnotations.
type OptNilContainerCreateStepDetailsAnnotations struct {
	Value ContainerCreateStepDetailsAnnotations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerCreateStepDetailsAnnotations was set.
func (o OptNilContainerCreateStepDetailsAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerCreateStepDetailsAnnotations) Reset() {
	var v ContainerCreateStepDetailsAnnotations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerCreateStepDetailsAnnotations) SetTo(v ContainerCreateStepDetailsAnnotations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerCreateStepDetailsAnnotations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerCreateStepDetailsAnnotations) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerCreateStepDetailsAnnotations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerCreateStepDetailsAnnotations) Get() (v ContainerCreateStepDetailsAnnotations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerCreateStepDetailsAnnotations) Or(d ContainerCreateStepDetailsAnnotations) ContainerCreateStepDetailsAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerCreateStepDetailsDeployment returns new OptNilContainerCreateStepDetailsDeployment with value set to v.
func NewOptNilContainerCreateStepDetailsDeployment(v ContainerCreateStepDetailsDeployment) OptNilContainerCreateStepDetailsDeployment {
	return OptNilContainerCreateStepDetailsDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerCreateStepDetailsDeployment is optional nullable ContainerCreateStepDetailsDeployment.
type OptNilContainerCreateStepDetailsDeployment struct {
	Value ContainerCreateStepDetailsDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerCreateStepDetailsDeployment was set.
func (o OptNilContainerCreateStepDetailsDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerCreateStepDetailsDeployment) Reset() {
	var v ContainerCreateStepDetailsDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerCreateStepDetailsDeployment) SetTo(v ContainerCreateStepDetailsDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerCreateStepDetailsDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerCreateStepDetailsDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerCreateStepDetailsDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerCreateStepDetailsDeployment) Get() (v ContainerCreateStepDetailsDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerCreateStepDetailsDeployment) Or(d ContainerCreateStepDetailsDeployment) ContainerCreateStepDetailsDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerDeployShutdownSignalsItemArray returns new OptNilContainerDeployShutdownSignalsItemArray with value set to v.
func NewOptNilContainerDeployShutdownSignalsItemArray(v []ContainerDeployShutdownSignalsItem) OptNilContainerDeployShutdownSignalsItemArray {
	return OptNilContainerDeployShutdownSignalsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerDeployShutdownSignalsItemArray is optional nullable []ContainerDeployShutdownSignalsItem.
type OptNilContainerDeployShutdownSignalsItemArray struct {
	Value []ContainerDeployShutdownSignalsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerDeployShutdownSignalsItemArray was set.
func (o OptNilContainerDeployShutdownSignalsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerDeployShutdownSignalsItemArray) Reset() {
	var v []ContainerDeployShutdownSignalsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerDeployShutdownSignalsItemArray) SetTo(v []ContainerDeployShutdownSignalsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerDeployShutdownSignalsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerDeployShutdownSignalsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ContainerDeployShutdownSignalsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerDeployShutdownSignalsItemArray) Get() (v []ContainerDeployShutdownSignalsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerDeployShutdownSignalsItemArray) Or(d []ContainerDeployShutdownSignalsItem) []ContainerDeployShutdownSignalsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerDeployStatefulOptions returns new OptNilContainerDeployStatefulOptions with value set to v.
func NewOptNilContainerDeployStatefulOptions(v ContainerDeployStatefulOptions) OptNilContainerDeployStatefulOptions {
	return OptNilContainerDeployStatefulOptions{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerDeployStatefulOptions is optional nullable ContainerDeployStatefulOptions.
type OptNilContainerDeployStatefulOptions struct {
	Value ContainerDeployStatefulOptions
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerDeployStatefulOptions was set.
func (o OptNilContainerDeployStatefulOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerDeployStatefulOptions) Reset() {
	var v ContainerDeployStatefulOptions
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerDeployStatefulOptions) SetTo(v ContainerDeployStatefulOptions) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerDeployStatefulOptions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerDeployStatefulOptions) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerDeployStatefulOptions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerDeployStatefulOptions) Get() (v ContainerDeployStatefulOptions, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerDeployStatefulOptions) Or(d ContainerDeployStatefulOptions) ContainerDeployStatefulOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerDeployment returns new OptNilContainerDeployment with value set to v.
func NewOptNilContainerDeployment(v ContainerDeployment) OptNilContainerDeployment {
	return OptNilContainerDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerDeployment is optional nullable ContainerDeployment.
type OptNilContainerDeployment struct {
	Value ContainerDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerDeployment was set.
func (o OptNilContainerDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerDeployment) Reset() {
	var v ContainerDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerDeployment) SetTo(v ContainerDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerDeployment) Get() (v ContainerDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerDeployment) Or(d ContainerDeployment) ContainerDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerEnvironmentSummaryIpv6 returns new OptNilContainerEnvironmentSummaryIpv6 with value set to v.
func NewOptNilContainerEnvironmentSummaryIpv6(v ContainerEnvironmentSummaryIpv6) OptNilContainerEnvironmentSummaryIpv6 {
	return OptNilContainerEnvironmentSummaryIpv6{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerEnvironmentSummaryIpv6 is optional nullable ContainerEnvironmentSummaryIpv6.
type OptNilContainerEnvironmentSummaryIpv6 struct {
	Value ContainerEnvironmentSummaryIpv6
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerEnvironmentSummaryIpv6 was set.
func (o OptNilContainerEnvironmentSummaryIpv6) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerEnvironmentSummaryIpv6) Reset() {
	var v ContainerEnvironmentSummaryIpv6
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerEnvironmentSummaryIpv6) SetTo(v ContainerEnvironmentSummaryIpv6) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerEnvironmentSummaryIpv6) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerEnvironmentSummaryIpv6) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerEnvironmentSummaryIpv6
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerEnvironmentSummaryIpv6) Get() (v ContainerEnvironmentSummaryIpv6, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerEnvironmentSummaryIpv6) Or(d ContainerEnvironmentSummaryIpv6) ContainerEnvironmentSummaryIpv6 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerEnvironmentSummaryLegacyIpv4 returns new OptNilContainerEnvironmentSummaryLegacyIpv4 with value set to v.
func NewOptNilContainerEnvironmentSummaryLegacyIpv4(v ContainerEnvironmentSummaryLegacyIpv4) OptNilContainerEnvironmentSummaryLegacyIpv4 {
	return OptNilContainerEnvironmentSummaryLegacyIpv4{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerEnvironmentSummaryLegacyIpv4 is optional nullable ContainerEnvironmentSummaryLegacyIpv4.
type OptNilContainerEnvironmentSummaryLegacyIpv4 struct {
	Value ContainerEnvironmentSummaryLegacyIpv4
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerEnvironmentSummaryLegacyIpv4 was set.
func (o OptNilContainerEnvironmentSummaryLegacyIpv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerEnvironmentSummaryLegacyIpv4) Reset() {
	var v ContainerEnvironmentSummaryLegacyIpv4
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerEnvironmentSummaryLegacyIpv4) SetTo(v ContainerEnvironmentSummaryLegacyIpv4) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerEnvironmentSummaryLegacyIpv4) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerEnvironmentSummaryLegacyIpv4) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerEnvironmentSummaryLegacyIpv4
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerEnvironmentSummaryLegacyIpv4) Get() (v ContainerEnvironmentSummaryLegacyIpv4, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerEnvironmentSummaryLegacyIpv4) Or(d ContainerEnvironmentSummaryLegacyIpv4) ContainerEnvironmentSummaryLegacyIpv4 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerIntegrationsSharedFileSystems returns new OptNilContainerIntegrationsSharedFileSystems with value set to v.
func NewOptNilContainerIntegrationsSharedFileSystems(v ContainerIntegrationsSharedFileSystems) OptNilContainerIntegrationsSharedFileSystems {
	return OptNilContainerIntegrationsSharedFileSystems{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerIntegrationsSharedFileSystems is optional nullable ContainerIntegrationsSharedFileSystems.
type OptNilContainerIntegrationsSharedFileSystems struct {
	Value ContainerIntegrationsSharedFileSystems
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerIntegrationsSharedFileSystems was set.
func (o OptNilContainerIntegrationsSharedFileSystems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerIntegrationsSharedFileSystems) Reset() {
	var v ContainerIntegrationsSharedFileSystems
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerIntegrationsSharedFileSystems) SetTo(v ContainerIntegrationsSharedFileSystems) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerIntegrationsSharedFileSystems) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerIntegrationsSharedFileSystems) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerIntegrationsSharedFileSystems
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerIntegrationsSharedFileSystems) Get() (v ContainerIntegrationsSharedFileSystems, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerIntegrationsSharedFileSystems) Or(d ContainerIntegrationsSharedFileSystems) ContainerIntegrationsSharedFileSystems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerRole returns new OptNilContainerRole with value set to v.
func NewOptNilContainerRole(v ContainerRole) OptNilContainerRole {
	return OptNilContainerRole{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerRole is optional nullable ContainerRole.
type OptNilContainerRole struct {
	Value ContainerRole
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerRole was set.
func (o OptNilContainerRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerRole) Reset() {
	var v ContainerRole
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerRole) SetTo(v ContainerRole) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerRole) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerRole) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerRole
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerRole) Get() (v ContainerRole, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerRole) Or(d ContainerRole) ContainerRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerRuntimeCommand returns new OptNilContainerRuntimeCommand with value set to v.
func NewOptNilContainerRuntimeCommand(v ContainerRuntimeCommand) OptNilContainerRuntimeCommand {
	return OptNilContainerRuntimeCommand{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerRuntimeCommand is optional nullable ContainerRuntimeCommand.
type OptNilContainerRuntimeCommand struct {
	Value ContainerRuntimeCommand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerRuntimeCommand was set.
func (o OptNilContainerRuntimeCommand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerRuntimeCommand) Reset() {
	var v ContainerRuntimeCommand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerRuntimeCommand) SetTo(v ContainerRuntimeCommand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerRuntimeCommand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerRuntimeCommand) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerRuntimeCommand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerRuntimeCommand) Get() (v ContainerRuntimeCommand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerRuntimeCommand) Or(d ContainerRuntimeCommand) ContainerRuntimeCommand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerRuntimeHost returns new OptNilContainerRuntimeHost with value set to v.
func NewOptNilContainerRuntimeHost(v ContainerRuntimeHost) OptNilContainerRuntimeHost {
	return OptNilContainerRuntimeHost{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerRuntimeHost is optional nullable ContainerRuntimeHost.
type OptNilContainerRuntimeHost struct {
	Value ContainerRuntimeHost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerRuntimeHost was set.
func (o OptNilContainerRuntimeHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerRuntimeHost) Reset() {
	var v ContainerRuntimeHost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerRuntimeHost) SetTo(v ContainerRuntimeHost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerRuntimeHost) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerRuntimeHost) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerRuntimeHost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerRuntimeHost) Get() (v ContainerRuntimeHost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerRuntimeHost) Or(d ContainerRuntimeHost) ContainerRuntimeHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerRuntimeSeccomp returns new OptNilContainerRuntimeSeccomp with value set to v.
func NewOptNilContainerRuntimeSeccomp(v ContainerRuntimeSeccomp) OptNilContainerRuntimeSeccomp {
	return OptNilContainerRuntimeSeccomp{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerRuntimeSeccomp is optional nullable ContainerRuntimeSeccomp.
type OptNilContainerRuntimeSeccomp struct {
	Value ContainerRuntimeSeccomp
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerRuntimeSeccomp was set.
func (o OptNilContainerRuntimeSeccomp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerRuntimeSeccomp) Reset() {
	var v ContainerRuntimeSeccomp
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerRuntimeSeccomp) SetTo(v ContainerRuntimeSeccomp) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerRuntimeSeccomp) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerRuntimeSeccomp) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerRuntimeSeccomp
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerRuntimeSeccomp) Get() (v ContainerRuntimeSeccomp, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerRuntimeSeccomp) Or(d ContainerRuntimeSeccomp) ContainerRuntimeSeccomp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainerStack returns new OptNilContainerStack with value set to v.
func NewOptNilContainerStack(v ContainerStack) OptNilContainerStack {
	return OptNilContainerStack{
		Value: v,
		Set:   true,
	}
}

// OptNilContainerStack is optional nullable ContainerStack.
type OptNilContainerStack struct {
	Value ContainerStack
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainerStack was set.
func (o OptNilContainerStack) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainerStack) Reset() {
	var v ContainerStack
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainerStack) SetTo(v ContainerStack) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainerStack) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainerStack) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContainerStack
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainerStack) Get() (v ContainerStack, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainerStack) Or(d ContainerStack) ContainerStack {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContainersMetaDomainsItemArray returns new OptNilContainersMetaDomainsItemArray with value set to v.
func NewOptNilContainersMetaDomainsItemArray(v []ContainersMetaDomainsItem) OptNilContainersMetaDomainsItemArray {
	return OptNilContainersMetaDomainsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilContainersMetaDomainsItemArray is optional nullable []ContainersMetaDomainsItem.
type OptNilContainersMetaDomainsItemArray struct {
	Value []ContainersMetaDomainsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContainersMetaDomainsItemArray was set.
func (o OptNilContainersMetaDomainsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContainersMetaDomainsItemArray) Reset() {
	var v []ContainersMetaDomainsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContainersMetaDomainsItemArray) SetTo(v []ContainersMetaDomainsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContainersMetaDomainsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContainersMetaDomainsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ContainersMetaDomainsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContainersMetaDomainsItemArray) Get() (v []ContainersMetaDomainsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContainersMetaDomainsItemArray) Or(d []ContainersMetaDomainsItem) []ContainersMetaDomainsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateContainerReqAnnotations returns new OptNilCreateContainerReqAnnotations with value set to v.
func NewOptNilCreateContainerReqAnnotations(v CreateContainerReqAnnotations) OptNilCreateContainerReqAnnotations {
	return OptNilCreateContainerReqAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateContainerReqAnnotations is optional nullable CreateContainerReqAnnotations.
type OptNilCreateContainerReqAnnotations struct {
	Value CreateContainerReqAnnotations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateContainerReqAnnotations was set.
func (o OptNilCreateContainerReqAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateContainerReqAnnotations) Reset() {
	var v CreateContainerReqAnnotations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateContainerReqAnnotations) SetTo(v CreateContainerReqAnnotations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateContainerReqAnnotations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateContainerReqAnnotations) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateContainerReqAnnotations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateContainerReqAnnotations) Get() (v CreateContainerReqAnnotations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateContainerReqAnnotations) Or(d CreateContainerReqAnnotations) CreateContainerReqAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateContainerReqDeployment returns new OptNilCreateContainerReqDeployment with value set to v.
func NewOptNilCreateContainerReqDeployment(v CreateContainerReqDeployment) OptNilCreateContainerReqDeployment {
	return OptNilCreateContainerReqDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateContainerReqDeployment is optional nullable CreateContainerReqDeployment.
type OptNilCreateContainerReqDeployment struct {
	Value CreateContainerReqDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateContainerReqDeployment was set.
func (o OptNilCreateContainerReqDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateContainerReqDeployment) Reset() {
	var v CreateContainerReqDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateContainerReqDeployment) SetTo(v CreateContainerReqDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateContainerReqDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateContainerReqDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateContainerReqDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateContainerReqDeployment) Get() (v CreateContainerReqDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateContainerReqDeployment) Or(d CreateContainerReqDeployment) CreateContainerReqDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateDiscoveryServiceJobReqContentsConfig returns new OptNilCreateDiscoveryServiceJobReqContentsConfig with value set to v.
func NewOptNilCreateDiscoveryServiceJobReqContentsConfig(v CreateDiscoveryServiceJobReqContentsConfig) OptNilCreateDiscoveryServiceJobReqContentsConfig {
	return OptNilCreateDiscoveryServiceJobReqContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateDiscoveryServiceJobReqContentsConfig is optional nullable CreateDiscoveryServiceJobReqContentsConfig.
type OptNilCreateDiscoveryServiceJobReqContentsConfig struct {
	Value CreateDiscoveryServiceJobReqContentsConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateDiscoveryServiceJobReqContentsConfig was set.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfig) Reset() {
	var v CreateDiscoveryServiceJobReqContentsConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfig) SetTo(v CreateDiscoveryServiceJobReqContentsConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateDiscoveryServiceJobReqContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfig) Get() (v CreateDiscoveryServiceJobReqContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfig) Or(d CreateDiscoveryServiceJobReqContentsConfig) CreateDiscoveryServiceJobReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateDiscoveryServiceJobReqContentsConfigHosts returns new OptNilCreateDiscoveryServiceJobReqContentsConfigHosts with value set to v.
func NewOptNilCreateDiscoveryServiceJobReqContentsConfigHosts(v CreateDiscoveryServiceJobReqContentsConfigHosts) OptNilCreateDiscoveryServiceJobReqContentsConfigHosts {
	return OptNilCreateDiscoveryServiceJobReqContentsConfigHosts{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateDiscoveryServiceJobReqContentsConfigHosts is optional nullable CreateDiscoveryServiceJobReqContentsConfigHosts.
type OptNilCreateDiscoveryServiceJobReqContentsConfigHosts struct {
	Value CreateDiscoveryServiceJobReqContentsConfigHosts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateDiscoveryServiceJobReqContentsConfigHosts was set.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) Reset() {
	var v CreateDiscoveryServiceJobReqContentsConfigHosts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) SetTo(v CreateDiscoveryServiceJobReqContentsConfigHosts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateDiscoveryServiceJobReqContentsConfigHosts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) Get() (v CreateDiscoveryServiceJobReqContentsConfigHosts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateDiscoveryServiceJobReqContentsConfigHosts) Or(d CreateDiscoveryServiceJobReqContentsConfigHosts) CreateDiscoveryServiceJobReqContentsConfigHosts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageSourceReqBuilder returns new OptNilCreateImageSourceReqBuilder with value set to v.
func NewOptNilCreateImageSourceReqBuilder(v CreateImageSourceReqBuilder) OptNilCreateImageSourceReqBuilder {
	return OptNilCreateImageSourceReqBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageSourceReqBuilder is optional nullable CreateImageSourceReqBuilder.
type OptNilCreateImageSourceReqBuilder struct {
	Value CreateImageSourceReqBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageSourceReqBuilder was set.
func (o OptNilCreateImageSourceReqBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageSourceReqBuilder) Reset() {
	var v CreateImageSourceReqBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageSourceReqBuilder) SetTo(v CreateImageSourceReqBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageSourceReqBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageSourceReqBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageSourceReqBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageSourceReqBuilder) Get() (v CreateImageSourceReqBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageSourceReqBuilder) Or(d CreateImageSourceReqBuilder) CreateImageSourceReqBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateLoadBalancerServiceJobReqContentsConfig returns new OptNilCreateLoadBalancerServiceJobReqContentsConfig with value set to v.
func NewOptNilCreateLoadBalancerServiceJobReqContentsConfig(v *NilCreateLoadBalancerServiceJobReqContentsConfig) OptNilCreateLoadBalancerServiceJobReqContentsConfig {
	return OptNilCreateLoadBalancerServiceJobReqContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateLoadBalancerServiceJobReqContentsConfig is optional *NilCreateLoadBalancerServiceJobReqContentsConfig.
type OptNilCreateLoadBalancerServiceJobReqContentsConfig struct {
	Value *NilCreateLoadBalancerServiceJobReqContentsConfig
	Set   bool
}

// IsSet returns true if OptNilCreateLoadBalancerServiceJobReqContentsConfig was set.
func (o OptNilCreateLoadBalancerServiceJobReqContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateLoadBalancerServiceJobReqContentsConfig) Reset() {
	var v *NilCreateLoadBalancerServiceJobReqContentsConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCreateLoadBalancerServiceJobReqContentsConfig) SetTo(v *NilCreateLoadBalancerServiceJobReqContentsConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateLoadBalancerServiceJobReqContentsConfig) Get() (v *NilCreateLoadBalancerServiceJobReqContentsConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateLoadBalancerServiceJobReqContentsConfig) Or(d *NilCreateLoadBalancerServiceJobReqContentsConfig) *NilCreateLoadBalancerServiceJobReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateRoleReqCapabilities returns new OptNilCreateRoleReqCapabilities with value set to v.
func NewOptNilCreateRoleReqCapabilities(v CreateRoleReqCapabilities) OptNilCreateRoleReqCapabilities {
	return OptNilCreateRoleReqCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateRoleReqCapabilities is optional nullable CreateRoleReqCapabilities.
type OptNilCreateRoleReqCapabilities struct {
	Value CreateRoleReqCapabilities
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateRoleReqCapabilities was set.
func (o OptNilCreateRoleReqCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateRoleReqCapabilities) Reset() {
	var v CreateRoleReqCapabilities
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateRoleReqCapabilities) SetTo(v CreateRoleReqCapabilities) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateRoleReqCapabilities) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateRoleReqCapabilities) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateRoleReqCapabilities
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateRoleReqCapabilities) Get() (v CreateRoleReqCapabilities, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateRoleReqCapabilities) Or(d CreateRoleReqCapabilities) CreateRoleReqCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateRoleReqExtra returns new OptNilCreateRoleReqExtra with value set to v.
func NewOptNilCreateRoleReqExtra(v CreateRoleReqExtra) OptNilCreateRoleReqExtra {
	return OptNilCreateRoleReqExtra{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateRoleReqExtra is optional nullable CreateRoleReqExtra.
type OptNilCreateRoleReqExtra struct {
	Value CreateRoleReqExtra
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateRoleReqExtra was set.
func (o OptNilCreateRoleReqExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateRoleReqExtra) Reset() {
	var v CreateRoleReqExtra
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateRoleReqExtra) SetTo(v CreateRoleReqExtra) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateRoleReqExtra) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateRoleReqExtra) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateRoleReqExtra
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateRoleReqExtra) Get() (v CreateRoleReqExtra, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateRoleReqExtra) Or(d CreateRoleReqExtra) CreateRoleReqExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateSchedulerServiceJobReqContentsConfig returns new OptNilCreateSchedulerServiceJobReqContentsConfig with value set to v.
func NewOptNilCreateSchedulerServiceJobReqContentsConfig(v CreateSchedulerServiceJobReqContentsConfig) OptNilCreateSchedulerServiceJobReqContentsConfig {
	return OptNilCreateSchedulerServiceJobReqContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateSchedulerServiceJobReqContentsConfig is optional nullable CreateSchedulerServiceJobReqContentsConfig.
type OptNilCreateSchedulerServiceJobReqContentsConfig struct {
	Value CreateSchedulerServiceJobReqContentsConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateSchedulerServiceJobReqContentsConfig was set.
func (o OptNilCreateSchedulerServiceJobReqContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateSchedulerServiceJobReqContentsConfig) Reset() {
	var v CreateSchedulerServiceJobReqContentsConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateSchedulerServiceJobReqContentsConfig) SetTo(v CreateSchedulerServiceJobReqContentsConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateSchedulerServiceJobReqContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateSchedulerServiceJobReqContentsConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateSchedulerServiceJobReqContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateSchedulerServiceJobReqContentsConfig) Get() (v CreateSchedulerServiceJobReqContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateSchedulerServiceJobReqContentsConfig) Or(d CreateSchedulerServiceJobReqContentsConfig) CreateSchedulerServiceJobReqContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDeployStackBuildActionContentsDeployment returns new OptNilDeployStackBuildActionContentsDeployment with value set to v.
func NewOptNilDeployStackBuildActionContentsDeployment(v DeployStackBuildActionContentsDeployment) OptNilDeployStackBuildActionContentsDeployment {
	return OptNilDeployStackBuildActionContentsDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilDeployStackBuildActionContentsDeployment is optional nullable DeployStackBuildActionContentsDeployment.
type OptNilDeployStackBuildActionContentsDeployment struct {
	Value DeployStackBuildActionContentsDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDeployStackBuildActionContentsDeployment was set.
func (o OptNilDeployStackBuildActionContentsDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDeployStackBuildActionContentsDeployment) Reset() {
	var v DeployStackBuildActionContentsDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDeployStackBuildActionContentsDeployment) SetTo(v DeployStackBuildActionContentsDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDeployStackBuildActionContentsDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDeployStackBuildActionContentsDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v DeployStackBuildActionContentsDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDeployStackBuildActionContentsDeployment) Get() (v DeployStackBuildActionContentsDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDeployStackBuildActionContentsDeployment) Or(d DeployStackBuildActionContentsDeployment) DeployStackBuildActionContentsDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDeployStackBuildActionContentsUpdate returns new OptNilDeployStackBuildActionContentsUpdate with value set to v.
func NewOptNilDeployStackBuildActionContentsUpdate(v DeployStackBuildActionContentsUpdate) OptNilDeployStackBuildActionContentsUpdate {
	return OptNilDeployStackBuildActionContentsUpdate{
		Value: v,
		Set:   true,
	}
}

// OptNilDeployStackBuildActionContentsUpdate is optional nullable DeployStackBuildActionContentsUpdate.
type OptNilDeployStackBuildActionContentsUpdate struct {
	Value DeployStackBuildActionContentsUpdate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDeployStackBuildActionContentsUpdate was set.
func (o OptNilDeployStackBuildActionContentsUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDeployStackBuildActionContentsUpdate) Reset() {
	var v DeployStackBuildActionContentsUpdate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDeployStackBuildActionContentsUpdate) SetTo(v DeployStackBuildActionContentsUpdate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDeployStackBuildActionContentsUpdate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDeployStackBuildActionContentsUpdate) SetToNull() {
	o.Set = true
	o.Null = true
	var v DeployStackBuildActionContentsUpdate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDeployStackBuildActionContentsUpdate) Get() (v DeployStackBuildActionContentsUpdate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDeployStackBuildActionContentsUpdate) Or(d DeployStackBuildActionContentsUpdate) DeployStackBuildActionContentsUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerFileOriginDetailsCredentialsItemArray returns new OptNilDockerFileOriginDetailsCredentialsItemArray with value set to v.
func NewOptNilDockerFileOriginDetailsCredentialsItemArray(v []DockerFileOriginDetailsCredentialsItem) OptNilDockerFileOriginDetailsCredentialsItemArray {
	return OptNilDockerFileOriginDetailsCredentialsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerFileOriginDetailsCredentialsItemArray is optional nullable []DockerFileOriginDetailsCredentialsItem.
type OptNilDockerFileOriginDetailsCredentialsItemArray struct {
	Value []DockerFileOriginDetailsCredentialsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerFileOriginDetailsCredentialsItemArray was set.
func (o OptNilDockerFileOriginDetailsCredentialsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerFileOriginDetailsCredentialsItemArray) Reset() {
	var v []DockerFileOriginDetailsCredentialsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerFileOriginDetailsCredentialsItemArray) SetTo(v []DockerFileOriginDetailsCredentialsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerFileOriginDetailsCredentialsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerFileOriginDetailsCredentialsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []DockerFileOriginDetailsCredentialsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerFileOriginDetailsCredentialsItemArray) Get() (v []DockerFileOriginDetailsCredentialsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerFileOriginDetailsCredentialsItemArray) Or(d []DockerFileOriginDetailsCredentialsItem) []DockerFileOriginDetailsCredentialsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerFileOriginDetailsExisting returns new OptNilDockerFileOriginDetailsExisting with value set to v.
func NewOptNilDockerFileOriginDetailsExisting(v DockerFileOriginDetailsExisting) OptNilDockerFileOriginDetailsExisting {
	return OptNilDockerFileOriginDetailsExisting{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerFileOriginDetailsExisting is optional nullable DockerFileOriginDetailsExisting.
type OptNilDockerFileOriginDetailsExisting struct {
	Value DockerFileOriginDetailsExisting
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerFileOriginDetailsExisting was set.
func (o OptNilDockerFileOriginDetailsExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerFileOriginDetailsExisting) Reset() {
	var v DockerFileOriginDetailsExisting
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerFileOriginDetailsExisting) SetTo(v DockerFileOriginDetailsExisting) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerFileOriginDetailsExisting) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerFileOriginDetailsExisting) SetToNull() {
	o.Set = true
	o.Null = true
	var v DockerFileOriginDetailsExisting
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerFileOriginDetailsExisting) Get() (v DockerFileOriginDetailsExisting, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerFileOriginDetailsExisting) Or(d DockerFileOriginDetailsExisting) DockerFileOriginDetailsExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerFileOriginDetailsRepo returns new OptNilDockerFileOriginDetailsRepo with value set to v.
func NewOptNilDockerFileOriginDetailsRepo(v DockerFileOriginDetailsRepo) OptNilDockerFileOriginDetailsRepo {
	return OptNilDockerFileOriginDetailsRepo{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerFileOriginDetailsRepo is optional nullable DockerFileOriginDetailsRepo.
type OptNilDockerFileOriginDetailsRepo struct {
	Value DockerFileOriginDetailsRepo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerFileOriginDetailsRepo was set.
func (o OptNilDockerFileOriginDetailsRepo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerFileOriginDetailsRepo) Reset() {
	var v DockerFileOriginDetailsRepo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerFileOriginDetailsRepo) SetTo(v DockerFileOriginDetailsRepo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerFileOriginDetailsRepo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerFileOriginDetailsRepo) SetToNull() {
	o.Set = true
	o.Null = true
	var v DockerFileOriginDetailsRepo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerFileOriginDetailsRepo) Get() (v DockerFileOriginDetailsRepo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerFileOriginDetailsRepo) Or(d DockerFileOriginDetailsRepo) DockerFileOriginDetailsRepo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerFileOriginDetailsRepoAuth returns new OptNilDockerFileOriginDetailsRepoAuth with value set to v.
func NewOptNilDockerFileOriginDetailsRepoAuth(v DockerFileOriginDetailsRepoAuth) OptNilDockerFileOriginDetailsRepoAuth {
	return OptNilDockerFileOriginDetailsRepoAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerFileOriginDetailsRepoAuth is optional nullable DockerFileOriginDetailsRepoAuth.
type OptNilDockerFileOriginDetailsRepoAuth struct {
	Value DockerFileOriginDetailsRepoAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerFileOriginDetailsRepoAuth was set.
func (o OptNilDockerFileOriginDetailsRepoAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerFileOriginDetailsRepoAuth) Reset() {
	var v DockerFileOriginDetailsRepoAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerFileOriginDetailsRepoAuth) SetTo(v DockerFileOriginDetailsRepoAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerFileOriginDetailsRepoAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerFileOriginDetailsRepoAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v DockerFileOriginDetailsRepoAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerFileOriginDetailsRepoAuth) Get() (v DockerFileOriginDetailsRepoAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerFileOriginDetailsRepoAuth) Or(d DockerFileOriginDetailsRepoAuth) DockerFileOriginDetailsRepoAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerFileOriginDetailsRepoRef returns new OptNilDockerFileOriginDetailsRepoRef with value set to v.
func NewOptNilDockerFileOriginDetailsRepoRef(v DockerFileOriginDetailsRepoRef) OptNilDockerFileOriginDetailsRepoRef {
	return OptNilDockerFileOriginDetailsRepoRef{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerFileOriginDetailsRepoRef is optional nullable DockerFileOriginDetailsRepoRef.
type OptNilDockerFileOriginDetailsRepoRef struct {
	Value DockerFileOriginDetailsRepoRef
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerFileOriginDetailsRepoRef was set.
func (o OptNilDockerFileOriginDetailsRepoRef) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerFileOriginDetailsRepoRef) Reset() {
	var v DockerFileOriginDetailsRepoRef
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerFileOriginDetailsRepoRef) SetTo(v DockerFileOriginDetailsRepoRef) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerFileOriginDetailsRepoRef) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerFileOriginDetailsRepoRef) SetToNull() {
	o.Set = true
	o.Null = true
	var v DockerFileOriginDetailsRepoRef
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerFileOriginDetailsRepoRef) Get() (v DockerFileOriginDetailsRepoRef, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerFileOriginDetailsRepoRef) Or(d DockerFileOriginDetailsRepoRef) DockerFileOriginDetailsRepoRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDockerHubOriginDetailsExisting returns new OptNilDockerHubOriginDetailsExisting with value set to v.
func NewOptNilDockerHubOriginDetailsExisting(v DockerHubOriginDetailsExisting) OptNilDockerHubOriginDetailsExisting {
	return OptNilDockerHubOriginDetailsExisting{
		Value: v,
		Set:   true,
	}
}

// OptNilDockerHubOriginDetailsExisting is optional nullable DockerHubOriginDetailsExisting.
type OptNilDockerHubOriginDetailsExisting struct {
	Value DockerHubOriginDetailsExisting
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDockerHubOriginDetailsExisting was set.
func (o OptNilDockerHubOriginDetailsExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDockerHubOriginDetailsExisting) Reset() {
	var v DockerHubOriginDetailsExisting
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDockerHubOriginDetailsExisting) SetTo(v DockerHubOriginDetailsExisting) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDockerHubOriginDetailsExisting) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDockerHubOriginDetailsExisting) SetToNull() {
	o.Set = true
	o.Null = true
	var v DockerHubOriginDetailsExisting
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDockerHubOriginDetailsExisting) Get() (v DockerHubOriginDetailsExisting, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDockerHubOriginDetailsExisting) Or(d DockerHubOriginDetailsExisting) DockerHubOriginDetailsExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentCreateStepDetailsAbout returns new OptNilEnvironmentCreateStepDetailsAbout with value set to v.
func NewOptNilEnvironmentCreateStepDetailsAbout(v EnvironmentCreateStepDetailsAbout) OptNilEnvironmentCreateStepDetailsAbout {
	return OptNilEnvironmentCreateStepDetailsAbout{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentCreateStepDetailsAbout is optional nullable EnvironmentCreateStepDetailsAbout.
type OptNilEnvironmentCreateStepDetailsAbout struct {
	Value EnvironmentCreateStepDetailsAbout
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentCreateStepDetailsAbout was set.
func (o OptNilEnvironmentCreateStepDetailsAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentCreateStepDetailsAbout) Reset() {
	var v EnvironmentCreateStepDetailsAbout
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentCreateStepDetailsAbout) SetTo(v EnvironmentCreateStepDetailsAbout) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentCreateStepDetailsAbout) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentCreateStepDetailsAbout) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentCreateStepDetailsAbout
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentCreateStepDetailsAbout) Get() (v EnvironmentCreateStepDetailsAbout, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentCreateStepDetailsAbout) Or(d EnvironmentCreateStepDetailsAbout) EnvironmentCreateStepDetailsAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentDeployments returns new OptNilEnvironmentDeployments with value set to v.
func NewOptNilEnvironmentDeployments(v EnvironmentDeployments) OptNilEnvironmentDeployments {
	return OptNilEnvironmentDeployments{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentDeployments is optional nullable EnvironmentDeployments.
type OptNilEnvironmentDeployments struct {
	Value EnvironmentDeployments
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentDeployments was set.
func (o OptNilEnvironmentDeployments) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentDeployments) Reset() {
	var v EnvironmentDeployments
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentDeployments) SetTo(v EnvironmentDeployments) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentDeployments) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentDeployments) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentDeployments
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentDeployments) Get() (v EnvironmentDeployments, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentDeployments) Or(d EnvironmentDeployments) EnvironmentDeployments {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentPrivateNetwork returns new OptNilEnvironmentPrivateNetwork with value set to v.
func NewOptNilEnvironmentPrivateNetwork(v EnvironmentPrivateNetwork) OptNilEnvironmentPrivateNetwork {
	return OptNilEnvironmentPrivateNetwork{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentPrivateNetwork is optional nullable EnvironmentPrivateNetwork.
type OptNilEnvironmentPrivateNetwork struct {
	Value EnvironmentPrivateNetwork
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentPrivateNetwork was set.
func (o OptNilEnvironmentPrivateNetwork) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentPrivateNetwork) Reset() {
	var v EnvironmentPrivateNetwork
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentPrivateNetwork) SetTo(v EnvironmentPrivateNetwork) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentPrivateNetwork) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentPrivateNetwork) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentPrivateNetwork
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentPrivateNetwork) Get() (v EnvironmentPrivateNetwork, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentPrivateNetwork) Or(d EnvironmentPrivateNetwork) EnvironmentPrivateNetwork {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentPrivateNetworkLegacyIpv4 returns new OptNilEnvironmentPrivateNetworkLegacyIpv4 with value set to v.
func NewOptNilEnvironmentPrivateNetworkLegacyIpv4(v EnvironmentPrivateNetworkLegacyIpv4) OptNilEnvironmentPrivateNetworkLegacyIpv4 {
	return OptNilEnvironmentPrivateNetworkLegacyIpv4{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentPrivateNetworkLegacyIpv4 is optional nullable EnvironmentPrivateNetworkLegacyIpv4.
type OptNilEnvironmentPrivateNetworkLegacyIpv4 struct {
	Value EnvironmentPrivateNetworkLegacyIpv4
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentPrivateNetworkLegacyIpv4 was set.
func (o OptNilEnvironmentPrivateNetworkLegacyIpv4) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentPrivateNetworkLegacyIpv4) Reset() {
	var v EnvironmentPrivateNetworkLegacyIpv4
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentPrivateNetworkLegacyIpv4) SetTo(v EnvironmentPrivateNetworkLegacyIpv4) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentPrivateNetworkLegacyIpv4) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentPrivateNetworkLegacyIpv4) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentPrivateNetworkLegacyIpv4
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentPrivateNetworkLegacyIpv4) Get() (v EnvironmentPrivateNetworkLegacyIpv4, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentPrivateNetworkLegacyIpv4) Or(d EnvironmentPrivateNetworkLegacyIpv4) EnvironmentPrivateNetworkLegacyIpv4 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentServicesDiscovery returns new OptNilEnvironmentServicesDiscovery with value set to v.
func NewOptNilEnvironmentServicesDiscovery(v EnvironmentServicesDiscovery) OptNilEnvironmentServicesDiscovery {
	return OptNilEnvironmentServicesDiscovery{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentServicesDiscovery is optional nullable EnvironmentServicesDiscovery.
type OptNilEnvironmentServicesDiscovery struct {
	Value EnvironmentServicesDiscovery
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentServicesDiscovery was set.
func (o OptNilEnvironmentServicesDiscovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentServicesDiscovery) Reset() {
	var v EnvironmentServicesDiscovery
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentServicesDiscovery) SetTo(v EnvironmentServicesDiscovery) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentServicesDiscovery) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentServicesDiscovery) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentServicesDiscovery
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentServicesDiscovery) Get() (v EnvironmentServicesDiscovery, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentServicesDiscovery) Or(d EnvironmentServicesDiscovery) EnvironmentServicesDiscovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentServicesDiscoveryConfigHosts returns new OptNilEnvironmentServicesDiscoveryConfigHosts with value set to v.
func NewOptNilEnvironmentServicesDiscoveryConfigHosts(v EnvironmentServicesDiscoveryConfigHosts) OptNilEnvironmentServicesDiscoveryConfigHosts {
	return OptNilEnvironmentServicesDiscoveryConfigHosts{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentServicesDiscoveryConfigHosts is optional nullable EnvironmentServicesDiscoveryConfigHosts.
type OptNilEnvironmentServicesDiscoveryConfigHosts struct {
	Value EnvironmentServicesDiscoveryConfigHosts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentServicesDiscoveryConfigHosts was set.
func (o OptNilEnvironmentServicesDiscoveryConfigHosts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentServicesDiscoveryConfigHosts) Reset() {
	var v EnvironmentServicesDiscoveryConfigHosts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentServicesDiscoveryConfigHosts) SetTo(v EnvironmentServicesDiscoveryConfigHosts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentServicesDiscoveryConfigHosts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentServicesDiscoveryConfigHosts) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentServicesDiscoveryConfigHosts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentServicesDiscoveryConfigHosts) Get() (v EnvironmentServicesDiscoveryConfigHosts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentServicesDiscoveryConfigHosts) Or(d EnvironmentServicesDiscoveryConfigHosts) EnvironmentServicesDiscoveryConfigHosts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentServicesScheduler returns new OptNilEnvironmentServicesScheduler with value set to v.
func NewOptNilEnvironmentServicesScheduler(v EnvironmentServicesScheduler) OptNilEnvironmentServicesScheduler {
	return OptNilEnvironmentServicesScheduler{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentServicesScheduler is optional nullable EnvironmentServicesScheduler.
type OptNilEnvironmentServicesScheduler struct {
	Value EnvironmentServicesScheduler
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentServicesScheduler was set.
func (o OptNilEnvironmentServicesScheduler) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentServicesScheduler) Reset() {
	var v EnvironmentServicesScheduler
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentServicesScheduler) SetTo(v EnvironmentServicesScheduler) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentServicesScheduler) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentServicesScheduler) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentServicesScheduler
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentServicesScheduler) Get() (v EnvironmentServicesScheduler, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentServicesScheduler) Or(d EnvironmentServicesScheduler) EnvironmentServicesScheduler {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentServicesSchedulerConfig returns new OptNilEnvironmentServicesSchedulerConfig with value set to v.
func NewOptNilEnvironmentServicesSchedulerConfig(v EnvironmentServicesSchedulerConfig) OptNilEnvironmentServicesSchedulerConfig {
	return OptNilEnvironmentServicesSchedulerConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentServicesSchedulerConfig is optional nullable EnvironmentServicesSchedulerConfig.
type OptNilEnvironmentServicesSchedulerConfig struct {
	Value EnvironmentServicesSchedulerConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentServicesSchedulerConfig was set.
func (o OptNilEnvironmentServicesSchedulerConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentServicesSchedulerConfig) Reset() {
	var v EnvironmentServicesSchedulerConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentServicesSchedulerConfig) SetTo(v EnvironmentServicesSchedulerConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentServicesSchedulerConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentServicesSchedulerConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentServicesSchedulerConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentServicesSchedulerConfig) Get() (v EnvironmentServicesSchedulerConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentServicesSchedulerConfig) Or(d EnvironmentServicesSchedulerConfig) EnvironmentServicesSchedulerConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentServicesVpn returns new OptNilEnvironmentServicesVpn with value set to v.
func NewOptNilEnvironmentServicesVpn(v EnvironmentServicesVpn) OptNilEnvironmentServicesVpn {
	return OptNilEnvironmentServicesVpn{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentServicesVpn is optional nullable EnvironmentServicesVpn.
type OptNilEnvironmentServicesVpn struct {
	Value EnvironmentServicesVpn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentServicesVpn was set.
func (o OptNilEnvironmentServicesVpn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentServicesVpn) Reset() {
	var v EnvironmentServicesVpn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentServicesVpn) SetTo(v EnvironmentServicesVpn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentServicesVpn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentServicesVpn) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentServicesVpn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentServicesVpn) Get() (v EnvironmentServicesVpn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentServicesVpn) Or(d EnvironmentServicesVpn) EnvironmentServicesVpn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentSummaryServicesDiscovery returns new OptNilEnvironmentSummaryServicesDiscovery with value set to v.
func NewOptNilEnvironmentSummaryServicesDiscovery(v EnvironmentSummaryServicesDiscovery) OptNilEnvironmentSummaryServicesDiscovery {
	return OptNilEnvironmentSummaryServicesDiscovery{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentSummaryServicesDiscovery is optional nullable EnvironmentSummaryServicesDiscovery.
type OptNilEnvironmentSummaryServicesDiscovery struct {
	Value EnvironmentSummaryServicesDiscovery
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentSummaryServicesDiscovery was set.
func (o OptNilEnvironmentSummaryServicesDiscovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentSummaryServicesDiscovery) Reset() {
	var v EnvironmentSummaryServicesDiscovery
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentSummaryServicesDiscovery) SetTo(v EnvironmentSummaryServicesDiscovery) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentSummaryServicesDiscovery) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentSummaryServicesDiscovery) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentSummaryServicesDiscovery
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentSummaryServicesDiscovery) Get() (v EnvironmentSummaryServicesDiscovery, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentSummaryServicesDiscovery) Or(d EnvironmentSummaryServicesDiscovery) EnvironmentSummaryServicesDiscovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentSummaryServicesLoadbalancer returns new OptNilEnvironmentSummaryServicesLoadbalancer with value set to v.
func NewOptNilEnvironmentSummaryServicesLoadbalancer(v EnvironmentSummaryServicesLoadbalancer) OptNilEnvironmentSummaryServicesLoadbalancer {
	return OptNilEnvironmentSummaryServicesLoadbalancer{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentSummaryServicesLoadbalancer is optional nullable EnvironmentSummaryServicesLoadbalancer.
type OptNilEnvironmentSummaryServicesLoadbalancer struct {
	Value EnvironmentSummaryServicesLoadbalancer
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentSummaryServicesLoadbalancer was set.
func (o OptNilEnvironmentSummaryServicesLoadbalancer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentSummaryServicesLoadbalancer) Reset() {
	var v EnvironmentSummaryServicesLoadbalancer
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentSummaryServicesLoadbalancer) SetTo(v EnvironmentSummaryServicesLoadbalancer) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentSummaryServicesLoadbalancer) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentSummaryServicesLoadbalancer) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentSummaryServicesLoadbalancer
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentSummaryServicesLoadbalancer) Get() (v EnvironmentSummaryServicesLoadbalancer, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentSummaryServicesLoadbalancer) Or(d EnvironmentSummaryServicesLoadbalancer) EnvironmentSummaryServicesLoadbalancer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentSummaryServicesScheduler returns new OptNilEnvironmentSummaryServicesScheduler with value set to v.
func NewOptNilEnvironmentSummaryServicesScheduler(v EnvironmentSummaryServicesScheduler) OptNilEnvironmentSummaryServicesScheduler {
	return OptNilEnvironmentSummaryServicesScheduler{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentSummaryServicesScheduler is optional nullable EnvironmentSummaryServicesScheduler.
type OptNilEnvironmentSummaryServicesScheduler struct {
	Value EnvironmentSummaryServicesScheduler
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentSummaryServicesScheduler was set.
func (o OptNilEnvironmentSummaryServicesScheduler) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentSummaryServicesScheduler) Reset() {
	var v EnvironmentSummaryServicesScheduler
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentSummaryServicesScheduler) SetTo(v EnvironmentSummaryServicesScheduler) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentSummaryServicesScheduler) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentSummaryServicesScheduler) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentSummaryServicesScheduler
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentSummaryServicesScheduler) Get() (v EnvironmentSummaryServicesScheduler, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentSummaryServicesScheduler) Or(d EnvironmentSummaryServicesScheduler) EnvironmentSummaryServicesScheduler {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnvironmentSummaryServicesVpn returns new OptNilEnvironmentSummaryServicesVpn with value set to v.
func NewOptNilEnvironmentSummaryServicesVpn(v EnvironmentSummaryServicesVpn) OptNilEnvironmentSummaryServicesVpn {
	return OptNilEnvironmentSummaryServicesVpn{
		Value: v,
		Set:   true,
	}
}

// OptNilEnvironmentSummaryServicesVpn is optional nullable EnvironmentSummaryServicesVpn.
type OptNilEnvironmentSummaryServicesVpn struct {
	Value EnvironmentSummaryServicesVpn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnvironmentSummaryServicesVpn was set.
func (o OptNilEnvironmentSummaryServicesVpn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnvironmentSummaryServicesVpn) Reset() {
	var v EnvironmentSummaryServicesVpn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnvironmentSummaryServicesVpn) SetTo(v EnvironmentSummaryServicesVpn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnvironmentSummaryServicesVpn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilEnvironmentSummaryServicesVpn) SetToNull() {
	o.Set = true
	o.Null = true
	var v EnvironmentSummaryServicesVpn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnvironmentSummaryServicesVpn) Get() (v EnvironmentSummaryServicesVpn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnvironmentSummaryServicesVpn) Or(d EnvironmentSummaryServicesVpn) EnvironmentSummaryServicesVpn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetContainerSummaryOKDataStats returns new OptNilGetContainerSummaryOKDataStats with value set to v.
func NewOptNilGetContainerSummaryOKDataStats(v GetContainerSummaryOKDataStats) OptNilGetContainerSummaryOKDataStats {
	return OptNilGetContainerSummaryOKDataStats{
		Value: v,
		Set:   true,
	}
}

// OptNilGetContainerSummaryOKDataStats is optional nullable GetContainerSummaryOKDataStats.
type OptNilGetContainerSummaryOKDataStats struct {
	Value GetContainerSummaryOKDataStats
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetContainerSummaryOKDataStats was set.
func (o OptNilGetContainerSummaryOKDataStats) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetContainerSummaryOKDataStats) Reset() {
	var v GetContainerSummaryOKDataStats
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetContainerSummaryOKDataStats) SetTo(v GetContainerSummaryOKDataStats) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGetContainerSummaryOKDataStats) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGetContainerSummaryOKDataStats) SetToNull() {
	o.Set = true
	o.Null = true
	var v GetContainerSummaryOKDataStats
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetContainerSummaryOKDataStats) Get() (v GetContainerSummaryOKDataStats, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetContainerSummaryOKDataStats) Or(d GetContainerSummaryOKDataStats) GetContainerSummaryOKDataStats {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsCaching returns new OptNilHttpRouterConfigDetailsCaching with value set to v.
func NewOptNilHttpRouterConfigDetailsCaching(v HttpRouterConfigDetailsCaching) OptNilHttpRouterConfigDetailsCaching {
	return OptNilHttpRouterConfigDetailsCaching{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsCaching is optional nullable HttpRouterConfigDetailsCaching.
type OptNilHttpRouterConfigDetailsCaching struct {
	Value HttpRouterConfigDetailsCaching
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsCaching was set.
func (o OptNilHttpRouterConfigDetailsCaching) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsCaching) Reset() {
	var v HttpRouterConfigDetailsCaching
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsCaching) SetTo(v HttpRouterConfigDetailsCaching) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsCaching) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsCaching) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsCaching
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsCaching) Get() (v HttpRouterConfigDetailsCaching, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsCaching) Or(d HttpRouterConfigDetailsCaching) HttpRouterConfigDetailsCaching {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsCachingFilesItemArray returns new OptNilHttpRouterConfigDetailsCachingFilesItemArray with value set to v.
func NewOptNilHttpRouterConfigDetailsCachingFilesItemArray(v []HttpRouterConfigDetailsCachingFilesItem) OptNilHttpRouterConfigDetailsCachingFilesItemArray {
	return OptNilHttpRouterConfigDetailsCachingFilesItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsCachingFilesItemArray is optional nullable []HttpRouterConfigDetailsCachingFilesItem.
type OptNilHttpRouterConfigDetailsCachingFilesItemArray struct {
	Value []HttpRouterConfigDetailsCachingFilesItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsCachingFilesItemArray was set.
func (o OptNilHttpRouterConfigDetailsCachingFilesItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsCachingFilesItemArray) Reset() {
	var v []HttpRouterConfigDetailsCachingFilesItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsCachingFilesItemArray) SetTo(v []HttpRouterConfigDetailsCachingFilesItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsCachingFilesItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsCachingFilesItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []HttpRouterConfigDetailsCachingFilesItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsCachingFilesItemArray) Get() (v []HttpRouterConfigDetailsCachingFilesItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsCachingFilesItemArray) Or(d []HttpRouterConfigDetailsCachingFilesItem) []HttpRouterConfigDetailsCachingFilesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsForward returns new OptNilHttpRouterConfigDetailsForward with value set to v.
func NewOptNilHttpRouterConfigDetailsForward(v HttpRouterConfigDetailsForward) OptNilHttpRouterConfigDetailsForward {
	return OptNilHttpRouterConfigDetailsForward{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsForward is optional nullable HttpRouterConfigDetailsForward.
type OptNilHttpRouterConfigDetailsForward struct {
	Value HttpRouterConfigDetailsForward
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsForward was set.
func (o OptNilHttpRouterConfigDetailsForward) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsForward) Reset() {
	var v HttpRouterConfigDetailsForward
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsForward) SetTo(v HttpRouterConfigDetailsForward) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsForward) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsForward) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsForward
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsForward) Get() (v HttpRouterConfigDetailsForward, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsForward) Or(d HttpRouterConfigDetailsForward) HttpRouterConfigDetailsForward {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsForwardContentMod returns new OptNilHttpRouterConfigDetailsForwardContentMod with value set to v.
func NewOptNilHttpRouterConfigDetailsForwardContentMod(v HttpRouterConfigDetailsForwardContentMod) OptNilHttpRouterConfigDetailsForwardContentMod {
	return OptNilHttpRouterConfigDetailsForwardContentMod{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsForwardContentMod is optional nullable HttpRouterConfigDetailsForwardContentMod.
type OptNilHttpRouterConfigDetailsForwardContentMod struct {
	Value HttpRouterConfigDetailsForwardContentMod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsForwardContentMod was set.
func (o OptNilHttpRouterConfigDetailsForwardContentMod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsForwardContentMod) Reset() {
	var v HttpRouterConfigDetailsForwardContentMod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsForwardContentMod) SetTo(v HttpRouterConfigDetailsForwardContentMod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsForwardContentMod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsForwardContentMod) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsForwardContentMod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsForwardContentMod) Get() (v HttpRouterConfigDetailsForwardContentMod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsForwardContentMod) Or(d HttpRouterConfigDetailsForwardContentMod) HttpRouterConfigDetailsForwardContentMod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray returns new OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray with value set to v.
func NewOptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray(v []HttpRouterConfigDetailsForwardContentModReplaceItem) OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray {
	return OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray is optional nullable []HttpRouterConfigDetailsForwardContentModReplaceItem.
type OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray struct {
	Value []HttpRouterConfigDetailsForwardContentModReplaceItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray was set.
func (o OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) Reset() {
	var v []HttpRouterConfigDetailsForwardContentModReplaceItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) SetTo(v []HttpRouterConfigDetailsForwardContentModReplaceItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []HttpRouterConfigDetailsForwardContentModReplaceItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) Get() (v []HttpRouterConfigDetailsForwardContentModReplaceItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsForwardContentModReplaceItemArray) Or(d []HttpRouterConfigDetailsForwardContentModReplaceItem) []HttpRouterConfigDetailsForwardContentModReplaceItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsProxy returns new OptNilHttpRouterConfigDetailsProxy with value set to v.
func NewOptNilHttpRouterConfigDetailsProxy(v HttpRouterConfigDetailsProxy) OptNilHttpRouterConfigDetailsProxy {
	return OptNilHttpRouterConfigDetailsProxy{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsProxy is optional nullable HttpRouterConfigDetailsProxy.
type OptNilHttpRouterConfigDetailsProxy struct {
	Value HttpRouterConfigDetailsProxy
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsProxy was set.
func (o OptNilHttpRouterConfigDetailsProxy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsProxy) Reset() {
	var v HttpRouterConfigDetailsProxy
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsProxy) SetTo(v HttpRouterConfigDetailsProxy) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsProxy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsProxy) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsProxy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsProxy) Get() (v HttpRouterConfigDetailsProxy, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsProxy) Or(d HttpRouterConfigDetailsProxy) HttpRouterConfigDetailsProxy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsProxyContentMod returns new OptNilHttpRouterConfigDetailsProxyContentMod with value set to v.
func NewOptNilHttpRouterConfigDetailsProxyContentMod(v HttpRouterConfigDetailsProxyContentMod) OptNilHttpRouterConfigDetailsProxyContentMod {
	return OptNilHttpRouterConfigDetailsProxyContentMod{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsProxyContentMod is optional nullable HttpRouterConfigDetailsProxyContentMod.
type OptNilHttpRouterConfigDetailsProxyContentMod struct {
	Value HttpRouterConfigDetailsProxyContentMod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsProxyContentMod was set.
func (o OptNilHttpRouterConfigDetailsProxyContentMod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsProxyContentMod) Reset() {
	var v HttpRouterConfigDetailsProxyContentMod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsProxyContentMod) SetTo(v HttpRouterConfigDetailsProxyContentMod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsProxyContentMod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsProxyContentMod) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsProxyContentMod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsProxyContentMod) Get() (v HttpRouterConfigDetailsProxyContentMod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsProxyContentMod) Or(d HttpRouterConfigDetailsProxyContentMod) HttpRouterConfigDetailsProxyContentMod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray returns new OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray with value set to v.
func NewOptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray(v []HttpRouterConfigDetailsProxyContentModReplaceItem) OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray {
	return OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray is optional nullable []HttpRouterConfigDetailsProxyContentModReplaceItem.
type OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray struct {
	Value []HttpRouterConfigDetailsProxyContentModReplaceItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray was set.
func (o OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) Reset() {
	var v []HttpRouterConfigDetailsProxyContentModReplaceItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) SetTo(v []HttpRouterConfigDetailsProxyContentModReplaceItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []HttpRouterConfigDetailsProxyContentModReplaceItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) Get() (v []HttpRouterConfigDetailsProxyContentModReplaceItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsProxyContentModReplaceItemArray) Or(d []HttpRouterConfigDetailsProxyContentModReplaceItem) []HttpRouterConfigDetailsProxyContentModReplaceItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpRouterConfigDetailsRedirect returns new OptNilHttpRouterConfigDetailsRedirect with value set to v.
func NewOptNilHttpRouterConfigDetailsRedirect(v HttpRouterConfigDetailsRedirect) OptNilHttpRouterConfigDetailsRedirect {
	return OptNilHttpRouterConfigDetailsRedirect{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpRouterConfigDetailsRedirect is optional nullable HttpRouterConfigDetailsRedirect.
type OptNilHttpRouterConfigDetailsRedirect struct {
	Value HttpRouterConfigDetailsRedirect
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpRouterConfigDetailsRedirect was set.
func (o OptNilHttpRouterConfigDetailsRedirect) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpRouterConfigDetailsRedirect) Reset() {
	var v HttpRouterConfigDetailsRedirect
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpRouterConfigDetailsRedirect) SetTo(v HttpRouterConfigDetailsRedirect) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpRouterConfigDetailsRedirect) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpRouterConfigDetailsRedirect) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpRouterConfigDetailsRedirect
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpRouterConfigDetailsRedirect) Get() (v HttpRouterConfigDetailsRedirect, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpRouterConfigDetailsRedirect) Or(d HttpRouterConfigDetailsRedirect) HttpRouterConfigDetailsRedirect {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilHttpTransportConfigDetailsTelemetryGroupPaths returns new OptNilHttpTransportConfigDetailsTelemetryGroupPaths with value set to v.
func NewOptNilHttpTransportConfigDetailsTelemetryGroupPaths(v HttpTransportConfigDetailsTelemetryGroupPaths) OptNilHttpTransportConfigDetailsTelemetryGroupPaths {
	return OptNilHttpTransportConfigDetailsTelemetryGroupPaths{
		Value: v,
		Set:   true,
	}
}

// OptNilHttpTransportConfigDetailsTelemetryGroupPaths is optional nullable HttpTransportConfigDetailsTelemetryGroupPaths.
type OptNilHttpTransportConfigDetailsTelemetryGroupPaths struct {
	Value HttpTransportConfigDetailsTelemetryGroupPaths
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilHttpTransportConfigDetailsTelemetryGroupPaths was set.
func (o OptNilHttpTransportConfigDetailsTelemetryGroupPaths) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilHttpTransportConfigDetailsTelemetryGroupPaths) Reset() {
	var v HttpTransportConfigDetailsTelemetryGroupPaths
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilHttpTransportConfigDetailsTelemetryGroupPaths) SetTo(v HttpTransportConfigDetailsTelemetryGroupPaths) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilHttpTransportConfigDetailsTelemetryGroupPaths) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilHttpTransportConfigDetailsTelemetryGroupPaths) SetToNull() {
	o.Set = true
	o.Null = true
	var v HttpTransportConfigDetailsTelemetryGroupPaths
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilHttpTransportConfigDetailsTelemetryGroupPaths) Get() (v HttpTransportConfigDetailsTelemetryGroupPaths, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilHttpTransportConfigDetailsTelemetryGroupPaths) Or(d HttpTransportConfigDetailsTelemetryGroupPaths) HttpTransportConfigDetailsTelemetryGroupPaths {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIPAssignment returns new OptNilIPAssignment with value set to v.
func NewOptNilIPAssignment(v IPAssignment) OptNilIPAssignment {
	return OptNilIPAssignment{
		Value: v,
		Set:   true,
	}
}

// OptNilIPAssignment is optional nullable IPAssignment.
type OptNilIPAssignment struct {
	Value IPAssignment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIPAssignment was set.
func (o OptNilIPAssignment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIPAssignment) Reset() {
	var v IPAssignment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIPAssignment) SetTo(v IPAssignment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIPAssignment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIPAssignment) SetToNull() {
	o.Set = true
	o.Null = true
	var v IPAssignment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIPAssignment) Get() (v IPAssignment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIPAssignment) Or(d IPAssignment) IPAssignment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageBuild returns new OptNilImageBuild with value set to v.
func NewOptNilImageBuild(v ImageBuild) OptNilImageBuild {
	return OptNilImageBuild{
		Value: v,
		Set:   true,
	}
}

// OptNilImageBuild is optional nullable ImageBuild.
type OptNilImageBuild struct {
	Value ImageBuild
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageBuild was set.
func (o OptNilImageBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageBuild) Reset() {
	var v ImageBuild
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageBuild) SetTo(v ImageBuild) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageBuild) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageBuild) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageBuild
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageBuild) Get() (v ImageBuild, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageBuild) Or(d ImageBuild) ImageBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageBuilder returns new OptNilImageBuilder with value set to v.
func NewOptNilImageBuilder(v ImageBuilder) OptNilImageBuilder {
	return OptNilImageBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilImageBuilder is optional nullable ImageBuilder.
type OptNilImageBuilder struct {
	Value ImageBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageBuilder was set.
func (o OptNilImageBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageBuilder) Reset() {
	var v ImageBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageBuilder) SetTo(v ImageBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageBuilder) Get() (v ImageBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageBuilder) Or(d ImageBuilder) ImageBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageCreateImportStepDetailsBuildArgs returns new OptNilImageCreateImportStepDetailsBuildArgs with value set to v.
func NewOptNilImageCreateImportStepDetailsBuildArgs(v ImageCreateImportStepDetailsBuildArgs) OptNilImageCreateImportStepDetailsBuildArgs {
	return OptNilImageCreateImportStepDetailsBuildArgs{
		Value: v,
		Set:   true,
	}
}

// OptNilImageCreateImportStepDetailsBuildArgs is optional nullable ImageCreateImportStepDetailsBuildArgs.
type OptNilImageCreateImportStepDetailsBuildArgs struct {
	Value ImageCreateImportStepDetailsBuildArgs
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageCreateImportStepDetailsBuildArgs was set.
func (o OptNilImageCreateImportStepDetailsBuildArgs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageCreateImportStepDetailsBuildArgs) Reset() {
	var v ImageCreateImportStepDetailsBuildArgs
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageCreateImportStepDetailsBuildArgs) SetTo(v ImageCreateImportStepDetailsBuildArgs) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageCreateImportStepDetailsBuildArgs) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageCreateImportStepDetailsBuildArgs) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageCreateImportStepDetailsBuildArgs
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageCreateImportStepDetailsBuildArgs) Get() (v ImageCreateImportStepDetailsBuildArgs, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageCreateImportStepDetailsBuildArgs) Or(d ImageCreateImportStepDetailsBuildArgs) ImageCreateImportStepDetailsBuildArgs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageCreateImportStepDetailsOverride returns new OptNilImageCreateImportStepDetailsOverride with value set to v.
func NewOptNilImageCreateImportStepDetailsOverride(v ImageCreateImportStepDetailsOverride) OptNilImageCreateImportStepDetailsOverride {
	return OptNilImageCreateImportStepDetailsOverride{
		Value: v,
		Set:   true,
	}
}

// OptNilImageCreateImportStepDetailsOverride is optional nullable ImageCreateImportStepDetailsOverride.
type OptNilImageCreateImportStepDetailsOverride struct {
	Value ImageCreateImportStepDetailsOverride
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageCreateImportStepDetailsOverride was set.
func (o OptNilImageCreateImportStepDetailsOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageCreateImportStepDetailsOverride) Reset() {
	var v ImageCreateImportStepDetailsOverride
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageCreateImportStepDetailsOverride) SetTo(v ImageCreateImportStepDetailsOverride) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageCreateImportStepDetailsOverride) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageCreateImportStepDetailsOverride) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageCreateImportStepDetailsOverride
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageCreateImportStepDetailsOverride) Get() (v ImageCreateImportStepDetailsOverride, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageCreateImportStepDetailsOverride) Or(d ImageCreateImportStepDetailsOverride) ImageCreateImportStepDetailsOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageCreateStepDetailsBuildArgs returns new OptNilImageCreateStepDetailsBuildArgs with value set to v.
func NewOptNilImageCreateStepDetailsBuildArgs(v ImageCreateStepDetailsBuildArgs) OptNilImageCreateStepDetailsBuildArgs {
	return OptNilImageCreateStepDetailsBuildArgs{
		Value: v,
		Set:   true,
	}
}

// OptNilImageCreateStepDetailsBuildArgs is optional nullable ImageCreateStepDetailsBuildArgs.
type OptNilImageCreateStepDetailsBuildArgs struct {
	Value ImageCreateStepDetailsBuildArgs
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageCreateStepDetailsBuildArgs was set.
func (o OptNilImageCreateStepDetailsBuildArgs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageCreateStepDetailsBuildArgs) Reset() {
	var v ImageCreateStepDetailsBuildArgs
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageCreateStepDetailsBuildArgs) SetTo(v ImageCreateStepDetailsBuildArgs) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageCreateStepDetailsBuildArgs) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageCreateStepDetailsBuildArgs) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageCreateStepDetailsBuildArgs
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageCreateStepDetailsBuildArgs) Get() (v ImageCreateStepDetailsBuildArgs, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageCreateStepDetailsBuildArgs) Or(d ImageCreateStepDetailsBuildArgs) ImageCreateStepDetailsBuildArgs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageCreateStepDetailsOverride returns new OptNilImageCreateStepDetailsOverride with value set to v.
func NewOptNilImageCreateStepDetailsOverride(v ImageCreateStepDetailsOverride) OptNilImageCreateStepDetailsOverride {
	return OptNilImageCreateStepDetailsOverride{
		Value: v,
		Set:   true,
	}
}

// OptNilImageCreateStepDetailsOverride is optional nullable ImageCreateStepDetailsOverride.
type OptNilImageCreateStepDetailsOverride struct {
	Value ImageCreateStepDetailsOverride
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageCreateStepDetailsOverride was set.
func (o OptNilImageCreateStepDetailsOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageCreateStepDetailsOverride) Reset() {
	var v ImageCreateStepDetailsOverride
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageCreateStepDetailsOverride) SetTo(v ImageCreateStepDetailsOverride) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageCreateStepDetailsOverride) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageCreateStepDetailsOverride) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageCreateStepDetailsOverride
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageCreateStepDetailsOverride) Get() (v ImageCreateStepDetailsOverride, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageCreateStepDetailsOverride) Or(d ImageCreateStepDetailsOverride) ImageCreateStepDetailsOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageFactory returns new OptNilImageFactory with value set to v.
func NewOptNilImageFactory(v ImageFactory) OptNilImageFactory {
	return OptNilImageFactory{
		Value: v,
		Set:   true,
	}
}

// OptNilImageFactory is optional nullable ImageFactory.
type OptNilImageFactory struct {
	Value ImageFactory
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageFactory was set.
func (o OptNilImageFactory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageFactory) Reset() {
	var v ImageFactory
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageFactory) SetTo(v ImageFactory) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageFactory) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageFactory) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageFactory
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageFactory) Get() (v ImageFactory, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageFactory) Or(d ImageFactory) ImageFactory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilImageSourceBuilder returns new OptNilImageSourceBuilder with value set to v.
func NewOptNilImageSourceBuilder(v ImageSourceBuilder) OptNilImageSourceBuilder {
	return OptNilImageSourceBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilImageSourceBuilder is optional nullable ImageSourceBuilder.
type OptNilImageSourceBuilder struct {
	Value ImageSourceBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilImageSourceBuilder was set.
func (o OptNilImageSourceBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilImageSourceBuilder) Reset() {
	var v ImageSourceBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilImageSourceBuilder) SetTo(v ImageSourceBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilImageSourceBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilImageSourceBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v ImageSourceBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilImageSourceBuilder) Get() (v ImageSourceBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilImageSourceBuilder) Or(d ImageSourceBuilder) ImageSourceBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInfraServerAutoscale returns new OptNilInfraServerAutoscale with value set to v.
func NewOptNilInfraServerAutoscale(v InfraServerAutoscale) OptNilInfraServerAutoscale {
	return OptNilInfraServerAutoscale{
		Value: v,
		Set:   true,
	}
}

// OptNilInfraServerAutoscale is optional nullable InfraServerAutoscale.
type OptNilInfraServerAutoscale struct {
	Value InfraServerAutoscale
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInfraServerAutoscale was set.
func (o OptNilInfraServerAutoscale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInfraServerAutoscale) Reset() {
	var v InfraServerAutoscale
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInfraServerAutoscale) SetTo(v InfraServerAutoscale) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInfraServerAutoscale) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInfraServerAutoscale) SetToNull() {
	o.Set = true
	o.Null = true
	var v InfraServerAutoscale
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInfraServerAutoscale) Get() (v InfraServerAutoscale, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInfraServerAutoscale) Or(d InfraServerAutoscale) InfraServerAutoscale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInfraServerEvacuate returns new OptNilInfraServerEvacuate with value set to v.
func NewOptNilInfraServerEvacuate(v InfraServerEvacuate) OptNilInfraServerEvacuate {
	return OptNilInfraServerEvacuate{
		Value: v,
		Set:   true,
	}
}

// OptNilInfraServerEvacuate is optional nullable InfraServerEvacuate.
type OptNilInfraServerEvacuate struct {
	Value InfraServerEvacuate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInfraServerEvacuate was set.
func (o OptNilInfraServerEvacuate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInfraServerEvacuate) Reset() {
	var v InfraServerEvacuate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInfraServerEvacuate) SetTo(v InfraServerEvacuate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInfraServerEvacuate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInfraServerEvacuate) SetToNull() {
	o.Set = true
	o.Null = true
	var v InfraServerEvacuate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInfraServerEvacuate) Get() (v InfraServerEvacuate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInfraServerEvacuate) Or(d InfraServerEvacuate) InfraServerEvacuate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInfrastructureSummaryClustersItemServersProvidersItemLocations returns new OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations with value set to v.
func NewOptNilInfrastructureSummaryClustersItemServersProvidersItemLocations(v InfrastructureSummaryClustersItemServersProvidersItemLocations) OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations {
	return OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations{
		Value: v,
		Set:   true,
	}
}

// OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations is optional nullable InfrastructureSummaryClustersItemServersProvidersItemLocations.
type OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations struct {
	Value InfrastructureSummaryClustersItemServersProvidersItemLocations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations was set.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) Reset() {
	var v InfrastructureSummaryClustersItemServersProvidersItemLocations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) SetTo(v InfrastructureSummaryClustersItemServersProvidersItemLocations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) SetToNull() {
	o.Set = true
	o.Null = true
	var v InfrastructureSummaryClustersItemServersProvidersItemLocations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) Get() (v InfrastructureSummaryClustersItemServersProvidersItemLocations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemLocations) Or(d InfrastructureSummaryClustersItemServersProvidersItemLocations) InfrastructureSummaryClustersItemServersProvidersItemLocations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInfrastructureSummaryClustersItemServersProvidersItemModels returns new OptNilInfrastructureSummaryClustersItemServersProvidersItemModels with value set to v.
func NewOptNilInfrastructureSummaryClustersItemServersProvidersItemModels(v InfrastructureSummaryClustersItemServersProvidersItemModels) OptNilInfrastructureSummaryClustersItemServersProvidersItemModels {
	return OptNilInfrastructureSummaryClustersItemServersProvidersItemModels{
		Value: v,
		Set:   true,
	}
}

// OptNilInfrastructureSummaryClustersItemServersProvidersItemModels is optional nullable InfrastructureSummaryClustersItemServersProvidersItemModels.
type OptNilInfrastructureSummaryClustersItemServersProvidersItemModels struct {
	Value InfrastructureSummaryClustersItemServersProvidersItemModels
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInfrastructureSummaryClustersItemServersProvidersItemModels was set.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) Reset() {
	var v InfrastructureSummaryClustersItemServersProvidersItemModels
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) SetTo(v InfrastructureSummaryClustersItemServersProvidersItemModels) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) SetToNull() {
	o.Set = true
	o.Null = true
	var v InfrastructureSummaryClustersItemServersProvidersItemModels
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) Get() (v InfrastructureSummaryClustersItemServersProvidersItemModels, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInfrastructureSummaryClustersItemServersProvidersItemModels) Or(d InfrastructureSummaryClustersItemServersProvidersItemModels) InfrastructureSummaryClustersItemServersProvidersItemModels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceAutoscale returns new OptNilInstanceAutoscale with value set to v.
func NewOptNilInstanceAutoscale(v InstanceAutoscale) OptNilInstanceAutoscale {
	return OptNilInstanceAutoscale{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceAutoscale is optional nullable InstanceAutoscale.
type OptNilInstanceAutoscale struct {
	Value InstanceAutoscale
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceAutoscale was set.
func (o OptNilInstanceAutoscale) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceAutoscale) Reset() {
	var v InstanceAutoscale
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceAutoscale) SetTo(v InstanceAutoscale) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceAutoscale) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceAutoscale) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceAutoscale
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceAutoscale) Get() (v InstanceAutoscale, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceAutoscale) Or(d InstanceAutoscale) InstanceAutoscale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceDeployment returns new OptNilInstanceDeployment with value set to v.
func NewOptNilInstanceDeployment(v InstanceDeployment) OptNilInstanceDeployment {
	return OptNilInstanceDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceDeployment is optional nullable InstanceDeployment.
type OptNilInstanceDeployment struct {
	Value InstanceDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceDeployment was set.
func (o OptNilInstanceDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceDeployment) Reset() {
	var v InstanceDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceDeployment) SetTo(v InstanceDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceDeployment) Get() (v InstanceDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceDeployment) Or(d InstanceDeployment) InstanceDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceMigration returns new OptNilInstanceMigration with value set to v.
func NewOptNilInstanceMigration(v InstanceMigration) OptNilInstanceMigration {
	return OptNilInstanceMigration{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceMigration is optional nullable InstanceMigration.
type OptNilInstanceMigration struct {
	Value InstanceMigration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceMigration was set.
func (o OptNilInstanceMigration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceMigration) Reset() {
	var v InstanceMigration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceMigration) SetTo(v InstanceMigration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceMigration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceMigration) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceMigration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceMigration) Get() (v InstanceMigration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceMigration) Or(d InstanceMigration) InstanceMigration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceMigrationFrom returns new OptNilInstanceMigrationFrom with value set to v.
func NewOptNilInstanceMigrationFrom(v InstanceMigrationFrom) OptNilInstanceMigrationFrom {
	return OptNilInstanceMigrationFrom{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceMigrationFrom is optional nullable InstanceMigrationFrom.
type OptNilInstanceMigrationFrom struct {
	Value InstanceMigrationFrom
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceMigrationFrom was set.
func (o OptNilInstanceMigrationFrom) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceMigrationFrom) Reset() {
	var v InstanceMigrationFrom
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceMigrationFrom) SetTo(v InstanceMigrationFrom) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceMigrationFrom) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceMigrationFrom) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceMigrationFrom
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceMigrationFrom) Get() (v InstanceMigrationFrom, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceMigrationFrom) Or(d InstanceMigrationFrom) InstanceMigrationFrom {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceMigrationTo returns new OptNilInstanceMigrationTo with value set to v.
func NewOptNilInstanceMigrationTo(v InstanceMigrationTo) OptNilInstanceMigrationTo {
	return OptNilInstanceMigrationTo{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceMigrationTo is optional nullable InstanceMigrationTo.
type OptNilInstanceMigrationTo struct {
	Value InstanceMigrationTo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceMigrationTo was set.
func (o OptNilInstanceMigrationTo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceMigrationTo) Reset() {
	var v InstanceMigrationTo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceMigrationTo) SetTo(v InstanceMigrationTo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceMigrationTo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceMigrationTo) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceMigrationTo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceMigrationTo) Get() (v InstanceMigrationTo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceMigrationTo) Or(d InstanceMigrationTo) InstanceMigrationTo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceStateHealth returns new OptNilInstanceStateHealth with value set to v.
func NewOptNilInstanceStateHealth(v InstanceStateHealth) OptNilInstanceStateHealth {
	return OptNilInstanceStateHealth{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceStateHealth is optional nullable InstanceStateHealth.
type OptNilInstanceStateHealth struct {
	Value InstanceStateHealth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceStateHealth was set.
func (o OptNilInstanceStateHealth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceStateHealth) Reset() {
	var v InstanceStateHealth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceStateHealth) SetTo(v InstanceStateHealth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceStateHealth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceStateHealth) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceStateHealth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceStateHealth) Get() (v InstanceStateHealth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceStateHealth) Or(d InstanceStateHealth) InstanceStateHealth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInstanceStateful returns new OptNilInstanceStateful with value set to v.
func NewOptNilInstanceStateful(v InstanceStateful) OptNilInstanceStateful {
	return OptNilInstanceStateful{
		Value: v,
		Set:   true,
	}
}

// OptNilInstanceStateful is optional nullable InstanceStateful.
type OptNilInstanceStateful struct {
	Value InstanceStateful
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInstanceStateful was set.
func (o OptNilInstanceStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInstanceStateful) Reset() {
	var v InstanceStateful
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInstanceStateful) SetTo(v InstanceStateful) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInstanceStateful) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInstanceStateful) SetToNull() {
	o.Set = true
	o.Null = true
	var v InstanceStateful
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInstanceStateful) Get() (v InstanceStateful, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInstanceStateful) Or(d InstanceStateful) InstanceStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntArray returns new OptNilIntArray with value set to v.
func NewOptNilIntArray(v []int) OptNilIntArray {
	return OptNilIntArray{
		Value: v,
		Set:   true,
	}
}

// OptNilIntArray is optional nullable []int.
type OptNilIntArray struct {
	Value []int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntArray was set.
func (o OptNilIntArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntArray) Reset() {
	var v []int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntArray) SetTo(v []int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntArray) Get() (v []int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntArray) Or(d []int) []int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationAuth returns new OptNilIntegrationAuth with value set to v.
func NewOptNilIntegrationAuth(v IntegrationAuth) OptNilIntegrationAuth {
	return OptNilIntegrationAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationAuth is optional nullable IntegrationAuth.
type OptNilIntegrationAuth struct {
	Value IntegrationAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationAuth was set.
func (o OptNilIntegrationAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationAuth) Reset() {
	var v IntegrationAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationAuth) SetTo(v IntegrationAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationAuth) Get() (v IntegrationAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationAuth) Or(d IntegrationAuth) IntegrationAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationDefinitionArray returns new OptNilIntegrationDefinitionArray with value set to v.
func NewOptNilIntegrationDefinitionArray(v []IntegrationDefinition) OptNilIntegrationDefinitionArray {
	return OptNilIntegrationDefinitionArray{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationDefinitionArray is optional nullable []IntegrationDefinition.
type OptNilIntegrationDefinitionArray struct {
	Value []IntegrationDefinition
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationDefinitionArray was set.
func (o OptNilIntegrationDefinitionArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationDefinitionArray) Reset() {
	var v []IntegrationDefinition
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationDefinitionArray) SetTo(v []IntegrationDefinition) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationDefinitionArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationDefinitionArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []IntegrationDefinition
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationDefinitionArray) Get() (v []IntegrationDefinition, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationDefinitionArray) Or(d []IntegrationDefinition) []IntegrationDefinition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationDefinitionExtendedConfiguration returns new OptNilIntegrationDefinitionExtendedConfiguration with value set to v.
func NewOptNilIntegrationDefinitionExtendedConfiguration(v IntegrationDefinitionExtendedConfiguration) OptNilIntegrationDefinitionExtendedConfiguration {
	return OptNilIntegrationDefinitionExtendedConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationDefinitionExtendedConfiguration is optional nullable IntegrationDefinitionExtendedConfiguration.
type OptNilIntegrationDefinitionExtendedConfiguration struct {
	Value IntegrationDefinitionExtendedConfiguration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationDefinitionExtendedConfiguration was set.
func (o OptNilIntegrationDefinitionExtendedConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationDefinitionExtendedConfiguration) Reset() {
	var v IntegrationDefinitionExtendedConfiguration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationDefinitionExtendedConfiguration) SetTo(v IntegrationDefinitionExtendedConfiguration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationDefinitionExtendedConfiguration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationDefinitionExtendedConfiguration) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationDefinitionExtendedConfiguration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationDefinitionExtendedConfiguration) Get() (v IntegrationDefinitionExtendedConfiguration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationDefinitionExtendedConfiguration) Or(d IntegrationDefinitionExtendedConfiguration) IntegrationDefinitionExtendedConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray returns new OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray with value set to v.
func NewOptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray(v []IntegrationDefinitionExtendedConfigurationOptionsItem) OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray {
	return OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray is optional nullable []IntegrationDefinitionExtendedConfigurationOptionsItem.
type OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray struct {
	Value []IntegrationDefinitionExtendedConfigurationOptionsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray was set.
func (o OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) Reset() {
	var v []IntegrationDefinitionExtendedConfigurationOptionsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) SetTo(v []IntegrationDefinitionExtendedConfigurationOptionsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []IntegrationDefinitionExtendedConfigurationOptionsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) Get() (v []IntegrationDefinitionExtendedConfigurationOptionsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationDefinitionExtendedConfigurationOptionsItemArray) Or(d []IntegrationDefinitionExtendedConfigurationOptionsItem) []IntegrationDefinitionExtendedConfigurationOptionsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationDefinitionFieldsAuth returns new OptNilIntegrationDefinitionFieldsAuth with value set to v.
func NewOptNilIntegrationDefinitionFieldsAuth(v IntegrationDefinitionFieldsAuth) OptNilIntegrationDefinitionFieldsAuth {
	return OptNilIntegrationDefinitionFieldsAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationDefinitionFieldsAuth is optional nullable IntegrationDefinitionFieldsAuth.
type OptNilIntegrationDefinitionFieldsAuth struct {
	Value IntegrationDefinitionFieldsAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationDefinitionFieldsAuth was set.
func (o OptNilIntegrationDefinitionFieldsAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationDefinitionFieldsAuth) Reset() {
	var v IntegrationDefinitionFieldsAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationDefinitionFieldsAuth) SetTo(v IntegrationDefinitionFieldsAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationDefinitionFieldsAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationDefinitionFieldsAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationDefinitionFieldsAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationDefinitionFieldsAuth) Get() (v IntegrationDefinitionFieldsAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationDefinitionFieldsAuth) Or(d IntegrationDefinitionFieldsAuth) IntegrationDefinitionFieldsAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationDefinitionFieldsExtra returns new OptNilIntegrationDefinitionFieldsExtra with value set to v.
func NewOptNilIntegrationDefinitionFieldsExtra(v IntegrationDefinitionFieldsExtra) OptNilIntegrationDefinitionFieldsExtra {
	return OptNilIntegrationDefinitionFieldsExtra{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationDefinitionFieldsExtra is optional nullable IntegrationDefinitionFieldsExtra.
type OptNilIntegrationDefinitionFieldsExtra struct {
	Value IntegrationDefinitionFieldsExtra
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationDefinitionFieldsExtra was set.
func (o OptNilIntegrationDefinitionFieldsExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationDefinitionFieldsExtra) Reset() {
	var v IntegrationDefinitionFieldsExtra
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationDefinitionFieldsExtra) SetTo(v IntegrationDefinitionFieldsExtra) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationDefinitionFieldsExtra) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationDefinitionFieldsExtra) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationDefinitionFieldsExtra
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationDefinitionFieldsExtra) Get() (v IntegrationDefinitionFieldsExtra, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationDefinitionFieldsExtra) Or(d IntegrationDefinitionFieldsExtra) IntegrationDefinitionFieldsExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationExtra returns new OptNilIntegrationExtra with value set to v.
func NewOptNilIntegrationExtra(v IntegrationExtra) OptNilIntegrationExtra {
	return OptNilIntegrationExtra{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationExtra is optional nullable IntegrationExtra.
type OptNilIntegrationExtra struct {
	Value IntegrationExtra
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationExtra was set.
func (o OptNilIntegrationExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationExtra) Reset() {
	var v IntegrationExtra
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationExtra) SetTo(v IntegrationExtra) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationExtra) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationExtra) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationExtra
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationExtra) Get() (v IntegrationExtra, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationExtra) Or(d IntegrationExtra) IntegrationExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIntegrationMeta returns new OptNilIntegrationMeta with value set to v.
func NewOptNilIntegrationMeta(v IntegrationMeta) OptNilIntegrationMeta {
	return OptNilIntegrationMeta{
		Value: v,
		Set:   true,
	}
}

// OptNilIntegrationMeta is optional nullable IntegrationMeta.
type OptNilIntegrationMeta struct {
	Value IntegrationMeta
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIntegrationMeta was set.
func (o OptNilIntegrationMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIntegrationMeta) Reset() {
	var v IntegrationMeta
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIntegrationMeta) SetTo(v IntegrationMeta) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIntegrationMeta) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilIntegrationMeta) SetToNull() {
	o.Set = true
	o.Null = true
	var v IntegrationMeta
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIntegrationMeta) Get() (v IntegrationMeta, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIntegrationMeta) Or(d IntegrationMeta) IntegrationMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInvoiceCreditArray returns new OptNilInvoiceCreditArray with value set to v.
func NewOptNilInvoiceCreditArray(v []InvoiceCredit) OptNilInvoiceCreditArray {
	return OptNilInvoiceCreditArray{
		Value: v,
		Set:   true,
	}
}

// OptNilInvoiceCreditArray is optional nullable []InvoiceCredit.
type OptNilInvoiceCreditArray struct {
	Value []InvoiceCredit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInvoiceCreditArray was set.
func (o OptNilInvoiceCreditArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInvoiceCreditArray) Reset() {
	var v []InvoiceCredit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInvoiceCreditArray) SetTo(v []InvoiceCredit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInvoiceCreditArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInvoiceCreditArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []InvoiceCredit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInvoiceCreditArray) Get() (v []InvoiceCredit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInvoiceCreditArray) Or(d []InvoiceCredit) []InvoiceCredit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLateFeeArray returns new OptNilLateFeeArray with value set to v.
func NewOptNilLateFeeArray(v []LateFee) OptNilLateFeeArray {
	return OptNilLateFeeArray{
		Value: v,
		Set:   true,
	}
}

// OptNilLateFeeArray is optional nullable []LateFee.
type OptNilLateFeeArray struct {
	Value []LateFee
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLateFeeArray was set.
func (o OptNilLateFeeArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLateFeeArray) Reset() {
	var v []LateFee
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLateFeeArray) SetTo(v []LateFee) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLateFeeArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLateFeeArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []LateFee
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLateFeeArray) Get() (v []LateFee, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLateFeeArray) Or(d []LateFee) []LateFee {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerLatestTelemetryControllerArray returns new OptNilLoadBalancerLatestTelemetryControllerArray with value set to v.
func NewOptNilLoadBalancerLatestTelemetryControllerArray(v []LoadBalancerLatestTelemetryController) OptNilLoadBalancerLatestTelemetryControllerArray {
	return OptNilLoadBalancerLatestTelemetryControllerArray{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerLatestTelemetryControllerArray is optional nullable []LoadBalancerLatestTelemetryController.
type OptNilLoadBalancerLatestTelemetryControllerArray struct {
	Value []LoadBalancerLatestTelemetryController
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerLatestTelemetryControllerArray was set.
func (o OptNilLoadBalancerLatestTelemetryControllerArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerLatestTelemetryControllerArray) Reset() {
	var v []LoadBalancerLatestTelemetryController
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerLatestTelemetryControllerArray) SetTo(v []LoadBalancerLatestTelemetryController) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerLatestTelemetryControllerArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerLatestTelemetryControllerArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []LoadBalancerLatestTelemetryController
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerLatestTelemetryControllerArray) Get() (v []LoadBalancerLatestTelemetryController, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerLatestTelemetryControllerArray) Or(d []LoadBalancerLatestTelemetryController) []LoadBalancerLatestTelemetryController {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerLatestTelemetryInstanceArray returns new OptNilLoadBalancerLatestTelemetryInstanceArray with value set to v.
func NewOptNilLoadBalancerLatestTelemetryInstanceArray(v []LoadBalancerLatestTelemetryInstance) OptNilLoadBalancerLatestTelemetryInstanceArray {
	return OptNilLoadBalancerLatestTelemetryInstanceArray{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerLatestTelemetryInstanceArray is optional nullable []LoadBalancerLatestTelemetryInstance.
type OptNilLoadBalancerLatestTelemetryInstanceArray struct {
	Value []LoadBalancerLatestTelemetryInstance
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerLatestTelemetryInstanceArray was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerLatestTelemetryInstanceArray) Reset() {
	var v []LoadBalancerLatestTelemetryInstance
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerLatestTelemetryInstanceArray) SetTo(v []LoadBalancerLatestTelemetryInstance) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerLatestTelemetryInstanceArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerLatestTelemetryInstanceArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []LoadBalancerLatestTelemetryInstance
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceArray) Get() (v []LoadBalancerLatestTelemetryInstance, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerLatestTelemetryInstanceArray) Or(d []LoadBalancerLatestTelemetryInstance) []LoadBalancerLatestTelemetryInstance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerLatestTelemetryInstanceLatest returns new OptNilLoadBalancerLatestTelemetryInstanceLatest with value set to v.
func NewOptNilLoadBalancerLatestTelemetryInstanceLatest(v LoadBalancerLatestTelemetryInstanceLatest) OptNilLoadBalancerLatestTelemetryInstanceLatest {
	return OptNilLoadBalancerLatestTelemetryInstanceLatest{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerLatestTelemetryInstanceLatest is optional nullable LoadBalancerLatestTelemetryInstanceLatest.
type OptNilLoadBalancerLatestTelemetryInstanceLatest struct {
	Value LoadBalancerLatestTelemetryInstanceLatest
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerLatestTelemetryInstanceLatest was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatest) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatest
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatest) SetTo(v LoadBalancerLatestTelemetryInstanceLatest) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatest) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatest) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatest
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatest) Get() (v LoadBalancerLatestTelemetryInstanceLatest, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatest) Or(d LoadBalancerLatestTelemetryInstanceLatest) LoadBalancerLatestTelemetryInstanceLatest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerLatestTelemetryInstanceLatestRouter returns new OptNilLoadBalancerLatestTelemetryInstanceLatestRouter with value set to v.
func NewOptNilLoadBalancerLatestTelemetryInstanceLatestRouter(v LoadBalancerLatestTelemetryInstanceLatestRouter) OptNilLoadBalancerLatestTelemetryInstanceLatestRouter {
	return OptNilLoadBalancerLatestTelemetryInstanceLatestRouter{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerLatestTelemetryInstanceLatestRouter is optional nullable LoadBalancerLatestTelemetryInstanceLatestRouter.
type OptNilLoadBalancerLatestTelemetryInstanceLatestRouter struct {
	Value LoadBalancerLatestTelemetryInstanceLatestRouter
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerLatestTelemetryInstanceLatestRouter was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestRouter
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) SetTo(v LoadBalancerLatestTelemetryInstanceLatestRouter) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatestRouter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) Get() (v LoadBalancerLatestTelemetryInstanceLatestRouter, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestRouter) Or(d LoadBalancerLatestTelemetryInstanceLatestRouter) LoadBalancerLatestTelemetryInstanceLatestRouter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerLatestTelemetryInstanceLatestUrls returns new OptNilLoadBalancerLatestTelemetryInstanceLatestUrls with value set to v.
func NewOptNilLoadBalancerLatestTelemetryInstanceLatestUrls(v LoadBalancerLatestTelemetryInstanceLatestUrls) OptNilLoadBalancerLatestTelemetryInstanceLatestUrls {
	return OptNilLoadBalancerLatestTelemetryInstanceLatestUrls{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerLatestTelemetryInstanceLatestUrls is optional nullable LoadBalancerLatestTelemetryInstanceLatestUrls.
type OptNilLoadBalancerLatestTelemetryInstanceLatestUrls struct {
	Value LoadBalancerLatestTelemetryInstanceLatestUrls
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerLatestTelemetryInstanceLatestUrls was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) Reset() {
	var v LoadBalancerLatestTelemetryInstanceLatestUrls
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) SetTo(v LoadBalancerLatestTelemetryInstanceLatestUrls) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerLatestTelemetryInstanceLatestUrls
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) Get() (v LoadBalancerLatestTelemetryInstanceLatestUrls, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerLatestTelemetryInstanceLatestUrls) Or(d LoadBalancerLatestTelemetryInstanceLatestUrls) LoadBalancerLatestTelemetryInstanceLatestUrls {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerTelemetrySnapshotArray returns new OptNilLoadBalancerTelemetrySnapshotArray with value set to v.
func NewOptNilLoadBalancerTelemetrySnapshotArray(v []LoadBalancerTelemetrySnapshot) OptNilLoadBalancerTelemetrySnapshotArray {
	return OptNilLoadBalancerTelemetrySnapshotArray{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerTelemetrySnapshotArray is optional nullable []LoadBalancerTelemetrySnapshot.
type OptNilLoadBalancerTelemetrySnapshotArray struct {
	Value []LoadBalancerTelemetrySnapshot
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerTelemetrySnapshotArray was set.
func (o OptNilLoadBalancerTelemetrySnapshotArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerTelemetrySnapshotArray) Reset() {
	var v []LoadBalancerTelemetrySnapshot
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerTelemetrySnapshotArray) SetTo(v []LoadBalancerTelemetrySnapshot) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerTelemetrySnapshotArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerTelemetrySnapshotArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []LoadBalancerTelemetrySnapshot
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerTelemetrySnapshotArray) Get() (v []LoadBalancerTelemetrySnapshot, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerTelemetrySnapshotArray) Or(d []LoadBalancerTelemetrySnapshot) []LoadBalancerTelemetrySnapshot {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerTelemetrySnapshotRouter returns new OptNilLoadBalancerTelemetrySnapshotRouter with value set to v.
func NewOptNilLoadBalancerTelemetrySnapshotRouter(v LoadBalancerTelemetrySnapshotRouter) OptNilLoadBalancerTelemetrySnapshotRouter {
	return OptNilLoadBalancerTelemetrySnapshotRouter{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerTelemetrySnapshotRouter is optional nullable LoadBalancerTelemetrySnapshotRouter.
type OptNilLoadBalancerTelemetrySnapshotRouter struct {
	Value LoadBalancerTelemetrySnapshotRouter
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerTelemetrySnapshotRouter was set.
func (o OptNilLoadBalancerTelemetrySnapshotRouter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerTelemetrySnapshotRouter) Reset() {
	var v LoadBalancerTelemetrySnapshotRouter
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerTelemetrySnapshotRouter) SetTo(v LoadBalancerTelemetrySnapshotRouter) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerTelemetrySnapshotRouter) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerTelemetrySnapshotRouter) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerTelemetrySnapshotRouter
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerTelemetrySnapshotRouter) Get() (v LoadBalancerTelemetrySnapshotRouter, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerTelemetrySnapshotRouter) Or(d LoadBalancerTelemetrySnapshotRouter) LoadBalancerTelemetrySnapshotRouter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLoadBalancerTelemetrySnapshotUrls returns new OptNilLoadBalancerTelemetrySnapshotUrls with value set to v.
func NewOptNilLoadBalancerTelemetrySnapshotUrls(v LoadBalancerTelemetrySnapshotUrls) OptNilLoadBalancerTelemetrySnapshotUrls {
	return OptNilLoadBalancerTelemetrySnapshotUrls{
		Value: v,
		Set:   true,
	}
}

// OptNilLoadBalancerTelemetrySnapshotUrls is optional nullable LoadBalancerTelemetrySnapshotUrls.
type OptNilLoadBalancerTelemetrySnapshotUrls struct {
	Value LoadBalancerTelemetrySnapshotUrls
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLoadBalancerTelemetrySnapshotUrls was set.
func (o OptNilLoadBalancerTelemetrySnapshotUrls) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLoadBalancerTelemetrySnapshotUrls) Reset() {
	var v LoadBalancerTelemetrySnapshotUrls
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLoadBalancerTelemetrySnapshotUrls) SetTo(v LoadBalancerTelemetrySnapshotUrls) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLoadBalancerTelemetrySnapshotUrls) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLoadBalancerTelemetrySnapshotUrls) SetToNull() {
	o.Set = true
	o.Null = true
	var v LoadBalancerTelemetrySnapshotUrls
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLoadBalancerTelemetrySnapshotUrls) Get() (v LoadBalancerTelemetrySnapshotUrls, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLoadBalancerTelemetrySnapshotUrls) Or(d LoadBalancerTelemetrySnapshotUrls) LoadBalancerTelemetrySnapshotUrls {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNetworkEnvironmentsItemArray returns new OptNilNetworkEnvironmentsItemArray with value set to v.
func NewOptNilNetworkEnvironmentsItemArray(v []NetworkEnvironmentsItem) OptNilNetworkEnvironmentsItemArray {
	return OptNilNetworkEnvironmentsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNetworkEnvironmentsItemArray is optional nullable []NetworkEnvironmentsItem.
type OptNilNetworkEnvironmentsItemArray struct {
	Value []NetworkEnvironmentsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNetworkEnvironmentsItemArray was set.
func (o OptNilNetworkEnvironmentsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNetworkEnvironmentsItemArray) Reset() {
	var v []NetworkEnvironmentsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNetworkEnvironmentsItemArray) SetTo(v []NetworkEnvironmentsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNetworkEnvironmentsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNetworkEnvironmentsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []NetworkEnvironmentsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNetworkEnvironmentsItemArray) Get() (v []NetworkEnvironmentsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNetworkEnvironmentsItemArray) Or(d []NetworkEnvironmentsItem) []NetworkEnvironmentsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNetworkPrivateNetwork returns new OptNilNetworkPrivateNetwork with value set to v.
func NewOptNilNetworkPrivateNetwork(v NetworkPrivateNetwork) OptNilNetworkPrivateNetwork {
	return OptNilNetworkPrivateNetwork{
		Value: v,
		Set:   true,
	}
}

// OptNilNetworkPrivateNetwork is optional nullable NetworkPrivateNetwork.
type OptNilNetworkPrivateNetwork struct {
	Value NetworkPrivateNetwork
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNetworkPrivateNetwork was set.
func (o OptNilNetworkPrivateNetwork) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNetworkPrivateNetwork) Reset() {
	var v NetworkPrivateNetwork
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNetworkPrivateNetwork) SetTo(v NetworkPrivateNetwork) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNetworkPrivateNetwork) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilNetworkPrivateNetwork) SetToNull() {
	o.Set = true
	o.Null = true
	var v NetworkPrivateNetwork
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNetworkPrivateNetwork) Get() (v NetworkPrivateNetwork, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNetworkPrivateNetwork) Or(d NetworkPrivateNetwork) NetworkPrivateNetwork {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentArray returns new OptNilPaymentArray with value set to v.
func NewOptNilPaymentArray(v []Payment) OptNilPaymentArray {
	return OptNilPaymentArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentArray is optional nullable []Payment.
type OptNilPaymentArray struct {
	Value []Payment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentArray was set.
func (o OptNilPaymentArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentArray) Reset() {
	var v []Payment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentArray) SetTo(v []Payment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []Payment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentArray) Get() (v []Payment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentArray) Or(d []Payment) []Payment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPipelineRunStagesItemStepsItemError returns new OptNilPipelineRunStagesItemStepsItemError with value set to v.
func NewOptNilPipelineRunStagesItemStepsItemError(v PipelineRunStagesItemStepsItemError) OptNilPipelineRunStagesItemStepsItemError {
	return OptNilPipelineRunStagesItemStepsItemError{
		Value: v,
		Set:   true,
	}
}

// OptNilPipelineRunStagesItemStepsItemError is optional nullable PipelineRunStagesItemStepsItemError.
type OptNilPipelineRunStagesItemStepsItemError struct {
	Value PipelineRunStagesItemStepsItemError
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPipelineRunStagesItemStepsItemError was set.
func (o OptNilPipelineRunStagesItemStepsItemError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPipelineRunStagesItemStepsItemError) Reset() {
	var v PipelineRunStagesItemStepsItemError
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPipelineRunStagesItemStepsItemError) SetTo(v PipelineRunStagesItemStepsItemError) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPipelineRunStagesItemStepsItemError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPipelineRunStagesItemStepsItemError) SetToNull() {
	o.Set = true
	o.Null = true
	var v PipelineRunStagesItemStepsItemError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPipelineRunStagesItemStepsItemError) Get() (v PipelineRunStagesItemStepsItemError, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPipelineRunStagesItemStepsItemError) Or(d PipelineRunStagesItemStepsItemError) PipelineRunStagesItemStepsItemError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilProviderLocationGeographic returns new OptNilProviderLocationGeographic with value set to v.
func NewOptNilProviderLocationGeographic(v ProviderLocationGeographic) OptNilProviderLocationGeographic {
	return OptNilProviderLocationGeographic{
		Value: v,
		Set:   true,
	}
}

// OptNilProviderLocationGeographic is optional nullable ProviderLocationGeographic.
type OptNilProviderLocationGeographic struct {
	Value ProviderLocationGeographic
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilProviderLocationGeographic was set.
func (o OptNilProviderLocationGeographic) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilProviderLocationGeographic) Reset() {
	var v ProviderLocationGeographic
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilProviderLocationGeographic) SetTo(v ProviderLocationGeographic) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilProviderLocationGeographic) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilProviderLocationGeographic) SetToNull() {
	o.Set = true
	o.Null = true
	var v ProviderLocationGeographic
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilProviderLocationGeographic) Get() (v ProviderLocationGeographic, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilProviderLocationGeographic) Or(d ProviderLocationGeographic) ProviderLocationGeographic {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRawSourceDetailsSecret returns new OptNilRawSourceDetailsSecret with value set to v.
func NewOptNilRawSourceDetailsSecret(v RawSourceDetailsSecret) OptNilRawSourceDetailsSecret {
	return OptNilRawSourceDetailsSecret{
		Value: v,
		Set:   true,
	}
}

// OptNilRawSourceDetailsSecret is optional nullable RawSourceDetailsSecret.
type OptNilRawSourceDetailsSecret struct {
	Value RawSourceDetailsSecret
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRawSourceDetailsSecret was set.
func (o OptNilRawSourceDetailsSecret) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRawSourceDetailsSecret) Reset() {
	var v RawSourceDetailsSecret
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRawSourceDetailsSecret) SetTo(v RawSourceDetailsSecret) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRawSourceDetailsSecret) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRawSourceDetailsSecret) SetToNull() {
	o.Set = true
	o.Null = true
	var v RawSourceDetailsSecret
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRawSourceDetailsSecret) Get() (v RawSourceDetailsSecret, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRawSourceDetailsSecret) Or(d RawSourceDetailsSecret) RawSourceDetailsSecret {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReconfigureSharedFsContentsDirectories returns new OptNilReconfigureSharedFsContentsDirectories with value set to v.
func NewOptNilReconfigureSharedFsContentsDirectories(v ReconfigureSharedFsContentsDirectories) OptNilReconfigureSharedFsContentsDirectories {
	return OptNilReconfigureSharedFsContentsDirectories{
		Value: v,
		Set:   true,
	}
}

// OptNilReconfigureSharedFsContentsDirectories is optional nullable ReconfigureSharedFsContentsDirectories.
type OptNilReconfigureSharedFsContentsDirectories struct {
	Value ReconfigureSharedFsContentsDirectories
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReconfigureSharedFsContentsDirectories was set.
func (o OptNilReconfigureSharedFsContentsDirectories) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReconfigureSharedFsContentsDirectories) Reset() {
	var v ReconfigureSharedFsContentsDirectories
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReconfigureSharedFsContentsDirectories) SetTo(v ReconfigureSharedFsContentsDirectories) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReconfigureSharedFsContentsDirectories) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReconfigureSharedFsContentsDirectories) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReconfigureSharedFsContentsDirectories
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReconfigureSharedFsContentsDirectories) Get() (v ReconfigureSharedFsContentsDirectories, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReconfigureSharedFsContentsDirectories) Or(d ReconfigureSharedFsContentsDirectories) ReconfigureSharedFsContentsDirectories {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilReconfigureSharedFsContentsMounts returns new OptNilReconfigureSharedFsContentsMounts with value set to v.
func NewOptNilReconfigureSharedFsContentsMounts(v ReconfigureSharedFsContentsMounts) OptNilReconfigureSharedFsContentsMounts {
	return OptNilReconfigureSharedFsContentsMounts{
		Value: v,
		Set:   true,
	}
}

// OptNilReconfigureSharedFsContentsMounts is optional nullable ReconfigureSharedFsContentsMounts.
type OptNilReconfigureSharedFsContentsMounts struct {
	Value ReconfigureSharedFsContentsMounts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilReconfigureSharedFsContentsMounts was set.
func (o OptNilReconfigureSharedFsContentsMounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilReconfigureSharedFsContentsMounts) Reset() {
	var v ReconfigureSharedFsContentsMounts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilReconfigureSharedFsContentsMounts) SetTo(v ReconfigureSharedFsContentsMounts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilReconfigureSharedFsContentsMounts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilReconfigureSharedFsContentsMounts) SetToNull() {
	o.Set = true
	o.Null = true
	var v ReconfigureSharedFsContentsMounts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilReconfigureSharedFsContentsMounts) Get() (v ReconfigureSharedFsContentsMounts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilReconfigureSharedFsContentsMounts) Or(d ReconfigureSharedFsContentsMounts) ReconfigureSharedFsContentsMounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRecordTypesLinkedSum1Deployment returns new OptNilRecordTypesLinkedSum1Deployment with value set to v.
func NewOptNilRecordTypesLinkedSum1Deployment(v RecordTypesLinkedSum1Deployment) OptNilRecordTypesLinkedSum1Deployment {
	return OptNilRecordTypesLinkedSum1Deployment{
		Value: v,
		Set:   true,
	}
}

// OptNilRecordTypesLinkedSum1Deployment is optional nullable RecordTypesLinkedSum1Deployment.
type OptNilRecordTypesLinkedSum1Deployment struct {
	Value RecordTypesLinkedSum1Deployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRecordTypesLinkedSum1Deployment was set.
func (o OptNilRecordTypesLinkedSum1Deployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRecordTypesLinkedSum1Deployment) Reset() {
	var v RecordTypesLinkedSum1Deployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRecordTypesLinkedSum1Deployment) SetTo(v RecordTypesLinkedSum1Deployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRecordTypesLinkedSum1Deployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRecordTypesLinkedSum1Deployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v RecordTypesLinkedSum1Deployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRecordTypesLinkedSum1Deployment) Get() (v RecordTypesLinkedSum1Deployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRecordTypesLinkedSum1Deployment) Or(d RecordTypesLinkedSum1Deployment) RecordTypesLinkedSum1Deployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilScopedVariableAccessEnvVariable returns new OptNilScopedVariableAccessEnvVariable with value set to v.
func NewOptNilScopedVariableAccessEnvVariable(v ScopedVariableAccessEnvVariable) OptNilScopedVariableAccessEnvVariable {
	return OptNilScopedVariableAccessEnvVariable{
		Value: v,
		Set:   true,
	}
}

// OptNilScopedVariableAccessEnvVariable is optional nullable ScopedVariableAccessEnvVariable.
type OptNilScopedVariableAccessEnvVariable struct {
	Value ScopedVariableAccessEnvVariable
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilScopedVariableAccessEnvVariable was set.
func (o OptNilScopedVariableAccessEnvVariable) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilScopedVariableAccessEnvVariable) Reset() {
	var v ScopedVariableAccessEnvVariable
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilScopedVariableAccessEnvVariable) SetTo(v ScopedVariableAccessEnvVariable) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilScopedVariableAccessEnvVariable) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilScopedVariableAccessEnvVariable) SetToNull() {
	o.Set = true
	o.Null = true
	var v ScopedVariableAccessEnvVariable
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilScopedVariableAccessEnvVariable) Get() (v ScopedVariableAccessEnvVariable, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilScopedVariableAccessEnvVariable) Or(d ScopedVariableAccessEnvVariable) ScopedVariableAccessEnvVariable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilScopedVariableAccessFile returns new OptNilScopedVariableAccessFile with value set to v.
func NewOptNilScopedVariableAccessFile(v ScopedVariableAccessFile) OptNilScopedVariableAccessFile {
	return OptNilScopedVariableAccessFile{
		Value: v,
		Set:   true,
	}
}

// OptNilScopedVariableAccessFile is optional nullable ScopedVariableAccessFile.
type OptNilScopedVariableAccessFile struct {
	Value ScopedVariableAccessFile
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilScopedVariableAccessFile was set.
func (o OptNilScopedVariableAccessFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilScopedVariableAccessFile) Reset() {
	var v ScopedVariableAccessFile
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilScopedVariableAccessFile) SetTo(v ScopedVariableAccessFile) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilScopedVariableAccessFile) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilScopedVariableAccessFile) SetToNull() {
	o.Set = true
	o.Null = true
	var v ScopedVariableAccessFile
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilScopedVariableAccessFile) Get() (v ScopedVariableAccessFile, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilScopedVariableAccessFile) Or(d ScopedVariableAccessFile) ScopedVariableAccessFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilScopedVariableAccessInternalAPI returns new OptNilScopedVariableAccessInternalAPI with value set to v.
func NewOptNilScopedVariableAccessInternalAPI(v ScopedVariableAccessInternalAPI) OptNilScopedVariableAccessInternalAPI {
	return OptNilScopedVariableAccessInternalAPI{
		Value: v,
		Set:   true,
	}
}

// OptNilScopedVariableAccessInternalAPI is optional nullable ScopedVariableAccessInternalAPI.
type OptNilScopedVariableAccessInternalAPI struct {
	Value ScopedVariableAccessInternalAPI
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilScopedVariableAccessInternalAPI was set.
func (o OptNilScopedVariableAccessInternalAPI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilScopedVariableAccessInternalAPI) Reset() {
	var v ScopedVariableAccessInternalAPI
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilScopedVariableAccessInternalAPI) SetTo(v ScopedVariableAccessInternalAPI) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilScopedVariableAccessInternalAPI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilScopedVariableAccessInternalAPI) SetToNull() {
	o.Set = true
	o.Null = true
	var v ScopedVariableAccessInternalAPI
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilScopedVariableAccessInternalAPI) Get() (v ScopedVariableAccessInternalAPI, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilScopedVariableAccessInternalAPI) Or(d ScopedVariableAccessInternalAPI) ScopedVariableAccessInternalAPI {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilServerSharedFileSystemsDirectories returns new OptNilServerSharedFileSystemsDirectories with value set to v.
func NewOptNilServerSharedFileSystemsDirectories(v ServerSharedFileSystemsDirectories) OptNilServerSharedFileSystemsDirectories {
	return OptNilServerSharedFileSystemsDirectories{
		Value: v,
		Set:   true,
	}
}

// OptNilServerSharedFileSystemsDirectories is optional nullable ServerSharedFileSystemsDirectories.
type OptNilServerSharedFileSystemsDirectories struct {
	Value ServerSharedFileSystemsDirectories
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilServerSharedFileSystemsDirectories was set.
func (o OptNilServerSharedFileSystemsDirectories) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilServerSharedFileSystemsDirectories) Reset() {
	var v ServerSharedFileSystemsDirectories
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilServerSharedFileSystemsDirectories) SetTo(v ServerSharedFileSystemsDirectories) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilServerSharedFileSystemsDirectories) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilServerSharedFileSystemsDirectories) SetToNull() {
	o.Set = true
	o.Null = true
	var v ServerSharedFileSystemsDirectories
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilServerSharedFileSystemsDirectories) Get() (v ServerSharedFileSystemsDirectories, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilServerSharedFileSystemsDirectories) Or(d ServerSharedFileSystemsDirectories) ServerSharedFileSystemsDirectories {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilServerSharedFileSystemsMounts returns new OptNilServerSharedFileSystemsMounts with value set to v.
func NewOptNilServerSharedFileSystemsMounts(v ServerSharedFileSystemsMounts) OptNilServerSharedFileSystemsMounts {
	return OptNilServerSharedFileSystemsMounts{
		Value: v,
		Set:   true,
	}
}

// OptNilServerSharedFileSystemsMounts is optional nullable ServerSharedFileSystemsMounts.
type OptNilServerSharedFileSystemsMounts struct {
	Value ServerSharedFileSystemsMounts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilServerSharedFileSystemsMounts was set.
func (o OptNilServerSharedFileSystemsMounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilServerSharedFileSystemsMounts) Reset() {
	var v ServerSharedFileSystemsMounts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilServerSharedFileSystemsMounts) SetTo(v ServerSharedFileSystemsMounts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilServerSharedFileSystemsMounts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilServerSharedFileSystemsMounts) SetToNull() {
	o.Set = true
	o.Null = true
	var v ServerSharedFileSystemsMounts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilServerSharedFileSystemsMounts) Get() (v ServerSharedFileSystemsMounts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilServerSharedFileSystemsMounts) Or(d ServerSharedFileSystemsMounts) ServerSharedFileSystemsMounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildCreateStepDetailsAbout returns new OptNilStackBuildCreateStepDetailsAbout with value set to v.
func NewOptNilStackBuildCreateStepDetailsAbout(v StackBuildCreateStepDetailsAbout) OptNilStackBuildCreateStepDetailsAbout {
	return OptNilStackBuildCreateStepDetailsAbout{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildCreateStepDetailsAbout is optional nullable StackBuildCreateStepDetailsAbout.
type OptNilStackBuildCreateStepDetailsAbout struct {
	Value StackBuildCreateStepDetailsAbout
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildCreateStepDetailsAbout was set.
func (o OptNilStackBuildCreateStepDetailsAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildCreateStepDetailsAbout) Reset() {
	var v StackBuildCreateStepDetailsAbout
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildCreateStepDetailsAbout) SetTo(v StackBuildCreateStepDetailsAbout) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildCreateStepDetailsAbout) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildCreateStepDetailsAbout) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildCreateStepDetailsAbout
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildCreateStepDetailsAbout) Get() (v StackBuildCreateStepDetailsAbout, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildCreateStepDetailsAbout) Or(d StackBuildCreateStepDetailsAbout) StackBuildCreateStepDetailsAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildCreateStepDetailsInstructions returns new OptNilStackBuildCreateStepDetailsInstructions with value set to v.
func NewOptNilStackBuildCreateStepDetailsInstructions(v StackBuildCreateStepDetailsInstructions) OptNilStackBuildCreateStepDetailsInstructions {
	return OptNilStackBuildCreateStepDetailsInstructions{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildCreateStepDetailsInstructions is optional nullable StackBuildCreateStepDetailsInstructions.
type OptNilStackBuildCreateStepDetailsInstructions struct {
	Value StackBuildCreateStepDetailsInstructions
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildCreateStepDetailsInstructions was set.
func (o OptNilStackBuildCreateStepDetailsInstructions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildCreateStepDetailsInstructions) Reset() {
	var v StackBuildCreateStepDetailsInstructions
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildCreateStepDetailsInstructions) SetTo(v StackBuildCreateStepDetailsInstructions) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildCreateStepDetailsInstructions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildCreateStepDetailsInstructions) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildCreateStepDetailsInstructions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildCreateStepDetailsInstructions) Get() (v StackBuildCreateStepDetailsInstructions, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildCreateStepDetailsInstructions) Or(d StackBuildCreateStepDetailsInstructions) StackBuildCreateStepDetailsInstructions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildDeployStepDetailsDeployment returns new OptNilStackBuildDeployStepDetailsDeployment with value set to v.
func NewOptNilStackBuildDeployStepDetailsDeployment(v StackBuildDeployStepDetailsDeployment) OptNilStackBuildDeployStepDetailsDeployment {
	return OptNilStackBuildDeployStepDetailsDeployment{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildDeployStepDetailsDeployment is optional nullable StackBuildDeployStepDetailsDeployment.
type OptNilStackBuildDeployStepDetailsDeployment struct {
	Value StackBuildDeployStepDetailsDeployment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildDeployStepDetailsDeployment was set.
func (o OptNilStackBuildDeployStepDetailsDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildDeployStepDetailsDeployment) Reset() {
	var v StackBuildDeployStepDetailsDeployment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildDeployStepDetailsDeployment) SetTo(v StackBuildDeployStepDetailsDeployment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildDeployStepDetailsDeployment) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildDeployStepDetailsDeployment) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildDeployStepDetailsDeployment
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildDeployStepDetailsDeployment) Get() (v StackBuildDeployStepDetailsDeployment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildDeployStepDetailsDeployment) Or(d StackBuildDeployStepDetailsDeployment) StackBuildDeployStepDetailsDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildDeployStepDetailsUpdate returns new OptNilStackBuildDeployStepDetailsUpdate with value set to v.
func NewOptNilStackBuildDeployStepDetailsUpdate(v StackBuildDeployStepDetailsUpdate) OptNilStackBuildDeployStepDetailsUpdate {
	return OptNilStackBuildDeployStepDetailsUpdate{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildDeployStepDetailsUpdate is optional nullable StackBuildDeployStepDetailsUpdate.
type OptNilStackBuildDeployStepDetailsUpdate struct {
	Value StackBuildDeployStepDetailsUpdate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildDeployStepDetailsUpdate was set.
func (o OptNilStackBuildDeployStepDetailsUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildDeployStepDetailsUpdate) Reset() {
	var v StackBuildDeployStepDetailsUpdate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildDeployStepDetailsUpdate) SetTo(v StackBuildDeployStepDetailsUpdate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildDeployStepDetailsUpdate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildDeployStepDetailsUpdate) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildDeployStepDetailsUpdate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildDeployStepDetailsUpdate) Get() (v StackBuildDeployStepDetailsUpdate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildDeployStepDetailsUpdate) Or(d StackBuildDeployStepDetailsUpdate) StackBuildDeployStepDetailsUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpec returns new OptNilStackBuildSpec with value set to v.
func NewOptNilStackBuildSpec(v StackBuildSpec) OptNilStackBuildSpec {
	return OptNilStackBuildSpec{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpec is optional nullable StackBuildSpec.
type OptNilStackBuildSpec struct {
	Value StackBuildSpec
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpec was set.
func (o OptNilStackBuildSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpec) Reset() {
	var v StackBuildSpec
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpec) SetTo(v StackBuildSpec) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpec) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpec) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpec
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpec) Get() (v StackBuildSpec, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpec) Or(d StackBuildSpec) StackBuildSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpecAbout returns new OptNilStackBuildSpecAbout with value set to v.
func NewOptNilStackBuildSpecAbout(v StackBuildSpecAbout) OptNilStackBuildSpecAbout {
	return OptNilStackBuildSpecAbout{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpecAbout is optional nullable StackBuildSpecAbout.
type OptNilStackBuildSpecAbout struct {
	Value StackBuildSpecAbout
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpecAbout was set.
func (o OptNilStackBuildSpecAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpecAbout) Reset() {
	var v StackBuildSpecAbout
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpecAbout) SetTo(v StackBuildSpecAbout) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpecAbout) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpecAbout) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpecAbout
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpecAbout) Get() (v StackBuildSpecAbout, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpecAbout) Or(d StackBuildSpecAbout) StackBuildSpecAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpecServices returns new OptNilStackBuildSpecServices with value set to v.
func NewOptNilStackBuildSpecServices(v StackBuildSpecServices) OptNilStackBuildSpecServices {
	return OptNilStackBuildSpecServices{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpecServices is optional nullable StackBuildSpecServices.
type OptNilStackBuildSpecServices struct {
	Value StackBuildSpecServices
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpecServices was set.
func (o OptNilStackBuildSpecServices) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpecServices) Reset() {
	var v StackBuildSpecServices
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpecServices) SetTo(v StackBuildSpecServices) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpecServices) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpecServices) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpecServices
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpecServices) Get() (v StackBuildSpecServices, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpecServices) Or(d StackBuildSpecServices) StackBuildSpecServices {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpecServicesDiscovery returns new OptNilStackBuildSpecServicesDiscovery with value set to v.
func NewOptNilStackBuildSpecServicesDiscovery(v StackBuildSpecServicesDiscovery) OptNilStackBuildSpecServicesDiscovery {
	return OptNilStackBuildSpecServicesDiscovery{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpecServicesDiscovery is optional nullable StackBuildSpecServicesDiscovery.
type OptNilStackBuildSpecServicesDiscovery struct {
	Value StackBuildSpecServicesDiscovery
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpecServicesDiscovery was set.
func (o OptNilStackBuildSpecServicesDiscovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpecServicesDiscovery) Reset() {
	var v StackBuildSpecServicesDiscovery
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpecServicesDiscovery) SetTo(v StackBuildSpecServicesDiscovery) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpecServicesDiscovery) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpecServicesDiscovery) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpecServicesDiscovery
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpecServicesDiscovery) Get() (v StackBuildSpecServicesDiscovery, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpecServicesDiscovery) Or(d StackBuildSpecServicesDiscovery) StackBuildSpecServicesDiscovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpecServicesDiscoveryHosts returns new OptNilStackBuildSpecServicesDiscoveryHosts with value set to v.
func NewOptNilStackBuildSpecServicesDiscoveryHosts(v StackBuildSpecServicesDiscoveryHosts) OptNilStackBuildSpecServicesDiscoveryHosts {
	return OptNilStackBuildSpecServicesDiscoveryHosts{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpecServicesDiscoveryHosts is optional nullable StackBuildSpecServicesDiscoveryHosts.
type OptNilStackBuildSpecServicesDiscoveryHosts struct {
	Value StackBuildSpecServicesDiscoveryHosts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpecServicesDiscoveryHosts was set.
func (o OptNilStackBuildSpecServicesDiscoveryHosts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpecServicesDiscoveryHosts) Reset() {
	var v StackBuildSpecServicesDiscoveryHosts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpecServicesDiscoveryHosts) SetTo(v StackBuildSpecServicesDiscoveryHosts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpecServicesDiscoveryHosts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpecServicesDiscoveryHosts) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpecServicesDiscoveryHosts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpecServicesDiscoveryHosts) Get() (v StackBuildSpecServicesDiscoveryHosts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpecServicesDiscoveryHosts) Or(d StackBuildSpecServicesDiscoveryHosts) StackBuildSpecServicesDiscoveryHosts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackBuildSpecServicesLoadbalancer returns new OptNilStackBuildSpecServicesLoadbalancer with value set to v.
func NewOptNilStackBuildSpecServicesLoadbalancer(v StackBuildSpecServicesLoadbalancer) OptNilStackBuildSpecServicesLoadbalancer {
	return OptNilStackBuildSpecServicesLoadbalancer{
		Value: v,
		Set:   true,
	}
}

// OptNilStackBuildSpecServicesLoadbalancer is optional nullable StackBuildSpecServicesLoadbalancer.
type OptNilStackBuildSpecServicesLoadbalancer struct {
	Value StackBuildSpecServicesLoadbalancer
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackBuildSpecServicesLoadbalancer was set.
func (o OptNilStackBuildSpecServicesLoadbalancer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackBuildSpecServicesLoadbalancer) Reset() {
	var v StackBuildSpecServicesLoadbalancer
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackBuildSpecServicesLoadbalancer) SetTo(v StackBuildSpecServicesLoadbalancer) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackBuildSpecServicesLoadbalancer) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackBuildSpecServicesLoadbalancer) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackBuildSpecServicesLoadbalancer
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackBuildSpecServicesLoadbalancer) Get() (v StackBuildSpecServicesLoadbalancer, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackBuildSpecServicesLoadbalancer) Or(d StackBuildSpecServicesLoadbalancer) StackBuildSpecServicesLoadbalancer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployConstraints returns new OptNilStackContainerConfigDeployConstraints with value set to v.
func NewOptNilStackContainerConfigDeployConstraints(v StackContainerConfigDeployConstraints) OptNilStackContainerConfigDeployConstraints {
	return OptNilStackContainerConfigDeployConstraints{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployConstraints is optional nullable StackContainerConfigDeployConstraints.
type OptNilStackContainerConfigDeployConstraints struct {
	Value StackContainerConfigDeployConstraints
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployConstraints was set.
func (o OptNilStackContainerConfigDeployConstraints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployConstraints) Reset() {
	var v StackContainerConfigDeployConstraints
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployConstraints) SetTo(v StackContainerConfigDeployConstraints) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployConstraints) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployConstraints) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployConstraints
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployConstraints) Get() (v StackContainerConfigDeployConstraints, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployConstraints) Or(d StackContainerConfigDeployConstraints) StackContainerConfigDeployConstraints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployConstraintsNode returns new OptNilStackContainerConfigDeployConstraintsNode with value set to v.
func NewOptNilStackContainerConfigDeployConstraintsNode(v StackContainerConfigDeployConstraintsNode) OptNilStackContainerConfigDeployConstraintsNode {
	return OptNilStackContainerConfigDeployConstraintsNode{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployConstraintsNode is optional nullable StackContainerConfigDeployConstraintsNode.
type OptNilStackContainerConfigDeployConstraintsNode struct {
	Value StackContainerConfigDeployConstraintsNode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployConstraintsNode was set.
func (o OptNilStackContainerConfigDeployConstraintsNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployConstraintsNode) Reset() {
	var v StackContainerConfigDeployConstraintsNode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployConstraintsNode) SetTo(v StackContainerConfigDeployConstraintsNode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployConstraintsNode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployConstraintsNode) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployConstraintsNode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployConstraintsNode) Get() (v StackContainerConfigDeployConstraintsNode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployConstraintsNode) Or(d StackContainerConfigDeployConstraintsNode) StackContainerConfigDeployConstraintsNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployHealthCheck returns new OptNilStackContainerConfigDeployHealthCheck with value set to v.
func NewOptNilStackContainerConfigDeployHealthCheck(v StackContainerConfigDeployHealthCheck) OptNilStackContainerConfigDeployHealthCheck {
	return OptNilStackContainerConfigDeployHealthCheck{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployHealthCheck is optional nullable StackContainerConfigDeployHealthCheck.
type OptNilStackContainerConfigDeployHealthCheck struct {
	Value StackContainerConfigDeployHealthCheck
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployHealthCheck was set.
func (o OptNilStackContainerConfigDeployHealthCheck) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployHealthCheck) Reset() {
	var v StackContainerConfigDeployHealthCheck
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployHealthCheck) SetTo(v StackContainerConfigDeployHealthCheck) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployHealthCheck) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployHealthCheck) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployHealthCheck
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployHealthCheck) Get() (v StackContainerConfigDeployHealthCheck, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployHealthCheck) Or(d StackContainerConfigDeployHealthCheck) StackContainerConfigDeployHealthCheck {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployRestart returns new OptNilStackContainerConfigDeployRestart with value set to v.
func NewOptNilStackContainerConfigDeployRestart(v StackContainerConfigDeployRestart) OptNilStackContainerConfigDeployRestart {
	return OptNilStackContainerConfigDeployRestart{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployRestart is optional nullable StackContainerConfigDeployRestart.
type OptNilStackContainerConfigDeployRestart struct {
	Value StackContainerConfigDeployRestart
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployRestart was set.
func (o OptNilStackContainerConfigDeployRestart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployRestart) Reset() {
	var v StackContainerConfigDeployRestart
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployRestart) SetTo(v StackContainerConfigDeployRestart) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployRestart) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployRestart) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployRestart
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployRestart) Get() (v StackContainerConfigDeployRestart, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployRestart) Or(d StackContainerConfigDeployRestart) StackContainerConfigDeployRestart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployRestartNotify returns new OptNilStackContainerConfigDeployRestartNotify with value set to v.
func NewOptNilStackContainerConfigDeployRestartNotify(v StackContainerConfigDeployRestartNotify) OptNilStackContainerConfigDeployRestartNotify {
	return OptNilStackContainerConfigDeployRestartNotify{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployRestartNotify is optional nullable StackContainerConfigDeployRestartNotify.
type OptNilStackContainerConfigDeployRestartNotify struct {
	Value StackContainerConfigDeployRestartNotify
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployRestartNotify was set.
func (o OptNilStackContainerConfigDeployRestartNotify) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployRestartNotify) Reset() {
	var v StackContainerConfigDeployRestartNotify
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployRestartNotify) SetTo(v StackContainerConfigDeployRestartNotify) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployRestartNotify) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployRestartNotify) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployRestartNotify
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployRestartNotify) Get() (v StackContainerConfigDeployRestartNotify, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployRestartNotify) Or(d StackContainerConfigDeployRestartNotify) StackContainerConfigDeployRestartNotify {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployShutdown returns new OptNilStackContainerConfigDeployShutdown with value set to v.
func NewOptNilStackContainerConfigDeployShutdown(v StackContainerConfigDeployShutdown) OptNilStackContainerConfigDeployShutdown {
	return OptNilStackContainerConfigDeployShutdown{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployShutdown is optional nullable StackContainerConfigDeployShutdown.
type OptNilStackContainerConfigDeployShutdown struct {
	Value StackContainerConfigDeployShutdown
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployShutdown was set.
func (o OptNilStackContainerConfigDeployShutdown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployShutdown) Reset() {
	var v StackContainerConfigDeployShutdown
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployShutdown) SetTo(v StackContainerConfigDeployShutdown) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployShutdown) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployShutdown) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployShutdown
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployShutdown) Get() (v StackContainerConfigDeployShutdown, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployShutdown) Or(d StackContainerConfigDeployShutdown) StackContainerConfigDeployShutdown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployStartup returns new OptNilStackContainerConfigDeployStartup with value set to v.
func NewOptNilStackContainerConfigDeployStartup(v StackContainerConfigDeployStartup) OptNilStackContainerConfigDeployStartup {
	return OptNilStackContainerConfigDeployStartup{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployStartup is optional nullable StackContainerConfigDeployStartup.
type OptNilStackContainerConfigDeployStartup struct {
	Value StackContainerConfigDeployStartup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployStartup was set.
func (o OptNilStackContainerConfigDeployStartup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployStartup) Reset() {
	var v StackContainerConfigDeployStartup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployStartup) SetTo(v StackContainerConfigDeployStartup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployStartup) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployStartup) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployStartup
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployStartup) Get() (v StackContainerConfigDeployStartup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployStartup) Or(d StackContainerConfigDeployStartup) StackContainerConfigDeployStartup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployStateful returns new OptNilStackContainerConfigDeployStateful with value set to v.
func NewOptNilStackContainerConfigDeployStateful(v StackContainerConfigDeployStateful) OptNilStackContainerConfigDeployStateful {
	return OptNilStackContainerConfigDeployStateful{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployStateful is optional nullable StackContainerConfigDeployStateful.
type OptNilStackContainerConfigDeployStateful struct {
	Value StackContainerConfigDeployStateful
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployStateful was set.
func (o OptNilStackContainerConfigDeployStateful) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployStateful) Reset() {
	var v StackContainerConfigDeployStateful
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployStateful) SetTo(v StackContainerConfigDeployStateful) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployStateful) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployStateful) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployStateful
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployStateful) Get() (v StackContainerConfigDeployStateful, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployStateful) Or(d StackContainerConfigDeployStateful) StackContainerConfigDeployStateful {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployStrategy returns new OptNilStackContainerConfigDeployStrategy with value set to v.
func NewOptNilStackContainerConfigDeployStrategy(v StackContainerConfigDeployStrategy) OptNilStackContainerConfigDeployStrategy {
	return OptNilStackContainerConfigDeployStrategy{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployStrategy is optional nullable StackContainerConfigDeployStrategy.
type OptNilStackContainerConfigDeployStrategy struct {
	Value StackContainerConfigDeployStrategy
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployStrategy was set.
func (o OptNilStackContainerConfigDeployStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployStrategy) Reset() {
	var v StackContainerConfigDeployStrategy
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployStrategy) SetTo(v StackContainerConfigDeployStrategy) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployStrategy) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployStrategy) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployStrategy
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployStrategy) Get() (v StackContainerConfigDeployStrategy, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployStrategy) Or(d StackContainerConfigDeployStrategy) StackContainerConfigDeployStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployTelemetry returns new OptNilStackContainerConfigDeployTelemetry with value set to v.
func NewOptNilStackContainerConfigDeployTelemetry(v StackContainerConfigDeployTelemetry) OptNilStackContainerConfigDeployTelemetry {
	return OptNilStackContainerConfigDeployTelemetry{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployTelemetry is optional nullable StackContainerConfigDeployTelemetry.
type OptNilStackContainerConfigDeployTelemetry struct {
	Value StackContainerConfigDeployTelemetry
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployTelemetry was set.
func (o OptNilStackContainerConfigDeployTelemetry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployTelemetry) Reset() {
	var v StackContainerConfigDeployTelemetry
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployTelemetry) SetTo(v StackContainerConfigDeployTelemetry) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployTelemetry) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployTelemetry) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployTelemetry
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployTelemetry) Get() (v StackContainerConfigDeployTelemetry, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployTelemetry) Or(d StackContainerConfigDeployTelemetry) StackContainerConfigDeployTelemetry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerConfigDeployUpdate returns new OptNilStackContainerConfigDeployUpdate with value set to v.
func NewOptNilStackContainerConfigDeployUpdate(v StackContainerConfigDeployUpdate) OptNilStackContainerConfigDeployUpdate {
	return OptNilStackContainerConfigDeployUpdate{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerConfigDeployUpdate is optional nullable StackContainerConfigDeployUpdate.
type OptNilStackContainerConfigDeployUpdate struct {
	Value StackContainerConfigDeployUpdate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerConfigDeployUpdate was set.
func (o OptNilStackContainerConfigDeployUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerConfigDeployUpdate) Reset() {
	var v StackContainerConfigDeployUpdate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerConfigDeployUpdate) SetTo(v StackContainerConfigDeployUpdate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerConfigDeployUpdate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerConfigDeployUpdate) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerConfigDeployUpdate
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerConfigDeployUpdate) Get() (v StackContainerConfigDeployUpdate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerConfigDeployUpdate) Or(d StackContainerConfigDeployUpdate) StackContainerConfigDeployUpdate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemAnnotations returns new OptNilStackContainerItemAnnotations with value set to v.
func NewOptNilStackContainerItemAnnotations(v StackContainerItemAnnotations) OptNilStackContainerItemAnnotations {
	return OptNilStackContainerItemAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemAnnotations is optional nullable StackContainerItemAnnotations.
type OptNilStackContainerItemAnnotations struct {
	Value StackContainerItemAnnotations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemAnnotations was set.
func (o OptNilStackContainerItemAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemAnnotations) Reset() {
	var v StackContainerItemAnnotations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemAnnotations) SetTo(v StackContainerItemAnnotations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemAnnotations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemAnnotations) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemAnnotations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemAnnotations) Get() (v StackContainerItemAnnotations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemAnnotations) Or(d StackContainerItemAnnotations) StackContainerItemAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrations returns new OptNilStackContainerItemConfigIntegrations with value set to v.
func NewOptNilStackContainerItemConfigIntegrations(v StackContainerItemConfigIntegrations) OptNilStackContainerItemConfigIntegrations {
	return OptNilStackContainerItemConfigIntegrations{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrations is optional nullable StackContainerItemConfigIntegrations.
type OptNilStackContainerItemConfigIntegrations struct {
	Value StackContainerItemConfigIntegrations
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrations was set.
func (o OptNilStackContainerItemConfigIntegrations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrations) Reset() {
	var v StackContainerItemConfigIntegrations
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrations) SetTo(v StackContainerItemConfigIntegrations) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrations) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrations) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrations
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrations) Get() (v StackContainerItemConfigIntegrations, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrations) Or(d StackContainerItemConfigIntegrations) StackContainerItemConfigIntegrations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsBackups returns new OptNilStackContainerItemConfigIntegrationsBackups with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsBackups(v StackContainerItemConfigIntegrationsBackups) OptNilStackContainerItemConfigIntegrationsBackups {
	return OptNilStackContainerItemConfigIntegrationsBackups{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsBackups is optional nullable StackContainerItemConfigIntegrationsBackups.
type OptNilStackContainerItemConfigIntegrationsBackups struct {
	Value StackContainerItemConfigIntegrationsBackups
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsBackups was set.
func (o OptNilStackContainerItemConfigIntegrationsBackups) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsBackups) Reset() {
	var v StackContainerItemConfigIntegrationsBackups
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsBackups) SetTo(v StackContainerItemConfigIntegrationsBackups) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsBackups) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsBackups) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrationsBackups
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsBackups) Get() (v StackContainerItemConfigIntegrationsBackups, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsBackups) Or(d StackContainerItemConfigIntegrationsBackups) StackContainerItemConfigIntegrationsBackups {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsFilesItemArray returns new OptNilStackContainerItemConfigIntegrationsFilesItemArray with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsFilesItemArray(v []StackContainerItemConfigIntegrationsFilesItem) OptNilStackContainerItemConfigIntegrationsFilesItemArray {
	return OptNilStackContainerItemConfigIntegrationsFilesItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsFilesItemArray is optional nullable []StackContainerItemConfigIntegrationsFilesItem.
type OptNilStackContainerItemConfigIntegrationsFilesItemArray struct {
	Value []StackContainerItemConfigIntegrationsFilesItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsFilesItemArray was set.
func (o OptNilStackContainerItemConfigIntegrationsFilesItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsFilesItemArray) Reset() {
	var v []StackContainerItemConfigIntegrationsFilesItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsFilesItemArray) SetTo(v []StackContainerItemConfigIntegrationsFilesItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsFilesItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsFilesItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []StackContainerItemConfigIntegrationsFilesItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsFilesItemArray) Get() (v []StackContainerItemConfigIntegrationsFilesItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsFilesItemArray) Or(d []StackContainerItemConfigIntegrationsFilesItem) []StackContainerItemConfigIntegrationsFilesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsLetsEncrypt returns new OptNilStackContainerItemConfigIntegrationsLetsEncrypt with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsLetsEncrypt(v StackContainerItemConfigIntegrationsLetsEncrypt) OptNilStackContainerItemConfigIntegrationsLetsEncrypt {
	return OptNilStackContainerItemConfigIntegrationsLetsEncrypt{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsLetsEncrypt is optional nullable StackContainerItemConfigIntegrationsLetsEncrypt.
type OptNilStackContainerItemConfigIntegrationsLetsEncrypt struct {
	Value StackContainerItemConfigIntegrationsLetsEncrypt
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsLetsEncrypt was set.
func (o OptNilStackContainerItemConfigIntegrationsLetsEncrypt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsLetsEncrypt) Reset() {
	var v StackContainerItemConfigIntegrationsLetsEncrypt
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsLetsEncrypt) SetTo(v StackContainerItemConfigIntegrationsLetsEncrypt) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsLetsEncrypt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsLetsEncrypt) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrationsLetsEncrypt
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsLetsEncrypt) Get() (v StackContainerItemConfigIntegrationsLetsEncrypt, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsLetsEncrypt) Or(d StackContainerItemConfigIntegrationsLetsEncrypt) StackContainerItemConfigIntegrationsLetsEncrypt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsSharedFileSystems returns new OptNilStackContainerItemConfigIntegrationsSharedFileSystems with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsSharedFileSystems(v StackContainerItemConfigIntegrationsSharedFileSystems) OptNilStackContainerItemConfigIntegrationsSharedFileSystems {
	return OptNilStackContainerItemConfigIntegrationsSharedFileSystems{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsSharedFileSystems is optional nullable StackContainerItemConfigIntegrationsSharedFileSystems.
type OptNilStackContainerItemConfigIntegrationsSharedFileSystems struct {
	Value StackContainerItemConfigIntegrationsSharedFileSystems
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsSharedFileSystems was set.
func (o OptNilStackContainerItemConfigIntegrationsSharedFileSystems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsSharedFileSystems) Reset() {
	var v StackContainerItemConfigIntegrationsSharedFileSystems
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsSharedFileSystems) SetTo(v StackContainerItemConfigIntegrationsSharedFileSystems) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsSharedFileSystems) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsSharedFileSystems) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrationsSharedFileSystems
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsSharedFileSystems) Get() (v StackContainerItemConfigIntegrationsSharedFileSystems, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsSharedFileSystems) Or(d StackContainerItemConfigIntegrationsSharedFileSystems) StackContainerItemConfigIntegrationsSharedFileSystems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsWebhooks returns new OptNilStackContainerItemConfigIntegrationsWebhooks with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsWebhooks(v StackContainerItemConfigIntegrationsWebhooks) OptNilStackContainerItemConfigIntegrationsWebhooks {
	return OptNilStackContainerItemConfigIntegrationsWebhooks{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsWebhooks is optional nullable StackContainerItemConfigIntegrationsWebhooks.
type OptNilStackContainerItemConfigIntegrationsWebhooks struct {
	Value StackContainerItemConfigIntegrationsWebhooks
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsWebhooks was set.
func (o OptNilStackContainerItemConfigIntegrationsWebhooks) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooks) Reset() {
	var v StackContainerItemConfigIntegrationsWebhooks
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooks) SetTo(v StackContainerItemConfigIntegrationsWebhooks) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsWebhooks) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooks) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrationsWebhooks
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsWebhooks) Get() (v StackContainerItemConfigIntegrationsWebhooks, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsWebhooks) Or(d StackContainerItemConfigIntegrationsWebhooks) StackContainerItemConfigIntegrationsWebhooks {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigIntegrationsWebhooksEvents returns new OptNilStackContainerItemConfigIntegrationsWebhooksEvents with value set to v.
func NewOptNilStackContainerItemConfigIntegrationsWebhooksEvents(v StackContainerItemConfigIntegrationsWebhooksEvents) OptNilStackContainerItemConfigIntegrationsWebhooksEvents {
	return OptNilStackContainerItemConfigIntegrationsWebhooksEvents{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigIntegrationsWebhooksEvents is optional nullable StackContainerItemConfigIntegrationsWebhooksEvents.
type OptNilStackContainerItemConfigIntegrationsWebhooksEvents struct {
	Value StackContainerItemConfigIntegrationsWebhooksEvents
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigIntegrationsWebhooksEvents was set.
func (o OptNilStackContainerItemConfigIntegrationsWebhooksEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooksEvents) Reset() {
	var v StackContainerItemConfigIntegrationsWebhooksEvents
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooksEvents) SetTo(v StackContainerItemConfigIntegrationsWebhooksEvents) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigIntegrationsWebhooksEvents) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigIntegrationsWebhooksEvents) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigIntegrationsWebhooksEvents
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigIntegrationsWebhooksEvents) Get() (v StackContainerItemConfigIntegrationsWebhooksEvents, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigIntegrationsWebhooksEvents) Or(d StackContainerItemConfigIntegrationsWebhooksEvents) StackContainerItemConfigIntegrationsWebhooksEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigResources returns new OptNilStackContainerItemConfigResources with value set to v.
func NewOptNilStackContainerItemConfigResources(v StackContainerItemConfigResources) OptNilStackContainerItemConfigResources {
	return OptNilStackContainerItemConfigResources{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigResources is optional nullable StackContainerItemConfigResources.
type OptNilStackContainerItemConfigResources struct {
	Value StackContainerItemConfigResources
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigResources was set.
func (o OptNilStackContainerItemConfigResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigResources) Reset() {
	var v StackContainerItemConfigResources
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigResources) SetTo(v StackContainerItemConfigResources) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigResources) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigResources) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigResources
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigResources) Get() (v StackContainerItemConfigResources, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigResources) Or(d StackContainerItemConfigResources) StackContainerItemConfigResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigRuntime returns new OptNilStackContainerItemConfigRuntime with value set to v.
func NewOptNilStackContainerItemConfigRuntime(v StackContainerItemConfigRuntime) OptNilStackContainerItemConfigRuntime {
	return OptNilStackContainerItemConfigRuntime{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigRuntime is optional nullable StackContainerItemConfigRuntime.
type OptNilStackContainerItemConfigRuntime struct {
	Value StackContainerItemConfigRuntime
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigRuntime was set.
func (o OptNilStackContainerItemConfigRuntime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigRuntime) Reset() {
	var v StackContainerItemConfigRuntime
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigRuntime) SetTo(v StackContainerItemConfigRuntime) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigRuntime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigRuntime) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigRuntime
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigRuntime) Get() (v StackContainerItemConfigRuntime, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigRuntime) Or(d StackContainerItemConfigRuntime) StackContainerItemConfigRuntime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigRuntimeHost returns new OptNilStackContainerItemConfigRuntimeHost with value set to v.
func NewOptNilStackContainerItemConfigRuntimeHost(v StackContainerItemConfigRuntimeHost) OptNilStackContainerItemConfigRuntimeHost {
	return OptNilStackContainerItemConfigRuntimeHost{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigRuntimeHost is optional nullable StackContainerItemConfigRuntimeHost.
type OptNilStackContainerItemConfigRuntimeHost struct {
	Value StackContainerItemConfigRuntimeHost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigRuntimeHost was set.
func (o OptNilStackContainerItemConfigRuntimeHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigRuntimeHost) Reset() {
	var v StackContainerItemConfigRuntimeHost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigRuntimeHost) SetTo(v StackContainerItemConfigRuntimeHost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigRuntimeHost) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigRuntimeHost) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigRuntimeHost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigRuntimeHost) Get() (v StackContainerItemConfigRuntimeHost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigRuntimeHost) Or(d StackContainerItemConfigRuntimeHost) StackContainerItemConfigRuntimeHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemConfigScaling returns new OptNilStackContainerItemConfigScaling with value set to v.
func NewOptNilStackContainerItemConfigScaling(v StackContainerItemConfigScaling) OptNilStackContainerItemConfigScaling {
	return OptNilStackContainerItemConfigScaling{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemConfigScaling is optional nullable StackContainerItemConfigScaling.
type OptNilStackContainerItemConfigScaling struct {
	Value StackContainerItemConfigScaling
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemConfigScaling was set.
func (o OptNilStackContainerItemConfigScaling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemConfigScaling) Reset() {
	var v StackContainerItemConfigScaling
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemConfigScaling) SetTo(v StackContainerItemConfigScaling) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemConfigScaling) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemConfigScaling) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemConfigScaling
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemConfigScaling) Get() (v StackContainerItemConfigScaling, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemConfigScaling) Or(d StackContainerItemConfigScaling) StackContainerItemConfigScaling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemRole returns new OptNilStackContainerItemRole with value set to v.
func NewOptNilStackContainerItemRole(v StackContainerItemRole) OptNilStackContainerItemRole {
	return OptNilStackContainerItemRole{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemRole is optional nullable StackContainerItemRole.
type OptNilStackContainerItemRole struct {
	Value StackContainerItemRole
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemRole was set.
func (o OptNilStackContainerItemRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemRole) Reset() {
	var v StackContainerItemRole
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemRole) SetTo(v StackContainerItemRole) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemRole) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemRole) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackContainerItemRole
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemRole) Get() (v StackContainerItemRole, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemRole) Or(d StackContainerItemRole) StackContainerItemRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackContainerItemVolumesItemArray returns new OptNilStackContainerItemVolumesItemArray with value set to v.
func NewOptNilStackContainerItemVolumesItemArray(v []StackContainerItemVolumesItem) OptNilStackContainerItemVolumesItemArray {
	return OptNilStackContainerItemVolumesItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStackContainerItemVolumesItemArray is optional nullable []StackContainerItemVolumesItem.
type OptNilStackContainerItemVolumesItemArray struct {
	Value []StackContainerItemVolumesItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackContainerItemVolumesItemArray was set.
func (o OptNilStackContainerItemVolumesItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackContainerItemVolumesItemArray) Reset() {
	var v []StackContainerItemVolumesItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackContainerItemVolumesItemArray) SetTo(v []StackContainerItemVolumesItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackContainerItemVolumesItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackContainerItemVolumesItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []StackContainerItemVolumesItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackContainerItemVolumesItemArray) Get() (v []StackContainerItemVolumesItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackContainerItemVolumesItemArray) Or(d []StackContainerItemVolumesItem) []StackContainerItemVolumesItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackPruneStepDetailsCriteria returns new OptNilStackPruneStepDetailsCriteria with value set to v.
func NewOptNilStackPruneStepDetailsCriteria(v StackPruneStepDetailsCriteria) OptNilStackPruneStepDetailsCriteria {
	return OptNilStackPruneStepDetailsCriteria{
		Value: v,
		Set:   true,
	}
}

// OptNilStackPruneStepDetailsCriteria is optional nullable StackPruneStepDetailsCriteria.
type OptNilStackPruneStepDetailsCriteria struct {
	Value StackPruneStepDetailsCriteria
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackPruneStepDetailsCriteria was set.
func (o OptNilStackPruneStepDetailsCriteria) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackPruneStepDetailsCriteria) Reset() {
	var v StackPruneStepDetailsCriteria
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackPruneStepDetailsCriteria) SetTo(v StackPruneStepDetailsCriteria) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackPruneStepDetailsCriteria) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackPruneStepDetailsCriteria) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackPruneStepDetailsCriteria
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackPruneStepDetailsCriteria) Get() (v StackPruneStepDetailsCriteria, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackPruneStepDetailsCriteria) Or(d StackPruneStepDetailsCriteria) StackPruneStepDetailsCriteria {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackRawSourceDetailsAbout returns new OptNilStackRawSourceDetailsAbout with value set to v.
func NewOptNilStackRawSourceDetailsAbout(v StackRawSourceDetailsAbout) OptNilStackRawSourceDetailsAbout {
	return OptNilStackRawSourceDetailsAbout{
		Value: v,
		Set:   true,
	}
}

// OptNilStackRawSourceDetailsAbout is optional nullable StackRawSourceDetailsAbout.
type OptNilStackRawSourceDetailsAbout struct {
	Value StackRawSourceDetailsAbout
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackRawSourceDetailsAbout was set.
func (o OptNilStackRawSourceDetailsAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackRawSourceDetailsAbout) Reset() {
	var v StackRawSourceDetailsAbout
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackRawSourceDetailsAbout) SetTo(v StackRawSourceDetailsAbout) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackRawSourceDetailsAbout) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackRawSourceDetailsAbout) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackRawSourceDetailsAbout
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackRawSourceDetailsAbout) Get() (v StackRawSourceDetailsAbout, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackRawSourceDetailsAbout) Or(d StackRawSourceDetailsAbout) StackRawSourceDetailsAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackRawSourceDetailsServices returns new OptNilStackRawSourceDetailsServices with value set to v.
func NewOptNilStackRawSourceDetailsServices(v StackRawSourceDetailsServices) OptNilStackRawSourceDetailsServices {
	return OptNilStackRawSourceDetailsServices{
		Value: v,
		Set:   true,
	}
}

// OptNilStackRawSourceDetailsServices is optional nullable StackRawSourceDetailsServices.
type OptNilStackRawSourceDetailsServices struct {
	Value StackRawSourceDetailsServices
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackRawSourceDetailsServices was set.
func (o OptNilStackRawSourceDetailsServices) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackRawSourceDetailsServices) Reset() {
	var v StackRawSourceDetailsServices
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackRawSourceDetailsServices) SetTo(v StackRawSourceDetailsServices) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackRawSourceDetailsServices) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackRawSourceDetailsServices) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackRawSourceDetailsServices
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackRawSourceDetailsServices) Get() (v StackRawSourceDetailsServices, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackRawSourceDetailsServices) Or(d StackRawSourceDetailsServices) StackRawSourceDetailsServices {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackRawSourceDetailsServicesDiscovery returns new OptNilStackRawSourceDetailsServicesDiscovery with value set to v.
func NewOptNilStackRawSourceDetailsServicesDiscovery(v StackRawSourceDetailsServicesDiscovery) OptNilStackRawSourceDetailsServicesDiscovery {
	return OptNilStackRawSourceDetailsServicesDiscovery{
		Value: v,
		Set:   true,
	}
}

// OptNilStackRawSourceDetailsServicesDiscovery is optional nullable StackRawSourceDetailsServicesDiscovery.
type OptNilStackRawSourceDetailsServicesDiscovery struct {
	Value StackRawSourceDetailsServicesDiscovery
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackRawSourceDetailsServicesDiscovery was set.
func (o OptNilStackRawSourceDetailsServicesDiscovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackRawSourceDetailsServicesDiscovery) Reset() {
	var v StackRawSourceDetailsServicesDiscovery
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackRawSourceDetailsServicesDiscovery) SetTo(v StackRawSourceDetailsServicesDiscovery) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackRawSourceDetailsServicesDiscovery) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackRawSourceDetailsServicesDiscovery) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackRawSourceDetailsServicesDiscovery
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackRawSourceDetailsServicesDiscovery) Get() (v StackRawSourceDetailsServicesDiscovery, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackRawSourceDetailsServicesDiscovery) Or(d StackRawSourceDetailsServicesDiscovery) StackRawSourceDetailsServicesDiscovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackRawSourceDetailsServicesDiscoveryHosts returns new OptNilStackRawSourceDetailsServicesDiscoveryHosts with value set to v.
func NewOptNilStackRawSourceDetailsServicesDiscoveryHosts(v StackRawSourceDetailsServicesDiscoveryHosts) OptNilStackRawSourceDetailsServicesDiscoveryHosts {
	return OptNilStackRawSourceDetailsServicesDiscoveryHosts{
		Value: v,
		Set:   true,
	}
}

// OptNilStackRawSourceDetailsServicesDiscoveryHosts is optional nullable StackRawSourceDetailsServicesDiscoveryHosts.
type OptNilStackRawSourceDetailsServicesDiscoveryHosts struct {
	Value StackRawSourceDetailsServicesDiscoveryHosts
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackRawSourceDetailsServicesDiscoveryHosts was set.
func (o OptNilStackRawSourceDetailsServicesDiscoveryHosts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackRawSourceDetailsServicesDiscoveryHosts) Reset() {
	var v StackRawSourceDetailsServicesDiscoveryHosts
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackRawSourceDetailsServicesDiscoveryHosts) SetTo(v StackRawSourceDetailsServicesDiscoveryHosts) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackRawSourceDetailsServicesDiscoveryHosts) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackRawSourceDetailsServicesDiscoveryHosts) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackRawSourceDetailsServicesDiscoveryHosts
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackRawSourceDetailsServicesDiscoveryHosts) Get() (v StackRawSourceDetailsServicesDiscoveryHosts, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackRawSourceDetailsServicesDiscoveryHosts) Or(d StackRawSourceDetailsServicesDiscoveryHosts) StackRawSourceDetailsServicesDiscoveryHosts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackRawSourceDetailsServicesLoadbalancer returns new OptNilStackRawSourceDetailsServicesLoadbalancer with value set to v.
func NewOptNilStackRawSourceDetailsServicesLoadbalancer(v StackRawSourceDetailsServicesLoadbalancer) OptNilStackRawSourceDetailsServicesLoadbalancer {
	return OptNilStackRawSourceDetailsServicesLoadbalancer{
		Value: v,
		Set:   true,
	}
}

// OptNilStackRawSourceDetailsServicesLoadbalancer is optional nullable StackRawSourceDetailsServicesLoadbalancer.
type OptNilStackRawSourceDetailsServicesLoadbalancer struct {
	Value StackRawSourceDetailsServicesLoadbalancer
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackRawSourceDetailsServicesLoadbalancer was set.
func (o OptNilStackRawSourceDetailsServicesLoadbalancer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackRawSourceDetailsServicesLoadbalancer) Reset() {
	var v StackRawSourceDetailsServicesLoadbalancer
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackRawSourceDetailsServicesLoadbalancer) SetTo(v StackRawSourceDetailsServicesLoadbalancer) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackRawSourceDetailsServicesLoadbalancer) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackRawSourceDetailsServicesLoadbalancer) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackRawSourceDetailsServicesLoadbalancer
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackRawSourceDetailsServicesLoadbalancer) Get() (v StackRawSourceDetailsServicesLoadbalancer, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackRawSourceDetailsServicesLoadbalancer) Or(d StackRawSourceDetailsServicesLoadbalancer) StackRawSourceDetailsServicesLoadbalancer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecContainerImageBuild returns new OptNilStackSpecContainerImageBuild with value set to v.
func NewOptNilStackSpecContainerImageBuild(v StackSpecContainerImageBuild) OptNilStackSpecContainerImageBuild {
	return OptNilStackSpecContainerImageBuild{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecContainerImageBuild is optional nullable StackSpecContainerImageBuild.
type OptNilStackSpecContainerImageBuild struct {
	Value StackSpecContainerImageBuild
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecContainerImageBuild was set.
func (o OptNilStackSpecContainerImageBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecContainerImageBuild) Reset() {
	var v StackSpecContainerImageBuild
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecContainerImageBuild) SetTo(v StackSpecContainerImageBuild) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecContainerImageBuild) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecContainerImageBuild) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecContainerImageBuild
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecContainerImageBuild) Get() (v StackSpecContainerImageBuild, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecContainerImageBuild) Or(d StackSpecContainerImageBuild) StackSpecContainerImageBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecContainerImageBuilder returns new OptNilStackSpecContainerImageBuilder with value set to v.
func NewOptNilStackSpecContainerImageBuilder(v StackSpecContainerImageBuilder) OptNilStackSpecContainerImageBuilder {
	return OptNilStackSpecContainerImageBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecContainerImageBuilder is optional nullable StackSpecContainerImageBuilder.
type OptNilStackSpecContainerImageBuilder struct {
	Value StackSpecContainerImageBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecContainerImageBuilder was set.
func (o OptNilStackSpecContainerImageBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecContainerImageBuilder) Reset() {
	var v StackSpecContainerImageBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecContainerImageBuilder) SetTo(v StackSpecContainerImageBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecContainerImageBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecContainerImageBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecContainerImageBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecContainerImageBuilder) Get() (v StackSpecContainerImageBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecContainerImageBuilder) Or(d StackSpecContainerImageBuilder) StackSpecContainerImageBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecScopedVariableAccessFile returns new OptNilStackSpecScopedVariableAccessFile with value set to v.
func NewOptNilStackSpecScopedVariableAccessFile(v StackSpecScopedVariableAccessFile) OptNilStackSpecScopedVariableAccessFile {
	return OptNilStackSpecScopedVariableAccessFile{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecScopedVariableAccessFile is optional nullable StackSpecScopedVariableAccessFile.
type OptNilStackSpecScopedVariableAccessFile struct {
	Value StackSpecScopedVariableAccessFile
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecScopedVariableAccessFile was set.
func (o OptNilStackSpecScopedVariableAccessFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecScopedVariableAccessFile) Reset() {
	var v StackSpecScopedVariableAccessFile
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecScopedVariableAccessFile) SetTo(v StackSpecScopedVariableAccessFile) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecScopedVariableAccessFile) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecScopedVariableAccessFile) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecScopedVariableAccessFile
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecScopedVariableAccessFile) Get() (v StackSpecScopedVariableAccessFile, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecScopedVariableAccessFile) Or(d StackSpecScopedVariableAccessFile) StackSpecScopedVariableAccessFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecScopedVariableAccessInternalAPI returns new OptNilStackSpecScopedVariableAccessInternalAPI with value set to v.
func NewOptNilStackSpecScopedVariableAccessInternalAPI(v StackSpecScopedVariableAccessInternalAPI) OptNilStackSpecScopedVariableAccessInternalAPI {
	return OptNilStackSpecScopedVariableAccessInternalAPI{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecScopedVariableAccessInternalAPI is optional nullable StackSpecScopedVariableAccessInternalAPI.
type OptNilStackSpecScopedVariableAccessInternalAPI struct {
	Value StackSpecScopedVariableAccessInternalAPI
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecScopedVariableAccessInternalAPI was set.
func (o OptNilStackSpecScopedVariableAccessInternalAPI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecScopedVariableAccessInternalAPI) Reset() {
	var v StackSpecScopedVariableAccessInternalAPI
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecScopedVariableAccessInternalAPI) SetTo(v StackSpecScopedVariableAccessInternalAPI) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecScopedVariableAccessInternalAPI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecScopedVariableAccessInternalAPI) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecScopedVariableAccessInternalAPI
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecScopedVariableAccessInternalAPI) Get() (v StackSpecScopedVariableAccessInternalAPI, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecScopedVariableAccessInternalAPI) Or(d StackSpecScopedVariableAccessInternalAPI) StackSpecScopedVariableAccessInternalAPI {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecScopedVariableArray returns new OptNilStackSpecScopedVariableArray with value set to v.
func NewOptNilStackSpecScopedVariableArray(v []StackSpecScopedVariable) OptNilStackSpecScopedVariableArray {
	return OptNilStackSpecScopedVariableArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecScopedVariableArray is optional nullable []StackSpecScopedVariable.
type OptNilStackSpecScopedVariableArray struct {
	Value []StackSpecScopedVariable
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecScopedVariableArray was set.
func (o OptNilStackSpecScopedVariableArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecScopedVariableArray) Reset() {
	var v []StackSpecScopedVariable
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecScopedVariableArray) SetTo(v []StackSpecScopedVariable) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecScopedVariableArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecScopedVariableArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []StackSpecScopedVariable
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecScopedVariableArray) Get() (v []StackSpecScopedVariable, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecScopedVariableArray) Or(d []StackSpecScopedVariable) []StackSpecScopedVariable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerArray returns new OptNilStackSpecTestContainerArray with value set to v.
func NewOptNilStackSpecTestContainerArray(v []StackSpecTestContainer) OptNilStackSpecTestContainerArray {
	return OptNilStackSpecTestContainerArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerArray is optional nullable []StackSpecTestContainer.
type OptNilStackSpecTestContainerArray struct {
	Value []StackSpecTestContainer
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerArray was set.
func (o OptNilStackSpecTestContainerArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerArray) Reset() {
	var v []StackSpecTestContainer
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerArray) SetTo(v []StackSpecTestContainer) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []StackSpecTestContainer
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerArray) Get() (v []StackSpecTestContainer, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerArray) Or(d []StackSpecTestContainer) []StackSpecTestContainer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerConfigResources returns new OptNilStackSpecTestContainerConfigResources with value set to v.
func NewOptNilStackSpecTestContainerConfigResources(v StackSpecTestContainerConfigResources) OptNilStackSpecTestContainerConfigResources {
	return OptNilStackSpecTestContainerConfigResources{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerConfigResources is optional nullable StackSpecTestContainerConfigResources.
type OptNilStackSpecTestContainerConfigResources struct {
	Value StackSpecTestContainerConfigResources
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerConfigResources was set.
func (o OptNilStackSpecTestContainerConfigResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerConfigResources) Reset() {
	var v StackSpecTestContainerConfigResources
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerConfigResources) SetTo(v StackSpecTestContainerConfigResources) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerConfigResources) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerConfigResources) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecTestContainerConfigResources
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerConfigResources) Get() (v StackSpecTestContainerConfigResources, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerConfigResources) Or(d StackSpecTestContainerConfigResources) StackSpecTestContainerConfigResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerConfigRuntime returns new OptNilStackSpecTestContainerConfigRuntime with value set to v.
func NewOptNilStackSpecTestContainerConfigRuntime(v StackSpecTestContainerConfigRuntime) OptNilStackSpecTestContainerConfigRuntime {
	return OptNilStackSpecTestContainerConfigRuntime{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerConfigRuntime is optional nullable StackSpecTestContainerConfigRuntime.
type OptNilStackSpecTestContainerConfigRuntime struct {
	Value StackSpecTestContainerConfigRuntime
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerConfigRuntime was set.
func (o OptNilStackSpecTestContainerConfigRuntime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerConfigRuntime) Reset() {
	var v StackSpecTestContainerConfigRuntime
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerConfigRuntime) SetTo(v StackSpecTestContainerConfigRuntime) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerConfigRuntime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerConfigRuntime) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecTestContainerConfigRuntime
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerConfigRuntime) Get() (v StackSpecTestContainerConfigRuntime, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerConfigRuntime) Or(d StackSpecTestContainerConfigRuntime) StackSpecTestContainerConfigRuntime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerConfigRuntimeHost returns new OptNilStackSpecTestContainerConfigRuntimeHost with value set to v.
func NewOptNilStackSpecTestContainerConfigRuntimeHost(v StackSpecTestContainerConfigRuntimeHost) OptNilStackSpecTestContainerConfigRuntimeHost {
	return OptNilStackSpecTestContainerConfigRuntimeHost{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerConfigRuntimeHost is optional nullable StackSpecTestContainerConfigRuntimeHost.
type OptNilStackSpecTestContainerConfigRuntimeHost struct {
	Value StackSpecTestContainerConfigRuntimeHost
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerConfigRuntimeHost was set.
func (o OptNilStackSpecTestContainerConfigRuntimeHost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerConfigRuntimeHost) Reset() {
	var v StackSpecTestContainerConfigRuntimeHost
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerConfigRuntimeHost) SetTo(v StackSpecTestContainerConfigRuntimeHost) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerConfigRuntimeHost) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerConfigRuntimeHost) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecTestContainerConfigRuntimeHost
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerConfigRuntimeHost) Get() (v StackSpecTestContainerConfigRuntimeHost, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerConfigRuntimeHost) Or(d StackSpecTestContainerConfigRuntimeHost) StackSpecTestContainerConfigRuntimeHost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerImageBuild returns new OptNilStackSpecTestContainerImageBuild with value set to v.
func NewOptNilStackSpecTestContainerImageBuild(v StackSpecTestContainerImageBuild) OptNilStackSpecTestContainerImageBuild {
	return OptNilStackSpecTestContainerImageBuild{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerImageBuild is optional nullable StackSpecTestContainerImageBuild.
type OptNilStackSpecTestContainerImageBuild struct {
	Value StackSpecTestContainerImageBuild
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerImageBuild was set.
func (o OptNilStackSpecTestContainerImageBuild) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerImageBuild) Reset() {
	var v StackSpecTestContainerImageBuild
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerImageBuild) SetTo(v StackSpecTestContainerImageBuild) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerImageBuild) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerImageBuild) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecTestContainerImageBuild
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerImageBuild) Get() (v StackSpecTestContainerImageBuild, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerImageBuild) Or(d StackSpecTestContainerImageBuild) StackSpecTestContainerImageBuild {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStackSpecTestContainerImageBuilder returns new OptNilStackSpecTestContainerImageBuilder with value set to v.
func NewOptNilStackSpecTestContainerImageBuilder(v StackSpecTestContainerImageBuilder) OptNilStackSpecTestContainerImageBuilder {
	return OptNilStackSpecTestContainerImageBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilStackSpecTestContainerImageBuilder is optional nullable StackSpecTestContainerImageBuilder.
type OptNilStackSpecTestContainerImageBuilder struct {
	Value StackSpecTestContainerImageBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStackSpecTestContainerImageBuilder was set.
func (o OptNilStackSpecTestContainerImageBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStackSpecTestContainerImageBuilder) Reset() {
	var v StackSpecTestContainerImageBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStackSpecTestContainerImageBuilder) SetTo(v StackSpecTestContainerImageBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStackSpecTestContainerImageBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStackSpecTestContainerImageBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v StackSpecTestContainerImageBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStackSpecTestContainerImageBuilder) Get() (v StackSpecTestContainerImageBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStackSpecTestContainerImageBuilder) Or(d StackSpecTestContainerImageBuilder) StackSpecTestContainerImageBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilStringArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUpdateImageSourceReqBuilder returns new OptNilUpdateImageSourceReqBuilder with value set to v.
func NewOptNilUpdateImageSourceReqBuilder(v UpdateImageSourceReqBuilder) OptNilUpdateImageSourceReqBuilder {
	return OptNilUpdateImageSourceReqBuilder{
		Value: v,
		Set:   true,
	}
}

// OptNilUpdateImageSourceReqBuilder is optional nullable UpdateImageSourceReqBuilder.
type OptNilUpdateImageSourceReqBuilder struct {
	Value UpdateImageSourceReqBuilder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUpdateImageSourceReqBuilder was set.
func (o OptNilUpdateImageSourceReqBuilder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUpdateImageSourceReqBuilder) Reset() {
	var v UpdateImageSourceReqBuilder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUpdateImageSourceReqBuilder) SetTo(v UpdateImageSourceReqBuilder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUpdateImageSourceReqBuilder) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUpdateImageSourceReqBuilder) SetToNull() {
	o.Set = true
	o.Null = true
	var v UpdateImageSourceReqBuilder
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUpdateImageSourceReqBuilder) Get() (v UpdateImageSourceReqBuilder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUpdateImageSourceReqBuilder) Or(d UpdateImageSourceReqBuilder) UpdateImageSourceReqBuilder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUpdateIntegrationReqAuth returns new OptNilUpdateIntegrationReqAuth with value set to v.
func NewOptNilUpdateIntegrationReqAuth(v UpdateIntegrationReqAuth) OptNilUpdateIntegrationReqAuth {
	return OptNilUpdateIntegrationReqAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilUpdateIntegrationReqAuth is optional nullable UpdateIntegrationReqAuth.
type OptNilUpdateIntegrationReqAuth struct {
	Value UpdateIntegrationReqAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUpdateIntegrationReqAuth was set.
func (o OptNilUpdateIntegrationReqAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUpdateIntegrationReqAuth) Reset() {
	var v UpdateIntegrationReqAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUpdateIntegrationReqAuth) SetTo(v UpdateIntegrationReqAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUpdateIntegrationReqAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUpdateIntegrationReqAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v UpdateIntegrationReqAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUpdateIntegrationReqAuth) Get() (v UpdateIntegrationReqAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUpdateIntegrationReqAuth) Or(d UpdateIntegrationReqAuth) UpdateIntegrationReqAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUpdateIntegrationReqExtra returns new OptNilUpdateIntegrationReqExtra with value set to v.
func NewOptNilUpdateIntegrationReqExtra(v UpdateIntegrationReqExtra) OptNilUpdateIntegrationReqExtra {
	return OptNilUpdateIntegrationReqExtra{
		Value: v,
		Set:   true,
	}
}

// OptNilUpdateIntegrationReqExtra is optional nullable UpdateIntegrationReqExtra.
type OptNilUpdateIntegrationReqExtra struct {
	Value UpdateIntegrationReqExtra
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUpdateIntegrationReqExtra was set.
func (o OptNilUpdateIntegrationReqExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUpdateIntegrationReqExtra) Reset() {
	var v UpdateIntegrationReqExtra
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUpdateIntegrationReqExtra) SetTo(v UpdateIntegrationReqExtra) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUpdateIntegrationReqExtra) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUpdateIntegrationReqExtra) SetToNull() {
	o.Set = true
	o.Null = true
	var v UpdateIntegrationReqExtra
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUpdateIntegrationReqExtra) Get() (v UpdateIntegrationReqExtra, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUpdateIntegrationReqExtra) Or(d UpdateIntegrationReqExtra) UpdateIntegrationReqExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUpdateRoleReqCapabilities returns new OptNilUpdateRoleReqCapabilities with value set to v.
func NewOptNilUpdateRoleReqCapabilities(v UpdateRoleReqCapabilities) OptNilUpdateRoleReqCapabilities {
	return OptNilUpdateRoleReqCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptNilUpdateRoleReqCapabilities is optional nullable UpdateRoleReqCapabilities.
type OptNilUpdateRoleReqCapabilities struct {
	Value UpdateRoleReqCapabilities
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUpdateRoleReqCapabilities was set.
func (o OptNilUpdateRoleReqCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUpdateRoleReqCapabilities) Reset() {
	var v UpdateRoleReqCapabilities
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUpdateRoleReqCapabilities) SetTo(v UpdateRoleReqCapabilities) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUpdateRoleReqCapabilities) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUpdateRoleReqCapabilities) SetToNull() {
	o.Set = true
	o.Null = true
	var v UpdateRoleReqCapabilities
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUpdateRoleReqCapabilities) Get() (v UpdateRoleReqCapabilities, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUpdateRoleReqCapabilities) Or(d UpdateRoleReqCapabilities) UpdateRoleReqCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUpdateRoleReqExtra returns new OptNilUpdateRoleReqExtra with value set to v.
func NewOptNilUpdateRoleReqExtra(v UpdateRoleReqExtra) OptNilUpdateRoleReqExtra {
	return OptNilUpdateRoleReqExtra{
		Value: v,
		Set:   true,
	}
}

// OptNilUpdateRoleReqExtra is optional nullable UpdateRoleReqExtra.
type OptNilUpdateRoleReqExtra struct {
	Value UpdateRoleReqExtra
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUpdateRoleReqExtra was set.
func (o OptNilUpdateRoleReqExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUpdateRoleReqExtra) Reset() {
	var v UpdateRoleReqExtra
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUpdateRoleReqExtra) SetTo(v UpdateRoleReqExtra) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUpdateRoleReqExtra) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilUpdateRoleReqExtra) SetToNull() {
	o.Set = true
	o.Null = true
	var v UpdateRoleReqExtra
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUpdateRoleReqExtra) Get() (v UpdateRoleReqExtra, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUpdateRoleReqExtra) Or(d UpdateRoleReqExtra) UpdateRoleReqExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilV1LbConfigRouterConfigTLS returns new OptNilV1LbConfigRouterConfigTLS with value set to v.
func NewOptNilV1LbConfigRouterConfigTLS(v V1LbConfigRouterConfigTLS) OptNilV1LbConfigRouterConfigTLS {
	return OptNilV1LbConfigRouterConfigTLS{
		Value: v,
		Set:   true,
	}
}

// OptNilV1LbConfigRouterConfigTLS is optional nullable V1LbConfigRouterConfigTLS.
type OptNilV1LbConfigRouterConfigTLS struct {
	Value V1LbConfigRouterConfigTLS
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilV1LbConfigRouterConfigTLS was set.
func (o OptNilV1LbConfigRouterConfigTLS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilV1LbConfigRouterConfigTLS) Reset() {
	var v V1LbConfigRouterConfigTLS
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilV1LbConfigRouterConfigTLS) SetTo(v V1LbConfigRouterConfigTLS) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilV1LbConfigRouterConfigTLS) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilV1LbConfigRouterConfigTLS) SetToNull() {
	o.Set = true
	o.Null = true
	var v V1LbConfigRouterConfigTLS
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilV1LbConfigRouterConfigTLS) Get() (v V1LbConfigRouterConfigTLS, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilV1LbConfigRouterConfigTLS) Or(d V1LbConfigRouterConfigTLS) V1LbConfigRouterConfigTLS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilV1LbConfigRouterConfigTLSClientAuth returns new OptNilV1LbConfigRouterConfigTLSClientAuth with value set to v.
func NewOptNilV1LbConfigRouterConfigTLSClientAuth(v V1LbConfigRouterConfigTLSClientAuth) OptNilV1LbConfigRouterConfigTLSClientAuth {
	return OptNilV1LbConfigRouterConfigTLSClientAuth{
		Value: v,
		Set:   true,
	}
}

// OptNilV1LbConfigRouterConfigTLSClientAuth is optional nullable V1LbConfigRouterConfigTLSClientAuth.
type OptNilV1LbConfigRouterConfigTLSClientAuth struct {
	Value V1LbConfigRouterConfigTLSClientAuth
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilV1LbConfigRouterConfigTLSClientAuth was set.
func (o OptNilV1LbConfigRouterConfigTLSClientAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilV1LbConfigRouterConfigTLSClientAuth) Reset() {
	var v V1LbConfigRouterConfigTLSClientAuth
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilV1LbConfigRouterConfigTLSClientAuth) SetTo(v V1LbConfigRouterConfigTLSClientAuth) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilV1LbConfigRouterConfigTLSClientAuth) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilV1LbConfigRouterConfigTLSClientAuth) SetToNull() {
	o.Set = true
	o.Null = true
	var v V1LbConfigRouterConfigTLSClientAuth
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilV1LbConfigRouterConfigTLSClientAuth) Get() (v V1LbConfigRouterConfigTLSClientAuth, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilV1LbConfigRouterConfigTLSClientAuth) Or(d V1LbConfigRouterConfigTLSClientAuth) V1LbConfigRouterConfigTLSClientAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilV1LbControllerTransportConfigIngressTLS returns new OptNilV1LbControllerTransportConfigIngressTLS with value set to v.
func NewOptNilV1LbControllerTransportConfigIngressTLS(v V1LbControllerTransportConfigIngressTLS) OptNilV1LbControllerTransportConfigIngressTLS {
	return OptNilV1LbControllerTransportConfigIngressTLS{
		Value: v,
		Set:   true,
	}
}

// OptNilV1LbControllerTransportConfigIngressTLS is optional nullable V1LbControllerTransportConfigIngressTLS.
type OptNilV1LbControllerTransportConfigIngressTLS struct {
	Value V1LbControllerTransportConfigIngressTLS
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilV1LbControllerTransportConfigIngressTLS was set.
func (o OptNilV1LbControllerTransportConfigIngressTLS) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilV1LbControllerTransportConfigIngressTLS) Reset() {
	var v V1LbControllerTransportConfigIngressTLS
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilV1LbControllerTransportConfigIngressTLS) SetTo(v V1LbControllerTransportConfigIngressTLS) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilV1LbControllerTransportConfigIngressTLS) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilV1LbControllerTransportConfigIngressTLS) SetToNull() {
	o.Set = true
	o.Null = true
	var v V1LbControllerTransportConfigIngressTLS
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilV1LbControllerTransportConfigIngressTLS) Get() (v V1LbControllerTransportConfigIngressTLS, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilV1LbControllerTransportConfigIngressTLS) Or(d V1LbControllerTransportConfigIngressTLS) V1LbControllerTransportConfigIngressTLS {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilVpnReconfigureTaskContentsConfig returns new OptNilVpnReconfigureTaskContentsConfig with value set to v.
func NewOptNilVpnReconfigureTaskContentsConfig(v VpnReconfigureTaskContentsConfig) OptNilVpnReconfigureTaskContentsConfig {
	return OptNilVpnReconfigureTaskContentsConfig{
		Value: v,
		Set:   true,
	}
}

// OptNilVpnReconfigureTaskContentsConfig is optional nullable VpnReconfigureTaskContentsConfig.
type OptNilVpnReconfigureTaskContentsConfig struct {
	Value VpnReconfigureTaskContentsConfig
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilVpnReconfigureTaskContentsConfig was set.
func (o OptNilVpnReconfigureTaskContentsConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilVpnReconfigureTaskContentsConfig) Reset() {
	var v VpnReconfigureTaskContentsConfig
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilVpnReconfigureTaskContentsConfig) SetTo(v VpnReconfigureTaskContentsConfig) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilVpnReconfigureTaskContentsConfig) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilVpnReconfigureTaskContentsConfig) SetToNull() {
	o.Set = true
	o.Null = true
	var v VpnReconfigureTaskContentsConfig
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilVpnReconfigureTaskContentsConfig) Get() (v VpnReconfigureTaskContentsConfig, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilVpnReconfigureTaskContentsConfig) Or(d VpnReconfigureTaskContentsConfig) VpnReconfigureTaskContentsConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookGetStepDetailsHeaders returns new OptNilWebhookGetStepDetailsHeaders with value set to v.
func NewOptNilWebhookGetStepDetailsHeaders(v WebhookGetStepDetailsHeaders) OptNilWebhookGetStepDetailsHeaders {
	return OptNilWebhookGetStepDetailsHeaders{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookGetStepDetailsHeaders is optional nullable WebhookGetStepDetailsHeaders.
type OptNilWebhookGetStepDetailsHeaders struct {
	Value WebhookGetStepDetailsHeaders
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookGetStepDetailsHeaders was set.
func (o OptNilWebhookGetStepDetailsHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookGetStepDetailsHeaders) Reset() {
	var v WebhookGetStepDetailsHeaders
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookGetStepDetailsHeaders) SetTo(v WebhookGetStepDetailsHeaders) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookGetStepDetailsHeaders) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookGetStepDetailsHeaders) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookGetStepDetailsHeaders
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookGetStepDetailsHeaders) Get() (v WebhookGetStepDetailsHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookGetStepDetailsHeaders) Or(d WebhookGetStepDetailsHeaders) WebhookGetStepDetailsHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookGetStepDetailsOptions returns new OptNilWebhookGetStepDetailsOptions with value set to v.
func NewOptNilWebhookGetStepDetailsOptions(v WebhookGetStepDetailsOptions) OptNilWebhookGetStepDetailsOptions {
	return OptNilWebhookGetStepDetailsOptions{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookGetStepDetailsOptions is optional nullable WebhookGetStepDetailsOptions.
type OptNilWebhookGetStepDetailsOptions struct {
	Value WebhookGetStepDetailsOptions
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookGetStepDetailsOptions was set.
func (o OptNilWebhookGetStepDetailsOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookGetStepDetailsOptions) Reset() {
	var v WebhookGetStepDetailsOptions
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookGetStepDetailsOptions) SetTo(v WebhookGetStepDetailsOptions) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookGetStepDetailsOptions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookGetStepDetailsOptions) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookGetStepDetailsOptions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookGetStepDetailsOptions) Get() (v WebhookGetStepDetailsOptions, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookGetStepDetailsOptions) Or(d WebhookGetStepDetailsOptions) WebhookGetStepDetailsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookGetStepDetailsOptionsFailOn returns new OptNilWebhookGetStepDetailsOptionsFailOn with value set to v.
func NewOptNilWebhookGetStepDetailsOptionsFailOn(v WebhookGetStepDetailsOptionsFailOn) OptNilWebhookGetStepDetailsOptionsFailOn {
	return OptNilWebhookGetStepDetailsOptionsFailOn{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookGetStepDetailsOptionsFailOn is optional nullable WebhookGetStepDetailsOptionsFailOn.
type OptNilWebhookGetStepDetailsOptionsFailOn struct {
	Value WebhookGetStepDetailsOptionsFailOn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookGetStepDetailsOptionsFailOn was set.
func (o OptNilWebhookGetStepDetailsOptionsFailOn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookGetStepDetailsOptionsFailOn) Reset() {
	var v WebhookGetStepDetailsOptionsFailOn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookGetStepDetailsOptionsFailOn) SetTo(v WebhookGetStepDetailsOptionsFailOn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookGetStepDetailsOptionsFailOn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookGetStepDetailsOptionsFailOn) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookGetStepDetailsOptionsFailOn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookGetStepDetailsOptionsFailOn) Get() (v WebhookGetStepDetailsOptionsFailOn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookGetStepDetailsOptionsFailOn) Or(d WebhookGetStepDetailsOptionsFailOn) WebhookGetStepDetailsOptionsFailOn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookGetStepDetailsOptionsRetryOn returns new OptNilWebhookGetStepDetailsOptionsRetryOn with value set to v.
func NewOptNilWebhookGetStepDetailsOptionsRetryOn(v WebhookGetStepDetailsOptionsRetryOn) OptNilWebhookGetStepDetailsOptionsRetryOn {
	return OptNilWebhookGetStepDetailsOptionsRetryOn{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookGetStepDetailsOptionsRetryOn is optional nullable WebhookGetStepDetailsOptionsRetryOn.
type OptNilWebhookGetStepDetailsOptionsRetryOn struct {
	Value WebhookGetStepDetailsOptionsRetryOn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookGetStepDetailsOptionsRetryOn was set.
func (o OptNilWebhookGetStepDetailsOptionsRetryOn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookGetStepDetailsOptionsRetryOn) Reset() {
	var v WebhookGetStepDetailsOptionsRetryOn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookGetStepDetailsOptionsRetryOn) SetTo(v WebhookGetStepDetailsOptionsRetryOn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookGetStepDetailsOptionsRetryOn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookGetStepDetailsOptionsRetryOn) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookGetStepDetailsOptionsRetryOn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookGetStepDetailsOptionsRetryOn) Get() (v WebhookGetStepDetailsOptionsRetryOn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookGetStepDetailsOptionsRetryOn) Or(d WebhookGetStepDetailsOptionsRetryOn) WebhookGetStepDetailsOptionsRetryOn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookPostStepDetailsHeaders returns new OptNilWebhookPostStepDetailsHeaders with value set to v.
func NewOptNilWebhookPostStepDetailsHeaders(v WebhookPostStepDetailsHeaders) OptNilWebhookPostStepDetailsHeaders {
	return OptNilWebhookPostStepDetailsHeaders{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookPostStepDetailsHeaders is optional nullable WebhookPostStepDetailsHeaders.
type OptNilWebhookPostStepDetailsHeaders struct {
	Value WebhookPostStepDetailsHeaders
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookPostStepDetailsHeaders was set.
func (o OptNilWebhookPostStepDetailsHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookPostStepDetailsHeaders) Reset() {
	var v WebhookPostStepDetailsHeaders
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookPostStepDetailsHeaders) SetTo(v WebhookPostStepDetailsHeaders) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookPostStepDetailsHeaders) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookPostStepDetailsHeaders) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookPostStepDetailsHeaders
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookPostStepDetailsHeaders) Get() (v WebhookPostStepDetailsHeaders, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookPostStepDetailsHeaders) Or(d WebhookPostStepDetailsHeaders) WebhookPostStepDetailsHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookPostStepDetailsOptions returns new OptNilWebhookPostStepDetailsOptions with value set to v.
func NewOptNilWebhookPostStepDetailsOptions(v WebhookPostStepDetailsOptions) OptNilWebhookPostStepDetailsOptions {
	return OptNilWebhookPostStepDetailsOptions{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookPostStepDetailsOptions is optional nullable WebhookPostStepDetailsOptions.
type OptNilWebhookPostStepDetailsOptions struct {
	Value WebhookPostStepDetailsOptions
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookPostStepDetailsOptions was set.
func (o OptNilWebhookPostStepDetailsOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookPostStepDetailsOptions) Reset() {
	var v WebhookPostStepDetailsOptions
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookPostStepDetailsOptions) SetTo(v WebhookPostStepDetailsOptions) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookPostStepDetailsOptions) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookPostStepDetailsOptions) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookPostStepDetailsOptions
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookPostStepDetailsOptions) Get() (v WebhookPostStepDetailsOptions, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookPostStepDetailsOptions) Or(d WebhookPostStepDetailsOptions) WebhookPostStepDetailsOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookPostStepDetailsOptionsFailOn returns new OptNilWebhookPostStepDetailsOptionsFailOn with value set to v.
func NewOptNilWebhookPostStepDetailsOptionsFailOn(v WebhookPostStepDetailsOptionsFailOn) OptNilWebhookPostStepDetailsOptionsFailOn {
	return OptNilWebhookPostStepDetailsOptionsFailOn{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookPostStepDetailsOptionsFailOn is optional nullable WebhookPostStepDetailsOptionsFailOn.
type OptNilWebhookPostStepDetailsOptionsFailOn struct {
	Value WebhookPostStepDetailsOptionsFailOn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookPostStepDetailsOptionsFailOn was set.
func (o OptNilWebhookPostStepDetailsOptionsFailOn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookPostStepDetailsOptionsFailOn) Reset() {
	var v WebhookPostStepDetailsOptionsFailOn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookPostStepDetailsOptionsFailOn) SetTo(v WebhookPostStepDetailsOptionsFailOn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookPostStepDetailsOptionsFailOn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookPostStepDetailsOptionsFailOn) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookPostStepDetailsOptionsFailOn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookPostStepDetailsOptionsFailOn) Get() (v WebhookPostStepDetailsOptionsFailOn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookPostStepDetailsOptionsFailOn) Or(d WebhookPostStepDetailsOptionsFailOn) WebhookPostStepDetailsOptionsFailOn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookPostStepDetailsOptionsRetryOn returns new OptNilWebhookPostStepDetailsOptionsRetryOn with value set to v.
func NewOptNilWebhookPostStepDetailsOptionsRetryOn(v WebhookPostStepDetailsOptionsRetryOn) OptNilWebhookPostStepDetailsOptionsRetryOn {
	return OptNilWebhookPostStepDetailsOptionsRetryOn{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookPostStepDetailsOptionsRetryOn is optional nullable WebhookPostStepDetailsOptionsRetryOn.
type OptNilWebhookPostStepDetailsOptionsRetryOn struct {
	Value WebhookPostStepDetailsOptionsRetryOn
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookPostStepDetailsOptionsRetryOn was set.
func (o OptNilWebhookPostStepDetailsOptionsRetryOn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookPostStepDetailsOptionsRetryOn) Reset() {
	var v WebhookPostStepDetailsOptionsRetryOn
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookPostStepDetailsOptionsRetryOn) SetTo(v WebhookPostStepDetailsOptionsRetryOn) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookPostStepDetailsOptionsRetryOn) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookPostStepDetailsOptionsRetryOn) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookPostStepDetailsOptionsRetryOn
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookPostStepDetailsOptionsRetryOn) Get() (v WebhookPostStepDetailsOptionsRetryOn, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookPostStepDetailsOptionsRetryOn) Or(d WebhookPostStepDetailsOptionsRetryOn) WebhookPostStepDetailsOptionsRetryOn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNodeStateError returns new OptNodeStateError with value set to v.
func NewOptNodeStateError(v NodeStateError) OptNodeStateError {
	return OptNodeStateError{
		Value: v,
		Set:   true,
	}
}

// OptNodeStateError is optional NodeStateError.
type OptNodeStateError struct {
	Value NodeStateError
	Set   bool
}

// IsSet returns true if OptNodeStateError was set.
func (o OptNodeStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNodeStateError) Reset() {
	var v NodeStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNodeStateError) SetTo(v NodeStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNodeStateError) Get() (v NodeStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNodeStateError) Or(d NodeStateError) NodeStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderItemDiscount returns new OptOrderItemDiscount with value set to v.
func NewOptOrderItemDiscount(v OrderItemDiscount) OptOrderItemDiscount {
	return OptOrderItemDiscount{
		Value: v,
		Set:   true,
	}
}

// OptOrderItemDiscount is optional OrderItemDiscount.
type OptOrderItemDiscount struct {
	Value OrderItemDiscount
	Set   bool
}

// IsSet returns true if OptOrderItemDiscount was set.
func (o OptOrderItemDiscount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderItemDiscount) Reset() {
	var v OrderItemDiscount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderItemDiscount) SetTo(v OrderItemDiscount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderItemDiscount) Get() (v OrderItemDiscount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderItemDiscount) Or(d OrderItemDiscount) OrderItemDiscount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderStateError returns new OptOrderStateError with value set to v.
func NewOptOrderStateError(v OrderStateError) OptOrderStateError {
	return OptOrderStateError{
		Value: v,
		Set:   true,
	}
}

// OptOrderStateError is optional OrderStateError.
type OptOrderStateError struct {
	Value OrderStateError
	Set   bool
}

// IsSet returns true if OptOrderStateError was set.
func (o OptOrderStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderStateError) Reset() {
	var v OrderStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderStateError) SetTo(v OrderStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderStateError) Get() (v OrderStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderStateError) Or(d OrderStateError) OrderStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPermissions returns new OptPermissions with value set to v.
func NewOptPermissions(v Permissions) OptPermissions {
	return OptPermissions{
		Value: v,
		Set:   true,
	}
}

// OptPermissions is optional Permissions.
type OptPermissions struct {
	Value Permissions
	Set   bool
}

// IsSet returns true if OptPermissions was set.
func (o OptPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPermissions) Reset() {
	var v Permissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPermissions) SetTo(v Permissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPermissions) Get() (v Permissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPermissions) Or(d Permissions) Permissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineIncludes returns new OptPipelineIncludes with value set to v.
func NewOptPipelineIncludes(v PipelineIncludes) OptPipelineIncludes {
	return OptPipelineIncludes{
		Value: v,
		Set:   true,
	}
}

// OptPipelineIncludes is optional PipelineIncludes.
type OptPipelineIncludes struct {
	Value PipelineIncludes
	Set   bool
}

// IsSet returns true if OptPipelineIncludes was set.
func (o OptPipelineIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineIncludes) Reset() {
	var v PipelineIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineIncludes) SetTo(v PipelineIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineIncludes) Get() (v PipelineIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineIncludes) Or(d PipelineIncludes) PipelineIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineIncludesComponents returns new OptPipelineIncludesComponents with value set to v.
func NewOptPipelineIncludesComponents(v PipelineIncludesComponents) OptPipelineIncludesComponents {
	return OptPipelineIncludesComponents{
		Value: v,
		Set:   true,
	}
}

// OptPipelineIncludesComponents is optional PipelineIncludesComponents.
type OptPipelineIncludesComponents struct {
	Value PipelineIncludesComponents
	Set   bool
}

// IsSet returns true if OptPipelineIncludesComponents was set.
func (o OptPipelineIncludesComponents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineIncludesComponents) Reset() {
	var v PipelineIncludesComponents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineIncludesComponents) SetTo(v PipelineIncludesComponents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineIncludesComponents) Get() (v PipelineIncludesComponents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineIncludesComponents) Or(d PipelineIncludesComponents) PipelineIncludesComponents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineRunVariables returns new OptPipelineRunVariables with value set to v.
func NewOptPipelineRunVariables(v PipelineRunVariables) OptPipelineRunVariables {
	return OptPipelineRunVariables{
		Value: v,
		Set:   true,
	}
}

// OptPipelineRunVariables is optional PipelineRunVariables.
type OptPipelineRunVariables struct {
	Value PipelineRunVariables
	Set   bool
}

// IsSet returns true if OptPipelineRunVariables was set.
func (o OptPipelineRunVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineRunVariables) Reset() {
	var v PipelineRunVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineRunVariables) SetTo(v PipelineRunVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineRunVariables) Get() (v PipelineRunVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineRunVariables) Or(d PipelineRunVariables) PipelineRunVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineStageOptions returns new OptPipelineStageOptions with value set to v.
func NewOptPipelineStageOptions(v PipelineStageOptions) OptPipelineStageOptions {
	return OptPipelineStageOptions{
		Value: v,
		Set:   true,
	}
}

// OptPipelineStageOptions is optional PipelineStageOptions.
type OptPipelineStageOptions struct {
	Value PipelineStageOptions
	Set   bool
}

// IsSet returns true if OptPipelineStageOptions was set.
func (o OptPipelineStageOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineStageOptions) Reset() {
	var v PipelineStageOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineStageOptions) SetTo(v PipelineStageOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineStageOptions) Get() (v PipelineStageOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineStageOptions) Or(d PipelineStageOptions) PipelineStageOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPipelineStateError returns new OptPipelineStateError with value set to v.
func NewOptPipelineStateError(v PipelineStateError) OptPipelineStateError {
	return OptPipelineStateError{
		Value: v,
		Set:   true,
	}
}

// OptPipelineStateError is optional PipelineStateError.
type OptPipelineStateError struct {
	Value PipelineStateError
	Set   bool
}

// IsSet returns true if OptPipelineStateError was set.
func (o OptPipelineStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPipelineStateError) Reset() {
	var v PipelineStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPipelineStateError) SetTo(v PipelineStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPipelineStateError) Get() (v PipelineStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPipelineStateError) Or(d PipelineStateError) PipelineStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolIncludes returns new OptPoolIncludes with value set to v.
func NewOptPoolIncludes(v PoolIncludes) OptPoolIncludes {
	return OptPoolIncludes{
		Value: v,
		Set:   true,
	}
}

// OptPoolIncludes is optional PoolIncludes.
type OptPoolIncludes struct {
	Value PoolIncludes
	Set   bool
}

// IsSet returns true if OptPoolIncludes was set.
func (o OptPoolIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolIncludes) Reset() {
	var v PoolIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolIncludes) SetTo(v PoolIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolIncludes) Get() (v PoolIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolIncludes) Or(d PoolIncludes) PoolIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoolStateError returns new OptPoolStateError with value set to v.
func NewOptPoolStateError(v PoolStateError) OptPoolStateError {
	return OptPoolStateError{
		Value: v,
		Set:   true,
	}
}

// OptPoolStateError is optional PoolStateError.
type OptPoolStateError struct {
	Value PoolStateError
	Set   bool
}

// IsSet returns true if OptPoolStateError was set.
func (o OptPoolStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoolStateError) Reset() {
	var v PoolStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoolStateError) SetTo(v PoolStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoolStateError) Get() (v PoolStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoolStateError) Or(d PoolStateError) PoolStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPromoCodeInclude returns new OptPromoCodeInclude with value set to v.
func NewOptPromoCodeInclude(v PromoCodeInclude) OptPromoCodeInclude {
	return OptPromoCodeInclude{
		Value: v,
		Set:   true,
	}
}

// OptPromoCodeInclude is optional PromoCodeInclude.
type OptPromoCodeInclude struct {
	Value PromoCodeInclude
	Set   bool
}

// IsSet returns true if OptPromoCodeInclude was set.
func (o OptPromoCodeInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPromoCodeInclude) Reset() {
	var v PromoCodeInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPromoCodeInclude) SetTo(v PromoCodeInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPromoCodeInclude) Get() (v PromoCodeInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPromoCodeInclude) Or(d PromoCodeInclude) PromoCodeInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPromoCodeStateError returns new OptPromoCodeStateError with value set to v.
func NewOptPromoCodeStateError(v PromoCodeStateError) OptPromoCodeStateError {
	return OptPromoCodeStateError{
		Value: v,
		Set:   true,
	}
}

// OptPromoCodeStateError is optional PromoCodeStateError.
type OptPromoCodeStateError struct {
	Value PromoCodeStateError
	Set   bool
}

// IsSet returns true if OptPromoCodeStateError was set.
func (o OptPromoCodeStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPromoCodeStateError) Reset() {
	var v PromoCodeStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPromoCodeStateError) SetTo(v PromoCodeStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPromoCodeStateError) Get() (v PromoCodeStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPromoCodeStateError) Or(d PromoCodeStateError) PromoCodeStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProviderServerSpecAvailabilityZones returns new OptProviderServerSpecAvailabilityZones with value set to v.
func NewOptProviderServerSpecAvailabilityZones(v ProviderServerSpecAvailabilityZones) OptProviderServerSpecAvailabilityZones {
	return OptProviderServerSpecAvailabilityZones{
		Value: v,
		Set:   true,
	}
}

// OptProviderServerSpecAvailabilityZones is optional ProviderServerSpecAvailabilityZones.
type OptProviderServerSpecAvailabilityZones struct {
	Value ProviderServerSpecAvailabilityZones
	Set   bool
}

// IsSet returns true if OptProviderServerSpecAvailabilityZones was set.
func (o OptProviderServerSpecAvailabilityZones) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProviderServerSpecAvailabilityZones) Reset() {
	var v ProviderServerSpecAvailabilityZones
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProviderServerSpecAvailabilityZones) SetTo(v ProviderServerSpecAvailabilityZones) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProviderServerSpecAvailabilityZones) Get() (v ProviderServerSpecAvailabilityZones, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProviderServerSpecAvailabilityZones) Or(d ProviderServerSpecAvailabilityZones) ProviderServerSpecAvailabilityZones {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicAccountEvents returns new OptPublicAccountEvents with value set to v.
func NewOptPublicAccountEvents(v PublicAccountEvents) OptPublicAccountEvents {
	return OptPublicAccountEvents{
		Value: v,
		Set:   true,
	}
}

// OptPublicAccountEvents is optional PublicAccountEvents.
type OptPublicAccountEvents struct {
	Value PublicAccountEvents
	Set   bool
}

// IsSet returns true if OptPublicAccountEvents was set.
func (o OptPublicAccountEvents) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicAccountEvents) Reset() {
	var v PublicAccountEvents
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicAccountEvents) SetTo(v PublicAccountEvents) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicAccountEvents) Get() (v PublicAccountEvents, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicAccountEvents) Or(d PublicAccountEvents) PublicAccountEvents {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecord returns new OptRecord with value set to v.
func NewOptRecord(v Record) OptRecord {
	return OptRecord{
		Value: v,
		Set:   true,
	}
}

// OptRecord is optional Record.
type OptRecord struct {
	Value Record
	Set   bool
}

// IsSet returns true if OptRecord was set.
func (o OptRecord) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecord) Reset() {
	var v Record
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecord) SetTo(v Record) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecord) Get() (v Record, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecord) Or(d Record) Record {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordIncludes returns new OptRecordIncludes with value set to v.
func NewOptRecordIncludes(v RecordIncludes) OptRecordIncludes {
	return OptRecordIncludes{
		Value: v,
		Set:   true,
	}
}

// OptRecordIncludes is optional RecordIncludes.
type OptRecordIncludes struct {
	Value RecordIncludes
	Set   bool
}

// IsSet returns true if OptRecordIncludes was set.
func (o OptRecordIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordIncludes) Reset() {
	var v RecordIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordIncludes) SetTo(v RecordIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordIncludes) Get() (v RecordIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordIncludes) Or(d RecordIncludes) RecordIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordStateError returns new OptRecordStateError with value set to v.
func NewOptRecordStateError(v RecordStateError) OptRecordStateError {
	return OptRecordStateError{
		Value: v,
		Set:   true,
	}
}

// OptRecordStateError is optional RecordStateError.
type OptRecordStateError struct {
	Value RecordStateError
	Set   bool
}

// IsSet returns true if OptRecordStateError was set.
func (o OptRecordStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordStateError) Reset() {
	var v RecordStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordStateError) SetTo(v RecordStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordStateError) Get() (v RecordStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordStateError) Or(d RecordStateError) RecordStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesA returns new OptRecordTypesA with value set to v.
func NewOptRecordTypesA(v RecordTypesA) OptRecordTypesA {
	return OptRecordTypesA{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesA is optional RecordTypesA.
type OptRecordTypesA struct {
	Value RecordTypesA
	Set   bool
}

// IsSet returns true if OptRecordTypesA was set.
func (o OptRecordTypesA) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesA) Reset() {
	var v RecordTypesA
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesA) SetTo(v RecordTypesA) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesA) Get() (v RecordTypesA, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesA) Or(d RecordTypesA) RecordTypesA {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesAaaa returns new OptRecordTypesAaaa with value set to v.
func NewOptRecordTypesAaaa(v RecordTypesAaaa) OptRecordTypesAaaa {
	return OptRecordTypesAaaa{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesAaaa is optional RecordTypesAaaa.
type OptRecordTypesAaaa struct {
	Value RecordTypesAaaa
	Set   bool
}

// IsSet returns true if OptRecordTypesAaaa was set.
func (o OptRecordTypesAaaa) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesAaaa) Reset() {
	var v RecordTypesAaaa
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesAaaa) SetTo(v RecordTypesAaaa) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesAaaa) Get() (v RecordTypesAaaa, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesAaaa) Or(d RecordTypesAaaa) RecordTypesAaaa {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesAlias returns new OptRecordTypesAlias with value set to v.
func NewOptRecordTypesAlias(v RecordTypesAlias) OptRecordTypesAlias {
	return OptRecordTypesAlias{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesAlias is optional RecordTypesAlias.
type OptRecordTypesAlias struct {
	Value RecordTypesAlias
	Set   bool
}

// IsSet returns true if OptRecordTypesAlias was set.
func (o OptRecordTypesAlias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesAlias) Reset() {
	var v RecordTypesAlias
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesAlias) SetTo(v RecordTypesAlias) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesAlias) Get() (v RecordTypesAlias, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesAlias) Or(d RecordTypesAlias) RecordTypesAlias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesCaa returns new OptRecordTypesCaa with value set to v.
func NewOptRecordTypesCaa(v RecordTypesCaa) OptRecordTypesCaa {
	return OptRecordTypesCaa{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesCaa is optional RecordTypesCaa.
type OptRecordTypesCaa struct {
	Value RecordTypesCaa
	Set   bool
}

// IsSet returns true if OptRecordTypesCaa was set.
func (o OptRecordTypesCaa) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesCaa) Reset() {
	var v RecordTypesCaa
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesCaa) SetTo(v RecordTypesCaa) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesCaa) Get() (v RecordTypesCaa, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesCaa) Or(d RecordTypesCaa) RecordTypesCaa {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesCname returns new OptRecordTypesCname with value set to v.
func NewOptRecordTypesCname(v RecordTypesCname) OptRecordTypesCname {
	return OptRecordTypesCname{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesCname is optional RecordTypesCname.
type OptRecordTypesCname struct {
	Value RecordTypesCname
	Set   bool
}

// IsSet returns true if OptRecordTypesCname was set.
func (o OptRecordTypesCname) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesCname) Reset() {
	var v RecordTypesCname
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesCname) SetTo(v RecordTypesCname) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesCname) Get() (v RecordTypesCname, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesCname) Or(d RecordTypesCname) RecordTypesCname {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesLinked returns new OptRecordTypesLinked with value set to v.
func NewOptRecordTypesLinked(v RecordTypesLinked) OptRecordTypesLinked {
	return OptRecordTypesLinked{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesLinked is optional RecordTypesLinked.
type OptRecordTypesLinked struct {
	Value RecordTypesLinked
	Set   bool
}

// IsSet returns true if OptRecordTypesLinked was set.
func (o OptRecordTypesLinked) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesLinked) Reset() {
	var v RecordTypesLinked
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesLinked) SetTo(v RecordTypesLinked) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesLinked) Get() (v RecordTypesLinked, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesLinked) Or(d RecordTypesLinked) RecordTypesLinked {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesMx returns new OptRecordTypesMx with value set to v.
func NewOptRecordTypesMx(v RecordTypesMx) OptRecordTypesMx {
	return OptRecordTypesMx{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesMx is optional RecordTypesMx.
type OptRecordTypesMx struct {
	Value RecordTypesMx
	Set   bool
}

// IsSet returns true if OptRecordTypesMx was set.
func (o OptRecordTypesMx) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesMx) Reset() {
	var v RecordTypesMx
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesMx) SetTo(v RecordTypesMx) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesMx) Get() (v RecordTypesMx, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesMx) Or(d RecordTypesMx) RecordTypesMx {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesNs returns new OptRecordTypesNs with value set to v.
func NewOptRecordTypesNs(v RecordTypesNs) OptRecordTypesNs {
	return OptRecordTypesNs{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesNs is optional RecordTypesNs.
type OptRecordTypesNs struct {
	Value RecordTypesNs
	Set   bool
}

// IsSet returns true if OptRecordTypesNs was set.
func (o OptRecordTypesNs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesNs) Reset() {
	var v RecordTypesNs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesNs) SetTo(v RecordTypesNs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesNs) Get() (v RecordTypesNs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesNs) Or(d RecordTypesNs) RecordTypesNs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesSrv returns new OptRecordTypesSrv with value set to v.
func NewOptRecordTypesSrv(v RecordTypesSrv) OptRecordTypesSrv {
	return OptRecordTypesSrv{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesSrv is optional RecordTypesSrv.
type OptRecordTypesSrv struct {
	Value RecordTypesSrv
	Set   bool
}

// IsSet returns true if OptRecordTypesSrv was set.
func (o OptRecordTypesSrv) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesSrv) Reset() {
	var v RecordTypesSrv
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesSrv) SetTo(v RecordTypesSrv) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesSrv) Get() (v RecordTypesSrv, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesSrv) Or(d RecordTypesSrv) RecordTypesSrv {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecordTypesTxt returns new OptRecordTypesTxt with value set to v.
func NewOptRecordTypesTxt(v RecordTypesTxt) OptRecordTypesTxt {
	return OptRecordTypesTxt{
		Value: v,
		Set:   true,
	}
}

// OptRecordTypesTxt is optional RecordTypesTxt.
type OptRecordTypesTxt struct {
	Value RecordTypesTxt
	Set   bool
}

// IsSet returns true if OptRecordTypesTxt was set.
func (o OptRecordTypesTxt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecordTypesTxt) Reset() {
	var v RecordTypesTxt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecordTypesTxt) SetTo(v RecordTypesTxt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecordTypesTxt) Get() (v RecordTypesTxt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecordTypesTxt) Or(d RecordTypesTxt) RecordTypesTxt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecoverTwoFactorAuthReq returns new OptRecoverTwoFactorAuthReq with value set to v.
func NewOptRecoverTwoFactorAuthReq(v RecoverTwoFactorAuthReq) OptRecoverTwoFactorAuthReq {
	return OptRecoverTwoFactorAuthReq{
		Value: v,
		Set:   true,
	}
}

// OptRecoverTwoFactorAuthReq is optional RecoverTwoFactorAuthReq.
type OptRecoverTwoFactorAuthReq struct {
	Value RecoverTwoFactorAuthReq
	Set   bool
}

// IsSet returns true if OptRecoverTwoFactorAuthReq was set.
func (o OptRecoverTwoFactorAuthReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecoverTwoFactorAuthReq) Reset() {
	var v RecoverTwoFactorAuthReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecoverTwoFactorAuthReq) SetTo(v RecoverTwoFactorAuthReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecoverTwoFactorAuthReq) Get() (v RecoverTwoFactorAuthReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecoverTwoFactorAuthReq) Or(d RecoverTwoFactorAuthReq) RecoverTwoFactorAuthReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResetPasswordReq returns new OptResetPasswordReq with value set to v.
func NewOptResetPasswordReq(v ResetPasswordReq) OptResetPasswordReq {
	return OptResetPasswordReq{
		Value: v,
		Set:   true,
	}
}

// OptResetPasswordReq is optional ResetPasswordReq.
type OptResetPasswordReq struct {
	Value ResetPasswordReq
	Set   bool
}

// IsSet returns true if OptResetPasswordReq was set.
func (o OptResetPasswordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResetPasswordReq) Reset() {
	var v ResetPasswordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResetPasswordReq) SetTo(v ResetPasswordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResetPasswordReq) Get() (v ResetPasswordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResetPasswordReq) Or(d ResetPasswordReq) ResetPasswordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRole returns new OptRole with value set to v.
func NewOptRole(v Role) OptRole {
	return OptRole{
		Value: v,
		Set:   true,
	}
}

// OptRole is optional Role.
type OptRole struct {
	Value Role
	Set   bool
}

// IsSet returns true if OptRole was set.
func (o OptRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRole) Reset() {
	var v Role
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRole) SetTo(v Role) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRole) Get() (v Role, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRole) Or(d Role) Role {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoleExtra returns new OptRoleExtra with value set to v.
func NewOptRoleExtra(v RoleExtra) OptRoleExtra {
	return OptRoleExtra{
		Value: v,
		Set:   true,
	}
}

// OptRoleExtra is optional RoleExtra.
type OptRoleExtra struct {
	Value RoleExtra
	Set   bool
}

// IsSet returns true if OptRoleExtra was set.
func (o OptRoleExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoleExtra) Reset() {
	var v RoleExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoleExtra) SetTo(v RoleExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoleExtra) Get() (v RoleExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoleExtra) Or(d RoleExtra) RoleExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoleStateError returns new OptRoleStateError with value set to v.
func NewOptRoleStateError(v RoleStateError) OptRoleStateError {
	return OptRoleStateError{
		Value: v,
		Set:   true,
	}
}

// OptRoleStateError is optional RoleStateError.
type OptRoleStateError struct {
	Value RoleStateError
	Set   bool
}

// IsSet returns true if OptRoleStateError was set.
func (o OptRoleStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoleStateError) Reset() {
	var v RoleStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoleStateError) SetTo(v RoleStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoleStateError) Get() (v RoleStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoleStateError) Or(d RoleStateError) RoleStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRunStateError returns new OptRunStateError with value set to v.
func NewOptRunStateError(v RunStateError) OptRunStateError {
	return OptRunStateError{
		Value: v,
		Set:   true,
	}
}

// OptRunStateError is optional RunStateError.
type OptRunStateError struct {
	Value RunStateError
	Set   bool
}

// IsSet returns true if OptRunStateError was set.
func (o OptRunStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRunStateError) Reset() {
	var v RunStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRunStateError) SetTo(v RunStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRunStateError) Get() (v RunStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRunStateError) Or(d RunStateError) RunStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScopedVariableAccess returns new OptScopedVariableAccess with value set to v.
func NewOptScopedVariableAccess(v ScopedVariableAccess) OptScopedVariableAccess {
	return OptScopedVariableAccess{
		Value: v,
		Set:   true,
	}
}

// OptScopedVariableAccess is optional ScopedVariableAccess.
type OptScopedVariableAccess struct {
	Value ScopedVariableAccess
	Set   bool
}

// IsSet returns true if OptScopedVariableAccess was set.
func (o OptScopedVariableAccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScopedVariableAccess) Reset() {
	var v ScopedVariableAccess
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScopedVariableAccess) SetTo(v ScopedVariableAccess) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScopedVariableAccess) Get() (v ScopedVariableAccess, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScopedVariableAccess) Or(d ScopedVariableAccess) ScopedVariableAccess {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScopedVariableScope returns new OptScopedVariableScope with value set to v.
func NewOptScopedVariableScope(v ScopedVariableScope) OptScopedVariableScope {
	return OptScopedVariableScope{
		Value: v,
		Set:   true,
	}
}

// OptScopedVariableScope is optional ScopedVariableScope.
type OptScopedVariableScope struct {
	Value ScopedVariableScope
	Set   bool
}

// IsSet returns true if OptScopedVariableScope was set.
func (o OptScopedVariableScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScopedVariableScope) Reset() {
	var v ScopedVariableScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScopedVariableScope) SetTo(v ScopedVariableScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScopedVariableScope) Get() (v ScopedVariableScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScopedVariableScope) Or(d ScopedVariableScope) ScopedVariableScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScopedVariableStateError returns new OptScopedVariableStateError with value set to v.
func NewOptScopedVariableStateError(v ScopedVariableStateError) OptScopedVariableStateError {
	return OptScopedVariableStateError{
		Value: v,
		Set:   true,
	}
}

// OptScopedVariableStateError is optional ScopedVariableStateError.
type OptScopedVariableStateError struct {
	Value ScopedVariableStateError
	Set   bool
}

// IsSet returns true if OptScopedVariableStateError was set.
func (o OptScopedVariableStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScopedVariableStateError) Reset() {
	var v ScopedVariableStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScopedVariableStateError) SetTo(v ScopedVariableStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScopedVariableStateError) Get() (v ScopedVariableStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScopedVariableStateError) Or(d ScopedVariableStateError) ScopedVariableStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSeccompRuleCapabilities returns new OptSeccompRuleCapabilities with value set to v.
func NewOptSeccompRuleCapabilities(v SeccompRuleCapabilities) OptSeccompRuleCapabilities {
	return OptSeccompRuleCapabilities{
		Value: v,
		Set:   true,
	}
}

// OptSeccompRuleCapabilities is optional SeccompRuleCapabilities.
type OptSeccompRuleCapabilities struct {
	Value SeccompRuleCapabilities
	Set   bool
}

// IsSet returns true if OptSeccompRuleCapabilities was set.
func (o OptSeccompRuleCapabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSeccompRuleCapabilities) Reset() {
	var v SeccompRuleCapabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSeccompRuleCapabilities) SetTo(v SeccompRuleCapabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSeccompRuleCapabilities) Get() (v SeccompRuleCapabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSeccompRuleCapabilities) Or(d SeccompRuleCapabilities) SeccompRuleCapabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSeccompRuleSyscall returns new OptSeccompRuleSyscall with value set to v.
func NewOptSeccompRuleSyscall(v SeccompRuleSyscall) OptSeccompRuleSyscall {
	return OptSeccompRuleSyscall{
		Value: v,
		Set:   true,
	}
}

// OptSeccompRuleSyscall is optional SeccompRuleSyscall.
type OptSeccompRuleSyscall struct {
	Value SeccompRuleSyscall
	Set   bool
}

// IsSet returns true if OptSeccompRuleSyscall was set.
func (o OptSeccompRuleSyscall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSeccompRuleSyscall) Reset() {
	var v SeccompRuleSyscall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSeccompRuleSyscall) SetTo(v SeccompRuleSyscall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSeccompRuleSyscall) Get() (v SeccompRuleSyscall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSeccompRuleSyscall) Or(d SeccompRuleSyscall) SeccompRuleSyscall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSecuritySnapshotIncidentBreakdown returns new OptSecuritySnapshotIncidentBreakdown with value set to v.
func NewOptSecuritySnapshotIncidentBreakdown(v SecuritySnapshotIncidentBreakdown) OptSecuritySnapshotIncidentBreakdown {
	return OptSecuritySnapshotIncidentBreakdown{
		Value: v,
		Set:   true,
	}
}

// OptSecuritySnapshotIncidentBreakdown is optional SecuritySnapshotIncidentBreakdown.
type OptSecuritySnapshotIncidentBreakdown struct {
	Value SecuritySnapshotIncidentBreakdown
	Set   bool
}

// IsSet returns true if OptSecuritySnapshotIncidentBreakdown was set.
func (o OptSecuritySnapshotIncidentBreakdown) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSecuritySnapshotIncidentBreakdown) Reset() {
	var v SecuritySnapshotIncidentBreakdown
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSecuritySnapshotIncidentBreakdown) SetTo(v SecuritySnapshotIncidentBreakdown) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSecuritySnapshotIncidentBreakdown) Get() (v SecuritySnapshotIncidentBreakdown, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSecuritySnapshotIncidentBreakdown) Or(d SecuritySnapshotIncidentBreakdown) SecuritySnapshotIncidentBreakdown {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerIncludes returns new OptServerIncludes with value set to v.
func NewOptServerIncludes(v ServerIncludes) OptServerIncludes {
	return OptServerIncludes{
		Value: v,
		Set:   true,
	}
}

// OptServerIncludes is optional ServerIncludes.
type OptServerIncludes struct {
	Value ServerIncludes
	Set   bool
}

// IsSet returns true if OptServerIncludes was set.
func (o OptServerIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerIncludes) Reset() {
	var v ServerIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerIncludes) SetTo(v ServerIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerIncludes) Get() (v ServerIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerIncludes) Or(d ServerIncludes) ServerIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerMeta returns new OptServerMeta with value set to v.
func NewOptServerMeta(v ServerMeta) OptServerMeta {
	return OptServerMeta{
		Value: v,
		Set:   true,
	}
}

// OptServerMeta is optional ServerMeta.
type OptServerMeta struct {
	Value ServerMeta
	Set   bool
}

// IsSet returns true if OptServerMeta was set.
func (o OptServerMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerMeta) Reset() {
	var v ServerMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerMeta) SetTo(v ServerMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerMeta) Get() (v ServerMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerMeta) Or(d ServerMeta) ServerMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerMetaNode returns new OptServerMetaNode with value set to v.
func NewOptServerMetaNode(v ServerMetaNode) OptServerMetaNode {
	return OptServerMetaNode{
		Value: v,
		Set:   true,
	}
}

// OptServerMetaNode is optional ServerMetaNode.
type OptServerMetaNode struct {
	Value ServerMetaNode
	Set   bool
}

// IsSet returns true if OptServerMetaNode was set.
func (o OptServerMetaNode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerMetaNode) Reset() {
	var v ServerMetaNode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerMetaNode) SetTo(v ServerMetaNode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerMetaNode) Get() (v ServerMetaNode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerMetaNode) Or(d ServerMetaNode) ServerMetaNode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerModelIncludes returns new OptServerModelIncludes with value set to v.
func NewOptServerModelIncludes(v ServerModelIncludes) OptServerModelIncludes {
	return OptServerModelIncludes{
		Value: v,
		Set:   true,
	}
}

// OptServerModelIncludes is optional ServerModelIncludes.
type OptServerModelIncludes struct {
	Value ServerModelIncludes
	Set   bool
}

// IsSet returns true if OptServerModelIncludes was set.
func (o OptServerModelIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerModelIncludes) Reset() {
	var v ServerModelIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerModelIncludes) SetTo(v ServerModelIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerModelIncludes) Get() (v ServerModelIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerModelIncludes) Or(d ServerModelIncludes) ServerModelIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerModelsIncludes returns new OptServerModelsIncludes with value set to v.
func NewOptServerModelsIncludes(v ServerModelsIncludes) OptServerModelsIncludes {
	return OptServerModelsIncludes{
		Value: v,
		Set:   true,
	}
}

// OptServerModelsIncludes is optional ServerModelsIncludes.
type OptServerModelsIncludes struct {
	Value ServerModelsIncludes
	Set   bool
}

// IsSet returns true if OptServerModelsIncludes was set.
func (o OptServerModelsIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerModelsIncludes) Reset() {
	var v ServerModelsIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerModelsIncludes) SetTo(v ServerModelsIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerModelsIncludes) Get() (v ServerModelsIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerModelsIncludes) Or(d ServerModelsIncludes) ServerModelsIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerProviderExtra returns new OptServerProviderExtra with value set to v.
func NewOptServerProviderExtra(v ServerProviderExtra) OptServerProviderExtra {
	return OptServerProviderExtra{
		Value: v,
		Set:   true,
	}
}

// OptServerProviderExtra is optional ServerProviderExtra.
type OptServerProviderExtra struct {
	Value ServerProviderExtra
	Set   bool
}

// IsSet returns true if OptServerProviderExtra was set.
func (o OptServerProviderExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerProviderExtra) Reset() {
	var v ServerProviderExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerProviderExtra) SetTo(v ServerProviderExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerProviderExtra) Get() (v ServerProviderExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerProviderExtra) Or(d ServerProviderExtra) ServerProviderExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerProviderProvisionOptions returns new OptServerProviderProvisionOptions with value set to v.
func NewOptServerProviderProvisionOptions(v ServerProviderProvisionOptions) OptServerProviderProvisionOptions {
	return OptServerProviderProvisionOptions{
		Value: v,
		Set:   true,
	}
}

// OptServerProviderProvisionOptions is optional ServerProviderProvisionOptions.
type OptServerProviderProvisionOptions struct {
	Value ServerProviderProvisionOptions
	Set   bool
}

// IsSet returns true if OptServerProviderProvisionOptions was set.
func (o OptServerProviderProvisionOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerProviderProvisionOptions) Reset() {
	var v ServerProviderProvisionOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerProviderProvisionOptions) SetTo(v ServerProviderProvisionOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerProviderProvisionOptions) Get() (v ServerProviderProvisionOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerProviderProvisionOptions) Or(d ServerProviderProvisionOptions) ServerProviderProvisionOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStateError returns new OptServerStateError with value set to v.
func NewOptServerStateError(v ServerStateError) OptServerStateError {
	return OptServerStateError{
		Value: v,
		Set:   true,
	}
}

// OptServerStateError is optional ServerStateError.
type OptServerStateError struct {
	Value ServerStateError
	Set   bool
}

// IsSet returns true if OptServerStateError was set.
func (o OptServerStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStateError) Reset() {
	var v ServerStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStateError) SetTo(v ServerStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStateError) Get() (v ServerStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStateError) Or(d ServerStateError) ServerStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStatsCpuUsage returns new OptServerStatsCpuUsage with value set to v.
func NewOptServerStatsCpuUsage(v ServerStatsCpuUsage) OptServerStatsCpuUsage {
	return OptServerStatsCpuUsage{
		Value: v,
		Set:   true,
	}
}

// OptServerStatsCpuUsage is optional ServerStatsCpuUsage.
type OptServerStatsCpuUsage struct {
	Value ServerStatsCpuUsage
	Set   bool
}

// IsSet returns true if OptServerStatsCpuUsage was set.
func (o OptServerStatsCpuUsage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStatsCpuUsage) Reset() {
	var v ServerStatsCpuUsage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStatsCpuUsage) SetTo(v ServerStatsCpuUsage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStatsCpuUsage) Get() (v ServerStatsCpuUsage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStatsCpuUsage) Or(d ServerStatsCpuUsage) ServerStatsCpuUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStatsCpuUsageTelemetry returns new OptServerStatsCpuUsageTelemetry with value set to v.
func NewOptServerStatsCpuUsageTelemetry(v ServerStatsCpuUsageTelemetry) OptServerStatsCpuUsageTelemetry {
	return OptServerStatsCpuUsageTelemetry{
		Value: v,
		Set:   true,
	}
}

// OptServerStatsCpuUsageTelemetry is optional ServerStatsCpuUsageTelemetry.
type OptServerStatsCpuUsageTelemetry struct {
	Value ServerStatsCpuUsageTelemetry
	Set   bool
}

// IsSet returns true if OptServerStatsCpuUsageTelemetry was set.
func (o OptServerStatsCpuUsageTelemetry) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStatsCpuUsageTelemetry) Reset() {
	var v ServerStatsCpuUsageTelemetry
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStatsCpuUsageTelemetry) SetTo(v ServerStatsCpuUsageTelemetry) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStatsCpuUsageTelemetry) Get() (v ServerStatsCpuUsageTelemetry, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStatsCpuUsageTelemetry) Or(d ServerStatsCpuUsageTelemetry) ServerStatsCpuUsageTelemetry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServerStatsNetworkInterfaces returns new OptServerStatsNetworkInterfaces with value set to v.
func NewOptServerStatsNetworkInterfaces(v ServerStatsNetworkInterfaces) OptServerStatsNetworkInterfaces {
	return OptServerStatsNetworkInterfaces{
		Value: v,
		Set:   true,
	}
}

// OptServerStatsNetworkInterfaces is optional ServerStatsNetworkInterfaces.
type OptServerStatsNetworkInterfaces struct {
	Value ServerStatsNetworkInterfaces
	Set   bool
}

// IsSet returns true if OptServerStatsNetworkInterfaces was set.
func (o OptServerStatsNetworkInterfaces) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServerStatsNetworkInterfaces) Reset() {
	var v ServerStatsNetworkInterfaces
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServerStatsNetworkInterfaces) SetTo(v ServerStatsNetworkInterfaces) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServerStatsNetworkInterfaces) Get() (v ServerStatsNetworkInterfaces, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServerStatsNetworkInterfaces) Or(d ServerStatsNetworkInterfaces) ServerStatsNetworkInterfaces {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServersIncludes returns new OptServersIncludes with value set to v.
func NewOptServersIncludes(v ServersIncludes) OptServersIncludes {
	return OptServersIncludes{
		Value: v,
		Set:   true,
	}
}

// OptServersIncludes is optional ServersIncludes.
type OptServersIncludes struct {
	Value ServersIncludes
	Set   bool
}

// IsSet returns true if OptServersIncludes was set.
func (o OptServersIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServersIncludes) Reset() {
	var v ServersIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServersIncludes) SetTo(v ServersIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServersIncludes) Get() (v ServersIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServersIncludes) Or(d ServersIncludes) ServersIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceContainerIdentifier returns new OptServiceContainerIdentifier with value set to v.
func NewOptServiceContainerIdentifier(v ServiceContainerIdentifier) OptServiceContainerIdentifier {
	return OptServiceContainerIdentifier{
		Value: v,
		Set:   true,
	}
}

// OptServiceContainerIdentifier is optional ServiceContainerIdentifier.
type OptServiceContainerIdentifier struct {
	Value ServiceContainerIdentifier
	Set   bool
}

// IsSet returns true if OptServiceContainerIdentifier was set.
func (o OptServiceContainerIdentifier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceContainerIdentifier) Reset() {
	var v ServiceContainerIdentifier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceContainerIdentifier) SetTo(v ServiceContainerIdentifier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceContainerIdentifier) Get() (v ServiceContainerIdentifier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceContainerIdentifier) Or(d ServiceContainerIdentifier) ServiceContainerIdentifier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceItemSupport returns new OptServiceItemSupport with value set to v.
func NewOptServiceItemSupport(v ServiceItemSupport) OptServiceItemSupport {
	return OptServiceItemSupport{
		Value: v,
		Set:   true,
	}
}

// OptServiceItemSupport is optional ServiceItemSupport.
type OptServiceItemSupport struct {
	Value ServiceItemSupport
	Set   bool
}

// IsSet returns true if OptServiceItemSupport was set.
func (o OptServiceItemSupport) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceItemSupport) Reset() {
	var v ServiceItemSupport
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceItemSupport) SetTo(v ServiceItemSupport) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceItemSupport) Get() (v ServiceItemSupport, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceItemSupport) Or(d ServiceItemSupport) ServiceItemSupport {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceItemTier returns new OptServiceItemTier with value set to v.
func NewOptServiceItemTier(v ServiceItemTier) OptServiceItemTier {
	return OptServiceItemTier{
		Value: v,
		Set:   true,
	}
}

// OptServiceItemTier is optional ServiceItemTier.
type OptServiceItemTier struct {
	Value ServiceItemTier
	Set   bool
}

// IsSet returns true if OptServiceItemTier was set.
func (o OptServiceItemTier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceItemTier) Reset() {
	var v ServiceItemTier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceItemTier) SetTo(v ServiceItemTier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceItemTier) Get() (v ServiceItemTier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceItemTier) Or(d ServiceItemTier) ServiceItemTier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSleepStepOptions returns new OptSleepStepOptions with value set to v.
func NewOptSleepStepOptions(v SleepStepOptions) OptSleepStepOptions {
	return OptSleepStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptSleepStepOptions is optional SleepStepOptions.
type OptSleepStepOptions struct {
	Value SleepStepOptions
	Set   bool
}

// IsSet returns true if OptSleepStepOptions was set.
func (o OptSleepStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSleepStepOptions) Reset() {
	var v SleepStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSleepStepOptions) SetTo(v SleepStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSleepStepOptions) Get() (v SleepStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSleepStepOptions) Or(d SleepStepOptions) SleepStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSourceIncludes returns new OptSourceIncludes with value set to v.
func NewOptSourceIncludes(v SourceIncludes) OptSourceIncludes {
	return OptSourceIncludes{
		Value: v,
		Set:   true,
	}
}

// OptSourceIncludes is optional SourceIncludes.
type OptSourceIncludes struct {
	Value SourceIncludes
	Set   bool
}

// IsSet returns true if OptSourceIncludes was set.
func (o OptSourceIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSourceIncludes) Reset() {
	var v SourceIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSourceIncludes) SetTo(v SourceIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSourceIncludes) Get() (v SourceIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSourceIncludes) Or(d SourceIncludes) SourceIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildAbout returns new OptStackBuildAbout with value set to v.
func NewOptStackBuildAbout(v StackBuildAbout) OptStackBuildAbout {
	return OptStackBuildAbout{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildAbout is optional StackBuildAbout.
type OptStackBuildAbout struct {
	Value StackBuildAbout
	Set   bool
}

// IsSet returns true if OptStackBuildAbout was set.
func (o OptStackBuildAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildAbout) Reset() {
	var v StackBuildAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildAbout) SetTo(v StackBuildAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildAbout) Get() (v StackBuildAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildAbout) Or(d StackBuildAbout) StackBuildAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildCreateStepDetailsInstructionsGit returns new OptStackBuildCreateStepDetailsInstructionsGit with value set to v.
func NewOptStackBuildCreateStepDetailsInstructionsGit(v StackBuildCreateStepDetailsInstructionsGit) OptStackBuildCreateStepDetailsInstructionsGit {
	return OptStackBuildCreateStepDetailsInstructionsGit{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildCreateStepDetailsInstructionsGit is optional StackBuildCreateStepDetailsInstructionsGit.
type OptStackBuildCreateStepDetailsInstructionsGit struct {
	Value StackBuildCreateStepDetailsInstructionsGit
	Set   bool
}

// IsSet returns true if OptStackBuildCreateStepDetailsInstructionsGit was set.
func (o OptStackBuildCreateStepDetailsInstructionsGit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildCreateStepDetailsInstructionsGit) Reset() {
	var v StackBuildCreateStepDetailsInstructionsGit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildCreateStepDetailsInstructionsGit) SetTo(v StackBuildCreateStepDetailsInstructionsGit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildCreateStepDetailsInstructionsGit) Get() (v StackBuildCreateStepDetailsInstructionsGit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildCreateStepDetailsInstructionsGit) Or(d StackBuildCreateStepDetailsInstructionsGit) StackBuildCreateStepDetailsInstructionsGit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildCreateStepDetailsInstructionsVariables returns new OptStackBuildCreateStepDetailsInstructionsVariables with value set to v.
func NewOptStackBuildCreateStepDetailsInstructionsVariables(v StackBuildCreateStepDetailsInstructionsVariables) OptStackBuildCreateStepDetailsInstructionsVariables {
	return OptStackBuildCreateStepDetailsInstructionsVariables{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildCreateStepDetailsInstructionsVariables is optional StackBuildCreateStepDetailsInstructionsVariables.
type OptStackBuildCreateStepDetailsInstructionsVariables struct {
	Value StackBuildCreateStepDetailsInstructionsVariables
	Set   bool
}

// IsSet returns true if OptStackBuildCreateStepDetailsInstructionsVariables was set.
func (o OptStackBuildCreateStepDetailsInstructionsVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildCreateStepDetailsInstructionsVariables) Reset() {
	var v StackBuildCreateStepDetailsInstructionsVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildCreateStepDetailsInstructionsVariables) SetTo(v StackBuildCreateStepDetailsInstructionsVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildCreateStepDetailsInstructionsVariables) Get() (v StackBuildCreateStepDetailsInstructionsVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildCreateStepDetailsInstructionsVariables) Or(d StackBuildCreateStepDetailsInstructionsVariables) StackBuildCreateStepDetailsInstructionsVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildCreateStepOptions returns new OptStackBuildCreateStepOptions with value set to v.
func NewOptStackBuildCreateStepOptions(v StackBuildCreateStepOptions) OptStackBuildCreateStepOptions {
	return OptStackBuildCreateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildCreateStepOptions is optional StackBuildCreateStepOptions.
type OptStackBuildCreateStepOptions struct {
	Value StackBuildCreateStepOptions
	Set   bool
}

// IsSet returns true if OptStackBuildCreateStepOptions was set.
func (o OptStackBuildCreateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildCreateStepOptions) Reset() {
	var v StackBuildCreateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildCreateStepOptions) SetTo(v StackBuildCreateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildCreateStepOptions) Get() (v StackBuildCreateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildCreateStepOptions) Or(d StackBuildCreateStepOptions) StackBuildCreateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildDeployStepOptions returns new OptStackBuildDeployStepOptions with value set to v.
func NewOptStackBuildDeployStepOptions(v StackBuildDeployStepOptions) OptStackBuildDeployStepOptions {
	return OptStackBuildDeployStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildDeployStepOptions is optional StackBuildDeployStepOptions.
type OptStackBuildDeployStepOptions struct {
	Value StackBuildDeployStepOptions
	Set   bool
}

// IsSet returns true if OptStackBuildDeployStepOptions was set.
func (o OptStackBuildDeployStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildDeployStepOptions) Reset() {
	var v StackBuildDeployStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildDeployStepOptions) SetTo(v StackBuildDeployStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildDeployStepOptions) Get() (v StackBuildDeployStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildDeployStepOptions) Or(d StackBuildDeployStepOptions) StackBuildDeployStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildGenerateStepOptions returns new OptStackBuildGenerateStepOptions with value set to v.
func NewOptStackBuildGenerateStepOptions(v StackBuildGenerateStepOptions) OptStackBuildGenerateStepOptions {
	return OptStackBuildGenerateStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildGenerateStepOptions is optional StackBuildGenerateStepOptions.
type OptStackBuildGenerateStepOptions struct {
	Value StackBuildGenerateStepOptions
	Set   bool
}

// IsSet returns true if OptStackBuildGenerateStepOptions was set.
func (o OptStackBuildGenerateStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildGenerateStepOptions) Reset() {
	var v StackBuildGenerateStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildGenerateStepOptions) SetTo(v StackBuildGenerateStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildGenerateStepOptions) Get() (v StackBuildGenerateStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildGenerateStepOptions) Or(d StackBuildGenerateStepOptions) StackBuildGenerateStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildIncludes returns new OptStackBuildIncludes with value set to v.
func NewOptStackBuildIncludes(v StackBuildIncludes) OptStackBuildIncludes {
	return OptStackBuildIncludes{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildIncludes is optional StackBuildIncludes.
type OptStackBuildIncludes struct {
	Value StackBuildIncludes
	Set   bool
}

// IsSet returns true if OptStackBuildIncludes was set.
func (o OptStackBuildIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildIncludes) Reset() {
	var v StackBuildIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildIncludes) SetTo(v StackBuildIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildIncludes) Get() (v StackBuildIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildIncludes) Or(d StackBuildIncludes) StackBuildIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildInstructionsDetails returns new OptStackBuildInstructionsDetails with value set to v.
func NewOptStackBuildInstructionsDetails(v StackBuildInstructionsDetails) OptStackBuildInstructionsDetails {
	return OptStackBuildInstructionsDetails{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildInstructionsDetails is optional StackBuildInstructionsDetails.
type OptStackBuildInstructionsDetails struct {
	Value StackBuildInstructionsDetails
	Set   bool
}

// IsSet returns true if OptStackBuildInstructionsDetails was set.
func (o OptStackBuildInstructionsDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildInstructionsDetails) Reset() {
	var v StackBuildInstructionsDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildInstructionsDetails) SetTo(v StackBuildInstructionsDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildInstructionsDetails) Get() (v StackBuildInstructionsDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildInstructionsDetails) Or(d StackBuildInstructionsDetails) StackBuildInstructionsDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildInstructionsDetailsGit returns new OptStackBuildInstructionsDetailsGit with value set to v.
func NewOptStackBuildInstructionsDetailsGit(v StackBuildInstructionsDetailsGit) OptStackBuildInstructionsDetailsGit {
	return OptStackBuildInstructionsDetailsGit{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildInstructionsDetailsGit is optional StackBuildInstructionsDetailsGit.
type OptStackBuildInstructionsDetailsGit struct {
	Value StackBuildInstructionsDetailsGit
	Set   bool
}

// IsSet returns true if OptStackBuildInstructionsDetailsGit was set.
func (o OptStackBuildInstructionsDetailsGit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildInstructionsDetailsGit) Reset() {
	var v StackBuildInstructionsDetailsGit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildInstructionsDetailsGit) SetTo(v StackBuildInstructionsDetailsGit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildInstructionsDetailsGit) Get() (v StackBuildInstructionsDetailsGit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildInstructionsDetailsGit) Or(d StackBuildInstructionsDetailsGit) StackBuildInstructionsDetailsGit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildInstructionsDetailsVariables returns new OptStackBuildInstructionsDetailsVariables with value set to v.
func NewOptStackBuildInstructionsDetailsVariables(v StackBuildInstructionsDetailsVariables) OptStackBuildInstructionsDetailsVariables {
	return OptStackBuildInstructionsDetailsVariables{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildInstructionsDetailsVariables is optional StackBuildInstructionsDetailsVariables.
type OptStackBuildInstructionsDetailsVariables struct {
	Value StackBuildInstructionsDetailsVariables
	Set   bool
}

// IsSet returns true if OptStackBuildInstructionsDetailsVariables was set.
func (o OptStackBuildInstructionsDetailsVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildInstructionsDetailsVariables) Reset() {
	var v StackBuildInstructionsDetailsVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildInstructionsDetailsVariables) SetTo(v StackBuildInstructionsDetailsVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildInstructionsDetailsVariables) Get() (v StackBuildInstructionsDetailsVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildInstructionsDetailsVariables) Or(d StackBuildInstructionsDetailsVariables) StackBuildInstructionsDetailsVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildMeta returns new OptStackBuildMeta with value set to v.
func NewOptStackBuildMeta(v StackBuildMeta) OptStackBuildMeta {
	return OptStackBuildMeta{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildMeta is optional StackBuildMeta.
type OptStackBuildMeta struct {
	Value StackBuildMeta
	Set   bool
}

// IsSet returns true if OptStackBuildMeta was set.
func (o OptStackBuildMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildMeta) Reset() {
	var v StackBuildMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildMeta) SetTo(v StackBuildMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildMeta) Get() (v StackBuildMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildMeta) Or(d StackBuildMeta) StackBuildMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildSpecAnnotations returns new OptStackBuildSpecAnnotations with value set to v.
func NewOptStackBuildSpecAnnotations(v StackBuildSpecAnnotations) OptStackBuildSpecAnnotations {
	return OptStackBuildSpecAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildSpecAnnotations is optional StackBuildSpecAnnotations.
type OptStackBuildSpecAnnotations struct {
	Value StackBuildSpecAnnotations
	Set   bool
}

// IsSet returns true if OptStackBuildSpecAnnotations was set.
func (o OptStackBuildSpecAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildSpecAnnotations) Reset() {
	var v StackBuildSpecAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildSpecAnnotations) SetTo(v StackBuildSpecAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildSpecAnnotations) Get() (v StackBuildSpecAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildSpecAnnotations) Or(d StackBuildSpecAnnotations) StackBuildSpecAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildSpecServicesVpn returns new OptStackBuildSpecServicesVpn with value set to v.
func NewOptStackBuildSpecServicesVpn(v StackBuildSpecServicesVpn) OptStackBuildSpecServicesVpn {
	return OptStackBuildSpecServicesVpn{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildSpecServicesVpn is optional StackBuildSpecServicesVpn.
type OptStackBuildSpecServicesVpn struct {
	Value StackBuildSpecServicesVpn
	Set   bool
}

// IsSet returns true if OptStackBuildSpecServicesVpn was set.
func (o OptStackBuildSpecServicesVpn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildSpecServicesVpn) Reset() {
	var v StackBuildSpecServicesVpn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildSpecServicesVpn) SetTo(v StackBuildSpecServicesVpn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildSpecServicesVpn) Get() (v StackBuildSpecServicesVpn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildSpecServicesVpn) Or(d StackBuildSpecServicesVpn) StackBuildSpecServicesVpn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackBuildStateError returns new OptStackBuildStateError with value set to v.
func NewOptStackBuildStateError(v StackBuildStateError) OptStackBuildStateError {
	return OptStackBuildStateError{
		Value: v,
		Set:   true,
	}
}

// OptStackBuildStateError is optional StackBuildStateError.
type OptStackBuildStateError struct {
	Value StackBuildStateError
	Set   bool
}

// IsSet returns true if OptStackBuildStateError was set.
func (o OptStackBuildStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackBuildStateError) Reset() {
	var v StackBuildStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackBuildStateError) SetTo(v StackBuildStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackBuildStateError) Get() (v StackBuildStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackBuildStateError) Or(d StackBuildStateError) StackBuildStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigResourcesCPUShares returns new OptStackContainerItemConfigResourcesCPUShares with value set to v.
func NewOptStackContainerItemConfigResourcesCPUShares(v StackContainerItemConfigResourcesCPUShares) OptStackContainerItemConfigResourcesCPUShares {
	return OptStackContainerItemConfigResourcesCPUShares{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigResourcesCPUShares is optional StackContainerItemConfigResourcesCPUShares.
type OptStackContainerItemConfigResourcesCPUShares struct {
	Value StackContainerItemConfigResourcesCPUShares
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigResourcesCPUShares was set.
func (o OptStackContainerItemConfigResourcesCPUShares) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigResourcesCPUShares) Reset() {
	var v StackContainerItemConfigResourcesCPUShares
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigResourcesCPUShares) SetTo(v StackContainerItemConfigResourcesCPUShares) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigResourcesCPUShares) Get() (v StackContainerItemConfigResourcesCPUShares, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigResourcesCPUShares) Or(d StackContainerItemConfigResourcesCPUShares) StackContainerItemConfigResourcesCPUShares {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeCommand returns new OptStackContainerItemConfigRuntimeCommand with value set to v.
func NewOptStackContainerItemConfigRuntimeCommand(v StackContainerItemConfigRuntimeCommand) OptStackContainerItemConfigRuntimeCommand {
	return OptStackContainerItemConfigRuntimeCommand{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeCommand is optional StackContainerItemConfigRuntimeCommand.
type OptStackContainerItemConfigRuntimeCommand struct {
	Value StackContainerItemConfigRuntimeCommand
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeCommand was set.
func (o OptStackContainerItemConfigRuntimeCommand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeCommand) Reset() {
	var v StackContainerItemConfigRuntimeCommand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeCommand) SetTo(v StackContainerItemConfigRuntimeCommand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeCommand) Get() (v StackContainerItemConfigRuntimeCommand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeCommand) Or(d StackContainerItemConfigRuntimeCommand) StackContainerItemConfigRuntimeCommand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeEnvironmentVars returns new OptStackContainerItemConfigRuntimeEnvironmentVars with value set to v.
func NewOptStackContainerItemConfigRuntimeEnvironmentVars(v StackContainerItemConfigRuntimeEnvironmentVars) OptStackContainerItemConfigRuntimeEnvironmentVars {
	return OptStackContainerItemConfigRuntimeEnvironmentVars{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeEnvironmentVars is optional StackContainerItemConfigRuntimeEnvironmentVars.
type OptStackContainerItemConfigRuntimeEnvironmentVars struct {
	Value StackContainerItemConfigRuntimeEnvironmentVars
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeEnvironmentVars was set.
func (o OptStackContainerItemConfigRuntimeEnvironmentVars) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeEnvironmentVars) Reset() {
	var v StackContainerItemConfigRuntimeEnvironmentVars
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeEnvironmentVars) SetTo(v StackContainerItemConfigRuntimeEnvironmentVars) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeEnvironmentVars) Get() (v StackContainerItemConfigRuntimeEnvironmentVars, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeEnvironmentVars) Or(d StackContainerItemConfigRuntimeEnvironmentVars) StackContainerItemConfigRuntimeEnvironmentVars {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeRlimits returns new OptStackContainerItemConfigRuntimeRlimits with value set to v.
func NewOptStackContainerItemConfigRuntimeRlimits(v StackContainerItemConfigRuntimeRlimits) OptStackContainerItemConfigRuntimeRlimits {
	return OptStackContainerItemConfigRuntimeRlimits{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeRlimits is optional StackContainerItemConfigRuntimeRlimits.
type OptStackContainerItemConfigRuntimeRlimits struct {
	Value StackContainerItemConfigRuntimeRlimits
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeRlimits was set.
func (o OptStackContainerItemConfigRuntimeRlimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeRlimits) Reset() {
	var v StackContainerItemConfigRuntimeRlimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeRlimits) SetTo(v StackContainerItemConfigRuntimeRlimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeRlimits) Get() (v StackContainerItemConfigRuntimeRlimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeRlimits) Or(d StackContainerItemConfigRuntimeRlimits) StackContainerItemConfigRuntimeRlimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeRootfs returns new OptStackContainerItemConfigRuntimeRootfs with value set to v.
func NewOptStackContainerItemConfigRuntimeRootfs(v StackContainerItemConfigRuntimeRootfs) OptStackContainerItemConfigRuntimeRootfs {
	return OptStackContainerItemConfigRuntimeRootfs{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeRootfs is optional StackContainerItemConfigRuntimeRootfs.
type OptStackContainerItemConfigRuntimeRootfs struct {
	Value StackContainerItemConfigRuntimeRootfs
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeRootfs was set.
func (o OptStackContainerItemConfigRuntimeRootfs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeRootfs) Reset() {
	var v StackContainerItemConfigRuntimeRootfs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeRootfs) SetTo(v StackContainerItemConfigRuntimeRootfs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeRootfs) Get() (v StackContainerItemConfigRuntimeRootfs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeRootfs) Or(d StackContainerItemConfigRuntimeRootfs) StackContainerItemConfigRuntimeRootfs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeSeccomp returns new OptStackContainerItemConfigRuntimeSeccomp with value set to v.
func NewOptStackContainerItemConfigRuntimeSeccomp(v StackContainerItemConfigRuntimeSeccomp) OptStackContainerItemConfigRuntimeSeccomp {
	return OptStackContainerItemConfigRuntimeSeccomp{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeSeccomp is optional StackContainerItemConfigRuntimeSeccomp.
type OptStackContainerItemConfigRuntimeSeccomp struct {
	Value StackContainerItemConfigRuntimeSeccomp
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeSeccomp was set.
func (o OptStackContainerItemConfigRuntimeSeccomp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeSeccomp) Reset() {
	var v StackContainerItemConfigRuntimeSeccomp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeSeccomp) SetTo(v StackContainerItemConfigRuntimeSeccomp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeSeccomp) Get() (v StackContainerItemConfigRuntimeSeccomp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeSeccomp) Or(d StackContainerItemConfigRuntimeSeccomp) StackContainerItemConfigRuntimeSeccomp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemConfigRuntimeSysctl returns new OptStackContainerItemConfigRuntimeSysctl with value set to v.
func NewOptStackContainerItemConfigRuntimeSysctl(v StackContainerItemConfigRuntimeSysctl) OptStackContainerItemConfigRuntimeSysctl {
	return OptStackContainerItemConfigRuntimeSysctl{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemConfigRuntimeSysctl is optional StackContainerItemConfigRuntimeSysctl.
type OptStackContainerItemConfigRuntimeSysctl struct {
	Value StackContainerItemConfigRuntimeSysctl
	Set   bool
}

// IsSet returns true if OptStackContainerItemConfigRuntimeSysctl was set.
func (o OptStackContainerItemConfigRuntimeSysctl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemConfigRuntimeSysctl) Reset() {
	var v StackContainerItemConfigRuntimeSysctl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemConfigRuntimeSysctl) SetTo(v StackContainerItemConfigRuntimeSysctl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemConfigRuntimeSysctl) Get() (v StackContainerItemConfigRuntimeSysctl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemConfigRuntimeSysctl) Or(d StackContainerItemConfigRuntimeSysctl) StackContainerItemConfigRuntimeSysctl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemVolumesItemLocal returns new OptStackContainerItemVolumesItemLocal with value set to v.
func NewOptStackContainerItemVolumesItemLocal(v StackContainerItemVolumesItemLocal) OptStackContainerItemVolumesItemLocal {
	return OptStackContainerItemVolumesItemLocal{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemVolumesItemLocal is optional StackContainerItemVolumesItemLocal.
type OptStackContainerItemVolumesItemLocal struct {
	Value StackContainerItemVolumesItemLocal
	Set   bool
}

// IsSet returns true if OptStackContainerItemVolumesItemLocal was set.
func (o OptStackContainerItemVolumesItemLocal) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemVolumesItemLocal) Reset() {
	var v StackContainerItemVolumesItemLocal
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemVolumesItemLocal) SetTo(v StackContainerItemVolumesItemLocal) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemVolumesItemLocal) Get() (v StackContainerItemVolumesItemLocal, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemVolumesItemLocal) Or(d StackContainerItemVolumesItemLocal) StackContainerItemVolumesItemLocal {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemVolumesItemRemoteAccess returns new OptStackContainerItemVolumesItemRemoteAccess with value set to v.
func NewOptStackContainerItemVolumesItemRemoteAccess(v StackContainerItemVolumesItemRemoteAccess) OptStackContainerItemVolumesItemRemoteAccess {
	return OptStackContainerItemVolumesItemRemoteAccess{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemVolumesItemRemoteAccess is optional StackContainerItemVolumesItemRemoteAccess.
type OptStackContainerItemVolumesItemRemoteAccess struct {
	Value StackContainerItemVolumesItemRemoteAccess
	Set   bool
}

// IsSet returns true if OptStackContainerItemVolumesItemRemoteAccess was set.
func (o OptStackContainerItemVolumesItemRemoteAccess) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemVolumesItemRemoteAccess) Reset() {
	var v StackContainerItemVolumesItemRemoteAccess
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemVolumesItemRemoteAccess) SetTo(v StackContainerItemVolumesItemRemoteAccess) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemVolumesItemRemoteAccess) Get() (v StackContainerItemVolumesItemRemoteAccess, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemVolumesItemRemoteAccess) Or(d StackContainerItemVolumesItemRemoteAccess) StackContainerItemVolumesItemRemoteAccess {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm returns new OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm with value set to v.
func NewOptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm(v StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm {
	return OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm{
		Value: v,
		Set:   true,
	}
}

// OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm is optional StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm.
type OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm struct {
	Value StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm
	Set   bool
}

// IsSet returns true if OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm was set.
func (o OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) Reset() {
	var v StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) SetTo(v StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) Get() (v StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) Or(d StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackGitCommit returns new OptStackGitCommit with value set to v.
func NewOptStackGitCommit(v StackGitCommit) OptStackGitCommit {
	return OptStackGitCommit{
		Value: v,
		Set:   true,
	}
}

// OptStackGitCommit is optional StackGitCommit.
type OptStackGitCommit struct {
	Value StackGitCommit
	Set   bool
}

// IsSet returns true if OptStackGitCommit was set.
func (o OptStackGitCommit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackGitCommit) Reset() {
	var v StackGitCommit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackGitCommit) SetTo(v StackGitCommit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackGitCommit) Get() (v StackGitCommit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackGitCommit) Or(d StackGitCommit) StackGitCommit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackImageSourceTypeDetails returns new OptStackImageSourceTypeDetails with value set to v.
func NewOptStackImageSourceTypeDetails(v StackImageSourceTypeDetails) OptStackImageSourceTypeDetails {
	return OptStackImageSourceTypeDetails{
		Value: v,
		Set:   true,
	}
}

// OptStackImageSourceTypeDetails is optional StackImageSourceTypeDetails.
type OptStackImageSourceTypeDetails struct {
	Value StackImageSourceTypeDetails
	Set   bool
}

// IsSet returns true if OptStackImageSourceTypeDetails was set.
func (o OptStackImageSourceTypeDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackImageSourceTypeDetails) Reset() {
	var v StackImageSourceTypeDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackImageSourceTypeDetails) SetTo(v StackImageSourceTypeDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackImageSourceTypeDetails) Get() (v StackImageSourceTypeDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackImageSourceTypeDetails) Or(d StackImageSourceTypeDetails) StackImageSourceTypeDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackImageSourceTypeOverride returns new OptStackImageSourceTypeOverride with value set to v.
func NewOptStackImageSourceTypeOverride(v StackImageSourceTypeOverride) OptStackImageSourceTypeOverride {
	return OptStackImageSourceTypeOverride{
		Value: v,
		Set:   true,
	}
}

// OptStackImageSourceTypeOverride is optional StackImageSourceTypeOverride.
type OptStackImageSourceTypeOverride struct {
	Value StackImageSourceTypeOverride
	Set   bool
}

// IsSet returns true if OptStackImageSourceTypeOverride was set.
func (o OptStackImageSourceTypeOverride) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackImageSourceTypeOverride) Reset() {
	var v StackImageSourceTypeOverride
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackImageSourceTypeOverride) SetTo(v StackImageSourceTypeOverride) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackImageSourceTypeOverride) Get() (v StackImageSourceTypeOverride, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackImageSourceTypeOverride) Or(d StackImageSourceTypeOverride) StackImageSourceTypeOverride {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackImageSourceTypeType returns new OptStackImageSourceTypeType with value set to v.
func NewOptStackImageSourceTypeType(v StackImageSourceTypeType) OptStackImageSourceTypeType {
	return OptStackImageSourceTypeType{
		Value: v,
		Set:   true,
	}
}

// OptStackImageSourceTypeType is optional StackImageSourceTypeType.
type OptStackImageSourceTypeType struct {
	Value StackImageSourceTypeType
	Set   bool
}

// IsSet returns true if OptStackImageSourceTypeType was set.
func (o OptStackImageSourceTypeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackImageSourceTypeType) Reset() {
	var v StackImageSourceTypeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackImageSourceTypeType) SetTo(v StackImageSourceTypeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackImageSourceTypeType) Get() (v StackImageSourceTypeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackImageSourceTypeType) Or(d StackImageSourceTypeType) StackImageSourceTypeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackInclude returns new OptStackInclude with value set to v.
func NewOptStackInclude(v StackInclude) OptStackInclude {
	return OptStackInclude{
		Value: v,
		Set:   true,
	}
}

// OptStackInclude is optional StackInclude.
type OptStackInclude struct {
	Value StackInclude
	Set   bool
}

// IsSet returns true if OptStackInclude was set.
func (o OptStackInclude) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackInclude) Reset() {
	var v StackInclude
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackInclude) SetTo(v StackInclude) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackInclude) Get() (v StackInclude, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackInclude) Or(d StackInclude) StackInclude {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackIncludes returns new OptStackIncludes with value set to v.
func NewOptStackIncludes(v StackIncludes) OptStackIncludes {
	return OptStackIncludes{
		Value: v,
		Set:   true,
	}
}

// OptStackIncludes is optional StackIncludes.
type OptStackIncludes struct {
	Value StackIncludes
	Set   bool
}

// IsSet returns true if OptStackIncludes was set.
func (o OptStackIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackIncludes) Reset() {
	var v StackIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackIncludes) SetTo(v StackIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackIncludes) Get() (v StackIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackIncludes) Or(d StackIncludes) StackIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackMeta returns new OptStackMeta with value set to v.
func NewOptStackMeta(v StackMeta) OptStackMeta {
	return OptStackMeta{
		Value: v,
		Set:   true,
	}
}

// OptStackMeta is optional StackMeta.
type OptStackMeta struct {
	Value StackMeta
	Set   bool
}

// IsSet returns true if OptStackMeta was set.
func (o OptStackMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackMeta) Reset() {
	var v StackMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackMeta) SetTo(v StackMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackMeta) Get() (v StackMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackMeta) Or(d StackMeta) StackMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackPruneStepOptions returns new OptStackPruneStepOptions with value set to v.
func NewOptStackPruneStepOptions(v StackPruneStepOptions) OptStackPruneStepOptions {
	return OptStackPruneStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptStackPruneStepOptions is optional StackPruneStepOptions.
type OptStackPruneStepOptions struct {
	Value StackPruneStepOptions
	Set   bool
}

// IsSet returns true if OptStackPruneStepOptions was set.
func (o OptStackPruneStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackPruneStepOptions) Reset() {
	var v StackPruneStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackPruneStepOptions) SetTo(v StackPruneStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackPruneStepOptions) Get() (v StackPruneStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackPruneStepOptions) Or(d StackPruneStepOptions) StackPruneStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackRawSourceDetailsAnnotations returns new OptStackRawSourceDetailsAnnotations with value set to v.
func NewOptStackRawSourceDetailsAnnotations(v StackRawSourceDetailsAnnotations) OptStackRawSourceDetailsAnnotations {
	return OptStackRawSourceDetailsAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptStackRawSourceDetailsAnnotations is optional StackRawSourceDetailsAnnotations.
type OptStackRawSourceDetailsAnnotations struct {
	Value StackRawSourceDetailsAnnotations
	Set   bool
}

// IsSet returns true if OptStackRawSourceDetailsAnnotations was set.
func (o OptStackRawSourceDetailsAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackRawSourceDetailsAnnotations) Reset() {
	var v StackRawSourceDetailsAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackRawSourceDetailsAnnotations) SetTo(v StackRawSourceDetailsAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackRawSourceDetailsAnnotations) Get() (v StackRawSourceDetailsAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackRawSourceDetailsAnnotations) Or(d StackRawSourceDetailsAnnotations) StackRawSourceDetailsAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackRawSourceDetailsServicesVpn returns new OptStackRawSourceDetailsServicesVpn with value set to v.
func NewOptStackRawSourceDetailsServicesVpn(v StackRawSourceDetailsServicesVpn) OptStackRawSourceDetailsServicesVpn {
	return OptStackRawSourceDetailsServicesVpn{
		Value: v,
		Set:   true,
	}
}

// OptStackRawSourceDetailsServicesVpn is optional StackRawSourceDetailsServicesVpn.
type OptStackRawSourceDetailsServicesVpn struct {
	Value StackRawSourceDetailsServicesVpn
	Set   bool
}

// IsSet returns true if OptStackRawSourceDetailsServicesVpn was set.
func (o OptStackRawSourceDetailsServicesVpn) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackRawSourceDetailsServicesVpn) Reset() {
	var v StackRawSourceDetailsServicesVpn
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackRawSourceDetailsServicesVpn) SetTo(v StackRawSourceDetailsServicesVpn) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackRawSourceDetailsServicesVpn) Get() (v StackRawSourceDetailsServicesVpn, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackRawSourceDetailsServicesVpn) Or(d StackRawSourceDetailsServicesVpn) StackRawSourceDetailsServicesVpn {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackRepoSourceDetailsAuth returns new OptStackRepoSourceDetailsAuth with value set to v.
func NewOptStackRepoSourceDetailsAuth(v StackRepoSourceDetailsAuth) OptStackRepoSourceDetailsAuth {
	return OptStackRepoSourceDetailsAuth{
		Value: v,
		Set:   true,
	}
}

// OptStackRepoSourceDetailsAuth is optional StackRepoSourceDetailsAuth.
type OptStackRepoSourceDetailsAuth struct {
	Value StackRepoSourceDetailsAuth
	Set   bool
}

// IsSet returns true if OptStackRepoSourceDetailsAuth was set.
func (o OptStackRepoSourceDetailsAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackRepoSourceDetailsAuth) Reset() {
	var v StackRepoSourceDetailsAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackRepoSourceDetailsAuth) SetTo(v StackRepoSourceDetailsAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackRepoSourceDetailsAuth) Get() (v StackRepoSourceDetailsAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackRepoSourceDetailsAuth) Or(d StackRepoSourceDetailsAuth) StackRepoSourceDetailsAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackRepoSourceDetailsRef returns new OptStackRepoSourceDetailsRef with value set to v.
func NewOptStackRepoSourceDetailsRef(v StackRepoSourceDetailsRef) OptStackRepoSourceDetailsRef {
	return OptStackRepoSourceDetailsRef{
		Value: v,
		Set:   true,
	}
}

// OptStackRepoSourceDetailsRef is optional StackRepoSourceDetailsRef.
type OptStackRepoSourceDetailsRef struct {
	Value StackRepoSourceDetailsRef
	Set   bool
}

// IsSet returns true if OptStackRepoSourceDetailsRef was set.
func (o OptStackRepoSourceDetailsRef) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackRepoSourceDetailsRef) Reset() {
	var v StackRepoSourceDetailsRef
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackRepoSourceDetailsRef) SetTo(v StackRepoSourceDetailsRef) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackRepoSourceDetailsRef) Get() (v StackRepoSourceDetailsRef, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackRepoSourceDetailsRef) Or(d StackRepoSourceDetailsRef) StackRepoSourceDetailsRef {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSource returns new OptStackSource with value set to v.
func NewOptStackSource(v StackSource) OptStackSource {
	return OptStackSource{
		Value: v,
		Set:   true,
	}
}

// OptStackSource is optional StackSource.
type OptStackSource struct {
	Value StackSource
	Set   bool
}

// IsSet returns true if OptStackSource was set.
func (o OptStackSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSource) Reset() {
	var v StackSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSource) SetTo(v StackSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSource) Get() (v StackSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSource) Or(d StackSource) StackSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigResourcesCPUShares returns new OptStackSpecTestContainerConfigResourcesCPUShares with value set to v.
func NewOptStackSpecTestContainerConfigResourcesCPUShares(v StackSpecTestContainerConfigResourcesCPUShares) OptStackSpecTestContainerConfigResourcesCPUShares {
	return OptStackSpecTestContainerConfigResourcesCPUShares{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigResourcesCPUShares is optional StackSpecTestContainerConfigResourcesCPUShares.
type OptStackSpecTestContainerConfigResourcesCPUShares struct {
	Value StackSpecTestContainerConfigResourcesCPUShares
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigResourcesCPUShares was set.
func (o OptStackSpecTestContainerConfigResourcesCPUShares) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigResourcesCPUShares) Reset() {
	var v StackSpecTestContainerConfigResourcesCPUShares
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigResourcesCPUShares) SetTo(v StackSpecTestContainerConfigResourcesCPUShares) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigResourcesCPUShares) Get() (v StackSpecTestContainerConfigResourcesCPUShares, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigResourcesCPUShares) Or(d StackSpecTestContainerConfigResourcesCPUShares) StackSpecTestContainerConfigResourcesCPUShares {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeCommand returns new OptStackSpecTestContainerConfigRuntimeCommand with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeCommand(v StackSpecTestContainerConfigRuntimeCommand) OptStackSpecTestContainerConfigRuntimeCommand {
	return OptStackSpecTestContainerConfigRuntimeCommand{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeCommand is optional StackSpecTestContainerConfigRuntimeCommand.
type OptStackSpecTestContainerConfigRuntimeCommand struct {
	Value StackSpecTestContainerConfigRuntimeCommand
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeCommand was set.
func (o OptStackSpecTestContainerConfigRuntimeCommand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeCommand) Reset() {
	var v StackSpecTestContainerConfigRuntimeCommand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeCommand) SetTo(v StackSpecTestContainerConfigRuntimeCommand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeCommand) Get() (v StackSpecTestContainerConfigRuntimeCommand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeCommand) Or(d StackSpecTestContainerConfigRuntimeCommand) StackSpecTestContainerConfigRuntimeCommand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeEnvironmentVars returns new OptStackSpecTestContainerConfigRuntimeEnvironmentVars with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeEnvironmentVars(v StackSpecTestContainerConfigRuntimeEnvironmentVars) OptStackSpecTestContainerConfigRuntimeEnvironmentVars {
	return OptStackSpecTestContainerConfigRuntimeEnvironmentVars{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeEnvironmentVars is optional StackSpecTestContainerConfigRuntimeEnvironmentVars.
type OptStackSpecTestContainerConfigRuntimeEnvironmentVars struct {
	Value StackSpecTestContainerConfigRuntimeEnvironmentVars
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeEnvironmentVars was set.
func (o OptStackSpecTestContainerConfigRuntimeEnvironmentVars) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeEnvironmentVars) Reset() {
	var v StackSpecTestContainerConfigRuntimeEnvironmentVars
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeEnvironmentVars) SetTo(v StackSpecTestContainerConfigRuntimeEnvironmentVars) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeEnvironmentVars) Get() (v StackSpecTestContainerConfigRuntimeEnvironmentVars, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeEnvironmentVars) Or(d StackSpecTestContainerConfigRuntimeEnvironmentVars) StackSpecTestContainerConfigRuntimeEnvironmentVars {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeRlimits returns new OptStackSpecTestContainerConfigRuntimeRlimits with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeRlimits(v StackSpecTestContainerConfigRuntimeRlimits) OptStackSpecTestContainerConfigRuntimeRlimits {
	return OptStackSpecTestContainerConfigRuntimeRlimits{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeRlimits is optional StackSpecTestContainerConfigRuntimeRlimits.
type OptStackSpecTestContainerConfigRuntimeRlimits struct {
	Value StackSpecTestContainerConfigRuntimeRlimits
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeRlimits was set.
func (o OptStackSpecTestContainerConfigRuntimeRlimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeRlimits) Reset() {
	var v StackSpecTestContainerConfigRuntimeRlimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeRlimits) SetTo(v StackSpecTestContainerConfigRuntimeRlimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeRlimits) Get() (v StackSpecTestContainerConfigRuntimeRlimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeRlimits) Or(d StackSpecTestContainerConfigRuntimeRlimits) StackSpecTestContainerConfigRuntimeRlimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeRootfs returns new OptStackSpecTestContainerConfigRuntimeRootfs with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeRootfs(v StackSpecTestContainerConfigRuntimeRootfs) OptStackSpecTestContainerConfigRuntimeRootfs {
	return OptStackSpecTestContainerConfigRuntimeRootfs{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeRootfs is optional StackSpecTestContainerConfigRuntimeRootfs.
type OptStackSpecTestContainerConfigRuntimeRootfs struct {
	Value StackSpecTestContainerConfigRuntimeRootfs
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeRootfs was set.
func (o OptStackSpecTestContainerConfigRuntimeRootfs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeRootfs) Reset() {
	var v StackSpecTestContainerConfigRuntimeRootfs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeRootfs) SetTo(v StackSpecTestContainerConfigRuntimeRootfs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeRootfs) Get() (v StackSpecTestContainerConfigRuntimeRootfs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeRootfs) Or(d StackSpecTestContainerConfigRuntimeRootfs) StackSpecTestContainerConfigRuntimeRootfs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeSeccomp returns new OptStackSpecTestContainerConfigRuntimeSeccomp with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeSeccomp(v StackSpecTestContainerConfigRuntimeSeccomp) OptStackSpecTestContainerConfigRuntimeSeccomp {
	return OptStackSpecTestContainerConfigRuntimeSeccomp{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeSeccomp is optional StackSpecTestContainerConfigRuntimeSeccomp.
type OptStackSpecTestContainerConfigRuntimeSeccomp struct {
	Value StackSpecTestContainerConfigRuntimeSeccomp
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeSeccomp was set.
func (o OptStackSpecTestContainerConfigRuntimeSeccomp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeSeccomp) Reset() {
	var v StackSpecTestContainerConfigRuntimeSeccomp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeSeccomp) SetTo(v StackSpecTestContainerConfigRuntimeSeccomp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeSeccomp) Get() (v StackSpecTestContainerConfigRuntimeSeccomp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeSeccomp) Or(d StackSpecTestContainerConfigRuntimeSeccomp) StackSpecTestContainerConfigRuntimeSeccomp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackSpecTestContainerConfigRuntimeSysctl returns new OptStackSpecTestContainerConfigRuntimeSysctl with value set to v.
func NewOptStackSpecTestContainerConfigRuntimeSysctl(v StackSpecTestContainerConfigRuntimeSysctl) OptStackSpecTestContainerConfigRuntimeSysctl {
	return OptStackSpecTestContainerConfigRuntimeSysctl{
		Value: v,
		Set:   true,
	}
}

// OptStackSpecTestContainerConfigRuntimeSysctl is optional StackSpecTestContainerConfigRuntimeSysctl.
type OptStackSpecTestContainerConfigRuntimeSysctl struct {
	Value StackSpecTestContainerConfigRuntimeSysctl
	Set   bool
}

// IsSet returns true if OptStackSpecTestContainerConfigRuntimeSysctl was set.
func (o OptStackSpecTestContainerConfigRuntimeSysctl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackSpecTestContainerConfigRuntimeSysctl) Reset() {
	var v StackSpecTestContainerConfigRuntimeSysctl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackSpecTestContainerConfigRuntimeSysctl) SetTo(v StackSpecTestContainerConfigRuntimeSysctl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackSpecTestContainerConfigRuntimeSysctl) Get() (v StackSpecTestContainerConfigRuntimeSysctl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackSpecTestContainerConfigRuntimeSysctl) Or(d StackSpecTestContainerConfigRuntimeSysctl) StackSpecTestContainerConfigRuntimeSysctl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackStateError returns new OptStackStateError with value set to v.
func NewOptStackStateError(v StackStateError) OptStackStateError {
	return OptStackStateError{
		Value: v,
		Set:   true,
	}
}

// OptStackStateError is optional StackStateError.
type OptStackStateError struct {
	Value StackStateError
	Set   bool
}

// IsSet returns true if OptStackStateError was set.
func (o OptStackStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackStateError) Reset() {
	var v StackStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackStateError) SetTo(v StackStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackStateError) Get() (v StackStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackStateError) Or(d StackStateError) StackStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStackVariables returns new OptStackVariables with value set to v.
func NewOptStackVariables(v StackVariables) OptStackVariables {
	return OptStackVariables{
		Value: v,
		Set:   true,
	}
}

// OptStackVariables is optional StackVariables.
type OptStackVariables struct {
	Value StackVariables
	Set   bool
}

// IsSet returns true if OptStackVariables was set.
func (o OptStackVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStackVariables) Reset() {
	var v StackVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStackVariables) SetTo(v StackVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStackVariables) Get() (v StackVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStackVariables) Or(d StackVariables) StackVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStateCountSummary returns new OptStateCountSummary with value set to v.
func NewOptStateCountSummary(v StateCountSummary) OptStateCountSummary {
	return OptStateCountSummary{
		Value: v,
		Set:   true,
	}
}

// OptStateCountSummary is optional StateCountSummary.
type OptStateCountSummary struct {
	Value StateCountSummary
	Set   bool
}

// IsSet returns true if OptStateCountSummary was set.
func (o OptStateCountSummary) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStateCountSummary) Reset() {
	var v StateCountSummary
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStateCountSummary) SetTo(v StateCountSummary) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStateCountSummary) Get() (v StateCountSummary, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStateCountSummary) Or(d StateCountSummary) StateCountSummary {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskStateCurrent returns new OptTaskStateCurrent with value set to v.
func NewOptTaskStateCurrent(v TaskStateCurrent) OptTaskStateCurrent {
	return OptTaskStateCurrent{
		Value: v,
		Set:   true,
	}
}

// OptTaskStateCurrent is optional TaskStateCurrent.
type OptTaskStateCurrent struct {
	Value TaskStateCurrent
	Set   bool
}

// IsSet returns true if OptTaskStateCurrent was set.
func (o OptTaskStateCurrent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskStateCurrent) Reset() {
	var v TaskStateCurrent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskStateCurrent) SetTo(v TaskStateCurrent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskStateCurrent) Get() (v TaskStateCurrent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskStateCurrent) Or(d TaskStateCurrent) TaskStateCurrent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTriggerKey returns new OptTriggerKey with value set to v.
func NewOptTriggerKey(v TriggerKey) OptTriggerKey {
	return OptTriggerKey{
		Value: v,
		Set:   true,
	}
}

// OptTriggerKey is optional TriggerKey.
type OptTriggerKey struct {
	Value TriggerKey
	Set   bool
}

// IsSet returns true if OptTriggerKey was set.
func (o OptTriggerKey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTriggerKey) Reset() {
	var v TriggerKey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTriggerKey) SetTo(v TriggerKey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTriggerKey) Get() (v TriggerKey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTriggerKey) Or(d TriggerKey) TriggerKey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTriggerKeyStateError returns new OptTriggerKeyStateError with value set to v.
func NewOptTriggerKeyStateError(v TriggerKeyStateError) OptTriggerKeyStateError {
	return OptTriggerKeyStateError{
		Value: v,
		Set:   true,
	}
}

// OptTriggerKeyStateError is optional TriggerKeyStateError.
type OptTriggerKeyStateError struct {
	Value TriggerKeyStateError
	Set   bool
}

// IsSet returns true if OptTriggerKeyStateError was set.
func (o OptTriggerKeyStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTriggerKeyStateError) Reset() {
	var v TriggerKeyStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTriggerKeyStateError) SetTo(v TriggerKeyStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTriggerKeyStateError) Get() (v TriggerKeyStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTriggerKeyStateError) Or(d TriggerKeyStateError) TriggerKeyStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTwoFactorAuthSetup returns new OptTwoFactorAuthSetup with value set to v.
func NewOptTwoFactorAuthSetup(v TwoFactorAuthSetup) OptTwoFactorAuthSetup {
	return OptTwoFactorAuthSetup{
		Value: v,
		Set:   true,
	}
}

// OptTwoFactorAuthSetup is optional TwoFactorAuthSetup.
type OptTwoFactorAuthSetup struct {
	Value TwoFactorAuthSetup
	Set   bool
}

// IsSet returns true if OptTwoFactorAuthSetup was set.
func (o OptTwoFactorAuthSetup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTwoFactorAuthSetup) Reset() {
	var v TwoFactorAuthSetup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTwoFactorAuthSetup) SetTo(v TwoFactorAuthSetup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTwoFactorAuthSetup) Get() (v TwoFactorAuthSetup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTwoFactorAuthSetup) Or(d TwoFactorAuthSetup) TwoFactorAuthSetup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAPIKeyReq returns new OptUpdateAPIKeyReq with value set to v.
func NewOptUpdateAPIKeyReq(v UpdateAPIKeyReq) OptUpdateAPIKeyReq {
	return OptUpdateAPIKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAPIKeyReq is optional UpdateAPIKeyReq.
type OptUpdateAPIKeyReq struct {
	Value UpdateAPIKeyReq
	Set   bool
}

// IsSet returns true if OptUpdateAPIKeyReq was set.
func (o OptUpdateAPIKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAPIKeyReq) Reset() {
	var v UpdateAPIKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAPIKeyReq) SetTo(v UpdateAPIKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAPIKeyReq) Get() (v UpdateAPIKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAPIKeyReq) Or(d UpdateAPIKeyReq) UpdateAPIKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountInviteReq returns new OptUpdateAccountInviteReq with value set to v.
func NewOptUpdateAccountInviteReq(v UpdateAccountInviteReq) OptUpdateAccountInviteReq {
	return OptUpdateAccountInviteReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountInviteReq is optional UpdateAccountInviteReq.
type OptUpdateAccountInviteReq struct {
	Value UpdateAccountInviteReq
	Set   bool
}

// IsSet returns true if OptUpdateAccountInviteReq was set.
func (o OptUpdateAccountInviteReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountInviteReq) Reset() {
	var v UpdateAccountInviteReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountInviteReq) SetTo(v UpdateAccountInviteReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountInviteReq) Get() (v UpdateAccountInviteReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountInviteReq) Or(d UpdateAccountInviteReq) UpdateAccountInviteReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountReq returns new OptUpdateAccountReq with value set to v.
func NewOptUpdateAccountReq(v UpdateAccountReq) OptUpdateAccountReq {
	return OptUpdateAccountReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountReq is optional UpdateAccountReq.
type OptUpdateAccountReq struct {
	Value UpdateAccountReq
	Set   bool
}

// IsSet returns true if OptUpdateAccountReq was set.
func (o OptUpdateAccountReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountReq) Reset() {
	var v UpdateAccountReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountReq) SetTo(v UpdateAccountReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountReq) Get() (v UpdateAccountReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountReq) Or(d UpdateAccountReq) UpdateAccountReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAccountReqName returns new OptUpdateAccountReqName with value set to v.
func NewOptUpdateAccountReqName(v UpdateAccountReqName) OptUpdateAccountReqName {
	return OptUpdateAccountReqName{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAccountReqName is optional UpdateAccountReqName.
type OptUpdateAccountReqName struct {
	Value UpdateAccountReqName
	Set   bool
}

// IsSet returns true if OptUpdateAccountReqName was set.
func (o OptUpdateAccountReqName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAccountReqName) Reset() {
	var v UpdateAccountReqName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAccountReqName) SetTo(v UpdateAccountReqName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAccountReqName) Get() (v UpdateAccountReqName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAccountReqName) Or(d UpdateAccountReqName) UpdateAccountReqName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateAutoScaleGroupReq returns new OptUpdateAutoScaleGroupReq with value set to v.
func NewOptUpdateAutoScaleGroupReq(v UpdateAutoScaleGroupReq) OptUpdateAutoScaleGroupReq {
	return OptUpdateAutoScaleGroupReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateAutoScaleGroupReq is optional UpdateAutoScaleGroupReq.
type OptUpdateAutoScaleGroupReq struct {
	Value UpdateAutoScaleGroupReq
	Set   bool
}

// IsSet returns true if OptUpdateAutoScaleGroupReq was set.
func (o OptUpdateAutoScaleGroupReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateAutoScaleGroupReq) Reset() {
	var v UpdateAutoScaleGroupReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateAutoScaleGroupReq) SetTo(v UpdateAutoScaleGroupReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateAutoScaleGroupReq) Get() (v UpdateAutoScaleGroupReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateAutoScaleGroupReq) Or(d UpdateAutoScaleGroupReq) UpdateAutoScaleGroupReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingMethodReq returns new OptUpdateBillingMethodReq with value set to v.
func NewOptUpdateBillingMethodReq(v UpdateBillingMethodReq) OptUpdateBillingMethodReq {
	return OptUpdateBillingMethodReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingMethodReq is optional UpdateBillingMethodReq.
type OptUpdateBillingMethodReq struct {
	Value UpdateBillingMethodReq
	Set   bool
}

// IsSet returns true if OptUpdateBillingMethodReq was set.
func (o OptUpdateBillingMethodReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingMethodReq) Reset() {
	var v UpdateBillingMethodReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingMethodReq) SetTo(v UpdateBillingMethodReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingMethodReq) Get() (v UpdateBillingMethodReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingMethodReq) Or(d UpdateBillingMethodReq) UpdateBillingMethodReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingOrderReq returns new OptUpdateBillingOrderReq with value set to v.
func NewOptUpdateBillingOrderReq(v UpdateBillingOrderReq) OptUpdateBillingOrderReq {
	return OptUpdateBillingOrderReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingOrderReq is optional UpdateBillingOrderReq.
type OptUpdateBillingOrderReq struct {
	Value UpdateBillingOrderReq
	Set   bool
}

// IsSet returns true if OptUpdateBillingOrderReq was set.
func (o OptUpdateBillingOrderReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingOrderReq) Reset() {
	var v UpdateBillingOrderReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingOrderReq) SetTo(v UpdateBillingOrderReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingOrderReq) Get() (v UpdateBillingOrderReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingOrderReq) Or(d UpdateBillingOrderReq) UpdateBillingOrderReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBillingOrderReqTermLength returns new OptUpdateBillingOrderReqTermLength with value set to v.
func NewOptUpdateBillingOrderReqTermLength(v UpdateBillingOrderReqTermLength) OptUpdateBillingOrderReqTermLength {
	return OptUpdateBillingOrderReqTermLength{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBillingOrderReqTermLength is optional UpdateBillingOrderReqTermLength.
type OptUpdateBillingOrderReqTermLength struct {
	Value UpdateBillingOrderReqTermLength
	Set   bool
}

// IsSet returns true if OptUpdateBillingOrderReqTermLength was set.
func (o OptUpdateBillingOrderReqTermLength) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBillingOrderReqTermLength) Reset() {
	var v UpdateBillingOrderReqTermLength
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBillingOrderReqTermLength) SetTo(v UpdateBillingOrderReqTermLength) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBillingOrderReqTermLength) Get() (v UpdateBillingOrderReqTermLength, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBillingOrderReqTermLength) Or(d UpdateBillingOrderReqTermLength) UpdateBillingOrderReqTermLength {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateContainerReq returns new OptUpdateContainerReq with value set to v.
func NewOptUpdateContainerReq(v UpdateContainerReq) OptUpdateContainerReq {
	return OptUpdateContainerReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateContainerReq is optional UpdateContainerReq.
type OptUpdateContainerReq struct {
	Value UpdateContainerReq
	Set   bool
}

// IsSet returns true if OptUpdateContainerReq was set.
func (o OptUpdateContainerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateContainerReq) Reset() {
	var v UpdateContainerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateContainerReq) SetTo(v UpdateContainerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateContainerReq) Get() (v UpdateContainerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateContainerReq) Or(d UpdateContainerReq) UpdateContainerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateContainerReqAnnotation returns new OptUpdateContainerReqAnnotation with value set to v.
func NewOptUpdateContainerReqAnnotation(v UpdateContainerReqAnnotation) OptUpdateContainerReqAnnotation {
	return OptUpdateContainerReqAnnotation{
		Value: v,
		Set:   true,
	}
}

// OptUpdateContainerReqAnnotation is optional UpdateContainerReqAnnotation.
type OptUpdateContainerReqAnnotation struct {
	Value UpdateContainerReqAnnotation
	Set   bool
}

// IsSet returns true if OptUpdateContainerReqAnnotation was set.
func (o OptUpdateContainerReqAnnotation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateContainerReqAnnotation) Reset() {
	var v UpdateContainerReqAnnotation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateContainerReqAnnotation) SetTo(v UpdateContainerReqAnnotation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateContainerReqAnnotation) Get() (v UpdateContainerReqAnnotation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateContainerReqAnnotation) Or(d UpdateContainerReqAnnotation) UpdateContainerReqAnnotation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateDNSZoneRecordReq returns new OptUpdateDNSZoneRecordReq with value set to v.
func NewOptUpdateDNSZoneRecordReq(v UpdateDNSZoneRecordReq) OptUpdateDNSZoneRecordReq {
	return OptUpdateDNSZoneRecordReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateDNSZoneRecordReq is optional UpdateDNSZoneRecordReq.
type OptUpdateDNSZoneRecordReq struct {
	Value UpdateDNSZoneRecordReq
	Set   bool
}

// IsSet returns true if OptUpdateDNSZoneRecordReq was set.
func (o OptUpdateDNSZoneRecordReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateDNSZoneRecordReq) Reset() {
	var v UpdateDNSZoneRecordReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateDNSZoneRecordReq) SetTo(v UpdateDNSZoneRecordReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateDNSZoneRecordReq) Get() (v UpdateDNSZoneRecordReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateDNSZoneRecordReq) Or(d UpdateDNSZoneRecordReq) UpdateDNSZoneRecordReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateDNSZoneReq returns new OptUpdateDNSZoneReq with value set to v.
func NewOptUpdateDNSZoneReq(v UpdateDNSZoneReq) OptUpdateDNSZoneReq {
	return OptUpdateDNSZoneReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateDNSZoneReq is optional UpdateDNSZoneReq.
type OptUpdateDNSZoneReq struct {
	Value UpdateDNSZoneReq
	Set   bool
}

// IsSet returns true if OptUpdateDNSZoneReq was set.
func (o OptUpdateDNSZoneReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateDNSZoneReq) Reset() {
	var v UpdateDNSZoneReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateDNSZoneReq) SetTo(v UpdateDNSZoneReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateDNSZoneReq) Get() (v UpdateDNSZoneReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateDNSZoneReq) Or(d UpdateDNSZoneReq) UpdateDNSZoneReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateEnvironmentReq returns new OptUpdateEnvironmentReq with value set to v.
func NewOptUpdateEnvironmentReq(v UpdateEnvironmentReq) OptUpdateEnvironmentReq {
	return OptUpdateEnvironmentReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateEnvironmentReq is optional UpdateEnvironmentReq.
type OptUpdateEnvironmentReq struct {
	Value UpdateEnvironmentReq
	Set   bool
}

// IsSet returns true if OptUpdateEnvironmentReq was set.
func (o OptUpdateEnvironmentReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateEnvironmentReq) Reset() {
	var v UpdateEnvironmentReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateEnvironmentReq) SetTo(v UpdateEnvironmentReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateEnvironmentReq) Get() (v UpdateEnvironmentReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateEnvironmentReq) Or(d UpdateEnvironmentReq) UpdateEnvironmentReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubMemberReq returns new OptUpdateHubMemberReq with value set to v.
func NewOptUpdateHubMemberReq(v UpdateHubMemberReq) OptUpdateHubMemberReq {
	return OptUpdateHubMemberReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubMemberReq is optional UpdateHubMemberReq.
type OptUpdateHubMemberReq struct {
	Value UpdateHubMemberReq
	Set   bool
}

// IsSet returns true if OptUpdateHubMemberReq was set.
func (o OptUpdateHubMemberReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubMemberReq) Reset() {
	var v UpdateHubMemberReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubMemberReq) SetTo(v UpdateHubMemberReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubMemberReq) Get() (v UpdateHubMemberReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubMemberReq) Or(d UpdateHubMemberReq) UpdateHubMemberReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateHubReq returns new OptUpdateHubReq with value set to v.
func NewOptUpdateHubReq(v UpdateHubReq) OptUpdateHubReq {
	return OptUpdateHubReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateHubReq is optional UpdateHubReq.
type OptUpdateHubReq struct {
	Value UpdateHubReq
	Set   bool
}

// IsSet returns true if OptUpdateHubReq was set.
func (o OptUpdateHubReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateHubReq) Reset() {
	var v UpdateHubReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateHubReq) SetTo(v UpdateHubReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateHubReq) Get() (v UpdateHubReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateHubReq) Or(d UpdateHubReq) UpdateHubReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateImageReq returns new OptUpdateImageReq with value set to v.
func NewOptUpdateImageReq(v UpdateImageReq) OptUpdateImageReq {
	return OptUpdateImageReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateImageReq is optional UpdateImageReq.
type OptUpdateImageReq struct {
	Value UpdateImageReq
	Set   bool
}

// IsSet returns true if OptUpdateImageReq was set.
func (o OptUpdateImageReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateImageReq) Reset() {
	var v UpdateImageReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateImageReq) SetTo(v UpdateImageReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateImageReq) Get() (v UpdateImageReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateImageReq) Or(d UpdateImageReq) UpdateImageReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateImageSourceReq returns new OptUpdateImageSourceReq with value set to v.
func NewOptUpdateImageSourceReq(v UpdateImageSourceReq) OptUpdateImageSourceReq {
	return OptUpdateImageSourceReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateImageSourceReq is optional UpdateImageSourceReq.
type OptUpdateImageSourceReq struct {
	Value UpdateImageSourceReq
	Set   bool
}

// IsSet returns true if OptUpdateImageSourceReq was set.
func (o OptUpdateImageSourceReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateImageSourceReq) Reset() {
	var v UpdateImageSourceReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateImageSourceReq) SetTo(v UpdateImageSourceReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateImageSourceReq) Get() (v UpdateImageSourceReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateImageSourceReq) Or(d UpdateImageSourceReq) UpdateImageSourceReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateImageSourceReqAbout returns new OptUpdateImageSourceReqAbout with value set to v.
func NewOptUpdateImageSourceReqAbout(v UpdateImageSourceReqAbout) OptUpdateImageSourceReqAbout {
	return OptUpdateImageSourceReqAbout{
		Value: v,
		Set:   true,
	}
}

// OptUpdateImageSourceReqAbout is optional UpdateImageSourceReqAbout.
type OptUpdateImageSourceReqAbout struct {
	Value UpdateImageSourceReqAbout
	Set   bool
}

// IsSet returns true if OptUpdateImageSourceReqAbout was set.
func (o OptUpdateImageSourceReqAbout) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateImageSourceReqAbout) Reset() {
	var v UpdateImageSourceReqAbout
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateImageSourceReqAbout) SetTo(v UpdateImageSourceReqAbout) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateImageSourceReqAbout) Get() (v UpdateImageSourceReqAbout, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateImageSourceReqAbout) Or(d UpdateImageSourceReqAbout) UpdateImageSourceReqAbout {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateNetworkReq returns new OptUpdateNetworkReq with value set to v.
func NewOptUpdateNetworkReq(v UpdateNetworkReq) OptUpdateNetworkReq {
	return OptUpdateNetworkReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateNetworkReq is optional UpdateNetworkReq.
type OptUpdateNetworkReq struct {
	Value UpdateNetworkReq
	Set   bool
}

// IsSet returns true if OptUpdateNetworkReq was set.
func (o OptUpdateNetworkReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateNetworkReq) Reset() {
	var v UpdateNetworkReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateNetworkReq) SetTo(v UpdateNetworkReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateNetworkReq) Get() (v UpdateNetworkReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateNetworkReq) Or(d UpdateNetworkReq) UpdateNetworkReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePipelineReq returns new OptUpdatePipelineReq with value set to v.
func NewOptUpdatePipelineReq(v UpdatePipelineReq) OptUpdatePipelineReq {
	return OptUpdatePipelineReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePipelineReq is optional UpdatePipelineReq.
type OptUpdatePipelineReq struct {
	Value UpdatePipelineReq
	Set   bool
}

// IsSet returns true if OptUpdatePipelineReq was set.
func (o OptUpdatePipelineReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePipelineReq) Reset() {
	var v UpdatePipelineReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePipelineReq) SetTo(v UpdatePipelineReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePipelineReq) Get() (v UpdatePipelineReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePipelineReq) Or(d UpdatePipelineReq) UpdatePipelineReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePipelineTriggerKeyReq returns new OptUpdatePipelineTriggerKeyReq with value set to v.
func NewOptUpdatePipelineTriggerKeyReq(v UpdatePipelineTriggerKeyReq) OptUpdatePipelineTriggerKeyReq {
	return OptUpdatePipelineTriggerKeyReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePipelineTriggerKeyReq is optional UpdatePipelineTriggerKeyReq.
type OptUpdatePipelineTriggerKeyReq struct {
	Value UpdatePipelineTriggerKeyReq
	Set   bool
}

// IsSet returns true if OptUpdatePipelineTriggerKeyReq was set.
func (o OptUpdatePipelineTriggerKeyReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePipelineTriggerKeyReq) Reset() {
	var v UpdatePipelineTriggerKeyReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePipelineTriggerKeyReq) SetTo(v UpdatePipelineTriggerKeyReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePipelineTriggerKeyReq) Get() (v UpdatePipelineTriggerKeyReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePipelineTriggerKeyReq) Or(d UpdatePipelineTriggerKeyReq) UpdatePipelineTriggerKeyReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateRoleReq returns new OptUpdateRoleReq with value set to v.
func NewOptUpdateRoleReq(v UpdateRoleReq) OptUpdateRoleReq {
	return OptUpdateRoleReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateRoleReq is optional UpdateRoleReq.
type OptUpdateRoleReq struct {
	Value UpdateRoleReq
	Set   bool
}

// IsSet returns true if OptUpdateRoleReq was set.
func (o OptUpdateRoleReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateRoleReq) Reset() {
	var v UpdateRoleReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateRoleReq) SetTo(v UpdateRoleReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateRoleReq) Get() (v UpdateRoleReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateRoleReq) Or(d UpdateRoleReq) UpdateRoleReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateScopedVariableReq returns new OptUpdateScopedVariableReq with value set to v.
func NewOptUpdateScopedVariableReq(v UpdateScopedVariableReq) OptUpdateScopedVariableReq {
	return OptUpdateScopedVariableReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateScopedVariableReq is optional UpdateScopedVariableReq.
type OptUpdateScopedVariableReq struct {
	Value UpdateScopedVariableReq
	Set   bool
}

// IsSet returns true if OptUpdateScopedVariableReq was set.
func (o OptUpdateScopedVariableReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateScopedVariableReq) Reset() {
	var v UpdateScopedVariableReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateScopedVariableReq) SetTo(v UpdateScopedVariableReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateScopedVariableReq) Get() (v UpdateScopedVariableReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateScopedVariableReq) Or(d UpdateScopedVariableReq) UpdateScopedVariableReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateScopedVariableReqSource returns new OptUpdateScopedVariableReqSource with value set to v.
func NewOptUpdateScopedVariableReqSource(v UpdateScopedVariableReqSource) OptUpdateScopedVariableReqSource {
	return OptUpdateScopedVariableReqSource{
		Value: v,
		Set:   true,
	}
}

// OptUpdateScopedVariableReqSource is optional UpdateScopedVariableReqSource.
type OptUpdateScopedVariableReqSource struct {
	Value UpdateScopedVariableReqSource
	Set   bool
}

// IsSet returns true if OptUpdateScopedVariableReqSource was set.
func (o OptUpdateScopedVariableReqSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateScopedVariableReqSource) Reset() {
	var v UpdateScopedVariableReqSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateScopedVariableReqSource) SetTo(v UpdateScopedVariableReqSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateScopedVariableReqSource) Get() (v UpdateScopedVariableReqSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateScopedVariableReqSource) Or(d UpdateScopedVariableReqSource) UpdateScopedVariableReqSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateServerReq returns new OptUpdateServerReq with value set to v.
func NewOptUpdateServerReq(v UpdateServerReq) OptUpdateServerReq {
	return OptUpdateServerReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateServerReq is optional UpdateServerReq.
type OptUpdateServerReq struct {
	Value UpdateServerReq
	Set   bool
}

// IsSet returns true if OptUpdateServerReq was set.
func (o OptUpdateServerReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateServerReq) Reset() {
	var v UpdateServerReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateServerReq) SetTo(v UpdateServerReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateServerReq) Get() (v UpdateServerReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateServerReq) Or(d UpdateServerReq) UpdateServerReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateServerReqConstraintsAllow returns new OptUpdateServerReqConstraintsAllow with value set to v.
func NewOptUpdateServerReqConstraintsAllow(v UpdateServerReqConstraintsAllow) OptUpdateServerReqConstraintsAllow {
	return OptUpdateServerReqConstraintsAllow{
		Value: v,
		Set:   true,
	}
}

// OptUpdateServerReqConstraintsAllow is optional UpdateServerReqConstraintsAllow.
type OptUpdateServerReqConstraintsAllow struct {
	Value UpdateServerReqConstraintsAllow
	Set   bool
}

// IsSet returns true if OptUpdateServerReqConstraintsAllow was set.
func (o OptUpdateServerReqConstraintsAllow) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateServerReqConstraintsAllow) Reset() {
	var v UpdateServerReqConstraintsAllow
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateServerReqConstraintsAllow) SetTo(v UpdateServerReqConstraintsAllow) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateServerReqConstraintsAllow) Get() (v UpdateServerReqConstraintsAllow, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateServerReqConstraintsAllow) Or(d UpdateServerReqConstraintsAllow) UpdateServerReqConstraintsAllow {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateStackReq returns new OptUpdateStackReq with value set to v.
func NewOptUpdateStackReq(v UpdateStackReq) OptUpdateStackReq {
	return OptUpdateStackReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdateStackReq is optional UpdateStackReq.
type OptUpdateStackReq struct {
	Value UpdateStackReq
	Set   bool
}

// IsSet returns true if OptUpdateStackReq was set.
func (o OptUpdateStackReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateStackReq) Reset() {
	var v UpdateStackReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateStackReq) SetTo(v UpdateStackReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateStackReq) Get() (v UpdateStackReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateStackReq) Or(d UpdateStackReq) UpdateStackReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateStackReqVariables returns new OptUpdateStackReqVariables with value set to v.
func NewOptUpdateStackReqVariables(v UpdateStackReqVariables) OptUpdateStackReqVariables {
	return OptUpdateStackReqVariables{
		Value: v,
		Set:   true,
	}
}

// OptUpdateStackReqVariables is optional UpdateStackReqVariables.
type OptUpdateStackReqVariables struct {
	Value UpdateStackReqVariables
	Set   bool
}

// IsSet returns true if OptUpdateStackReqVariables was set.
func (o OptUpdateStackReqVariables) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateStackReqVariables) Reset() {
	var v UpdateStackReqVariables
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateStackReqVariables) SetTo(v UpdateStackReqVariables) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateStackReqVariables) Get() (v UpdateStackReqVariables, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateStackReqVariables) Or(d UpdateStackReqVariables) UpdateStackReqVariables {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1LbConfigRouterConfigExtension returns new OptV1LbConfigRouterConfigExtension with value set to v.
func NewOptV1LbConfigRouterConfigExtension(v V1LbConfigRouterConfigExtension) OptV1LbConfigRouterConfigExtension {
	return OptV1LbConfigRouterConfigExtension{
		Value: v,
		Set:   true,
	}
}

// OptV1LbConfigRouterConfigExtension is optional V1LbConfigRouterConfigExtension.
type OptV1LbConfigRouterConfigExtension struct {
	Value V1LbConfigRouterConfigExtension
	Set   bool
}

// IsSet returns true if OptV1LbConfigRouterConfigExtension was set.
func (o OptV1LbConfigRouterConfigExtension) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1LbConfigRouterConfigExtension) Reset() {
	var v V1LbConfigRouterConfigExtension
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1LbConfigRouterConfigExtension) SetTo(v V1LbConfigRouterConfigExtension) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1LbConfigRouterConfigExtension) Get() (v V1LbConfigRouterConfigExtension, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1LbConfigRouterConfigExtension) Or(d V1LbConfigRouterConfigExtension) V1LbConfigRouterConfigExtension {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1LbController returns new OptV1LbController with value set to v.
func NewOptV1LbController(v V1LbController) OptV1LbController {
	return OptV1LbController{
		Value: v,
		Set:   true,
	}
}

// OptV1LbController is optional V1LbController.
type OptV1LbController struct {
	Value V1LbController
	Set   bool
}

// IsSet returns true if OptV1LbController was set.
func (o OptV1LbController) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1LbController) Reset() {
	var v V1LbController
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1LbController) SetTo(v V1LbController) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1LbController) Get() (v V1LbController, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1LbController) Or(d V1LbController) V1LbController {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptV1LbControllerTransportConfigExtension returns new OptV1LbControllerTransportConfigExtension with value set to v.
func NewOptV1LbControllerTransportConfigExtension(v V1LbControllerTransportConfigExtension) OptV1LbControllerTransportConfigExtension {
	return OptV1LbControllerTransportConfigExtension{
		Value: v,
		Set:   true,
	}
}

// OptV1LbControllerTransportConfigExtension is optional V1LbControllerTransportConfigExtension.
type OptV1LbControllerTransportConfigExtension struct {
	Value V1LbControllerTransportConfigExtension
	Set   bool
}

// IsSet returns true if OptV1LbControllerTransportConfigExtension was set.
func (o OptV1LbControllerTransportConfigExtension) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptV1LbControllerTransportConfigExtension) Reset() {
	var v V1LbControllerTransportConfigExtension
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptV1LbControllerTransportConfigExtension) SetTo(v V1LbControllerTransportConfigExtension) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptV1LbControllerTransportConfigExtension) Get() (v V1LbControllerTransportConfigExtension, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptV1LbControllerTransportConfigExtension) Or(d V1LbControllerTransportConfigExtension) V1LbControllerTransportConfigExtension {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVpnReconfigureTaskContentsConfigAuth returns new OptVpnReconfigureTaskContentsConfigAuth with value set to v.
func NewOptVpnReconfigureTaskContentsConfigAuth(v VpnReconfigureTaskContentsConfigAuth) OptVpnReconfigureTaskContentsConfigAuth {
	return OptVpnReconfigureTaskContentsConfigAuth{
		Value: v,
		Set:   true,
	}
}

// OptVpnReconfigureTaskContentsConfigAuth is optional VpnReconfigureTaskContentsConfigAuth.
type OptVpnReconfigureTaskContentsConfigAuth struct {
	Value VpnReconfigureTaskContentsConfigAuth
	Set   bool
}

// IsSet returns true if OptVpnReconfigureTaskContentsConfigAuth was set.
func (o OptVpnReconfigureTaskContentsConfigAuth) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVpnReconfigureTaskContentsConfigAuth) Reset() {
	var v VpnReconfigureTaskContentsConfigAuth
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVpnReconfigureTaskContentsConfigAuth) SetTo(v VpnReconfigureTaskContentsConfigAuth) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVpnReconfigureTaskContentsConfigAuth) Get() (v VpnReconfigureTaskContentsConfigAuth, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVpnReconfigureTaskContentsConfigAuth) Or(d VpnReconfigureTaskContentsConfigAuth) VpnReconfigureTaskContentsConfigAuth {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookGetStepOptions returns new OptWebhookGetStepOptions with value set to v.
func NewOptWebhookGetStepOptions(v WebhookGetStepOptions) OptWebhookGetStepOptions {
	return OptWebhookGetStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptWebhookGetStepOptions is optional WebhookGetStepOptions.
type OptWebhookGetStepOptions struct {
	Value WebhookGetStepOptions
	Set   bool
}

// IsSet returns true if OptWebhookGetStepOptions was set.
func (o OptWebhookGetStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookGetStepOptions) Reset() {
	var v WebhookGetStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookGetStepOptions) SetTo(v WebhookGetStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookGetStepOptions) Get() (v WebhookGetStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookGetStepOptions) Or(d WebhookGetStepOptions) WebhookGetStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookPostStepOptions returns new OptWebhookPostStepOptions with value set to v.
func NewOptWebhookPostStepOptions(v WebhookPostStepOptions) OptWebhookPostStepOptions {
	return OptWebhookPostStepOptions{
		Value: v,
		Set:   true,
	}
}

// OptWebhookPostStepOptions is optional WebhookPostStepOptions.
type OptWebhookPostStepOptions struct {
	Value WebhookPostStepOptions
	Set   bool
}

// IsSet returns true if OptWebhookPostStepOptions was set.
func (o OptWebhookPostStepOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookPostStepOptions) Reset() {
	var v WebhookPostStepOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookPostStepOptions) SetTo(v WebhookPostStepOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookPostStepOptions) Get() (v WebhookPostStepOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookPostStepOptions) Or(d WebhookPostStepOptions) WebhookPostStepOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZoneIncludes returns new OptZoneIncludes with value set to v.
func NewOptZoneIncludes(v ZoneIncludes) OptZoneIncludes {
	return OptZoneIncludes{
		Value: v,
		Set:   true,
	}
}

// OptZoneIncludes is optional ZoneIncludes.
type OptZoneIncludes struct {
	Value ZoneIncludes
	Set   bool
}

// IsSet returns true if OptZoneIncludes was set.
func (o OptZoneIncludes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZoneIncludes) Reset() {
	var v ZoneIncludes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZoneIncludes) SetTo(v ZoneIncludes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZoneIncludes) Get() (v ZoneIncludes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZoneIncludes) Or(d ZoneIncludes) ZoneIncludes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptZoneStateError returns new OptZoneStateError with value set to v.
func NewOptZoneStateError(v ZoneStateError) OptZoneStateError {
	return OptZoneStateError{
		Value: v,
		Set:   true,
	}
}

// OptZoneStateError is optional ZoneStateError.
type OptZoneStateError struct {
	Value ZoneStateError
	Set   bool
}

// IsSet returns true if OptZoneStateError was set.
func (o OptZoneStateError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptZoneStateError) Reset() {
	var v ZoneStateError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptZoneStateError) SetTo(v ZoneStateError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptZoneStateError) Get() (v ZoneStateError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptZoneStateError) Or(d ZoneStateError) ZoneStateError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// An order is a resource that describes a billing order.
// Ref: #/components/schemas/Order
type Order struct {
	HubID       string      `json:"hub_id"`
	Creator     UserScope   `json:"creator"`
	PromoCodeID NilString   `json:"promo_code_id"`
	Term        Term        `json:"term"`
	Approved    bool        `json:"approved"`
	Items       []OrderItem `json:"items"`
	TotalPrice  float64     `json:"total_price"`
	// A collection of timestamps for each event in the orders lifetime.
	Events OrderEvents `json:"events"`
	State  OrderState  `json:"state"`
}

// GetHubID returns the value of HubID.
func (s *Order) GetHubID() string {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Order) GetCreator() UserScope {
	return s.Creator
}

// GetPromoCodeID returns the value of PromoCodeID.
func (s *Order) GetPromoCodeID() NilString {
	return s.PromoCodeID
}

// GetTerm returns the value of Term.
func (s *Order) GetTerm() Term {
	return s.Term
}

// GetApproved returns the value of Approved.
func (s *Order) GetApproved() bool {
	return s.Approved
}

// GetItems returns the value of Items.
func (s *Order) GetItems() []OrderItem {
	return s.Items
}

// GetTotalPrice returns the value of TotalPrice.
func (s *Order) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetEvents returns the value of Events.
func (s *Order) GetEvents() OrderEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Order) GetState() OrderState {
	return s.State
}

// SetHubID sets the value of HubID.
func (s *Order) SetHubID(val string) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Order) SetCreator(val UserScope) {
	s.Creator = val
}

// SetPromoCodeID sets the value of PromoCodeID.
func (s *Order) SetPromoCodeID(val NilString) {
	s.PromoCodeID = val
}

// SetTerm sets the value of Term.
func (s *Order) SetTerm(val Term) {
	s.Term = val
}

// SetApproved sets the value of Approved.
func (s *Order) SetApproved(val bool) {
	s.Approved = val
}

// SetItems sets the value of Items.
func (s *Order) SetItems(val []OrderItem) {
	s.Items = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *Order) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetEvents sets the value of Events.
func (s *Order) SetEvents(val OrderEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Order) SetState(val OrderState) {
	s.State = val
}

// A collection of timestamps for each event in the orders lifetime.
type OrderEvents struct {
	Expires DateTime `json:"expires"`
}

// GetExpires returns the value of Expires.
func (s *OrderEvents) GetExpires() DateTime {
	return s.Expires
}

// SetExpires sets the value of Expires.
func (s *OrderEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// Describes a billing item.
// Ref: #/components/schemas/OrderItem
type OrderItem struct {
	ID          string               `json:"id"`
	Service     ServiceItem          `json:"service"`
	Description string               `json:"description"`
	Price       BillingAmount        `json:"price"`
	Discount    OptOrderItemDiscount `json:"discount"`
	NetPrice    float64              `json:"net_price"`
}

// GetID returns the value of ID.
func (s *OrderItem) GetID() string {
	return s.ID
}

// GetService returns the value of Service.
func (s *OrderItem) GetService() ServiceItem {
	return s.Service
}

// GetDescription returns the value of Description.
func (s *OrderItem) GetDescription() string {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *OrderItem) GetPrice() BillingAmount {
	return s.Price
}

// GetDiscount returns the value of Discount.
func (s *OrderItem) GetDiscount() OptOrderItemDiscount {
	return s.Discount
}

// GetNetPrice returns the value of NetPrice.
func (s *OrderItem) GetNetPrice() float64 {
	return s.NetPrice
}

// SetID sets the value of ID.
func (s *OrderItem) SetID(val string) {
	s.ID = val
}

// SetService sets the value of Service.
func (s *OrderItem) SetService(val ServiceItem) {
	s.Service = val
}

// SetDescription sets the value of Description.
func (s *OrderItem) SetDescription(val string) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *OrderItem) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetDiscount sets the value of Discount.
func (s *OrderItem) SetDiscount(val OptOrderItemDiscount) {
	s.Discount = val
}

// SetNetPrice sets the value of NetPrice.
func (s *OrderItem) SetNetPrice(val float64) {
	s.NetPrice = val
}

type OrderItemDiscount struct {
	ID      string        `json:"id"`
	Amount  BillingAmount `json:"amount"`
	Expires DateTime      `json:"expires"`
}

// GetID returns the value of ID.
func (s *OrderItemDiscount) GetID() string {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *OrderItemDiscount) GetAmount() BillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *OrderItemDiscount) GetExpires() DateTime {
	return s.Expires
}

// SetID sets the value of ID.
func (s *OrderItemDiscount) SetID(val string) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *OrderItemDiscount) SetAmount(val BillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *OrderItemDiscount) SetExpires(val DateTime) {
	s.Expires = val
}

// Merged schema.
// Ref: #/components/schemas/OrderState
type OrderState struct {
	// The current state of the zone.
	Current OrderStateCurrent `json:"current"`
	Changed DateTime          `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptOrderStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *OrderState) GetCurrent() OrderStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *OrderState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *OrderState) GetError() OptOrderStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *OrderState) SetCurrent(val OrderStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *OrderState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *OrderState) SetError(val OptOrderStateError) {
	s.Error = val
}

// The current state of the zone.
type OrderStateCurrent string

const (
	OrderStateCurrentNew       OrderStateCurrent = "new"
	OrderStateCurrentProcessed OrderStateCurrent = "processed"
	OrderStateCurrentDeleting  OrderStateCurrent = "deleting"
	OrderStateCurrentDeleted   OrderStateCurrent = "deleted"
)

// AllValues returns all OrderStateCurrent values.
func (OrderStateCurrent) AllValues() []OrderStateCurrent {
	return []OrderStateCurrent{
		OrderStateCurrentNew,
		OrderStateCurrentProcessed,
		OrderStateCurrentDeleting,
		OrderStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case OrderStateCurrentNew:
		return []byte(s), nil
	case OrderStateCurrentProcessed:
		return []byte(s), nil
	case OrderStateCurrentDeleting:
		return []byte(s), nil
	case OrderStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStateCurrent) UnmarshalText(data []byte) error {
	switch OrderStateCurrent(data) {
	case OrderStateCurrentNew:
		*s = OrderStateCurrentNew
		return nil
	case OrderStateCurrentProcessed:
		*s = OrderStateCurrentProcessed
		return nil
	case OrderStateCurrentDeleting:
		*s = OrderStateCurrentDeleting
		return nil
	case OrderStateCurrentDeleted:
		*s = OrderStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type OrderStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *OrderStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *OrderStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *OrderStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *OrderStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about billing overage.
// Ref: #/components/schemas/Overage
type Overage struct {
	Term Term `json:"term"`
	// Used for gen 1 pricing.
	RAM OverageRAM `json:"ram"`
}

// GetTerm returns the value of Term.
func (s *Overage) GetTerm() Term {
	return s.Term
}

// GetRAM returns the value of RAM.
func (s *Overage) GetRAM() OverageRAM {
	return s.RAM
}

// SetTerm sets the value of Term.
func (s *Overage) SetTerm(val Term) {
	s.Term = val
}

// SetRAM sets the value of RAM.
func (s *Overage) SetRAM(val OverageRAM) {
	s.RAM = val
}

// Used for gen 1 pricing.
type OverageRAM struct {
	// The number of hours of overage.
	GBHours int `json:"gb_hours"`
	// The cost of the overage.
	Cost int `json:"cost"`
}

// GetGBHours returns the value of GBHours.
func (s *OverageRAM) GetGBHours() int {
	return s.GBHours
}

// GetCost returns the value of Cost.
func (s *OverageRAM) GetCost() int {
	return s.Cost
}

// SetGBHours sets the value of GBHours.
func (s *OverageRAM) SetGBHours(val int) {
	s.GBHours = val
}

// SetCost sets the value of Cost.
func (s *OverageRAM) SetCost(val int) {
	s.Cost = val
}

// A billing payment.
// Ref: #/components/schemas/Payment
type Payment struct {
	ID   ID       `json:"id"`
	Time DateTime `json:"time"`
	// Some information about the payment.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount int `json:"amount"`
	// 1/10th of a cent.
	AmountRefunded int      `json:"amount_refunded"`
	Refunds        []Refund `json:"refunds"`
	// The ID associated with the billing method used.
	MethodID string         `json:"method_id"`
	Result   PaymentResult  `json:"result"`
	Gateway  PaymentGateway `json:"gateway"`
}

// GetID returns the value of ID.
func (s *Payment) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *Payment) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *Payment) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *Payment) GetAmount() int {
	return s.Amount
}

// GetAmountRefunded returns the value of AmountRefunded.
func (s *Payment) GetAmountRefunded() int {
	return s.AmountRefunded
}

// GetRefunds returns the value of Refunds.
func (s *Payment) GetRefunds() []Refund {
	return s.Refunds
}

// GetMethodID returns the value of MethodID.
func (s *Payment) GetMethodID() string {
	return s.MethodID
}

// GetResult returns the value of Result.
func (s *Payment) GetResult() PaymentResult {
	return s.Result
}

// GetGateway returns the value of Gateway.
func (s *Payment) GetGateway() PaymentGateway {
	return s.Gateway
}

// SetID sets the value of ID.
func (s *Payment) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *Payment) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *Payment) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *Payment) SetAmount(val int) {
	s.Amount = val
}

// SetAmountRefunded sets the value of AmountRefunded.
func (s *Payment) SetAmountRefunded(val int) {
	s.AmountRefunded = val
}

// SetRefunds sets the value of Refunds.
func (s *Payment) SetRefunds(val []Refund) {
	s.Refunds = val
}

// SetMethodID sets the value of MethodID.
func (s *Payment) SetMethodID(val string) {
	s.MethodID = val
}

// SetResult sets the value of Result.
func (s *Payment) SetResult(val PaymentResult) {
	s.Result = val
}

// SetGateway sets the value of Gateway.
func (s *Payment) SetGateway(val PaymentGateway) {
	s.Gateway = val
}

// The type of payment gateway used.
// Ref: #/components/schemas/PaymentGateway
type PaymentGateway string

const (
	PaymentGatewayStripe PaymentGateway = "stripe"
)

// AllValues returns all PaymentGateway values.
func (PaymentGateway) AllValues() []PaymentGateway {
	return []PaymentGateway{
		PaymentGatewayStripe,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentGateway) MarshalText() ([]byte, error) {
	switch s {
	case PaymentGatewayStripe:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentGateway) UnmarshalText(data []byte) error {
	switch PaymentGateway(data) {
	case PaymentGatewayStripe:
		*s = PaymentGatewayStripe
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A billing payment result.
// Ref: #/components/schemas/PaymentResult
type PaymentResult struct {
	// A boolean where true represents the success of the payment.
	Success bool `json:"success"`
	// A description of the error that took place.
	Error string `json:"error"`
}

// GetSuccess returns the value of Success.
func (s *PaymentResult) GetSuccess() bool {
	return s.Success
}

// GetError returns the value of Error.
func (s *PaymentResult) GetError() string {
	return s.Error
}

// SetSuccess sets the value of Success.
func (s *PaymentResult) SetSuccess(val bool) {
	s.Success = val
}

// SetError sets the value of Error.
func (s *PaymentResult) SetError(val string) {
	s.Error = val
}

// Permissions information for an API Key.
// Ref: #/components/schemas/Permissions
type Permissions struct {
	// A boolean, where true represents this API key is authorized to make requests that involve all of a
	// hubs environments.
	AllEnvironments bool `json:"all_environments"`
	// An environment ID and a boolean representing management configuration for an API key.
	Environments []PermissionsEnvironmentsItem `json:"environments"`
}

// GetAllEnvironments returns the value of AllEnvironments.
func (s *Permissions) GetAllEnvironments() bool {
	return s.AllEnvironments
}

// GetEnvironments returns the value of Environments.
func (s *Permissions) GetEnvironments() []PermissionsEnvironmentsItem {
	return s.Environments
}

// SetAllEnvironments sets the value of AllEnvironments.
func (s *Permissions) SetAllEnvironments(val bool) {
	s.AllEnvironments = val
}

// SetEnvironments sets the value of Environments.
func (s *Permissions) SetEnvironments(val []PermissionsEnvironmentsItem) {
	s.Environments = val
}

type PermissionsEnvironmentsItem struct {
	ID ID `json:"id"`
	// A boolean, where true represents the API keys ability to make changes to the environment components.
	Manage bool `json:"manage"`
}

// GetID returns the value of ID.
func (s *PermissionsEnvironmentsItem) GetID() ID {
	return s.ID
}

// GetManage returns the value of Manage.
func (s *PermissionsEnvironmentsItem) GetManage() bool {
	return s.Manage
}

// SetID sets the value of ID.
func (s *PermissionsEnvironmentsItem) SetID(val ID) {
	s.ID = val
}

// SetManage sets the value of Manage.
func (s *PermissionsEnvironmentsItem) SetManage(val bool) {
	s.Manage = val
}

// A pipeline resource.
// Ref: #/components/schemas/Pipeline
type Pipeline struct {
	ID         ID            `json:"id"`
	Identifier OptIdentifier `json:"identifier"`
	// A name for the pipeline.
	Name    string       `json:"name"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// A boolean where true signifies the pipeline is disabled.
	Disable bool `json:"disable"`
	// Setting to true enables variable and other advanced logic support on this pipeline. This is a
	// one-way toggle. Once set to true, it cannot be set back to false.
	Dynamic bool `json:"dynamic"`
	// An array of stages.
	Stages []PipelineStage `json:"stages"`
	// A collection of timestamps for each event in the pipeline's lifetime.
	Events PipelineEvents `json:"events"`
	State  PipelineState  `json:"state"`
}

// GetID returns the value of ID.
func (s *Pipeline) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *Pipeline) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetName returns the value of Name.
func (s *Pipeline) GetName() string {
	return s.Name
}

// GetCreator returns the value of Creator.
func (s *Pipeline) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *Pipeline) GetHubID() HubID {
	return s.HubID
}

// GetDisable returns the value of Disable.
func (s *Pipeline) GetDisable() bool {
	return s.Disable
}

// GetDynamic returns the value of Dynamic.
func (s *Pipeline) GetDynamic() bool {
	return s.Dynamic
}

// GetStages returns the value of Stages.
func (s *Pipeline) GetStages() []PipelineStage {
	return s.Stages
}

// GetEvents returns the value of Events.
func (s *Pipeline) GetEvents() PipelineEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Pipeline) GetState() PipelineState {
	return s.State
}

// SetID sets the value of ID.
func (s *Pipeline) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *Pipeline) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetName sets the value of Name.
func (s *Pipeline) SetName(val string) {
	s.Name = val
}

// SetCreator sets the value of Creator.
func (s *Pipeline) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *Pipeline) SetHubID(val HubID) {
	s.HubID = val
}

// SetDisable sets the value of Disable.
func (s *Pipeline) SetDisable(val bool) {
	s.Disable = val
}

// SetDynamic sets the value of Dynamic.
func (s *Pipeline) SetDynamic(val bool) {
	s.Dynamic = val
}

// SetStages sets the value of Stages.
func (s *Pipeline) SetStages(val []PipelineStage) {
	s.Stages = val
}

// SetEvents sets the value of Events.
func (s *Pipeline) SetEvents(val PipelineEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Pipeline) SetState(val PipelineState) {
	s.State = val
}

// A collection of timestamps for each event in the pipeline's lifetime.
type PipelineEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
	LastRun DateTime `json:"last_run"`
}

// GetCreated returns the value of Created.
func (s *PipelineEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PipelineEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *PipelineEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastRun returns the value of LastRun.
func (s *PipelineEvents) GetLastRun() DateTime {
	return s.LastRun
}

// SetCreated sets the value of Created.
func (s *PipelineEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PipelineEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *PipelineEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastRun sets the value of LastRun.
func (s *PipelineEvents) SetLastRun(val DateTime) {
	s.LastRun = val
}

// All includable resources linkable to the given pipeline.
// Ref: #/components/schemas/PipelineIncludes
type PipelineIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
	// A name value.
	Name OptString `json:"name"`
	// A record of resources that can be associated with the pipeline.
	Components            OptPipelineIncludesComponents `json:"components"`
	ComponentsIdentifiers OptIdentifierIncludes         `json:"components:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *PipelineIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetName returns the value of Name.
func (s *PipelineIncludes) GetName() OptString {
	return s.Name
}

// GetComponents returns the value of Components.
func (s *PipelineIncludes) GetComponents() OptPipelineIncludesComponents {
	return s.Components
}

// GetComponentsIdentifiers returns the value of ComponentsIdentifiers.
func (s *PipelineIncludes) GetComponentsIdentifiers() OptIdentifierIncludes {
	return s.ComponentsIdentifiers
}

// SetCreators sets the value of Creators.
func (s *PipelineIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetName sets the value of Name.
func (s *PipelineIncludes) SetName(val OptString) {
	s.Name = val
}

// SetComponents sets the value of Components.
func (s *PipelineIncludes) SetComponents(val OptPipelineIncludesComponents) {
	s.Components = val
}

// SetComponentsIdentifiers sets the value of ComponentsIdentifiers.
func (s *PipelineIncludes) SetComponentsIdentifiers(val OptIdentifierIncludes) {
	s.ComponentsIdentifiers = val
}

// A record of resources that can be associated with the pipeline.
type PipelineIncludesComponents map[string]PipelineIncludesComponentsItem

func (s *PipelineIncludesComponents) init() PipelineIncludesComponents {
	m := *s
	if m == nil {
		m = map[string]PipelineIncludesComponentsItem{}
		*s = m
	}
	return m
}

// PipelineIncludesComponentsItem represents sum type.
type PipelineIncludesComponentsItem struct {
	Type        PipelineIncludesComponentsItemType // switch on this field
	Container   Container
	Environment Environment
	Stack       Stack
	StackBuild  StackBuild
	Image       Image
	ImageSource ImageSource
}

// PipelineIncludesComponentsItemType is oneOf type of PipelineIncludesComponentsItem.
type PipelineIncludesComponentsItemType string

// Possible values for PipelineIncludesComponentsItemType.
const (
	ContainerPipelineIncludesComponentsItem   PipelineIncludesComponentsItemType = "Container"
	EnvironmentPipelineIncludesComponentsItem PipelineIncludesComponentsItemType = "Environment"
	StackPipelineIncludesComponentsItem       PipelineIncludesComponentsItemType = "Stack"
	StackBuildPipelineIncludesComponentsItem  PipelineIncludesComponentsItemType = "StackBuild"
	ImagePipelineIncludesComponentsItem       PipelineIncludesComponentsItemType = "Image"
	ImageSourcePipelineIncludesComponentsItem PipelineIncludesComponentsItemType = "ImageSource"
)

// IsContainer reports whether PipelineIncludesComponentsItem is Container.
func (s PipelineIncludesComponentsItem) IsContainer() bool {
	return s.Type == ContainerPipelineIncludesComponentsItem
}

// IsEnvironment reports whether PipelineIncludesComponentsItem is Environment.
func (s PipelineIncludesComponentsItem) IsEnvironment() bool {
	return s.Type == EnvironmentPipelineIncludesComponentsItem
}

// IsStack reports whether PipelineIncludesComponentsItem is Stack.
func (s PipelineIncludesComponentsItem) IsStack() bool {
	return s.Type == StackPipelineIncludesComponentsItem
}

// IsStackBuild reports whether PipelineIncludesComponentsItem is StackBuild.
func (s PipelineIncludesComponentsItem) IsStackBuild() bool {
	return s.Type == StackBuildPipelineIncludesComponentsItem
}

// IsImage reports whether PipelineIncludesComponentsItem is Image.
func (s PipelineIncludesComponentsItem) IsImage() bool {
	return s.Type == ImagePipelineIncludesComponentsItem
}

// IsImageSource reports whether PipelineIncludesComponentsItem is ImageSource.
func (s PipelineIncludesComponentsItem) IsImageSource() bool {
	return s.Type == ImageSourcePipelineIncludesComponentsItem
}

// SetContainer sets PipelineIncludesComponentsItem to Container.
func (s *PipelineIncludesComponentsItem) SetContainer(v Container) {
	s.Type = ContainerPipelineIncludesComponentsItem
	s.Container = v
}

// GetContainer returns Container and true boolean if PipelineIncludesComponentsItem is Container.
func (s PipelineIncludesComponentsItem) GetContainer() (v Container, ok bool) {
	if !s.IsContainer() {
		return v, false
	}
	return s.Container, true
}

// NewContainerPipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from Container.
func NewContainerPipelineIncludesComponentsItem(v Container) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetContainer(v)
	return s
}

// SetEnvironment sets PipelineIncludesComponentsItem to Environment.
func (s *PipelineIncludesComponentsItem) SetEnvironment(v Environment) {
	s.Type = EnvironmentPipelineIncludesComponentsItem
	s.Environment = v
}

// GetEnvironment returns Environment and true boolean if PipelineIncludesComponentsItem is Environment.
func (s PipelineIncludesComponentsItem) GetEnvironment() (v Environment, ok bool) {
	if !s.IsEnvironment() {
		return v, false
	}
	return s.Environment, true
}

// NewEnvironmentPipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from Environment.
func NewEnvironmentPipelineIncludesComponentsItem(v Environment) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetEnvironment(v)
	return s
}

// SetStack sets PipelineIncludesComponentsItem to Stack.
func (s *PipelineIncludesComponentsItem) SetStack(v Stack) {
	s.Type = StackPipelineIncludesComponentsItem
	s.Stack = v
}

// GetStack returns Stack and true boolean if PipelineIncludesComponentsItem is Stack.
func (s PipelineIncludesComponentsItem) GetStack() (v Stack, ok bool) {
	if !s.IsStack() {
		return v, false
	}
	return s.Stack, true
}

// NewStackPipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from Stack.
func NewStackPipelineIncludesComponentsItem(v Stack) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetStack(v)
	return s
}

// SetStackBuild sets PipelineIncludesComponentsItem to StackBuild.
func (s *PipelineIncludesComponentsItem) SetStackBuild(v StackBuild) {
	s.Type = StackBuildPipelineIncludesComponentsItem
	s.StackBuild = v
}

// GetStackBuild returns StackBuild and true boolean if PipelineIncludesComponentsItem is StackBuild.
func (s PipelineIncludesComponentsItem) GetStackBuild() (v StackBuild, ok bool) {
	if !s.IsStackBuild() {
		return v, false
	}
	return s.StackBuild, true
}

// NewStackBuildPipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from StackBuild.
func NewStackBuildPipelineIncludesComponentsItem(v StackBuild) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetStackBuild(v)
	return s
}

// SetImage sets PipelineIncludesComponentsItem to Image.
func (s *PipelineIncludesComponentsItem) SetImage(v Image) {
	s.Type = ImagePipelineIncludesComponentsItem
	s.Image = v
}

// GetImage returns Image and true boolean if PipelineIncludesComponentsItem is Image.
func (s PipelineIncludesComponentsItem) GetImage() (v Image, ok bool) {
	if !s.IsImage() {
		return v, false
	}
	return s.Image, true
}

// NewImagePipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from Image.
func NewImagePipelineIncludesComponentsItem(v Image) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetImage(v)
	return s
}

// SetImageSource sets PipelineIncludesComponentsItem to ImageSource.
func (s *PipelineIncludesComponentsItem) SetImageSource(v ImageSource) {
	s.Type = ImageSourcePipelineIncludesComponentsItem
	s.ImageSource = v
}

// GetImageSource returns ImageSource and true boolean if PipelineIncludesComponentsItem is ImageSource.
func (s PipelineIncludesComponentsItem) GetImageSource() (v ImageSource, ok bool) {
	if !s.IsImageSource() {
		return v, false
	}
	return s.ImageSource, true
}

// NewImageSourcePipelineIncludesComponentsItem returns new PipelineIncludesComponentsItem from ImageSource.
func NewImageSourcePipelineIncludesComponentsItem(v ImageSource) PipelineIncludesComponentsItem {
	var s PipelineIncludesComponentsItem
	s.SetImageSource(v)
	return s
}

// A pipeline run resource.
// Ref: #/components/schemas/PipelineRun
type PipelineRun struct {
	ID      ID           `json:"id"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// The ID for the pipeline this run belongs to.
	PipelineID string `json:"pipeline_id"`
	// An array of pipeline stages.
	Stages []PipelineRunStagesItem `json:"stages"`
	State  RunState                `json:"state"`
	Events PipelineRunEvents       `json:"events"`
	// A map of variable values used during pipeline run.
	Variables OptPipelineRunVariables `json:"variables"`
}

// GetID returns the value of ID.
func (s *PipelineRun) GetID() ID {
	return s.ID
}

// GetCreator returns the value of Creator.
func (s *PipelineRun) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *PipelineRun) GetHubID() HubID {
	return s.HubID
}

// GetPipelineID returns the value of PipelineID.
func (s *PipelineRun) GetPipelineID() string {
	return s.PipelineID
}

// GetStages returns the value of Stages.
func (s *PipelineRun) GetStages() []PipelineRunStagesItem {
	return s.Stages
}

// GetState returns the value of State.
func (s *PipelineRun) GetState() RunState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *PipelineRun) GetEvents() PipelineRunEvents {
	return s.Events
}

// GetVariables returns the value of Variables.
func (s *PipelineRun) GetVariables() OptPipelineRunVariables {
	return s.Variables
}

// SetID sets the value of ID.
func (s *PipelineRun) SetID(val ID) {
	s.ID = val
}

// SetCreator sets the value of Creator.
func (s *PipelineRun) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *PipelineRun) SetHubID(val HubID) {
	s.HubID = val
}

// SetPipelineID sets the value of PipelineID.
func (s *PipelineRun) SetPipelineID(val string) {
	s.PipelineID = val
}

// SetStages sets the value of Stages.
func (s *PipelineRun) SetStages(val []PipelineRunStagesItem) {
	s.Stages = val
}

// SetState sets the value of State.
func (s *PipelineRun) SetState(val RunState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *PipelineRun) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

// SetVariables sets the value of Variables.
func (s *PipelineRun) SetVariables(val OptPipelineRunVariables) {
	s.Variables = val
}

// A collection of timestamps for each event in the pipeline run's lifetime.
// Ref: #/components/schemas/PipelineRunEvents
type PipelineRunEvents struct {
	Started  DateTime `json:"started"`
	Queued   DateTime `json:"queued"`
	Finished DateTime `json:"finished"`
}

// GetStarted returns the value of Started.
func (s *PipelineRunEvents) GetStarted() DateTime {
	return s.Started
}

// GetQueued returns the value of Queued.
func (s *PipelineRunEvents) GetQueued() DateTime {
	return s.Queued
}

// GetFinished returns the value of Finished.
func (s *PipelineRunEvents) GetFinished() DateTime {
	return s.Finished
}

// SetStarted sets the value of Started.
func (s *PipelineRunEvents) SetStarted(val DateTime) {
	s.Started = val
}

// SetQueued sets the value of Queued.
func (s *PipelineRunEvents) SetQueued(val DateTime) {
	s.Queued = val
}

// SetFinished sets the value of Finished.
func (s *PipelineRunEvents) SetFinished(val DateTime) {
	s.Finished = val
}

type PipelineRunStagesItem struct {
	// A stage identifier.
	Identifier string                           `json:"identifier"`
	Steps      []PipelineRunStagesItemStepsItem `json:"steps"`
	Events     PipelineRunEvents                `json:"events"`
}

// GetIdentifier returns the value of Identifier.
func (s *PipelineRunStagesItem) GetIdentifier() string {
	return s.Identifier
}

// GetSteps returns the value of Steps.
func (s *PipelineRunStagesItem) GetSteps() []PipelineRunStagesItemStepsItem {
	return s.Steps
}

// GetEvents returns the value of Events.
func (s *PipelineRunStagesItem) GetEvents() PipelineRunEvents {
	return s.Events
}

// SetIdentifier sets the value of Identifier.
func (s *PipelineRunStagesItem) SetIdentifier(val string) {
	s.Identifier = val
}

// SetSteps sets the value of Steps.
func (s *PipelineRunStagesItem) SetSteps(val []PipelineRunStagesItemStepsItem) {
	s.Steps = val
}

// SetEvents sets the value of Events.
func (s *PipelineRunStagesItem) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

type PipelineRunStagesItemStepsItem struct {
	Identifier string                               `json:"identifier"`
	Action     PipelineRunStagesItemStepsItemAction `json:"action"`
	Events     PipelineRunEvents                    `json:"events"`
	Success    bool                                 `json:"success"`
	// An error, if any, that has occurred for this step.
	Error OptNilPipelineRunStagesItemStepsItemError `json:"error"`
}

// GetIdentifier returns the value of Identifier.
func (s *PipelineRunStagesItemStepsItem) GetIdentifier() string {
	return s.Identifier
}

// GetAction returns the value of Action.
func (s *PipelineRunStagesItemStepsItem) GetAction() PipelineRunStagesItemStepsItemAction {
	return s.Action
}

// GetEvents returns the value of Events.
func (s *PipelineRunStagesItemStepsItem) GetEvents() PipelineRunEvents {
	return s.Events
}

// GetSuccess returns the value of Success.
func (s *PipelineRunStagesItemStepsItem) GetSuccess() bool {
	return s.Success
}

// GetError returns the value of Error.
func (s *PipelineRunStagesItemStepsItem) GetError() OptNilPipelineRunStagesItemStepsItemError {
	return s.Error
}

// SetIdentifier sets the value of Identifier.
func (s *PipelineRunStagesItemStepsItem) SetIdentifier(val string) {
	s.Identifier = val
}

// SetAction sets the value of Action.
func (s *PipelineRunStagesItemStepsItem) SetAction(val PipelineRunStagesItemStepsItemAction) {
	s.Action = val
}

// SetEvents sets the value of Events.
func (s *PipelineRunStagesItemStepsItem) SetEvents(val PipelineRunEvents) {
	s.Events = val
}

// SetSuccess sets the value of Success.
func (s *PipelineRunStagesItemStepsItem) SetSuccess(val bool) {
	s.Success = val
}

// SetError sets the value of Error.
func (s *PipelineRunStagesItemStepsItem) SetError(val OptNilPipelineRunStagesItemStepsItemError) {
	s.Error = val
}

type PipelineRunStagesItemStepsItemAction string

const (
	PipelineRunStagesItemStepsItemActionEnvironmentCreate                 PipelineRunStagesItemStepsItemAction = "environment.create"
	PipelineRunStagesItemStepsItemActionEnvironmentStart                  PipelineRunStagesItemStepsItemAction = "environment.start"
	PipelineRunStagesItemStepsItemActionEnvironmentStop                   PipelineRunStagesItemStepsItemAction = "environment.stop"
	PipelineRunStagesItemStepsItemActionEnvironmentDelete                 PipelineRunStagesItemStepsItemAction = "environment.delete"
	PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsPrune       PipelineRunStagesItemStepsItemAction = "environment.deployments.prune"
	PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsTag         PipelineRunStagesItemStepsItemAction = "environment.deployments.tag"
	PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStart        PipelineRunStagesItemStepsItemAction = "environment.deployment.start"
	PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStop         PipelineRunStagesItemStepsItemAction = "environment.deployment.stop"
	PipelineRunStagesItemStepsItemActionEnvironmentDeploymentHealthyWatch PipelineRunStagesItemStepsItemAction = "environment.deployment.healthy.watch"
	PipelineRunStagesItemStepsItemActionImageSourceCreate                 PipelineRunStagesItemStepsItemAction = "image.source.create"
	PipelineRunStagesItemStepsItemActionImageCreate                       PipelineRunStagesItemStepsItemAction = "image.create"
	PipelineRunStagesItemStepsItemActionImageImport                       PipelineRunStagesItemStepsItemAction = "image.import"
	PipelineRunStagesItemStepsItemActionImagesPrune                       PipelineRunStagesItemStepsItemAction = "images.prune"
	PipelineRunStagesItemStepsItemActionImageCreateImport                 PipelineRunStagesItemStepsItemAction = "image.create-import"
	PipelineRunStagesItemStepsItemActionContainerCreate                   PipelineRunStagesItemStepsItemAction = "container.create"
	PipelineRunStagesItemStepsItemActionContainerReimage                  PipelineRunStagesItemStepsItemAction = "container.reimage"
	PipelineRunStagesItemStepsItemActionContainerStart                    PipelineRunStagesItemStepsItemAction = "container.start"
	PipelineRunStagesItemStepsItemActionContainerStop                     PipelineRunStagesItemStepsItemAction = "container.stop"
	PipelineRunStagesItemStepsItemActionContainerRestart                  PipelineRunStagesItemStepsItemAction = "container.restart"
	PipelineRunStagesItemStepsItemActionContainerDelete                   PipelineRunStagesItemStepsItemAction = "container.delete"
	PipelineRunStagesItemStepsItemActionStackBuildCreate                  PipelineRunStagesItemStepsItemAction = "stack.build.create"
	PipelineRunStagesItemStepsItemActionStackBuildDeploy                  PipelineRunStagesItemStepsItemAction = "stack.build.deploy"
	PipelineRunStagesItemStepsItemActionStackBuildGenerate                PipelineRunStagesItemStepsItemAction = "stack.build.generate"
	PipelineRunStagesItemStepsItemActionStackPrune                        PipelineRunStagesItemStepsItemAction = "stack.prune"
	PipelineRunStagesItemStepsItemActionSleep                             PipelineRunStagesItemStepsItemAction = "sleep"
	PipelineRunStagesItemStepsItemActionWebhookPost                       PipelineRunStagesItemStepsItemAction = "webhook.post"
	PipelineRunStagesItemStepsItemActionWebhookGet                        PipelineRunStagesItemStepsItemAction = "webhook.get"
)

// AllValues returns all PipelineRunStagesItemStepsItemAction values.
func (PipelineRunStagesItemStepsItemAction) AllValues() []PipelineRunStagesItemStepsItemAction {
	return []PipelineRunStagesItemStepsItemAction{
		PipelineRunStagesItemStepsItemActionEnvironmentCreate,
		PipelineRunStagesItemStepsItemActionEnvironmentStart,
		PipelineRunStagesItemStepsItemActionEnvironmentStop,
		PipelineRunStagesItemStepsItemActionEnvironmentDelete,
		PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsPrune,
		PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsTag,
		PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStart,
		PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStop,
		PipelineRunStagesItemStepsItemActionEnvironmentDeploymentHealthyWatch,
		PipelineRunStagesItemStepsItemActionImageSourceCreate,
		PipelineRunStagesItemStepsItemActionImageCreate,
		PipelineRunStagesItemStepsItemActionImageImport,
		PipelineRunStagesItemStepsItemActionImagesPrune,
		PipelineRunStagesItemStepsItemActionImageCreateImport,
		PipelineRunStagesItemStepsItemActionContainerCreate,
		PipelineRunStagesItemStepsItemActionContainerReimage,
		PipelineRunStagesItemStepsItemActionContainerStart,
		PipelineRunStagesItemStepsItemActionContainerStop,
		PipelineRunStagesItemStepsItemActionContainerRestart,
		PipelineRunStagesItemStepsItemActionContainerDelete,
		PipelineRunStagesItemStepsItemActionStackBuildCreate,
		PipelineRunStagesItemStepsItemActionStackBuildDeploy,
		PipelineRunStagesItemStepsItemActionStackBuildGenerate,
		PipelineRunStagesItemStepsItemActionStackPrune,
		PipelineRunStagesItemStepsItemActionSleep,
		PipelineRunStagesItemStepsItemActionWebhookPost,
		PipelineRunStagesItemStepsItemActionWebhookGet,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PipelineRunStagesItemStepsItemAction) MarshalText() ([]byte, error) {
	switch s {
	case PipelineRunStagesItemStepsItemActionEnvironmentCreate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentStart:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentStop:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDelete:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsPrune:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsTag:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStart:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStop:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentHealthyWatch:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionImageSourceCreate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionImageCreate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionImageImport:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionImagesPrune:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionImageCreateImport:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerCreate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerReimage:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerStart:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerStop:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerRestart:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionContainerDelete:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionStackBuildCreate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionStackBuildDeploy:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionStackBuildGenerate:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionStackPrune:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionSleep:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionWebhookPost:
		return []byte(s), nil
	case PipelineRunStagesItemStepsItemActionWebhookGet:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PipelineRunStagesItemStepsItemAction) UnmarshalText(data []byte) error {
	switch PipelineRunStagesItemStepsItemAction(data) {
	case PipelineRunStagesItemStepsItemActionEnvironmentCreate:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentCreate
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentStart:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentStart
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentStop:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentStop
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDelete:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDelete
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsPrune:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsPrune
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsTag:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDeploymentsTag
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStart:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStart
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStop:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDeploymentStop
		return nil
	case PipelineRunStagesItemStepsItemActionEnvironmentDeploymentHealthyWatch:
		*s = PipelineRunStagesItemStepsItemActionEnvironmentDeploymentHealthyWatch
		return nil
	case PipelineRunStagesItemStepsItemActionImageSourceCreate:
		*s = PipelineRunStagesItemStepsItemActionImageSourceCreate
		return nil
	case PipelineRunStagesItemStepsItemActionImageCreate:
		*s = PipelineRunStagesItemStepsItemActionImageCreate
		return nil
	case PipelineRunStagesItemStepsItemActionImageImport:
		*s = PipelineRunStagesItemStepsItemActionImageImport
		return nil
	case PipelineRunStagesItemStepsItemActionImagesPrune:
		*s = PipelineRunStagesItemStepsItemActionImagesPrune
		return nil
	case PipelineRunStagesItemStepsItemActionImageCreateImport:
		*s = PipelineRunStagesItemStepsItemActionImageCreateImport
		return nil
	case PipelineRunStagesItemStepsItemActionContainerCreate:
		*s = PipelineRunStagesItemStepsItemActionContainerCreate
		return nil
	case PipelineRunStagesItemStepsItemActionContainerReimage:
		*s = PipelineRunStagesItemStepsItemActionContainerReimage
		return nil
	case PipelineRunStagesItemStepsItemActionContainerStart:
		*s = PipelineRunStagesItemStepsItemActionContainerStart
		return nil
	case PipelineRunStagesItemStepsItemActionContainerStop:
		*s = PipelineRunStagesItemStepsItemActionContainerStop
		return nil
	case PipelineRunStagesItemStepsItemActionContainerRestart:
		*s = PipelineRunStagesItemStepsItemActionContainerRestart
		return nil
	case PipelineRunStagesItemStepsItemActionContainerDelete:
		*s = PipelineRunStagesItemStepsItemActionContainerDelete
		return nil
	case PipelineRunStagesItemStepsItemActionStackBuildCreate:
		*s = PipelineRunStagesItemStepsItemActionStackBuildCreate
		return nil
	case PipelineRunStagesItemStepsItemActionStackBuildDeploy:
		*s = PipelineRunStagesItemStepsItemActionStackBuildDeploy
		return nil
	case PipelineRunStagesItemStepsItemActionStackBuildGenerate:
		*s = PipelineRunStagesItemStepsItemActionStackBuildGenerate
		return nil
	case PipelineRunStagesItemStepsItemActionStackPrune:
		*s = PipelineRunStagesItemStepsItemActionStackPrune
		return nil
	case PipelineRunStagesItemStepsItemActionSleep:
		*s = PipelineRunStagesItemStepsItemActionSleep
		return nil
	case PipelineRunStagesItemStepsItemActionWebhookPost:
		*s = PipelineRunStagesItemStepsItemActionWebhookPost
		return nil
	case PipelineRunStagesItemStepsItemActionWebhookGet:
		*s = PipelineRunStagesItemStepsItemActionWebhookGet
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this step.
type PipelineRunStagesItemStepsItemError struct {
	// Details about the error that has occurred.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *PipelineRunStagesItemStepsItemError) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *PipelineRunStagesItemStepsItemError) SetMessage(val string) {
	s.Message = val
}

// A map of variable values used during pipeline run.
type PipelineRunVariables map[string]string

func (s *PipelineRunVariables) init() PipelineRunVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A stage for a given pipeline.
// Ref: #/components/schemas/PipelineStage
type PipelineStage struct {
	// A stage identifier.
	Identifier string `json:"identifier"`
	// An array of steps for the stage.
	Steps []PipelineSteps `json:"steps"`
	// Additonal options for the stage.
	Options OptPipelineStageOptions `json:"options"`
}

// GetIdentifier returns the value of Identifier.
func (s *PipelineStage) GetIdentifier() string {
	return s.Identifier
}

// GetSteps returns the value of Steps.
func (s *PipelineStage) GetSteps() []PipelineSteps {
	return s.Steps
}

// GetOptions returns the value of Options.
func (s *PipelineStage) GetOptions() OptPipelineStageOptions {
	return s.Options
}

// SetIdentifier sets the value of Identifier.
func (s *PipelineStage) SetIdentifier(val string) {
	s.Identifier = val
}

// SetSteps sets the value of Steps.
func (s *PipelineStage) SetSteps(val []PipelineSteps) {
	s.Steps = val
}

// SetOptions sets the value of Options.
func (s *PipelineStage) SetOptions(val OptPipelineStageOptions) {
	s.Options = val
}

// Additonal options for the stage.
type PipelineStageOptions struct {
	// A boolean where true indicates the given stage should be skipped when the pipeline is run.
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *PipelineStageOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *PipelineStageOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Merged schema.
// Ref: #/components/schemas/PipelineState
type PipelineState struct {
	// The current state of the pipeline.
	Current PipelineStateCurrent `json:"current"`
	Changed DateTime             `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptPipelineStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *PipelineState) GetCurrent() PipelineStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *PipelineState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *PipelineState) GetError() OptPipelineStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *PipelineState) SetCurrent(val PipelineStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *PipelineState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *PipelineState) SetError(val OptPipelineStateError) {
	s.Error = val
}

// The current state of the pipeline.
type PipelineStateCurrent string

const (
	PipelineStateCurrentLive      PipelineStateCurrent = "live"
	PipelineStateCurrentAcquiring PipelineStateCurrent = "acquiring"
	PipelineStateCurrentDeleting  PipelineStateCurrent = "deleting"
	PipelineStateCurrentDeleted   PipelineStateCurrent = "deleted"
)

// AllValues returns all PipelineStateCurrent values.
func (PipelineStateCurrent) AllValues() []PipelineStateCurrent {
	return []PipelineStateCurrent{
		PipelineStateCurrentLive,
		PipelineStateCurrentAcquiring,
		PipelineStateCurrentDeleting,
		PipelineStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PipelineStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case PipelineStateCurrentLive:
		return []byte(s), nil
	case PipelineStateCurrentAcquiring:
		return []byte(s), nil
	case PipelineStateCurrentDeleting:
		return []byte(s), nil
	case PipelineStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PipelineStateCurrent) UnmarshalText(data []byte) error {
	switch PipelineStateCurrent(data) {
	case PipelineStateCurrentLive:
		*s = PipelineStateCurrentLive
		return nil
	case PipelineStateCurrentAcquiring:
		*s = PipelineStateCurrentAcquiring
		return nil
	case PipelineStateCurrentDeleting:
		*s = PipelineStateCurrentDeleting
		return nil
	case PipelineStateCurrentDeleted:
		*s = PipelineStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type PipelineStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *PipelineStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *PipelineStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *PipelineStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *PipelineStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A step for a pipeline stage.
// Ref: #/components/schemas/PipelineSteps
// PipelineSteps represents sum type.
type PipelineSteps struct {
	Type                                  PipelineStepsType // switch on this field
	ImageSourceCreateStep                 ImageSourceCreateStep
	ImageCreateStep                       ImageCreateStep
	ImageImportStep                       ImageImportStep
	ImagesPruneStep                       ImagesPruneStep
	ImageCreateImportStep                 ImageCreateImportStep
	ContainerCreateStep                   ContainerCreateStep
	ContainerStartStep                    ContainerStartStep
	ContainerStopStep                     ContainerStopStep
	ContainerDeleteStep                   ContainerDeleteStep
	ContainerReimageStep                  ContainerReimageStep
	ContainerRestartStep                  ContainerRestartStep
	EnvironmentCreateStep                 EnvironmentCreateStep
	EnvironmentStartStep                  EnvironmentStartStep
	EnvironmentStopStep                   EnvironmentStopStep
	EnvironmentDeleteStep                 EnvironmentDeleteStep
	EnvironmentDeploymentStartStep        EnvironmentDeploymentStartStep
	EnvironmentDeploymentStopStep         EnvironmentDeploymentStopStep
	EnvironmentDeploymentsTagStep         EnvironmentDeploymentsTagStep
	EnvironmentDeploymentsPruneStep       EnvironmentDeploymentsPruneStep
	EnvironmentDeploymentHealthyWatchStep EnvironmentDeploymentHealthyWatchStep
	StackBuildCreateStep                  StackBuildCreateStep
	StackBuildGenerateStep                StackBuildGenerateStep
	StackBuildDeployStep                  StackBuildDeployStep
	StackPruneStep                        StackPruneStep
	WebhookPostStep                       WebhookPostStep
	WebhookGetStep                        WebhookGetStep
	SleepStep                             SleepStep
}

// PipelineStepsType is oneOf type of PipelineSteps.
type PipelineStepsType string

// Possible values for PipelineStepsType.
const (
	ImageSourceCreateStepPipelineSteps                 PipelineStepsType = "image.source.create"
	ImageCreateStepPipelineSteps                       PipelineStepsType = "image.create"
	ImageImportStepPipelineSteps                       PipelineStepsType = "image.import"
	ImagesPruneStepPipelineSteps                       PipelineStepsType = "images.prune"
	ImageCreateImportStepPipelineSteps                 PipelineStepsType = "image.create-import"
	ContainerCreateStepPipelineSteps                   PipelineStepsType = "container.create"
	ContainerStartStepPipelineSteps                    PipelineStepsType = "container.start"
	ContainerStopStepPipelineSteps                     PipelineStepsType = "container.stop"
	ContainerDeleteStepPipelineSteps                   PipelineStepsType = "container.delete"
	ContainerReimageStepPipelineSteps                  PipelineStepsType = "container.reimage"
	ContainerRestartStepPipelineSteps                  PipelineStepsType = "container.restart"
	EnvironmentCreateStepPipelineSteps                 PipelineStepsType = "environment.create"
	EnvironmentStartStepPipelineSteps                  PipelineStepsType = "environment.start"
	EnvironmentStopStepPipelineSteps                   PipelineStepsType = "environment.stop"
	EnvironmentDeleteStepPipelineSteps                 PipelineStepsType = "environment.delete"
	EnvironmentDeploymentStartStepPipelineSteps        PipelineStepsType = "environment.deployment.start"
	EnvironmentDeploymentStopStepPipelineSteps         PipelineStepsType = "environment.deployment.stop"
	EnvironmentDeploymentsTagStepPipelineSteps         PipelineStepsType = "environment.deployments.tag"
	EnvironmentDeploymentsPruneStepPipelineSteps       PipelineStepsType = "environment.deployments.prune"
	EnvironmentDeploymentHealthyWatchStepPipelineSteps PipelineStepsType = "environment.deployment.healthy.watch"
	StackBuildCreateStepPipelineSteps                  PipelineStepsType = "stack.build.create"
	StackBuildGenerateStepPipelineSteps                PipelineStepsType = "stack.build.generate"
	StackBuildDeployStepPipelineSteps                  PipelineStepsType = "stack.build.deploy"
	StackPruneStepPipelineSteps                        PipelineStepsType = "stack.prune"
	WebhookPostStepPipelineSteps                       PipelineStepsType = "webhook.post"
	WebhookGetStepPipelineSteps                        PipelineStepsType = "webhook.get"
	SleepStepPipelineSteps                             PipelineStepsType = "sleep"
)

// IsImageSourceCreateStep reports whether PipelineSteps is ImageSourceCreateStep.
func (s PipelineSteps) IsImageSourceCreateStep() bool {
	return s.Type == ImageSourceCreateStepPipelineSteps
}

// IsImageCreateStep reports whether PipelineSteps is ImageCreateStep.
func (s PipelineSteps) IsImageCreateStep() bool { return s.Type == ImageCreateStepPipelineSteps }

// IsImageImportStep reports whether PipelineSteps is ImageImportStep.
func (s PipelineSteps) IsImageImportStep() bool { return s.Type == ImageImportStepPipelineSteps }

// IsImagesPruneStep reports whether PipelineSteps is ImagesPruneStep.
func (s PipelineSteps) IsImagesPruneStep() bool { return s.Type == ImagesPruneStepPipelineSteps }

// IsImageCreateImportStep reports whether PipelineSteps is ImageCreateImportStep.
func (s PipelineSteps) IsImageCreateImportStep() bool {
	return s.Type == ImageCreateImportStepPipelineSteps
}

// IsContainerCreateStep reports whether PipelineSteps is ContainerCreateStep.
func (s PipelineSteps) IsContainerCreateStep() bool {
	return s.Type == ContainerCreateStepPipelineSteps
}

// IsContainerStartStep reports whether PipelineSteps is ContainerStartStep.
func (s PipelineSteps) IsContainerStartStep() bool { return s.Type == ContainerStartStepPipelineSteps }

// IsContainerStopStep reports whether PipelineSteps is ContainerStopStep.
func (s PipelineSteps) IsContainerStopStep() bool { return s.Type == ContainerStopStepPipelineSteps }

// IsContainerDeleteStep reports whether PipelineSteps is ContainerDeleteStep.
func (s PipelineSteps) IsContainerDeleteStep() bool {
	return s.Type == ContainerDeleteStepPipelineSteps
}

// IsContainerReimageStep reports whether PipelineSteps is ContainerReimageStep.
func (s PipelineSteps) IsContainerReimageStep() bool {
	return s.Type == ContainerReimageStepPipelineSteps
}

// IsContainerRestartStep reports whether PipelineSteps is ContainerRestartStep.
func (s PipelineSteps) IsContainerRestartStep() bool {
	return s.Type == ContainerRestartStepPipelineSteps
}

// IsEnvironmentCreateStep reports whether PipelineSteps is EnvironmentCreateStep.
func (s PipelineSteps) IsEnvironmentCreateStep() bool {
	return s.Type == EnvironmentCreateStepPipelineSteps
}

// IsEnvironmentStartStep reports whether PipelineSteps is EnvironmentStartStep.
func (s PipelineSteps) IsEnvironmentStartStep() bool {
	return s.Type == EnvironmentStartStepPipelineSteps
}

// IsEnvironmentStopStep reports whether PipelineSteps is EnvironmentStopStep.
func (s PipelineSteps) IsEnvironmentStopStep() bool {
	return s.Type == EnvironmentStopStepPipelineSteps
}

// IsEnvironmentDeleteStep reports whether PipelineSteps is EnvironmentDeleteStep.
func (s PipelineSteps) IsEnvironmentDeleteStep() bool {
	return s.Type == EnvironmentDeleteStepPipelineSteps
}

// IsEnvironmentDeploymentStartStep reports whether PipelineSteps is EnvironmentDeploymentStartStep.
func (s PipelineSteps) IsEnvironmentDeploymentStartStep() bool {
	return s.Type == EnvironmentDeploymentStartStepPipelineSteps
}

// IsEnvironmentDeploymentStopStep reports whether PipelineSteps is EnvironmentDeploymentStopStep.
func (s PipelineSteps) IsEnvironmentDeploymentStopStep() bool {
	return s.Type == EnvironmentDeploymentStopStepPipelineSteps
}

// IsEnvironmentDeploymentsTagStep reports whether PipelineSteps is EnvironmentDeploymentsTagStep.
func (s PipelineSteps) IsEnvironmentDeploymentsTagStep() bool {
	return s.Type == EnvironmentDeploymentsTagStepPipelineSteps
}

// IsEnvironmentDeploymentsPruneStep reports whether PipelineSteps is EnvironmentDeploymentsPruneStep.
func (s PipelineSteps) IsEnvironmentDeploymentsPruneStep() bool {
	return s.Type == EnvironmentDeploymentsPruneStepPipelineSteps
}

// IsEnvironmentDeploymentHealthyWatchStep reports whether PipelineSteps is EnvironmentDeploymentHealthyWatchStep.
func (s PipelineSteps) IsEnvironmentDeploymentHealthyWatchStep() bool {
	return s.Type == EnvironmentDeploymentHealthyWatchStepPipelineSteps
}

// IsStackBuildCreateStep reports whether PipelineSteps is StackBuildCreateStep.
func (s PipelineSteps) IsStackBuildCreateStep() bool {
	return s.Type == StackBuildCreateStepPipelineSteps
}

// IsStackBuildGenerateStep reports whether PipelineSteps is StackBuildGenerateStep.
func (s PipelineSteps) IsStackBuildGenerateStep() bool {
	return s.Type == StackBuildGenerateStepPipelineSteps
}

// IsStackBuildDeployStep reports whether PipelineSteps is StackBuildDeployStep.
func (s PipelineSteps) IsStackBuildDeployStep() bool {
	return s.Type == StackBuildDeployStepPipelineSteps
}

// IsStackPruneStep reports whether PipelineSteps is StackPruneStep.
func (s PipelineSteps) IsStackPruneStep() bool { return s.Type == StackPruneStepPipelineSteps }

// IsWebhookPostStep reports whether PipelineSteps is WebhookPostStep.
func (s PipelineSteps) IsWebhookPostStep() bool { return s.Type == WebhookPostStepPipelineSteps }

// IsWebhookGetStep reports whether PipelineSteps is WebhookGetStep.
func (s PipelineSteps) IsWebhookGetStep() bool { return s.Type == WebhookGetStepPipelineSteps }

// IsSleepStep reports whether PipelineSteps is SleepStep.
func (s PipelineSteps) IsSleepStep() bool { return s.Type == SleepStepPipelineSteps }

// SetImageSourceCreateStep sets PipelineSteps to ImageSourceCreateStep.
func (s *PipelineSteps) SetImageSourceCreateStep(v ImageSourceCreateStep) {
	s.Type = ImageSourceCreateStepPipelineSteps
	s.ImageSourceCreateStep = v
}

// GetImageSourceCreateStep returns ImageSourceCreateStep and true boolean if PipelineSteps is ImageSourceCreateStep.
func (s PipelineSteps) GetImageSourceCreateStep() (v ImageSourceCreateStep, ok bool) {
	if !s.IsImageSourceCreateStep() {
		return v, false
	}
	return s.ImageSourceCreateStep, true
}

// NewImageSourceCreateStepPipelineSteps returns new PipelineSteps from ImageSourceCreateStep.
func NewImageSourceCreateStepPipelineSteps(v ImageSourceCreateStep) PipelineSteps {
	var s PipelineSteps
	s.SetImageSourceCreateStep(v)
	return s
}

// SetImageCreateStep sets PipelineSteps to ImageCreateStep.
func (s *PipelineSteps) SetImageCreateStep(v ImageCreateStep) {
	s.Type = ImageCreateStepPipelineSteps
	s.ImageCreateStep = v
}

// GetImageCreateStep returns ImageCreateStep and true boolean if PipelineSteps is ImageCreateStep.
func (s PipelineSteps) GetImageCreateStep() (v ImageCreateStep, ok bool) {
	if !s.IsImageCreateStep() {
		return v, false
	}
	return s.ImageCreateStep, true
}

// NewImageCreateStepPipelineSteps returns new PipelineSteps from ImageCreateStep.
func NewImageCreateStepPipelineSteps(v ImageCreateStep) PipelineSteps {
	var s PipelineSteps
	s.SetImageCreateStep(v)
	return s
}

// SetImageImportStep sets PipelineSteps to ImageImportStep.
func (s *PipelineSteps) SetImageImportStep(v ImageImportStep) {
	s.Type = ImageImportStepPipelineSteps
	s.ImageImportStep = v
}

// GetImageImportStep returns ImageImportStep and true boolean if PipelineSteps is ImageImportStep.
func (s PipelineSteps) GetImageImportStep() (v ImageImportStep, ok bool) {
	if !s.IsImageImportStep() {
		return v, false
	}
	return s.ImageImportStep, true
}

// NewImageImportStepPipelineSteps returns new PipelineSteps from ImageImportStep.
func NewImageImportStepPipelineSteps(v ImageImportStep) PipelineSteps {
	var s PipelineSteps
	s.SetImageImportStep(v)
	return s
}

// SetImagesPruneStep sets PipelineSteps to ImagesPruneStep.
func (s *PipelineSteps) SetImagesPruneStep(v ImagesPruneStep) {
	s.Type = ImagesPruneStepPipelineSteps
	s.ImagesPruneStep = v
}

// GetImagesPruneStep returns ImagesPruneStep and true boolean if PipelineSteps is ImagesPruneStep.
func (s PipelineSteps) GetImagesPruneStep() (v ImagesPruneStep, ok bool) {
	if !s.IsImagesPruneStep() {
		return v, false
	}
	return s.ImagesPruneStep, true
}

// NewImagesPruneStepPipelineSteps returns new PipelineSteps from ImagesPruneStep.
func NewImagesPruneStepPipelineSteps(v ImagesPruneStep) PipelineSteps {
	var s PipelineSteps
	s.SetImagesPruneStep(v)
	return s
}

// SetImageCreateImportStep sets PipelineSteps to ImageCreateImportStep.
func (s *PipelineSteps) SetImageCreateImportStep(v ImageCreateImportStep) {
	s.Type = ImageCreateImportStepPipelineSteps
	s.ImageCreateImportStep = v
}

// GetImageCreateImportStep returns ImageCreateImportStep and true boolean if PipelineSteps is ImageCreateImportStep.
func (s PipelineSteps) GetImageCreateImportStep() (v ImageCreateImportStep, ok bool) {
	if !s.IsImageCreateImportStep() {
		return v, false
	}
	return s.ImageCreateImportStep, true
}

// NewImageCreateImportStepPipelineSteps returns new PipelineSteps from ImageCreateImportStep.
func NewImageCreateImportStepPipelineSteps(v ImageCreateImportStep) PipelineSteps {
	var s PipelineSteps
	s.SetImageCreateImportStep(v)
	return s
}

// SetContainerCreateStep sets PipelineSteps to ContainerCreateStep.
func (s *PipelineSteps) SetContainerCreateStep(v ContainerCreateStep) {
	s.Type = ContainerCreateStepPipelineSteps
	s.ContainerCreateStep = v
}

// GetContainerCreateStep returns ContainerCreateStep and true boolean if PipelineSteps is ContainerCreateStep.
func (s PipelineSteps) GetContainerCreateStep() (v ContainerCreateStep, ok bool) {
	if !s.IsContainerCreateStep() {
		return v, false
	}
	return s.ContainerCreateStep, true
}

// NewContainerCreateStepPipelineSteps returns new PipelineSteps from ContainerCreateStep.
func NewContainerCreateStepPipelineSteps(v ContainerCreateStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerCreateStep(v)
	return s
}

// SetContainerStartStep sets PipelineSteps to ContainerStartStep.
func (s *PipelineSteps) SetContainerStartStep(v ContainerStartStep) {
	s.Type = ContainerStartStepPipelineSteps
	s.ContainerStartStep = v
}

// GetContainerStartStep returns ContainerStartStep and true boolean if PipelineSteps is ContainerStartStep.
func (s PipelineSteps) GetContainerStartStep() (v ContainerStartStep, ok bool) {
	if !s.IsContainerStartStep() {
		return v, false
	}
	return s.ContainerStartStep, true
}

// NewContainerStartStepPipelineSteps returns new PipelineSteps from ContainerStartStep.
func NewContainerStartStepPipelineSteps(v ContainerStartStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerStartStep(v)
	return s
}

// SetContainerStopStep sets PipelineSteps to ContainerStopStep.
func (s *PipelineSteps) SetContainerStopStep(v ContainerStopStep) {
	s.Type = ContainerStopStepPipelineSteps
	s.ContainerStopStep = v
}

// GetContainerStopStep returns ContainerStopStep and true boolean if PipelineSteps is ContainerStopStep.
func (s PipelineSteps) GetContainerStopStep() (v ContainerStopStep, ok bool) {
	if !s.IsContainerStopStep() {
		return v, false
	}
	return s.ContainerStopStep, true
}

// NewContainerStopStepPipelineSteps returns new PipelineSteps from ContainerStopStep.
func NewContainerStopStepPipelineSteps(v ContainerStopStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerStopStep(v)
	return s
}

// SetContainerDeleteStep sets PipelineSteps to ContainerDeleteStep.
func (s *PipelineSteps) SetContainerDeleteStep(v ContainerDeleteStep) {
	s.Type = ContainerDeleteStepPipelineSteps
	s.ContainerDeleteStep = v
}

// GetContainerDeleteStep returns ContainerDeleteStep and true boolean if PipelineSteps is ContainerDeleteStep.
func (s PipelineSteps) GetContainerDeleteStep() (v ContainerDeleteStep, ok bool) {
	if !s.IsContainerDeleteStep() {
		return v, false
	}
	return s.ContainerDeleteStep, true
}

// NewContainerDeleteStepPipelineSteps returns new PipelineSteps from ContainerDeleteStep.
func NewContainerDeleteStepPipelineSteps(v ContainerDeleteStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerDeleteStep(v)
	return s
}

// SetContainerReimageStep sets PipelineSteps to ContainerReimageStep.
func (s *PipelineSteps) SetContainerReimageStep(v ContainerReimageStep) {
	s.Type = ContainerReimageStepPipelineSteps
	s.ContainerReimageStep = v
}

// GetContainerReimageStep returns ContainerReimageStep and true boolean if PipelineSteps is ContainerReimageStep.
func (s PipelineSteps) GetContainerReimageStep() (v ContainerReimageStep, ok bool) {
	if !s.IsContainerReimageStep() {
		return v, false
	}
	return s.ContainerReimageStep, true
}

// NewContainerReimageStepPipelineSteps returns new PipelineSteps from ContainerReimageStep.
func NewContainerReimageStepPipelineSteps(v ContainerReimageStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerReimageStep(v)
	return s
}

// SetContainerRestartStep sets PipelineSteps to ContainerRestartStep.
func (s *PipelineSteps) SetContainerRestartStep(v ContainerRestartStep) {
	s.Type = ContainerRestartStepPipelineSteps
	s.ContainerRestartStep = v
}

// GetContainerRestartStep returns ContainerRestartStep and true boolean if PipelineSteps is ContainerRestartStep.
func (s PipelineSteps) GetContainerRestartStep() (v ContainerRestartStep, ok bool) {
	if !s.IsContainerRestartStep() {
		return v, false
	}
	return s.ContainerRestartStep, true
}

// NewContainerRestartStepPipelineSteps returns new PipelineSteps from ContainerRestartStep.
func NewContainerRestartStepPipelineSteps(v ContainerRestartStep) PipelineSteps {
	var s PipelineSteps
	s.SetContainerRestartStep(v)
	return s
}

// SetEnvironmentCreateStep sets PipelineSteps to EnvironmentCreateStep.
func (s *PipelineSteps) SetEnvironmentCreateStep(v EnvironmentCreateStep) {
	s.Type = EnvironmentCreateStepPipelineSteps
	s.EnvironmentCreateStep = v
}

// GetEnvironmentCreateStep returns EnvironmentCreateStep and true boolean if PipelineSteps is EnvironmentCreateStep.
func (s PipelineSteps) GetEnvironmentCreateStep() (v EnvironmentCreateStep, ok bool) {
	if !s.IsEnvironmentCreateStep() {
		return v, false
	}
	return s.EnvironmentCreateStep, true
}

// NewEnvironmentCreateStepPipelineSteps returns new PipelineSteps from EnvironmentCreateStep.
func NewEnvironmentCreateStepPipelineSteps(v EnvironmentCreateStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentCreateStep(v)
	return s
}

// SetEnvironmentStartStep sets PipelineSteps to EnvironmentStartStep.
func (s *PipelineSteps) SetEnvironmentStartStep(v EnvironmentStartStep) {
	s.Type = EnvironmentStartStepPipelineSteps
	s.EnvironmentStartStep = v
}

// GetEnvironmentStartStep returns EnvironmentStartStep and true boolean if PipelineSteps is EnvironmentStartStep.
func (s PipelineSteps) GetEnvironmentStartStep() (v EnvironmentStartStep, ok bool) {
	if !s.IsEnvironmentStartStep() {
		return v, false
	}
	return s.EnvironmentStartStep, true
}

// NewEnvironmentStartStepPipelineSteps returns new PipelineSteps from EnvironmentStartStep.
func NewEnvironmentStartStepPipelineSteps(v EnvironmentStartStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentStartStep(v)
	return s
}

// SetEnvironmentStopStep sets PipelineSteps to EnvironmentStopStep.
func (s *PipelineSteps) SetEnvironmentStopStep(v EnvironmentStopStep) {
	s.Type = EnvironmentStopStepPipelineSteps
	s.EnvironmentStopStep = v
}

// GetEnvironmentStopStep returns EnvironmentStopStep and true boolean if PipelineSteps is EnvironmentStopStep.
func (s PipelineSteps) GetEnvironmentStopStep() (v EnvironmentStopStep, ok bool) {
	if !s.IsEnvironmentStopStep() {
		return v, false
	}
	return s.EnvironmentStopStep, true
}

// NewEnvironmentStopStepPipelineSteps returns new PipelineSteps from EnvironmentStopStep.
func NewEnvironmentStopStepPipelineSteps(v EnvironmentStopStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentStopStep(v)
	return s
}

// SetEnvironmentDeleteStep sets PipelineSteps to EnvironmentDeleteStep.
func (s *PipelineSteps) SetEnvironmentDeleteStep(v EnvironmentDeleteStep) {
	s.Type = EnvironmentDeleteStepPipelineSteps
	s.EnvironmentDeleteStep = v
}

// GetEnvironmentDeleteStep returns EnvironmentDeleteStep and true boolean if PipelineSteps is EnvironmentDeleteStep.
func (s PipelineSteps) GetEnvironmentDeleteStep() (v EnvironmentDeleteStep, ok bool) {
	if !s.IsEnvironmentDeleteStep() {
		return v, false
	}
	return s.EnvironmentDeleteStep, true
}

// NewEnvironmentDeleteStepPipelineSteps returns new PipelineSteps from EnvironmentDeleteStep.
func NewEnvironmentDeleteStepPipelineSteps(v EnvironmentDeleteStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeleteStep(v)
	return s
}

// SetEnvironmentDeploymentStartStep sets PipelineSteps to EnvironmentDeploymentStartStep.
func (s *PipelineSteps) SetEnvironmentDeploymentStartStep(v EnvironmentDeploymentStartStep) {
	s.Type = EnvironmentDeploymentStartStepPipelineSteps
	s.EnvironmentDeploymentStartStep = v
}

// GetEnvironmentDeploymentStartStep returns EnvironmentDeploymentStartStep and true boolean if PipelineSteps is EnvironmentDeploymentStartStep.
func (s PipelineSteps) GetEnvironmentDeploymentStartStep() (v EnvironmentDeploymentStartStep, ok bool) {
	if !s.IsEnvironmentDeploymentStartStep() {
		return v, false
	}
	return s.EnvironmentDeploymentStartStep, true
}

// NewEnvironmentDeploymentStartStepPipelineSteps returns new PipelineSteps from EnvironmentDeploymentStartStep.
func NewEnvironmentDeploymentStartStepPipelineSteps(v EnvironmentDeploymentStartStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeploymentStartStep(v)
	return s
}

// SetEnvironmentDeploymentStopStep sets PipelineSteps to EnvironmentDeploymentStopStep.
func (s *PipelineSteps) SetEnvironmentDeploymentStopStep(v EnvironmentDeploymentStopStep) {
	s.Type = EnvironmentDeploymentStopStepPipelineSteps
	s.EnvironmentDeploymentStopStep = v
}

// GetEnvironmentDeploymentStopStep returns EnvironmentDeploymentStopStep and true boolean if PipelineSteps is EnvironmentDeploymentStopStep.
func (s PipelineSteps) GetEnvironmentDeploymentStopStep() (v EnvironmentDeploymentStopStep, ok bool) {
	if !s.IsEnvironmentDeploymentStopStep() {
		return v, false
	}
	return s.EnvironmentDeploymentStopStep, true
}

// NewEnvironmentDeploymentStopStepPipelineSteps returns new PipelineSteps from EnvironmentDeploymentStopStep.
func NewEnvironmentDeploymentStopStepPipelineSteps(v EnvironmentDeploymentStopStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeploymentStopStep(v)
	return s
}

// SetEnvironmentDeploymentsTagStep sets PipelineSteps to EnvironmentDeploymentsTagStep.
func (s *PipelineSteps) SetEnvironmentDeploymentsTagStep(v EnvironmentDeploymentsTagStep) {
	s.Type = EnvironmentDeploymentsTagStepPipelineSteps
	s.EnvironmentDeploymentsTagStep = v
}

// GetEnvironmentDeploymentsTagStep returns EnvironmentDeploymentsTagStep and true boolean if PipelineSteps is EnvironmentDeploymentsTagStep.
func (s PipelineSteps) GetEnvironmentDeploymentsTagStep() (v EnvironmentDeploymentsTagStep, ok bool) {
	if !s.IsEnvironmentDeploymentsTagStep() {
		return v, false
	}
	return s.EnvironmentDeploymentsTagStep, true
}

// NewEnvironmentDeploymentsTagStepPipelineSteps returns new PipelineSteps from EnvironmentDeploymentsTagStep.
func NewEnvironmentDeploymentsTagStepPipelineSteps(v EnvironmentDeploymentsTagStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeploymentsTagStep(v)
	return s
}

// SetEnvironmentDeploymentsPruneStep sets PipelineSteps to EnvironmentDeploymentsPruneStep.
func (s *PipelineSteps) SetEnvironmentDeploymentsPruneStep(v EnvironmentDeploymentsPruneStep) {
	s.Type = EnvironmentDeploymentsPruneStepPipelineSteps
	s.EnvironmentDeploymentsPruneStep = v
}

// GetEnvironmentDeploymentsPruneStep returns EnvironmentDeploymentsPruneStep and true boolean if PipelineSteps is EnvironmentDeploymentsPruneStep.
func (s PipelineSteps) GetEnvironmentDeploymentsPruneStep() (v EnvironmentDeploymentsPruneStep, ok bool) {
	if !s.IsEnvironmentDeploymentsPruneStep() {
		return v, false
	}
	return s.EnvironmentDeploymentsPruneStep, true
}

// NewEnvironmentDeploymentsPruneStepPipelineSteps returns new PipelineSteps from EnvironmentDeploymentsPruneStep.
func NewEnvironmentDeploymentsPruneStepPipelineSteps(v EnvironmentDeploymentsPruneStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeploymentsPruneStep(v)
	return s
}

// SetEnvironmentDeploymentHealthyWatchStep sets PipelineSteps to EnvironmentDeploymentHealthyWatchStep.
func (s *PipelineSteps) SetEnvironmentDeploymentHealthyWatchStep(v EnvironmentDeploymentHealthyWatchStep) {
	s.Type = EnvironmentDeploymentHealthyWatchStepPipelineSteps
	s.EnvironmentDeploymentHealthyWatchStep = v
}

// GetEnvironmentDeploymentHealthyWatchStep returns EnvironmentDeploymentHealthyWatchStep and true boolean if PipelineSteps is EnvironmentDeploymentHealthyWatchStep.
func (s PipelineSteps) GetEnvironmentDeploymentHealthyWatchStep() (v EnvironmentDeploymentHealthyWatchStep, ok bool) {
	if !s.IsEnvironmentDeploymentHealthyWatchStep() {
		return v, false
	}
	return s.EnvironmentDeploymentHealthyWatchStep, true
}

// NewEnvironmentDeploymentHealthyWatchStepPipelineSteps returns new PipelineSteps from EnvironmentDeploymentHealthyWatchStep.
func NewEnvironmentDeploymentHealthyWatchStepPipelineSteps(v EnvironmentDeploymentHealthyWatchStep) PipelineSteps {
	var s PipelineSteps
	s.SetEnvironmentDeploymentHealthyWatchStep(v)
	return s
}

// SetStackBuildCreateStep sets PipelineSteps to StackBuildCreateStep.
func (s *PipelineSteps) SetStackBuildCreateStep(v StackBuildCreateStep) {
	s.Type = StackBuildCreateStepPipelineSteps
	s.StackBuildCreateStep = v
}

// GetStackBuildCreateStep returns StackBuildCreateStep and true boolean if PipelineSteps is StackBuildCreateStep.
func (s PipelineSteps) GetStackBuildCreateStep() (v StackBuildCreateStep, ok bool) {
	if !s.IsStackBuildCreateStep() {
		return v, false
	}
	return s.StackBuildCreateStep, true
}

// NewStackBuildCreateStepPipelineSteps returns new PipelineSteps from StackBuildCreateStep.
func NewStackBuildCreateStepPipelineSteps(v StackBuildCreateStep) PipelineSteps {
	var s PipelineSteps
	s.SetStackBuildCreateStep(v)
	return s
}

// SetStackBuildGenerateStep sets PipelineSteps to StackBuildGenerateStep.
func (s *PipelineSteps) SetStackBuildGenerateStep(v StackBuildGenerateStep) {
	s.Type = StackBuildGenerateStepPipelineSteps
	s.StackBuildGenerateStep = v
}

// GetStackBuildGenerateStep returns StackBuildGenerateStep and true boolean if PipelineSteps is StackBuildGenerateStep.
func (s PipelineSteps) GetStackBuildGenerateStep() (v StackBuildGenerateStep, ok bool) {
	if !s.IsStackBuildGenerateStep() {
		return v, false
	}
	return s.StackBuildGenerateStep, true
}

// NewStackBuildGenerateStepPipelineSteps returns new PipelineSteps from StackBuildGenerateStep.
func NewStackBuildGenerateStepPipelineSteps(v StackBuildGenerateStep) PipelineSteps {
	var s PipelineSteps
	s.SetStackBuildGenerateStep(v)
	return s
}

// SetStackBuildDeployStep sets PipelineSteps to StackBuildDeployStep.
func (s *PipelineSteps) SetStackBuildDeployStep(v StackBuildDeployStep) {
	s.Type = StackBuildDeployStepPipelineSteps
	s.StackBuildDeployStep = v
}

// GetStackBuildDeployStep returns StackBuildDeployStep and true boolean if PipelineSteps is StackBuildDeployStep.
func (s PipelineSteps) GetStackBuildDeployStep() (v StackBuildDeployStep, ok bool) {
	if !s.IsStackBuildDeployStep() {
		return v, false
	}
	return s.StackBuildDeployStep, true
}

// NewStackBuildDeployStepPipelineSteps returns new PipelineSteps from StackBuildDeployStep.
func NewStackBuildDeployStepPipelineSteps(v StackBuildDeployStep) PipelineSteps {
	var s PipelineSteps
	s.SetStackBuildDeployStep(v)
	return s
}

// SetStackPruneStep sets PipelineSteps to StackPruneStep.
func (s *PipelineSteps) SetStackPruneStep(v StackPruneStep) {
	s.Type = StackPruneStepPipelineSteps
	s.StackPruneStep = v
}

// GetStackPruneStep returns StackPruneStep and true boolean if PipelineSteps is StackPruneStep.
func (s PipelineSteps) GetStackPruneStep() (v StackPruneStep, ok bool) {
	if !s.IsStackPruneStep() {
		return v, false
	}
	return s.StackPruneStep, true
}

// NewStackPruneStepPipelineSteps returns new PipelineSteps from StackPruneStep.
func NewStackPruneStepPipelineSteps(v StackPruneStep) PipelineSteps {
	var s PipelineSteps
	s.SetStackPruneStep(v)
	return s
}

// SetWebhookPostStep sets PipelineSteps to WebhookPostStep.
func (s *PipelineSteps) SetWebhookPostStep(v WebhookPostStep) {
	s.Type = WebhookPostStepPipelineSteps
	s.WebhookPostStep = v
}

// GetWebhookPostStep returns WebhookPostStep and true boolean if PipelineSteps is WebhookPostStep.
func (s PipelineSteps) GetWebhookPostStep() (v WebhookPostStep, ok bool) {
	if !s.IsWebhookPostStep() {
		return v, false
	}
	return s.WebhookPostStep, true
}

// NewWebhookPostStepPipelineSteps returns new PipelineSteps from WebhookPostStep.
func NewWebhookPostStepPipelineSteps(v WebhookPostStep) PipelineSteps {
	var s PipelineSteps
	s.SetWebhookPostStep(v)
	return s
}

// SetWebhookGetStep sets PipelineSteps to WebhookGetStep.
func (s *PipelineSteps) SetWebhookGetStep(v WebhookGetStep) {
	s.Type = WebhookGetStepPipelineSteps
	s.WebhookGetStep = v
}

// GetWebhookGetStep returns WebhookGetStep and true boolean if PipelineSteps is WebhookGetStep.
func (s PipelineSteps) GetWebhookGetStep() (v WebhookGetStep, ok bool) {
	if !s.IsWebhookGetStep() {
		return v, false
	}
	return s.WebhookGetStep, true
}

// NewWebhookGetStepPipelineSteps returns new PipelineSteps from WebhookGetStep.
func NewWebhookGetStepPipelineSteps(v WebhookGetStep) PipelineSteps {
	var s PipelineSteps
	s.SetWebhookGetStep(v)
	return s
}

// SetSleepStep sets PipelineSteps to SleepStep.
func (s *PipelineSteps) SetSleepStep(v SleepStep) {
	s.Type = SleepStepPipelineSteps
	s.SleepStep = v
}

// GetSleepStep returns SleepStep and true boolean if PipelineSteps is SleepStep.
func (s PipelineSteps) GetSleepStep() (v SleepStep, ok bool) {
	if !s.IsSleepStep() {
		return v, false
	}
	return s.SleepStep, true
}

// NewSleepStepPipelineSteps returns new PipelineSteps from SleepStep.
func NewSleepStepPipelineSteps(v SleepStep) PipelineSteps {
	var s PipelineSteps
	s.SetSleepStep(v)
	return s
}

// An IP Pool.
// Ref: #/components/schemas/Pool
type Pool struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// An ID associated with a server resource.
	ServerID string `json:"server_id"`
	// An ID associated with a location resource.
	LocationID string `json:"location_id"`
	// The type of IP pool.
	Kind     PoolKind     `json:"kind"`
	Provider PoolProvider `json:"provider"`
	// A boolean where true represents the pool as a floating IP pool.
	Floating bool `json:"floating"`
	// Data about IPs in the pool.
	Ips PoolIps `json:"ips"`
	// Network information about the pool.
	Block PoolBlock `json:"block"`
	State PoolState `json:"state"`
}

// GetID returns the value of ID.
func (s *Pool) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Pool) GetHubID() HubID {
	return s.HubID
}

// GetServerID returns the value of ServerID.
func (s *Pool) GetServerID() string {
	return s.ServerID
}

// GetLocationID returns the value of LocationID.
func (s *Pool) GetLocationID() string {
	return s.LocationID
}

// GetKind returns the value of Kind.
func (s *Pool) GetKind() PoolKind {
	return s.Kind
}

// GetProvider returns the value of Provider.
func (s *Pool) GetProvider() PoolProvider {
	return s.Provider
}

// GetFloating returns the value of Floating.
func (s *Pool) GetFloating() bool {
	return s.Floating
}

// GetIps returns the value of Ips.
func (s *Pool) GetIps() PoolIps {
	return s.Ips
}

// GetBlock returns the value of Block.
func (s *Pool) GetBlock() PoolBlock {
	return s.Block
}

// GetState returns the value of State.
func (s *Pool) GetState() PoolState {
	return s.State
}

// SetID sets the value of ID.
func (s *Pool) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Pool) SetHubID(val HubID) {
	s.HubID = val
}

// SetServerID sets the value of ServerID.
func (s *Pool) SetServerID(val string) {
	s.ServerID = val
}

// SetLocationID sets the value of LocationID.
func (s *Pool) SetLocationID(val string) {
	s.LocationID = val
}

// SetKind sets the value of Kind.
func (s *Pool) SetKind(val PoolKind) {
	s.Kind = val
}

// SetProvider sets the value of Provider.
func (s *Pool) SetProvider(val PoolProvider) {
	s.Provider = val
}

// SetFloating sets the value of Floating.
func (s *Pool) SetFloating(val bool) {
	s.Floating = val
}

// SetIps sets the value of Ips.
func (s *Pool) SetIps(val PoolIps) {
	s.Ips = val
}

// SetBlock sets the value of Block.
func (s *Pool) SetBlock(val PoolBlock) {
	s.Block = val
}

// SetState sets the value of State.
func (s *Pool) SetState(val PoolState) {
	s.State = val
}

// Network information about the pool.
type PoolBlock struct {
	// A cidr for the pool.
	Cidr string `json:"cidr"`
	// A gateway for the pool.
	Gateway string `json:"gateway"`
	// A netmask for the pool.
	Netmask string `json:"netmask"`
	// A network for the pool.
	Network string `json:"network"`
}

// GetCidr returns the value of Cidr.
func (s *PoolBlock) GetCidr() string {
	return s.Cidr
}

// GetGateway returns the value of Gateway.
func (s *PoolBlock) GetGateway() string {
	return s.Gateway
}

// GetNetmask returns the value of Netmask.
func (s *PoolBlock) GetNetmask() string {
	return s.Netmask
}

// GetNetwork returns the value of Network.
func (s *PoolBlock) GetNetwork() string {
	return s.Network
}

// SetCidr sets the value of Cidr.
func (s *PoolBlock) SetCidr(val string) {
	s.Cidr = val
}

// SetGateway sets the value of Gateway.
func (s *PoolBlock) SetGateway(val string) {
	s.Gateway = val
}

// SetNetmask sets the value of Netmask.
func (s *PoolBlock) SetNetmask(val string) {
	s.Netmask = val
}

// SetNetwork sets the value of Network.
func (s *PoolBlock) SetNetwork(val string) {
	s.Network = val
}

// Resources associated with an IP Pool.
// Ref: #/components/schemas/PoolIncludes
type PoolIncludes struct {
	Creators     OptCreatorInclude       `json:"creators"`
	Servers      OptServersIncludes      `json:"servers"`
	Integrations OptIntegrationsIncludes `json:"integrations"`
	Locations    OptLocationsIncludes    `json:"locations"`
}

// GetCreators returns the value of Creators.
func (s *PoolIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetServers returns the value of Servers.
func (s *PoolIncludes) GetServers() OptServersIncludes {
	return s.Servers
}

// GetIntegrations returns the value of Integrations.
func (s *PoolIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// GetLocations returns the value of Locations.
func (s *PoolIncludes) GetLocations() OptLocationsIncludes {
	return s.Locations
}

// SetCreators sets the value of Creators.
func (s *PoolIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetServers sets the value of Servers.
func (s *PoolIncludes) SetServers(val OptServersIncludes) {
	s.Servers = val
}

// SetIntegrations sets the value of Integrations.
func (s *PoolIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// SetLocations sets the value of Locations.
func (s *PoolIncludes) SetLocations(val OptLocationsIncludes) {
	s.Locations = val
}

// Data about IPs in the pool.
type PoolIps struct {
	// The total number of IPs in the pool.
	Total int `json:"total"`
	// Of the total number of IP's how many are available to be assigned.
	Available int `json:"available"`
}

// GetTotal returns the value of Total.
func (s *PoolIps) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *PoolIps) GetAvailable() int {
	return s.Available
}

// SetTotal sets the value of Total.
func (s *PoolIps) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *PoolIps) SetAvailable(val int) {
	s.Available = val
}

// The type of IP pool.
type PoolKind string

const (
	PoolKindIpv4 PoolKind = "ipv4"
	PoolKindIpv6 PoolKind = "ipv6"
)

// AllValues returns all PoolKind values.
func (PoolKind) AllValues() []PoolKind {
	return []PoolKind{
		PoolKindIpv4,
		PoolKindIpv6,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolKind) MarshalText() ([]byte, error) {
	switch s {
	case PoolKindIpv4:
		return []byte(s), nil
	case PoolKindIpv6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolKind) UnmarshalText(data []byte) error {
	switch PoolKind(data) {
	case PoolKindIpv4:
		*s = PoolKindIpv4
		return nil
	case PoolKindIpv6:
		*s = PoolKindIpv6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A IP Pool provider.
// Ref: #/components/schemas/PoolProvider
type PoolProvider struct {
	// A vendor for a provider.
	Vendor        string `json:"vendor"`
	IntegrationID ID     `json:"integration_id"`
	// Information about the location of the provider this pool is associated with.
	Location string `json:"location"`
	// A reservation identifier associated with the pool reservation.
	Reservation string `json:"reservation"`
	// A server identifier associated with the pool.
	Server string `json:"server"`
	// An identifier linked to the server assingment of the IP pool.
	ServerAssignment string `json:"server_assignment"`
}

// GetVendor returns the value of Vendor.
func (s *PoolProvider) GetVendor() string {
	return s.Vendor
}

// GetIntegrationID returns the value of IntegrationID.
func (s *PoolProvider) GetIntegrationID() ID {
	return s.IntegrationID
}

// GetLocation returns the value of Location.
func (s *PoolProvider) GetLocation() string {
	return s.Location
}

// GetReservation returns the value of Reservation.
func (s *PoolProvider) GetReservation() string {
	return s.Reservation
}

// GetServer returns the value of Server.
func (s *PoolProvider) GetServer() string {
	return s.Server
}

// GetServerAssignment returns the value of ServerAssignment.
func (s *PoolProvider) GetServerAssignment() string {
	return s.ServerAssignment
}

// SetVendor sets the value of Vendor.
func (s *PoolProvider) SetVendor(val string) {
	s.Vendor = val
}

// SetIntegrationID sets the value of IntegrationID.
func (s *PoolProvider) SetIntegrationID(val ID) {
	s.IntegrationID = val
}

// SetLocation sets the value of Location.
func (s *PoolProvider) SetLocation(val string) {
	s.Location = val
}

// SetReservation sets the value of Reservation.
func (s *PoolProvider) SetReservation(val string) {
	s.Reservation = val
}

// SetServer sets the value of Server.
func (s *PoolProvider) SetServer(val string) {
	s.Server = val
}

// SetServerAssignment sets the value of ServerAssignment.
func (s *PoolProvider) SetServerAssignment(val string) {
	s.ServerAssignment = val
}

// Merged schema.
// Ref: #/components/schemas/PoolState
type PoolState struct {
	// The current state of the pool.
	Current PoolStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptPoolStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *PoolState) GetCurrent() PoolStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *PoolState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *PoolState) GetError() OptPoolStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *PoolState) SetCurrent(val PoolStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *PoolState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *PoolState) SetError(val OptPoolStateError) {
	s.Error = val
}

// The current state of the pool.
type PoolStateCurrent string

const (
	PoolStateCurrentLive      PoolStateCurrent = "live"
	PoolStateCurrentReleasing PoolStateCurrent = "releasing"
	PoolStateCurrentReleased  PoolStateCurrent = "released"
)

// AllValues returns all PoolStateCurrent values.
func (PoolStateCurrent) AllValues() []PoolStateCurrent {
	return []PoolStateCurrent{
		PoolStateCurrentLive,
		PoolStateCurrentReleasing,
		PoolStateCurrentReleased,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PoolStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case PoolStateCurrentLive:
		return []byte(s), nil
	case PoolStateCurrentReleasing:
		return []byte(s), nil
	case PoolStateCurrentReleased:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PoolStateCurrent) UnmarshalText(data []byte) error {
	switch PoolStateCurrent(data) {
	case PoolStateCurrentLive:
		*s = PoolStateCurrentLive
		return nil
	case PoolStateCurrentReleasing:
		*s = PoolStateCurrentReleasing
		return nil
	case PoolStateCurrentReleased:
		*s = PoolStateCurrentReleased
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type PoolStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *PoolStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *PoolStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *PoolStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *PoolStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Process information for a given snapshot.
// Ref: #/components/schemas/ProcessesSnapshot
type ProcessesSnapshot struct {
	// The current number of running processes in the instance.
	Current OptFloat64 `json:"current"`
	// The maximum number of running processes for the instance.
	Limit OptFloat64 `json:"limit"`
}

// GetCurrent returns the value of Current.
func (s *ProcessesSnapshot) GetCurrent() OptFloat64 {
	return s.Current
}

// GetLimit returns the value of Limit.
func (s *ProcessesSnapshot) GetLimit() OptFloat64 {
	return s.Limit
}

// SetCurrent sets the value of Current.
func (s *ProcessesSnapshot) SetCurrent(val OptFloat64) {
	s.Current = val
}

// SetLimit sets the value of Limit.
func (s *ProcessesSnapshot) SetLimit(val OptFloat64) {
	s.Limit = val
}

// A billing promo code.
// Ref: #/components/schemas/PromoCode
type PromoCode struct {
	// The promo "code".
	Code string `json:"code"`
	// The amount of credit the promo code offers.
	Credit NilPromoCodeCredit `json:"credit"`
	State  PromoCodeState     `json:"state"`
}

// GetCode returns the value of Code.
func (s *PromoCode) GetCode() string {
	return s.Code
}

// GetCredit returns the value of Credit.
func (s *PromoCode) GetCredit() NilPromoCodeCredit {
	return s.Credit
}

// GetState returns the value of State.
func (s *PromoCode) GetState() PromoCodeState {
	return s.State
}

// SetCode sets the value of Code.
func (s *PromoCode) SetCode(val string) {
	s.Code = val
}

// SetCredit sets the value of Credit.
func (s *PromoCode) SetCredit(val NilPromoCodeCredit) {
	s.Credit = val
}

// SetState sets the value of State.
func (s *PromoCode) SetState(val PromoCodeState) {
	s.State = val
}

// The amount of credit the promo code offers.
type PromoCodeCredit map[string]PromoCodeCreditItem

func (s *PromoCodeCredit) init() PromoCodeCredit {
	m := *s
	if m == nil {
		m = map[string]PromoCodeCreditItem{}
		*s = m
	}
	return m
}

type PromoCodeCreditItem struct {
	Amount  OptBillingAmount `json:"amount"`
	Expires OptDateTime      `json:"expires"`
}

// GetAmount returns the value of Amount.
func (s *PromoCodeCreditItem) GetAmount() OptBillingAmount {
	return s.Amount
}

// GetExpires returns the value of Expires.
func (s *PromoCodeCreditItem) GetExpires() OptDateTime {
	return s.Expires
}

// SetAmount sets the value of Amount.
func (s *PromoCodeCreditItem) SetAmount(val OptBillingAmount) {
	s.Amount = val
}

// SetExpires sets the value of Expires.
func (s *PromoCodeCreditItem) SetExpires(val OptDateTime) {
	s.Expires = val
}

// A resource thats associated with a promo code.
// Ref: #/components/schemas/PromoCodeInclude
type PromoCodeInclude map[string]PromoCode

func (s *PromoCodeInclude) init() PromoCodeInclude {
	m := *s
	if m == nil {
		m = map[string]PromoCode{}
		*s = m
	}
	return m
}

// Merged schema.
type PromoCodeState struct {
	// The current state of the promo code.
	Current PromoCodeStateCurrent `json:"current"`
	Changed DateTime              `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptPromoCodeStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *PromoCodeState) GetCurrent() PromoCodeStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *PromoCodeState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *PromoCodeState) GetError() OptPromoCodeStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *PromoCodeState) SetCurrent(val PromoCodeStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *PromoCodeState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *PromoCodeState) SetError(val OptPromoCodeStateError) {
	s.Error = val
}

// The current state of the promo code.
type PromoCodeStateCurrent string

const (
	PromoCodeStateCurrentLive    PromoCodeStateCurrent = "live"
	PromoCodeStateCurrentDeleted PromoCodeStateCurrent = "deleted"
)

// AllValues returns all PromoCodeStateCurrent values.
func (PromoCodeStateCurrent) AllValues() []PromoCodeStateCurrent {
	return []PromoCodeStateCurrent{
		PromoCodeStateCurrentLive,
		PromoCodeStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PromoCodeStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case PromoCodeStateCurrentLive:
		return []byte(s), nil
	case PromoCodeStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PromoCodeStateCurrent) UnmarshalText(data []byte) error {
	switch PromoCodeStateCurrent(data) {
	case PromoCodeStateCurrentLive:
		*s = PromoCodeStateCurrentLive
		return nil
	case PromoCodeStateCurrentDeleted:
		*s = PromoCodeStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type PromoCodeStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *PromoCodeStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *PromoCodeStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *PromoCodeStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *PromoCodeStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Location information for a given provider.
// Ref: #/components/schemas/ProviderLocation
type ProviderLocation struct {
	ID string `json:"id"`
	// A name for the location.
	Name       string                           `json:"name"`
	Geographic OptNilProviderLocationGeographic `json:"geographic"`
	Provider   ProviderLocationDetails          `json:"provider"`
	// A boolean where true means the locaiton is supported by the platform.
	Compatible bool `json:"compatible"`
	// Additional information about available and supported features of the provider location.
	Features ProviderLocationFeatures `json:"features"`
	// An abbreviation for the given provider locaiton.
	Abbreviation string `json:"abbreviation"`
	// Additional information about the given provider locaiton.
	Annotations ProviderLocationAnnotations `json:"annotations"`
}

// GetID returns the value of ID.
func (s *ProviderLocation) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProviderLocation) GetName() string {
	return s.Name
}

// GetGeographic returns the value of Geographic.
func (s *ProviderLocation) GetGeographic() OptNilProviderLocationGeographic {
	return s.Geographic
}

// GetProvider returns the value of Provider.
func (s *ProviderLocation) GetProvider() ProviderLocationDetails {
	return s.Provider
}

// GetCompatible returns the value of Compatible.
func (s *ProviderLocation) GetCompatible() bool {
	return s.Compatible
}

// GetFeatures returns the value of Features.
func (s *ProviderLocation) GetFeatures() ProviderLocationFeatures {
	return s.Features
}

// GetAbbreviation returns the value of Abbreviation.
func (s *ProviderLocation) GetAbbreviation() string {
	return s.Abbreviation
}

// GetAnnotations returns the value of Annotations.
func (s *ProviderLocation) GetAnnotations() ProviderLocationAnnotations {
	return s.Annotations
}

// SetID sets the value of ID.
func (s *ProviderLocation) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProviderLocation) SetName(val string) {
	s.Name = val
}

// SetGeographic sets the value of Geographic.
func (s *ProviderLocation) SetGeographic(val OptNilProviderLocationGeographic) {
	s.Geographic = val
}

// SetProvider sets the value of Provider.
func (s *ProviderLocation) SetProvider(val ProviderLocationDetails) {
	s.Provider = val
}

// SetCompatible sets the value of Compatible.
func (s *ProviderLocation) SetCompatible(val bool) {
	s.Compatible = val
}

// SetFeatures sets the value of Features.
func (s *ProviderLocation) SetFeatures(val ProviderLocationFeatures) {
	s.Features = val
}

// SetAbbreviation sets the value of Abbreviation.
func (s *ProviderLocation) SetAbbreviation(val string) {
	s.Abbreviation = val
}

// SetAnnotations sets the value of Annotations.
func (s *ProviderLocation) SetAnnotations(val ProviderLocationAnnotations) {
	s.Annotations = val
}

// Additional information about the given provider locaiton.
type ProviderLocationAnnotations map[string]jx.Raw

func (s *ProviderLocationAnnotations) init() ProviderLocationAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Information about the locaiton of the provider.
// Ref: #/components/schemas/ProviderLocationDetails
type ProviderLocationDetails struct {
	// An identifier for the given provider.
	Identifier    string `json:"identifier"`
	IntegrationID OptID  `json:"integration_id"`
	// A location name returned from the provider.
	Location string `json:"location"`
	// A location code returned from the provider.
	Code              string   `json:"code"`
	AvailabilityZones []string `json:"availability_zones"`
}

// GetIdentifier returns the value of Identifier.
func (s *ProviderLocationDetails) GetIdentifier() string {
	return s.Identifier
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ProviderLocationDetails) GetIntegrationID() OptID {
	return s.IntegrationID
}

// GetLocation returns the value of Location.
func (s *ProviderLocationDetails) GetLocation() string {
	return s.Location
}

// GetCode returns the value of Code.
func (s *ProviderLocationDetails) GetCode() string {
	return s.Code
}

// GetAvailabilityZones returns the value of AvailabilityZones.
func (s *ProviderLocationDetails) GetAvailabilityZones() []string {
	return s.AvailabilityZones
}

// SetIdentifier sets the value of Identifier.
func (s *ProviderLocationDetails) SetIdentifier(val string) {
	s.Identifier = val
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ProviderLocationDetails) SetIntegrationID(val OptID) {
	s.IntegrationID = val
}

// SetLocation sets the value of Location.
func (s *ProviderLocationDetails) SetLocation(val string) {
	s.Location = val
}

// SetCode sets the value of Code.
func (s *ProviderLocationDetails) SetCode(val string) {
	s.Code = val
}

// SetAvailabilityZones sets the value of AvailabilityZones.
func (s *ProviderLocationDetails) SetAvailabilityZones(val []string) {
	s.AvailabilityZones = val
}

// Additional information about available and supported features of the provider location.
type ProviderLocationFeatures struct {
	// Available features for the provider location.
	Available []string `json:"available"`
	// Supported features for the provider location.
	Supported []string `json:"supported"`
}

// GetAvailable returns the value of Available.
func (s *ProviderLocationFeatures) GetAvailable() []string {
	return s.Available
}

// GetSupported returns the value of Supported.
func (s *ProviderLocationFeatures) GetSupported() []string {
	return s.Supported
}

// SetAvailable sets the value of Available.
func (s *ProviderLocationFeatures) SetAvailable(val []string) {
	s.Available = val
}

// SetSupported sets the value of Supported.
func (s *ProviderLocationFeatures) SetSupported(val []string) {
	s.Supported = val
}

// Geographic information about a provider location.
type ProviderLocationGeographic struct {
	// The latitude of the given provider datacenter.
	Latitude int `json:"latitude"`
	// The longitude of the given provider datacenter.
	Longitude int `json:"longitude"`
	// The city the datacenter resides in.
	City string `json:"city"`
	// The state the datacenter resides in.
	State string `json:"state"`
	// The country the datacenter resides in.
	Country string `json:"country"`
	// The region the datacenter resides in.
	Region string `json:"region"`
}

// GetLatitude returns the value of Latitude.
func (s *ProviderLocationGeographic) GetLatitude() int {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *ProviderLocationGeographic) GetLongitude() int {
	return s.Longitude
}

// GetCity returns the value of City.
func (s *ProviderLocationGeographic) GetCity() string {
	return s.City
}

// GetState returns the value of State.
func (s *ProviderLocationGeographic) GetState() string {
	return s.State
}

// GetCountry returns the value of Country.
func (s *ProviderLocationGeographic) GetCountry() string {
	return s.Country
}

// GetRegion returns the value of Region.
func (s *ProviderLocationGeographic) GetRegion() string {
	return s.Region
}

// SetLatitude sets the value of Latitude.
func (s *ProviderLocationGeographic) SetLatitude(val int) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *ProviderLocationGeographic) SetLongitude(val int) {
	s.Longitude = val
}

// SetCity sets the value of City.
func (s *ProviderLocationGeographic) SetCity(val string) {
	s.City = val
}

// SetState sets the value of State.
func (s *ProviderLocationGeographic) SetState(val string) {
	s.State = val
}

// SetCountry sets the value of Country.
func (s *ProviderLocationGeographic) SetCountry(val string) {
	s.Country = val
}

// SetRegion sets the value of Region.
func (s *ProviderLocationGeographic) SetRegion(val string) {
	s.Region = val
}

// A server from a provider.
// Ref: #/components/schemas/ProviderServerModel
type ProviderServerModel struct {
	ID ID `json:"id"`
	// A name for the server.
	Name string `json:"name"`
	// A description of the server.
	Description string             `json:"description"`
	Specs       ServerSpecs        `json:"specs"`
	Provider    ProviderServerSpec `json:"provider"`
	Price       BillingAmount      `json:"price"`
	// A boolean where true signifies this server is compatible with the platform.
	Compatible bool `json:"compatible"`
	// A boolean where true signifies the server has a limited amount of resources and should only be
	// used for very lightweight workloads.
	LowResource bool `json:"low_resource"`
	// An array of location IDs where this server type is available.
	LocationIds []string `json:"location_ids"`
}

// GetID returns the value of ID.
func (s *ProviderServerModel) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProviderServerModel) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ProviderServerModel) GetDescription() string {
	return s.Description
}

// GetSpecs returns the value of Specs.
func (s *ProviderServerModel) GetSpecs() ServerSpecs {
	return s.Specs
}

// GetProvider returns the value of Provider.
func (s *ProviderServerModel) GetProvider() ProviderServerSpec {
	return s.Provider
}

// GetPrice returns the value of Price.
func (s *ProviderServerModel) GetPrice() BillingAmount {
	return s.Price
}

// GetCompatible returns the value of Compatible.
func (s *ProviderServerModel) GetCompatible() bool {
	return s.Compatible
}

// GetLowResource returns the value of LowResource.
func (s *ProviderServerModel) GetLowResource() bool {
	return s.LowResource
}

// GetLocationIds returns the value of LocationIds.
func (s *ProviderServerModel) GetLocationIds() []string {
	return s.LocationIds
}

// SetID sets the value of ID.
func (s *ProviderServerModel) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProviderServerModel) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ProviderServerModel) SetDescription(val string) {
	s.Description = val
}

// SetSpecs sets the value of Specs.
func (s *ProviderServerModel) SetSpecs(val ServerSpecs) {
	s.Specs = val
}

// SetProvider sets the value of Provider.
func (s *ProviderServerModel) SetProvider(val ProviderServerSpec) {
	s.Provider = val
}

// SetPrice sets the value of Price.
func (s *ProviderServerModel) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetCompatible sets the value of Compatible.
func (s *ProviderServerModel) SetCompatible(val bool) {
	s.Compatible = val
}

// SetLowResource sets the value of LowResource.
func (s *ProviderServerModel) SetLowResource(val bool) {
	s.LowResource = val
}

// SetLocationIds sets the value of LocationIds.
func (s *ProviderServerModel) SetLocationIds(val []string) {
	s.LocationIds = val
}

// Higher level information about a providers server.
// Ref: #/components/schemas/ProviderServerSpec
type ProviderServerSpec struct {
	// A provider identifier.
	Identifier    string       `json:"identifier"`
	IntegrationID OptNilString `json:"integration_id"`
	// A category for the server.
	Category string `json:"category"`
	// A class for the server.
	Class OptString `json:"class"`
	// The model of the server.
	Model string `json:"model"`
	// A list of location ID's this server is available.
	Locations         []string                               `json:"locations"`
	AvailabilityZones OptProviderServerSpecAvailabilityZones `json:"availability_zones"`
}

// GetIdentifier returns the value of Identifier.
func (s *ProviderServerSpec) GetIdentifier() string {
	return s.Identifier
}

// GetIntegrationID returns the value of IntegrationID.
func (s *ProviderServerSpec) GetIntegrationID() OptNilString {
	return s.IntegrationID
}

// GetCategory returns the value of Category.
func (s *ProviderServerSpec) GetCategory() string {
	return s.Category
}

// GetClass returns the value of Class.
func (s *ProviderServerSpec) GetClass() OptString {
	return s.Class
}

// GetModel returns the value of Model.
func (s *ProviderServerSpec) GetModel() string {
	return s.Model
}

// GetLocations returns the value of Locations.
func (s *ProviderServerSpec) GetLocations() []string {
	return s.Locations
}

// GetAvailabilityZones returns the value of AvailabilityZones.
func (s *ProviderServerSpec) GetAvailabilityZones() OptProviderServerSpecAvailabilityZones {
	return s.AvailabilityZones
}

// SetIdentifier sets the value of Identifier.
func (s *ProviderServerSpec) SetIdentifier(val string) {
	s.Identifier = val
}

// SetIntegrationID sets the value of IntegrationID.
func (s *ProviderServerSpec) SetIntegrationID(val OptNilString) {
	s.IntegrationID = val
}

// SetCategory sets the value of Category.
func (s *ProviderServerSpec) SetCategory(val string) {
	s.Category = val
}

// SetClass sets the value of Class.
func (s *ProviderServerSpec) SetClass(val OptString) {
	s.Class = val
}

// SetModel sets the value of Model.
func (s *ProviderServerSpec) SetModel(val string) {
	s.Model = val
}

// SetLocations sets the value of Locations.
func (s *ProviderServerSpec) SetLocations(val []string) {
	s.Locations = val
}

// SetAvailabilityZones sets the value of AvailabilityZones.
func (s *ProviderServerSpec) SetAvailabilityZones(val OptProviderServerSpecAvailabilityZones) {
	s.AvailabilityZones = val
}

type ProviderServerSpecAvailabilityZones map[string][]string

func (s *ProviderServerSpecAvailabilityZones) init() ProviderServerSpecAvailabilityZones {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// Publicly available information about an account.
// Ref: #/components/schemas/PublicAccount
type PublicAccount struct {
	// The first and last name of an account owner.
	Name PublicAccountName `json:"name"`
	// Email information for an account.
	Email PublicAccountEmail `json:"email"`
	// Id information for an account.
	ID     string                 `json:"id"`
	Events OptPublicAccountEvents `json:"events"`
}

// GetName returns the value of Name.
func (s *PublicAccount) GetName() PublicAccountName {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *PublicAccount) GetEmail() PublicAccountEmail {
	return s.Email
}

// GetID returns the value of ID.
func (s *PublicAccount) GetID() string {
	return s.ID
}

// GetEvents returns the value of Events.
func (s *PublicAccount) GetEvents() OptPublicAccountEvents {
	return s.Events
}

// SetName sets the value of Name.
func (s *PublicAccount) SetName(val PublicAccountName) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *PublicAccount) SetEmail(val PublicAccountEmail) {
	s.Email = val
}

// SetID sets the value of ID.
func (s *PublicAccount) SetID(val string) {
	s.ID = val
}

// SetEvents sets the value of Events.
func (s *PublicAccount) SetEvents(val OptPublicAccountEvents) {
	s.Events = val
}

// Email information for an account.
type PublicAccountEmail struct {
	// The email address.
	Address string `json:"address"`
	// A boolean representing if the email has been verified.
	Verified bool     `json:"verified"`
	Added    DateTime `json:"added"`
}

// GetAddress returns the value of Address.
func (s *PublicAccountEmail) GetAddress() string {
	return s.Address
}

// GetVerified returns the value of Verified.
func (s *PublicAccountEmail) GetVerified() bool {
	return s.Verified
}

// GetAdded returns the value of Added.
func (s *PublicAccountEmail) GetAdded() DateTime {
	return s.Added
}

// SetAddress sets the value of Address.
func (s *PublicAccountEmail) SetAddress(val string) {
	s.Address = val
}

// SetVerified sets the value of Verified.
func (s *PublicAccountEmail) SetVerified(val bool) {
	s.Verified = val
}

// SetAdded sets the value of Added.
func (s *PublicAccountEmail) SetAdded(val DateTime) {
	s.Added = val
}

// Merged schema.
type PublicAccountEvents struct {
	LastLogin       OptDateTime `json:"last_login"`
	AdditionalProps PublicAccountEventsAdditional
}

// GetLastLogin returns the value of LastLogin.
func (s *PublicAccountEvents) GetLastLogin() OptDateTime {
	return s.LastLogin
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *PublicAccountEvents) GetAdditionalProps() PublicAccountEventsAdditional {
	return s.AdditionalProps
}

// SetLastLogin sets the value of LastLogin.
func (s *PublicAccountEvents) SetLastLogin(val OptDateTime) {
	s.LastLogin = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *PublicAccountEvents) SetAdditionalProps(val PublicAccountEventsAdditional) {
	s.AdditionalProps = val
}

type PublicAccountEventsAdditional map[string]DateTime

func (s *PublicAccountEventsAdditional) init() PublicAccountEventsAdditional {
	m := *s
	if m == nil {
		m = map[string]DateTime{}
		*s = m
	}
	return m
}

// The first and last name of an account owner.
type PublicAccountName struct {
	// The first name of the account owner.
	First string `json:"first"`
	// The last name of the account owner.
	Last string `json:"last"`
}

// GetFirst returns the value of First.
func (s *PublicAccountName) GetFirst() string {
	return s.First
}

// GetLast returns the value of Last.
func (s *PublicAccountName) GetLast() string {
	return s.Last
}

// SetFirst sets the value of First.
func (s *PublicAccountName) SetFirst(val string) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *PublicAccountName) SetLast(val string) {
	s.Last = val
}

// A start and end date-time pair indicating a range of time.
// Ref: #/components/schemas/Range
type Range struct {
	Start DateTime `json:"start"`
	End   DateTime `json:"end"`
}

// GetStart returns the value of Start.
func (s *Range) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Range) GetEnd() DateTime {
	return s.End
}

// SetStart sets the value of Start.
func (s *Range) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Range) SetEnd(val DateTime) {
	s.End = val
}

// The `raw` type of scoped variable `value`, referred to as a source.  This means that the value is
// static, not the result of a call to an external or internal URL.
// Ref: #/components/schemas/RawSource
type RawSource struct {
	Details RawSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *RawSource) GetDetails() RawSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *RawSource) SetDetails(val RawSourceDetails) {
	s.Details = val
}

type RawSourceDetails struct {
	// The value of the variable.
	Value string `json:"value"`
	// A boolean where true represents the text the user is entering will be multi line.
	Blob   bool                         `json:"blob"`
	Secret OptNilRawSourceDetailsSecret `json:"secret"`
}

// GetValue returns the value of Value.
func (s *RawSourceDetails) GetValue() string {
	return s.Value
}

// GetBlob returns the value of Blob.
func (s *RawSourceDetails) GetBlob() bool {
	return s.Blob
}

// GetSecret returns the value of Secret.
func (s *RawSourceDetails) GetSecret() OptNilRawSourceDetailsSecret {
	return s.Secret
}

// SetValue sets the value of Value.
func (s *RawSourceDetails) SetValue(val string) {
	s.Value = val
}

// SetBlob sets the value of Blob.
func (s *RawSourceDetails) SetBlob(val bool) {
	s.Blob = val
}

// SetSecret sets the value of Secret.
func (s *RawSourceDetails) SetSecret(val OptNilRawSourceDetailsSecret) {
	s.Secret = val
}

type RawSourceDetailsSecret struct {
	// A string describing the IV Hex associated with the encryption of the variable.
	Iv OptString `json:"iv"`
	// A user specified hint that will suggest what the encryption key might be.
	Hint OptNilString `json:"hint"`
}

// GetIv returns the value of Iv.
func (s *RawSourceDetailsSecret) GetIv() OptString {
	return s.Iv
}

// GetHint returns the value of Hint.
func (s *RawSourceDetailsSecret) GetHint() OptNilString {
	return s.Hint
}

// SetIv sets the value of Iv.
func (s *RawSourceDetailsSecret) SetIv(val OptString) {
	s.Iv = val
}

// SetHint sets the value of Hint.
func (s *RawSourceDetailsSecret) SetHint(val OptNilString) {
	s.Hint = val
}

// The type of source value, can be either `raw` or `url`.
type RawSourceType string

const (
	RawSourceTypeRaw RawSourceType = "raw"
)

// AllValues returns all RawSourceType values.
func (RawSourceType) AllValues() []RawSourceType {
	return []RawSourceType{
		RawSourceTypeRaw,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RawSourceType) MarshalText() ([]byte, error) {
	switch s {
	case RawSourceTypeRaw:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RawSourceType) UnmarshalText(data []byte) error {
	switch RawSourceType(data) {
	case RawSourceTypeRaw:
		*s = RawSourceTypeRaw
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ReconfigureContainer
type ReconfigureContainer struct {
	Contents Config `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *ReconfigureContainer) GetContents() Config {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *ReconfigureContainer) SetContents(val Config) {
	s.Contents = val
}

// The action to take.
type ReconfigureContainerAction string

const (
	ReconfigureContainerActionReconfigure ReconfigureContainerAction = "reconfigure"
)

// AllValues returns all ReconfigureContainerAction values.
func (ReconfigureContainerAction) AllValues() []ReconfigureContainerAction {
	return []ReconfigureContainerAction{
		ReconfigureContainerActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureContainerAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureContainerActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureContainerAction) UnmarshalText(data []byte) error {
	switch ReconfigureContainerAction(data) {
	case ReconfigureContainerActionReconfigure:
		*s = ReconfigureContainerActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ReconfigureServer
type ReconfigureServer struct {
	// Supplemental information needed to perform the action.
	Contents ReconfigureServerContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *ReconfigureServer) GetContents() ReconfigureServerContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *ReconfigureServer) SetContents(val ReconfigureServerContents) {
	s.Contents = val
}

// The action to take.
type ReconfigureServerAction string

const (
	ReconfigureServerActionFeaturesReconfigure ReconfigureServerAction = "features.reconfigure"
)

// AllValues returns all ReconfigureServerAction values.
func (ReconfigureServerAction) AllValues() []ReconfigureServerAction {
	return []ReconfigureServerAction{
		ReconfigureServerActionFeaturesReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureServerAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureServerActionFeaturesReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureServerAction) UnmarshalText(data []byte) error {
	switch ReconfigureServerAction(data) {
	case ReconfigureServerActionFeaturesReconfigure:
		*s = ReconfigureServerActionFeaturesReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Supplemental information needed to perform the action.
type ReconfigureServerContents struct {
	// A boolean where true represents the desire for the server to accept incoming SFTP requests for
	// container volumes.
	Sftp bool `json:"sftp"`
	// A number in GB for how big the base volume should be.  This cannot be lower than the currently set
	// value for the server.
	BaseVolumeGB NilInt `json:"base_volume_gb"`
}

// GetSftp returns the value of Sftp.
func (s *ReconfigureServerContents) GetSftp() bool {
	return s.Sftp
}

// GetBaseVolumeGB returns the value of BaseVolumeGB.
func (s *ReconfigureServerContents) GetBaseVolumeGB() NilInt {
	return s.BaseVolumeGB
}

// SetSftp sets the value of Sftp.
func (s *ReconfigureServerContents) SetSftp(val bool) {
	s.Sftp = val
}

// SetBaseVolumeGB sets the value of BaseVolumeGB.
func (s *ReconfigureServerContents) SetBaseVolumeGB(val NilInt) {
	s.BaseVolumeGB = val
}

// Ref: #/components/schemas/ReconfigureSharedFs
type ReconfigureSharedFs struct {
	Contents ReconfigureSharedFsContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *ReconfigureSharedFs) GetContents() ReconfigureSharedFsContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *ReconfigureSharedFs) SetContents(val ReconfigureSharedFsContents) {
	s.Contents = val
}

// The action to take.
type ReconfigureSharedFsAction string

const (
	ReconfigureSharedFsActionSharedfsReconfigure ReconfigureSharedFsAction = "sharedfs.reconfigure"
)

// AllValues returns all ReconfigureSharedFsAction values.
func (ReconfigureSharedFsAction) AllValues() []ReconfigureSharedFsAction {
	return []ReconfigureSharedFsAction{
		ReconfigureSharedFsActionSharedfsReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureSharedFsAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureSharedFsActionSharedfsReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureSharedFsAction) UnmarshalText(data []byte) error {
	switch ReconfigureSharedFsAction(data) {
	case ReconfigureSharedFsActionSharedfsReconfigure:
		*s = ReconfigureSharedFsActionSharedfsReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ReconfigureSharedFsContents struct {
	Mounts OptNilReconfigureSharedFsContentsMounts `json:"mounts"`
	// An object describing directory identifiers with value {}.
	Directories OptNilReconfigureSharedFsContentsDirectories `json:"directories"`
}

// GetMounts returns the value of Mounts.
func (s *ReconfigureSharedFsContents) GetMounts() OptNilReconfigureSharedFsContentsMounts {
	return s.Mounts
}

// GetDirectories returns the value of Directories.
func (s *ReconfigureSharedFsContents) GetDirectories() OptNilReconfigureSharedFsContentsDirectories {
	return s.Directories
}

// SetMounts sets the value of Mounts.
func (s *ReconfigureSharedFsContents) SetMounts(val OptNilReconfigureSharedFsContentsMounts) {
	s.Mounts = val
}

// SetDirectories sets the value of Directories.
func (s *ReconfigureSharedFsContents) SetDirectories(val OptNilReconfigureSharedFsContentsDirectories) {
	s.Directories = val
}

// An object describing directory identifiers with value {}.
type ReconfigureSharedFsContentsDirectories map[string]jx.Raw

func (s *ReconfigureSharedFsContentsDirectories) init() ReconfigureSharedFsContentsDirectories {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ReconfigureSharedFsContentsMounts map[string]ReconfigureSharedFsContentsMountsItem

func (s *ReconfigureSharedFsContentsMounts) init() ReconfigureSharedFsContentsMounts {
	m := *s
	if m == nil {
		m = map[string]ReconfigureSharedFsContentsMountsItem{}
		*s = m
	}
	return m
}

type ReconfigureSharedFsContentsMountsItem struct {
	// String describing the server mount type.
	Type string `json:"type"`
	// Comma separated string describing the server mount options.
	Options string `json:"options"`
	// String describing the server mount source.
	Source string `json:"source"`
}

// GetType returns the value of Type.
func (s *ReconfigureSharedFsContentsMountsItem) GetType() string {
	return s.Type
}

// GetOptions returns the value of Options.
func (s *ReconfigureSharedFsContentsMountsItem) GetOptions() string {
	return s.Options
}

// GetSource returns the value of Source.
func (s *ReconfigureSharedFsContentsMountsItem) GetSource() string {
	return s.Source
}

// SetType sets the value of Type.
func (s *ReconfigureSharedFsContentsMountsItem) SetType(val string) {
	s.Type = val
}

// SetOptions sets the value of Options.
func (s *ReconfigureSharedFsContentsMountsItem) SetOptions(val string) {
	s.Options = val
}

// SetSource sets the value of Source.
func (s *ReconfigureSharedFsContentsMountsItem) SetSource(val string) {
	s.Source = val
}

// Ref: #/components/schemas/ReconfigureVolumes
type ReconfigureVolumes struct {
	// An array of volume objects to be reconfigured.
	Contents []VolumeSummary `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *ReconfigureVolumes) GetContents() []VolumeSummary {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *ReconfigureVolumes) SetContents(val []VolumeSummary) {
	s.Contents = val
}

// The action to take.
type ReconfigureVolumesAction string

const (
	ReconfigureVolumesActionVolumesReconfigure ReconfigureVolumesAction = "volumes.reconfigure"
)

// AllValues returns all ReconfigureVolumesAction values.
func (ReconfigureVolumesAction) AllValues() []ReconfigureVolumesAction {
	return []ReconfigureVolumesAction{
		ReconfigureVolumesActionVolumesReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReconfigureVolumesAction) MarshalText() ([]byte, error) {
	switch s {
	case ReconfigureVolumesActionVolumesReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReconfigureVolumesAction) UnmarshalText(data []byte) error {
	switch ReconfigureVolumesAction(data) {
	case ReconfigureVolumesActionVolumesReconfigure:
		*s = ReconfigureVolumesActionVolumesReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A DNS record.
// Ref: #/components/schemas/Record
type Record struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// A unique identifier for the zone.
	ZoneID string `json:"zone_id"`
	// A name used for the record, where `@` signifies the use of the root domain.
	Name string `json:"name"`
	// The name of the record and the origin as a domain name.
	ResolvedDomain string      `json:"resolved_domain"`
	Type           RecordTypes `json:"type"`
	// TLS features for the record.
	Features NilRecordFeatures `json:"features"`
	State    RecordState       `json:"state"`
	Events   Events            `json:"events"`
}

// GetID returns the value of ID.
func (s *Record) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Record) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Record) GetCreator() CreatorScope {
	return s.Creator
}

// GetZoneID returns the value of ZoneID.
func (s *Record) GetZoneID() string {
	return s.ZoneID
}

// GetName returns the value of Name.
func (s *Record) GetName() string {
	return s.Name
}

// GetResolvedDomain returns the value of ResolvedDomain.
func (s *Record) GetResolvedDomain() string {
	return s.ResolvedDomain
}

// GetType returns the value of Type.
func (s *Record) GetType() RecordTypes {
	return s.Type
}

// GetFeatures returns the value of Features.
func (s *Record) GetFeatures() NilRecordFeatures {
	return s.Features
}

// GetState returns the value of State.
func (s *Record) GetState() RecordState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Record) GetEvents() Events {
	return s.Events
}

// SetID sets the value of ID.
func (s *Record) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Record) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Record) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetZoneID sets the value of ZoneID.
func (s *Record) SetZoneID(val string) {
	s.ZoneID = val
}

// SetName sets the value of Name.
func (s *Record) SetName(val string) {
	s.Name = val
}

// SetResolvedDomain sets the value of ResolvedDomain.
func (s *Record) SetResolvedDomain(val string) {
	s.ResolvedDomain = val
}

// SetType sets the value of Type.
func (s *Record) SetType(val RecordTypes) {
	s.Type = val
}

// SetFeatures sets the value of Features.
func (s *Record) SetFeatures(val NilRecordFeatures) {
	s.Features = val
}

// SetState sets the value of State.
func (s *Record) SetState(val RecordState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Record) SetEvents(val Events) {
	s.Events = val
}

// TLS features for the record.
type RecordFeatures struct {
	Certificate NilRecordFeaturesCertificate `json:"certificate"`
}

// GetCertificate returns the value of Certificate.
func (s *RecordFeatures) GetCertificate() NilRecordFeaturesCertificate {
	return s.Certificate
}

// SetCertificate sets the value of Certificate.
func (s *RecordFeatures) SetCertificate(val NilRecordFeaturesCertificate) {
	s.Certificate = val
}

// A TLS record certificate.
type RecordFeaturesCertificate struct {
	ID        ID       `json:"id"`
	Generated DateTime `json:"generated"`
	// A value where true represents that the certificate is using a shared wildcard cert.
	WildcardChild bool `json:"wildcard_child"`
}

// GetID returns the value of ID.
func (s *RecordFeaturesCertificate) GetID() ID {
	return s.ID
}

// GetGenerated returns the value of Generated.
func (s *RecordFeaturesCertificate) GetGenerated() DateTime {
	return s.Generated
}

// GetWildcardChild returns the value of WildcardChild.
func (s *RecordFeaturesCertificate) GetWildcardChild() bool {
	return s.WildcardChild
}

// SetID sets the value of ID.
func (s *RecordFeaturesCertificate) SetID(val ID) {
	s.ID = val
}

// SetGenerated sets the value of Generated.
func (s *RecordFeaturesCertificate) SetGenerated(val DateTime) {
	s.Generated = val
}

// SetWildcardChild sets the value of WildcardChild.
func (s *RecordFeaturesCertificate) SetWildcardChild(val bool) {
	s.WildcardChild = val
}

// All includable resources linkable to the given records.
// Ref: #/components/schemas/RecordIncludes
type RecordIncludes struct {
	Creators              OptCreatorInclude     `json:"creators"`
	Containers            OptContainersIncludes `json:"containers"`
	ContainersIdentifiers OptIdentifierIncludes `json:"containers:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *RecordIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetContainers returns the value of Containers.
func (s *RecordIncludes) GetContainers() OptContainersIncludes {
	return s.Containers
}

// GetContainersIdentifiers returns the value of ContainersIdentifiers.
func (s *RecordIncludes) GetContainersIdentifiers() OptIdentifierIncludes {
	return s.ContainersIdentifiers
}

// SetCreators sets the value of Creators.
func (s *RecordIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetContainers sets the value of Containers.
func (s *RecordIncludes) SetContainers(val OptContainersIncludes) {
	s.Containers = val
}

// SetContainersIdentifiers sets the value of ContainersIdentifiers.
func (s *RecordIncludes) SetContainersIdentifiers(val OptIdentifierIncludes) {
	s.ContainersIdentifiers = val
}

// Merged schema.
// Ref: #/components/schemas/RecordState
type RecordState struct {
	// The current state of the record.
	Current RecordStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptRecordStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *RecordState) GetCurrent() RecordStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *RecordState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *RecordState) GetError() OptRecordStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *RecordState) SetCurrent(val RecordStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *RecordState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *RecordState) SetError(val OptRecordStateError) {
	s.Error = val
}

// The current state of the record.
type RecordStateCurrent string

const (
	RecordStateCurrentPending  RecordStateCurrent = "pending"
	RecordStateCurrentLive     RecordStateCurrent = "live"
	RecordStateCurrentDeleting RecordStateCurrent = "deleting"
	RecordStateCurrentDeleted  RecordStateCurrent = "deleted"
)

// AllValues returns all RecordStateCurrent values.
func (RecordStateCurrent) AllValues() []RecordStateCurrent {
	return []RecordStateCurrent{
		RecordStateCurrentPending,
		RecordStateCurrentLive,
		RecordStateCurrentDeleting,
		RecordStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RecordStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case RecordStateCurrentPending:
		return []byte(s), nil
	case RecordStateCurrentLive:
		return []byte(s), nil
	case RecordStateCurrentDeleting:
		return []byte(s), nil
	case RecordStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RecordStateCurrent) UnmarshalText(data []byte) error {
	switch RecordStateCurrent(data) {
	case RecordStateCurrentPending:
		*s = RecordStateCurrentPending
		return nil
	case RecordStateCurrentLive:
		*s = RecordStateCurrentLive
		return nil
	case RecordStateCurrentDeleting:
		*s = RecordStateCurrentDeleting
		return nil
	case RecordStateCurrentDeleted:
		*s = RecordStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type RecordStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *RecordStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *RecordStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *RecordStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *RecordStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// DNS record types the platform supports.
// Ref: #/components/schemas/RecordTypes
type RecordTypes struct {
	// A DNS A record.
	A OptRecordTypesA `json:"a"`
	// A DNS AAAA record.
	Aaaa OptRecordTypesAaaa `json:"aaaa"`
	// A DNS CNAME record.
	Cname OptRecordTypesCname `json:"cname"`
	// A DNS NS record.
	Ns OptRecordTypesNs `json:"ns"`
	// A DNS MX record.
	Mx OptRecordTypesMx `json:"mx"`
	// A DNS TXT record.
	Txt OptRecordTypesTxt `json:"txt"`
	// A DNS ALIAS record.
	Alias OptRecordTypesAlias `json:"alias"`
	// A DNS SRV record.
	Srv OptRecordTypesSrv `json:"srv"`
	// A DNS CAA record.
	Caa OptRecordTypesCaa `json:"caa"`
	// A LINKED record is a record special to Cycle.  It represents a URL that points to a specific
	// container or deployment of a container, however the IP address mapping in handled automatically by
	// the platform.
	Linked OptRecordTypesLinked `json:"linked"`
}

// GetA returns the value of A.
func (s *RecordTypes) GetA() OptRecordTypesA {
	return s.A
}

// GetAaaa returns the value of Aaaa.
func (s *RecordTypes) GetAaaa() OptRecordTypesAaaa {
	return s.Aaaa
}

// GetCname returns the value of Cname.
func (s *RecordTypes) GetCname() OptRecordTypesCname {
	return s.Cname
}

// GetNs returns the value of Ns.
func (s *RecordTypes) GetNs() OptRecordTypesNs {
	return s.Ns
}

// GetMx returns the value of Mx.
func (s *RecordTypes) GetMx() OptRecordTypesMx {
	return s.Mx
}

// GetTxt returns the value of Txt.
func (s *RecordTypes) GetTxt() OptRecordTypesTxt {
	return s.Txt
}

// GetAlias returns the value of Alias.
func (s *RecordTypes) GetAlias() OptRecordTypesAlias {
	return s.Alias
}

// GetSrv returns the value of Srv.
func (s *RecordTypes) GetSrv() OptRecordTypesSrv {
	return s.Srv
}

// GetCaa returns the value of Caa.
func (s *RecordTypes) GetCaa() OptRecordTypesCaa {
	return s.Caa
}

// GetLinked returns the value of Linked.
func (s *RecordTypes) GetLinked() OptRecordTypesLinked {
	return s.Linked
}

// SetA sets the value of A.
func (s *RecordTypes) SetA(val OptRecordTypesA) {
	s.A = val
}

// SetAaaa sets the value of Aaaa.
func (s *RecordTypes) SetAaaa(val OptRecordTypesAaaa) {
	s.Aaaa = val
}

// SetCname sets the value of Cname.
func (s *RecordTypes) SetCname(val OptRecordTypesCname) {
	s.Cname = val
}

// SetNs sets the value of Ns.
func (s *RecordTypes) SetNs(val OptRecordTypesNs) {
	s.Ns = val
}

// SetMx sets the value of Mx.
func (s *RecordTypes) SetMx(val OptRecordTypesMx) {
	s.Mx = val
}

// SetTxt sets the value of Txt.
func (s *RecordTypes) SetTxt(val OptRecordTypesTxt) {
	s.Txt = val
}

// SetAlias sets the value of Alias.
func (s *RecordTypes) SetAlias(val OptRecordTypesAlias) {
	s.Alias = val
}

// SetSrv sets the value of Srv.
func (s *RecordTypes) SetSrv(val OptRecordTypesSrv) {
	s.Srv = val
}

// SetCaa sets the value of Caa.
func (s *RecordTypes) SetCaa(val OptRecordTypesCaa) {
	s.Caa = val
}

// SetLinked sets the value of Linked.
func (s *RecordTypes) SetLinked(val OptRecordTypesLinked) {
	s.Linked = val
}

// A DNS A record.
type RecordTypesA struct {
	// The IPv4 address that the A record should map to.
	IP string `json:"ip"`
}

// GetIP returns the value of IP.
func (s *RecordTypesA) GetIP() string {
	return s.IP
}

// SetIP sets the value of IP.
func (s *RecordTypesA) SetIP(val string) {
	s.IP = val
}

// A DNS AAAA record.
type RecordTypesAaaa struct {
	// The IPv6 address that the AAAA record should map to.
	IP string `json:"ip"`
}

// GetIP returns the value of IP.
func (s *RecordTypesAaaa) GetIP() string {
	return s.IP
}

// SetIP sets the value of IP.
func (s *RecordTypesAaaa) SetIP(val string) {
	s.IP = val
}

// A DNS ALIAS record.
type RecordTypesAlias struct {
	// The domain string returned from the DNS server when this alias record is requested.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesAlias) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesAlias) SetDomain(val string) {
	s.Domain = val
}

// A DNS CAA record.
type RecordTypesCaa struct {
	// The ASCII string that represents the identifier of the property represented by the record.
	Tag string `json:"tag"`
	// The value associated with the tag.
	Value string `json:"value"`
}

// GetTag returns the value of Tag.
func (s *RecordTypesCaa) GetTag() string {
	return s.Tag
}

// GetValue returns the value of Value.
func (s *RecordTypesCaa) GetValue() string {
	return s.Value
}

// SetTag sets the value of Tag.
func (s *RecordTypesCaa) SetTag(val string) {
	s.Tag = val
}

// SetValue sets the value of Value.
func (s *RecordTypesCaa) SetValue(val string) {
	s.Value = val
}

// A DNS CNAME record.
type RecordTypesCname struct {
	// The domain string the record resolves to.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesCname) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesCname) SetDomain(val string) {
	s.Domain = val
}

// Merged schema.
type RecordTypesLinked struct {
	// Features associated with this record.
	Features RecordTypesLinkedFeatures `json:"features"`
	OneOf    RecordTypesLinkedSum
}

// GetFeatures returns the value of Features.
func (s *RecordTypesLinked) GetFeatures() RecordTypesLinkedFeatures {
	return s.Features
}

// GetOneOf returns the value of OneOf.
func (s *RecordTypesLinked) GetOneOf() RecordTypesLinkedSum {
	return s.OneOf
}

// SetFeatures sets the value of Features.
func (s *RecordTypesLinked) SetFeatures(val RecordTypesLinkedFeatures) {
	s.Features = val
}

// SetOneOf sets the value of OneOf.
func (s *RecordTypesLinked) SetOneOf(val RecordTypesLinkedSum) {
	s.OneOf = val
}

// Features associated with this record.
type RecordTypesLinkedFeatures struct {
	// TLS properties of the record.
	TLS RecordTypesLinkedFeaturesTLS `json:"tls"`
}

// GetTLS returns the value of TLS.
func (s *RecordTypesLinkedFeatures) GetTLS() RecordTypesLinkedFeaturesTLS {
	return s.TLS
}

// SetTLS sets the value of TLS.
func (s *RecordTypesLinkedFeatures) SetTLS(val RecordTypesLinkedFeaturesTLS) {
	s.TLS = val
}

// TLS properties of the record.
type RecordTypesLinkedFeaturesTLS struct {
	// A boolean, where true represents this record will be paired with a TLS certificate automatically
	// maintained by the platform.
	Enable bool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *RecordTypesLinkedFeaturesTLS) GetEnable() bool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *RecordTypesLinkedFeaturesTLS) SetEnable(val bool) {
	s.Enable = val
}

// RecordTypesLinkedSum represents sum type.
type RecordTypesLinkedSum struct {
	Type                  RecordTypesLinkedSumType // switch on this field
	RecordTypesLinkedSum0 RecordTypesLinkedSum0
	RecordTypesLinkedSum1 RecordTypesLinkedSum1
}

// RecordTypesLinkedSumType is oneOf type of RecordTypesLinkedSum.
type RecordTypesLinkedSumType string

// Possible values for RecordTypesLinkedSumType.
const (
	RecordTypesLinkedSum0RecordTypesLinkedSum RecordTypesLinkedSumType = "RecordTypesLinkedSum0"
	RecordTypesLinkedSum1RecordTypesLinkedSum RecordTypesLinkedSumType = "RecordTypesLinkedSum1"
)

// IsRecordTypesLinkedSum0 reports whether RecordTypesLinkedSum is RecordTypesLinkedSum0.
func (s RecordTypesLinkedSum) IsRecordTypesLinkedSum0() bool {
	return s.Type == RecordTypesLinkedSum0RecordTypesLinkedSum
}

// IsRecordTypesLinkedSum1 reports whether RecordTypesLinkedSum is RecordTypesLinkedSum1.
func (s RecordTypesLinkedSum) IsRecordTypesLinkedSum1() bool {
	return s.Type == RecordTypesLinkedSum1RecordTypesLinkedSum
}

// SetRecordTypesLinkedSum0 sets RecordTypesLinkedSum to RecordTypesLinkedSum0.
func (s *RecordTypesLinkedSum) SetRecordTypesLinkedSum0(v RecordTypesLinkedSum0) {
	s.Type = RecordTypesLinkedSum0RecordTypesLinkedSum
	s.RecordTypesLinkedSum0 = v
}

// GetRecordTypesLinkedSum0 returns RecordTypesLinkedSum0 and true boolean if RecordTypesLinkedSum is RecordTypesLinkedSum0.
func (s RecordTypesLinkedSum) GetRecordTypesLinkedSum0() (v RecordTypesLinkedSum0, ok bool) {
	if !s.IsRecordTypesLinkedSum0() {
		return v, false
	}
	return s.RecordTypesLinkedSum0, true
}

// NewRecordTypesLinkedSum0RecordTypesLinkedSum returns new RecordTypesLinkedSum from RecordTypesLinkedSum0.
func NewRecordTypesLinkedSum0RecordTypesLinkedSum(v RecordTypesLinkedSum0) RecordTypesLinkedSum {
	var s RecordTypesLinkedSum
	s.SetRecordTypesLinkedSum0(v)
	return s
}

// SetRecordTypesLinkedSum1 sets RecordTypesLinkedSum to RecordTypesLinkedSum1.
func (s *RecordTypesLinkedSum) SetRecordTypesLinkedSum1(v RecordTypesLinkedSum1) {
	s.Type = RecordTypesLinkedSum1RecordTypesLinkedSum
	s.RecordTypesLinkedSum1 = v
}

// GetRecordTypesLinkedSum1 returns RecordTypesLinkedSum1 and true boolean if RecordTypesLinkedSum is RecordTypesLinkedSum1.
func (s RecordTypesLinkedSum) GetRecordTypesLinkedSum1() (v RecordTypesLinkedSum1, ok bool) {
	if !s.IsRecordTypesLinkedSum1() {
		return v, false
	}
	return s.RecordTypesLinkedSum1, true
}

// NewRecordTypesLinkedSum1RecordTypesLinkedSum returns new RecordTypesLinkedSum from RecordTypesLinkedSum1.
func NewRecordTypesLinkedSum1RecordTypesLinkedSum(v RecordTypesLinkedSum1) RecordTypesLinkedSum {
	var s RecordTypesLinkedSum
	s.SetRecordTypesLinkedSum1(v)
	return s
}

type RecordTypesLinkedSum0 struct {
	// The ID of the container this record is related to.
	ContainerID OptString `json:"container_id"`
}

// GetContainerID returns the value of ContainerID.
func (s *RecordTypesLinkedSum0) GetContainerID() OptString {
	return s.ContainerID
}

// SetContainerID sets the value of ContainerID.
func (s *RecordTypesLinkedSum0) SetContainerID(val OptString) {
	s.ContainerID = val
}

type RecordTypesLinkedSum1 struct {
	// Information about the deployment this record points to.
	Deployment OptNilRecordTypesLinkedSum1Deployment `json:"deployment"`
}

// GetDeployment returns the value of Deployment.
func (s *RecordTypesLinkedSum1) GetDeployment() OptNilRecordTypesLinkedSum1Deployment {
	return s.Deployment
}

// SetDeployment sets the value of Deployment.
func (s *RecordTypesLinkedSum1) SetDeployment(val OptNilRecordTypesLinkedSum1Deployment) {
	s.Deployment = val
}

// Information about the deployment this record points to.
type RecordTypesLinkedSum1Deployment struct {
	EnvironmentID ID `json:"environment_id"`
	// Describes which container and which tagged deployment this record should target.
	Match RecordTypesLinkedSum1DeploymentMatch `json:"match"`
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *RecordTypesLinkedSum1Deployment) GetEnvironmentID() ID {
	return s.EnvironmentID
}

// GetMatch returns the value of Match.
func (s *RecordTypesLinkedSum1Deployment) GetMatch() RecordTypesLinkedSum1DeploymentMatch {
	return s.Match
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *RecordTypesLinkedSum1Deployment) SetEnvironmentID(val ID) {
	s.EnvironmentID = val
}

// SetMatch sets the value of Match.
func (s *RecordTypesLinkedSum1Deployment) SetMatch(val RecordTypesLinkedSum1DeploymentMatch) {
	s.Match = val
}

// Describes which container and which tagged deployment this record should target.
type RecordTypesLinkedSum1DeploymentMatch struct {
	Container Identifier `json:"container"`
	// The deployment tag that this record should point to. The tags are set on the root of an
	// environment and map to a deployment version.
	Tag OptNilString `json:"tag"`
}

// GetContainer returns the value of Container.
func (s *RecordTypesLinkedSum1DeploymentMatch) GetContainer() Identifier {
	return s.Container
}

// GetTag returns the value of Tag.
func (s *RecordTypesLinkedSum1DeploymentMatch) GetTag() OptNilString {
	return s.Tag
}

// SetContainer sets the value of Container.
func (s *RecordTypesLinkedSum1DeploymentMatch) SetContainer(val Identifier) {
	s.Container = val
}

// SetTag sets the value of Tag.
func (s *RecordTypesLinkedSum1DeploymentMatch) SetTag(val OptNilString) {
	s.Tag = val
}

// A DNS MX record.
type RecordTypesMx struct {
	// The priority setting for this mx record.
	Priority int `json:"priority"`
	// The domain this mx record points to.
	Domain string `json:"domain"`
}

// GetPriority returns the value of Priority.
func (s *RecordTypesMx) GetPriority() int {
	return s.Priority
}

// GetDomain returns the value of Domain.
func (s *RecordTypesMx) GetDomain() string {
	return s.Domain
}

// SetPriority sets the value of Priority.
func (s *RecordTypesMx) SetPriority(val int) {
	s.Priority = val
}

// SetDomain sets the value of Domain.
func (s *RecordTypesMx) SetDomain(val string) {
	s.Domain = val
}

// A DNS NS record.
type RecordTypesNs struct {
	// The domain of the nameserver for this record.
	Domain string `json:"domain"`
}

// GetDomain returns the value of Domain.
func (s *RecordTypesNs) GetDomain() string {
	return s.Domain
}

// SetDomain sets the value of Domain.
func (s *RecordTypesNs) SetDomain(val string) {
	s.Domain = val
}

// A DNS SRV record.
type RecordTypesSrv struct {
	// Teh weight configured for this record - breaks ties for priority.
	Weight int `json:"weight"`
	// The priority for the record.
	Priority int `json:"priority"`
	// The port number for the service.
	Port int `json:"port"`
	// The domain for the record.
	Domain string `json:"domain"`
}

// GetWeight returns the value of Weight.
func (s *RecordTypesSrv) GetWeight() int {
	return s.Weight
}

// GetPriority returns the value of Priority.
func (s *RecordTypesSrv) GetPriority() int {
	return s.Priority
}

// GetPort returns the value of Port.
func (s *RecordTypesSrv) GetPort() int {
	return s.Port
}

// GetDomain returns the value of Domain.
func (s *RecordTypesSrv) GetDomain() string {
	return s.Domain
}

// SetWeight sets the value of Weight.
func (s *RecordTypesSrv) SetWeight(val int) {
	s.Weight = val
}

// SetPriority sets the value of Priority.
func (s *RecordTypesSrv) SetPriority(val int) {
	s.Priority = val
}

// SetPort sets the value of Port.
func (s *RecordTypesSrv) SetPort(val int) {
	s.Port = val
}

// SetDomain sets the value of Domain.
func (s *RecordTypesSrv) SetDomain(val string) {
	s.Domain = val
}

// A DNS TXT record.
type RecordTypesTxt struct {
	// The value for this TXT record.
	Value string `json:"value"`
}

// GetValue returns the value of Value.
func (s *RecordTypesTxt) GetValue() string {
	return s.Value
}

// SetValue sets the value of Value.
func (s *RecordTypesTxt) SetValue(val string) {
	s.Value = val
}

type RecoverTwoFactorAuthOK struct {
	Data TwoFactorAuthSetup `json:"data"`
}

// GetData returns the value of Data.
func (s *RecoverTwoFactorAuthOK) GetData() TwoFactorAuthSetup {
	return s.Data
}

// SetData sets the value of Data.
func (s *RecoverTwoFactorAuthOK) SetData(val TwoFactorAuthSetup) {
	s.Data = val
}

type RecoverTwoFactorAuthReq struct {
	// The user's email.
	Email         string    `json:"email"`
	Password      string    `json:"password"`
	RecoveryCodes []string  `json:"recovery_codes"`
	Token         OptString `json:"token"`
}

// GetEmail returns the value of Email.
func (s *RecoverTwoFactorAuthReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RecoverTwoFactorAuthReq) GetPassword() string {
	return s.Password
}

// GetRecoveryCodes returns the value of RecoveryCodes.
func (s *RecoverTwoFactorAuthReq) GetRecoveryCodes() []string {
	return s.RecoveryCodes
}

// GetToken returns the value of Token.
func (s *RecoverTwoFactorAuthReq) GetToken() OptString {
	return s.Token
}

// SetEmail sets the value of Email.
func (s *RecoverTwoFactorAuthReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RecoverTwoFactorAuthReq) SetPassword(val string) {
	s.Password = val
}

// SetRecoveryCodes sets the value of RecoveryCodes.
func (s *RecoverTwoFactorAuthReq) SetRecoveryCodes(val []string) {
	s.RecoveryCodes = val
}

// SetToken sets the value of Token.
func (s *RecoverTwoFactorAuthReq) SetToken(val OptString) {
	s.Token = val
}

// A billing refund.
// Ref: #/components/schemas/Refund
type Refund struct {
	ID   ID       `json:"id"`
	Time DateTime `json:"time"`
	// Some information about the payment refund.
	Description string `json:"description"`
	// 1/10th of a cent.
	Amount  int            `json:"amount"`
	Gateway PaymentGateway `json:"gateway"`
}

// GetID returns the value of ID.
func (s *Refund) GetID() ID {
	return s.ID
}

// GetTime returns the value of Time.
func (s *Refund) GetTime() DateTime {
	return s.Time
}

// GetDescription returns the value of Description.
func (s *Refund) GetDescription() string {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *Refund) GetAmount() int {
	return s.Amount
}

// GetGateway returns the value of Gateway.
func (s *Refund) GetGateway() PaymentGateway {
	return s.Gateway
}

// SetID sets the value of ID.
func (s *Refund) SetID(val ID) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *Refund) SetTime(val DateTime) {
	s.Time = val
}

// SetDescription sets the value of Description.
func (s *Refund) SetDescription(val string) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *Refund) SetAmount(val int) {
	s.Amount = val
}

// SetGateway sets the value of Gateway.
func (s *Refund) SetGateway(val PaymentGateway) {
	s.Gateway = val
}

// Credentials for authentication to a provider-native image registry, such as AWS ECR.
// Ref: #/components/schemas/RegistryAuthProvider
type RegistryAuthProvider struct {
	Details RegistryAuthProviderDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *RegistryAuthProvider) GetDetails() RegistryAuthProviderDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *RegistryAuthProvider) SetDetails(val RegistryAuthProviderDetails) {
	s.Details = val
}

type RegistryAuthProviderDetails struct {
	Flavor      RegistryAuthProviderDetailsFlavor      `json:"flavor"`
	Credentials RegistryAuthProviderDetailsCredentials `json:"credentials"`
}

// GetFlavor returns the value of Flavor.
func (s *RegistryAuthProviderDetails) GetFlavor() RegistryAuthProviderDetailsFlavor {
	return s.Flavor
}

// GetCredentials returns the value of Credentials.
func (s *RegistryAuthProviderDetails) GetCredentials() RegistryAuthProviderDetailsCredentials {
	return s.Credentials
}

// SetFlavor sets the value of Flavor.
func (s *RegistryAuthProviderDetails) SetFlavor(val RegistryAuthProviderDetailsFlavor) {
	s.Flavor = val
}

// SetCredentials sets the value of Credentials.
func (s *RegistryAuthProviderDetails) SetCredentials(val RegistryAuthProviderDetailsCredentials) {
	s.Credentials = val
}

type RegistryAuthProviderDetailsCredentials struct {
	Region         OptString `json:"region"`
	Namespace      OptString `json:"namespace"`
	APIKey         OptString `json:"api_key"`
	Secret         OptString `json:"secret"`
	SubscriptionID OptString `json:"subscription_id"`
	ClientID       OptString `json:"client_id"`
	// A base64'd string of additional configuration options.
	Config OptString `json:"config"`
}

// GetRegion returns the value of Region.
func (s *RegistryAuthProviderDetailsCredentials) GetRegion() OptString {
	return s.Region
}

// GetNamespace returns the value of Namespace.
func (s *RegistryAuthProviderDetailsCredentials) GetNamespace() OptString {
	return s.Namespace
}

// GetAPIKey returns the value of APIKey.
func (s *RegistryAuthProviderDetailsCredentials) GetAPIKey() OptString {
	return s.APIKey
}

// GetSecret returns the value of Secret.
func (s *RegistryAuthProviderDetailsCredentials) GetSecret() OptString {
	return s.Secret
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *RegistryAuthProviderDetailsCredentials) GetSubscriptionID() OptString {
	return s.SubscriptionID
}

// GetClientID returns the value of ClientID.
func (s *RegistryAuthProviderDetailsCredentials) GetClientID() OptString {
	return s.ClientID
}

// GetConfig returns the value of Config.
func (s *RegistryAuthProviderDetailsCredentials) GetConfig() OptString {
	return s.Config
}

// SetRegion sets the value of Region.
func (s *RegistryAuthProviderDetailsCredentials) SetRegion(val OptString) {
	s.Region = val
}

// SetNamespace sets the value of Namespace.
func (s *RegistryAuthProviderDetailsCredentials) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetAPIKey sets the value of APIKey.
func (s *RegistryAuthProviderDetailsCredentials) SetAPIKey(val OptString) {
	s.APIKey = val
}

// SetSecret sets the value of Secret.
func (s *RegistryAuthProviderDetailsCredentials) SetSecret(val OptString) {
	s.Secret = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *RegistryAuthProviderDetailsCredentials) SetSubscriptionID(val OptString) {
	s.SubscriptionID = val
}

// SetClientID sets the value of ClientID.
func (s *RegistryAuthProviderDetailsCredentials) SetClientID(val OptString) {
	s.ClientID = val
}

// SetConfig sets the value of Config.
func (s *RegistryAuthProviderDetailsCredentials) SetConfig(val OptString) {
	s.Config = val
}

type RegistryAuthProviderDetailsFlavor string

const (
	RegistryAuthProviderDetailsFlavorEcr RegistryAuthProviderDetailsFlavor = "ecr"
)

// AllValues returns all RegistryAuthProviderDetailsFlavor values.
func (RegistryAuthProviderDetailsFlavor) AllValues() []RegistryAuthProviderDetailsFlavor {
	return []RegistryAuthProviderDetailsFlavor{
		RegistryAuthProviderDetailsFlavorEcr,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegistryAuthProviderDetailsFlavor) MarshalText() ([]byte, error) {
	switch s {
	case RegistryAuthProviderDetailsFlavorEcr:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegistryAuthProviderDetailsFlavor) UnmarshalText(data []byte) error {
	switch RegistryAuthProviderDetailsFlavor(data) {
	case RegistryAuthProviderDetailsFlavorEcr:
		*s = RegistryAuthProviderDetailsFlavorEcr
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RegistryAuthProviderType string

const (
	RegistryAuthProviderTypeProvider RegistryAuthProviderType = "provider"
)

// AllValues returns all RegistryAuthProviderType values.
func (RegistryAuthProviderType) AllValues() []RegistryAuthProviderType {
	return []RegistryAuthProviderType{
		RegistryAuthProviderTypeProvider,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegistryAuthProviderType) MarshalText() ([]byte, error) {
	switch s {
	case RegistryAuthProviderTypeProvider:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegistryAuthProviderType) UnmarshalText(data []byte) error {
	switch RegistryAuthProviderType(data) {
	case RegistryAuthProviderTypeProvider:
		*s = RegistryAuthProviderTypeProvider
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// User/token based credentials for authentication to a third-party image source.
// Ref: #/components/schemas/RegistryAuthUser
type RegistryAuthUser struct {
	Details RegistryAuthUserDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *RegistryAuthUser) GetDetails() RegistryAuthUserDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *RegistryAuthUser) SetDetails(val RegistryAuthUserDetails) {
	s.Details = val
}

type RegistryAuthUserDetails struct {
	Username OptString `json:"username"`
	Token    OptString `json:"token"`
}

// GetUsername returns the value of Username.
func (s *RegistryAuthUserDetails) GetUsername() OptString {
	return s.Username
}

// GetToken returns the value of Token.
func (s *RegistryAuthUserDetails) GetToken() OptString {
	return s.Token
}

// SetUsername sets the value of Username.
func (s *RegistryAuthUserDetails) SetUsername(val OptString) {
	s.Username = val
}

// SetToken sets the value of Token.
func (s *RegistryAuthUserDetails) SetToken(val OptString) {
	s.Token = val
}

type RegistryAuthUserType string

const (
	RegistryAuthUserTypeUser RegistryAuthUserType = "user"
)

// AllValues returns all RegistryAuthUserType values.
func (RegistryAuthUserType) AllValues() []RegistryAuthUserType {
	return []RegistryAuthUserType{
		RegistryAuthUserTypeUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegistryAuthUserType) MarshalText() ([]byte, error) {
	switch s {
	case RegistryAuthUserTypeUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegistryAuthUserType) UnmarshalText(data []byte) error {
	switch RegistryAuthUserType(data) {
	case RegistryAuthUserTypeUser:
		*s = RegistryAuthUserTypeUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook-based authentication to the provided URL. This webhook expects to receive a base-64 string
// that when decoded is in the format `username:password`.
// Ref: #/components/schemas/RegistryAuthWebhook
type RegistryAuthWebhook struct {
	Details RegistryAuthWebhookDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *RegistryAuthWebhook) GetDetails() RegistryAuthWebhookDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *RegistryAuthWebhook) SetDetails(val RegistryAuthWebhookDetails) {
	s.Details = val
}

type RegistryAuthWebhookDetails struct {
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *RegistryAuthWebhookDetails) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *RegistryAuthWebhookDetails) SetURL(val string) {
	s.URL = val
}

type RegistryAuthWebhookType string

const (
	RegistryAuthWebhookTypeWebhook RegistryAuthWebhookType = "webhook"
)

// AllValues returns all RegistryAuthWebhookType values.
func (RegistryAuthWebhookType) AllValues() []RegistryAuthWebhookType {
	return []RegistryAuthWebhookType{
		RegistryAuthWebhookTypeWebhook,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RegistryAuthWebhookType) MarshalText() ([]byte, error) {
	switch s {
	case RegistryAuthWebhookTypeWebhook:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RegistryAuthWebhookType) UnmarshalText(data []byte) error {
	switch RegistryAuthWebhookType(data) {
	case RegistryAuthWebhookTypeWebhook:
		*s = RegistryAuthWebhookTypeWebhook
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Reimage
type Reimage struct {
	// Additional information needed to complete the job.
	Contents ReimageContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *Reimage) GetContents() ReimageContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *Reimage) SetContents(val ReimageContents) {
	s.Contents = val
}

// The action to take.
type ReimageAction string

const (
	ReimageActionReimage ReimageAction = "reimage"
)

// AllValues returns all ReimageAction values.
func (ReimageAction) AllValues() []ReimageAction {
	return []ReimageAction{
		ReimageActionReimage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReimageAction) MarshalText() ([]byte, error) {
	switch s {
	case ReimageActionReimage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReimageAction) UnmarshalText(data []byte) error {
	switch ReimageAction(data) {
	case ReimageActionReimage:
		*s = ReimageActionReimage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed to complete the job.
type ReimageContents struct {
	// The ID of the image to use when reimaging.
	ImageID string `json:"image_id"`
	// A boolean where true signifies the image being used to reimage does not have to have compatibility
	// with the image being replaced.
	AllowIncompatible OptBool `json:"allow_incompatible"`
	// A boolean where true signifies the user wishes to overwrite the current runtime configuration for
	// the given container during the reimage process.
	OverwriteRuntimeConfig OptBool `json:"overwrite_runtime_config"`
}

// GetImageID returns the value of ImageID.
func (s *ReimageContents) GetImageID() string {
	return s.ImageID
}

// GetAllowIncompatible returns the value of AllowIncompatible.
func (s *ReimageContents) GetAllowIncompatible() OptBool {
	return s.AllowIncompatible
}

// GetOverwriteRuntimeConfig returns the value of OverwriteRuntimeConfig.
func (s *ReimageContents) GetOverwriteRuntimeConfig() OptBool {
	return s.OverwriteRuntimeConfig
}

// SetImageID sets the value of ImageID.
func (s *ReimageContents) SetImageID(val string) {
	s.ImageID = val
}

// SetAllowIncompatible sets the value of AllowIncompatible.
func (s *ReimageContents) SetAllowIncompatible(val OptBool) {
	s.AllowIncompatible = val
}

// SetOverwriteRuntimeConfig sets the value of OverwriteRuntimeConfig.
func (s *ReimageContents) SetOverwriteRuntimeConfig(val OptBool) {
	s.OverwriteRuntimeConfig = val
}

type ResetPasswordOK struct {
	Data ResetPasswordOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ResetPasswordOK) GetData() ResetPasswordOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ResetPasswordOK) SetData(val ResetPasswordOKData) {
	s.Data = val
}

type ResetPasswordOKData struct {
	Success bool `json:"success"`
}

// GetSuccess returns the value of Success.
func (s *ResetPasswordOKData) GetSuccess() bool {
	return s.Success
}

// SetSuccess sets the value of Success.
func (s *ResetPasswordOKData) SetSuccess(val bool) {
	s.Success = val
}

// ResetPasswordReq represents sum type.
type ResetPasswordReq struct {
	Type              ResetPasswordReqType // switch on this field
	ResetPasswordReq0 ResetPasswordReq0
	ResetPasswordReq1 ResetPasswordReq1
}

// ResetPasswordReqType is oneOf type of ResetPasswordReq.
type ResetPasswordReqType string

// Possible values for ResetPasswordReqType.
const (
	ResetPasswordReq0ResetPasswordReq ResetPasswordReqType = "ResetPasswordReq0"
	ResetPasswordReq1ResetPasswordReq ResetPasswordReqType = "ResetPasswordReq1"
)

// IsResetPasswordReq0 reports whether ResetPasswordReq is ResetPasswordReq0.
func (s ResetPasswordReq) IsResetPasswordReq0() bool {
	return s.Type == ResetPasswordReq0ResetPasswordReq
}

// IsResetPasswordReq1 reports whether ResetPasswordReq is ResetPasswordReq1.
func (s ResetPasswordReq) IsResetPasswordReq1() bool {
	return s.Type == ResetPasswordReq1ResetPasswordReq
}

// SetResetPasswordReq0 sets ResetPasswordReq to ResetPasswordReq0.
func (s *ResetPasswordReq) SetResetPasswordReq0(v ResetPasswordReq0) {
	s.Type = ResetPasswordReq0ResetPasswordReq
	s.ResetPasswordReq0 = v
}

// GetResetPasswordReq0 returns ResetPasswordReq0 and true boolean if ResetPasswordReq is ResetPasswordReq0.
func (s ResetPasswordReq) GetResetPasswordReq0() (v ResetPasswordReq0, ok bool) {
	if !s.IsResetPasswordReq0() {
		return v, false
	}
	return s.ResetPasswordReq0, true
}

// NewResetPasswordReq0ResetPasswordReq returns new ResetPasswordReq from ResetPasswordReq0.
func NewResetPasswordReq0ResetPasswordReq(v ResetPasswordReq0) ResetPasswordReq {
	var s ResetPasswordReq
	s.SetResetPasswordReq0(v)
	return s
}

// SetResetPasswordReq1 sets ResetPasswordReq to ResetPasswordReq1.
func (s *ResetPasswordReq) SetResetPasswordReq1(v ResetPasswordReq1) {
	s.Type = ResetPasswordReq1ResetPasswordReq
	s.ResetPasswordReq1 = v
}

// GetResetPasswordReq1 returns ResetPasswordReq1 and true boolean if ResetPasswordReq is ResetPasswordReq1.
func (s ResetPasswordReq) GetResetPasswordReq1() (v ResetPasswordReq1, ok bool) {
	if !s.IsResetPasswordReq1() {
		return v, false
	}
	return s.ResetPasswordReq1, true
}

// NewResetPasswordReq1ResetPasswordReq returns new ResetPasswordReq from ResetPasswordReq1.
func NewResetPasswordReq1ResetPasswordReq(v ResetPasswordReq1) ResetPasswordReq {
	var s ResetPasswordReq
	s.SetResetPasswordReq1(v)
	return s
}

type ResetPasswordReq0 struct {
	Email ResetPasswordReq0Email `json:"email"`
}

// GetEmail returns the value of Email.
func (s *ResetPasswordReq0) GetEmail() ResetPasswordReq0Email {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *ResetPasswordReq0) SetEmail(val ResetPasswordReq0Email) {
	s.Email = val
}

type ResetPasswordReq0Email struct {
	Address string `json:"address"`
}

// GetAddress returns the value of Address.
func (s *ResetPasswordReq0Email) GetAddress() string {
	return s.Address
}

// SetAddress sets the value of Address.
func (s *ResetPasswordReq0Email) SetAddress(val string) {
	s.Address = val
}

type ResetPasswordReq1 struct {
	Token    string `json:"token"`
	Password string `json:"password"`
}

// GetToken returns the value of Token.
func (s *ResetPasswordReq1) GetToken() string {
	return s.Token
}

// GetPassword returns the value of Password.
func (s *ResetPasswordReq1) GetPassword() string {
	return s.Password
}

// SetToken sets the value of Token.
func (s *ResetPasswordReq1) SetToken(val string) {
	s.Token = val
}

// SetPassword sets the value of Password.
func (s *ResetPasswordReq1) SetPassword(val string) {
	s.Password = val
}

// A resource snapshot that shows instance telemetry.
// Ref: #/components/schemas/ResourceSnapshot
type ResourceSnapshot struct {
	Time          DateTime          `json:"time"`
	HubID         OptNilString      `json:"hub_id"`
	ContainerID   OptNilString      `json:"container_id"`
	InstanceID    OptNilString      `json:"instance_id"`
	EnvironmentID OptNilString      `json:"environment_id"`
	ServerID      OptNilString      `json:"server_id"`
	Cluster       OptNilString      `json:"cluster"`
	CPU           CPUSnapshot       `json:"cpu"`
	Memory        MemorySnapshot    `json:"memory"`
	Processes     ProcessesSnapshot `json:"processes"`
	Network       NetworkSnapshot   `json:"network"`
	Hugetlb       OptHugeTLB        `json:"hugetlb"`
}

// GetTime returns the value of Time.
func (s *ResourceSnapshot) GetTime() DateTime {
	return s.Time
}

// GetHubID returns the value of HubID.
func (s *ResourceSnapshot) GetHubID() OptNilString {
	return s.HubID
}

// GetContainerID returns the value of ContainerID.
func (s *ResourceSnapshot) GetContainerID() OptNilString {
	return s.ContainerID
}

// GetInstanceID returns the value of InstanceID.
func (s *ResourceSnapshot) GetInstanceID() OptNilString {
	return s.InstanceID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *ResourceSnapshot) GetEnvironmentID() OptNilString {
	return s.EnvironmentID
}

// GetServerID returns the value of ServerID.
func (s *ResourceSnapshot) GetServerID() OptNilString {
	return s.ServerID
}

// GetCluster returns the value of Cluster.
func (s *ResourceSnapshot) GetCluster() OptNilString {
	return s.Cluster
}

// GetCPU returns the value of CPU.
func (s *ResourceSnapshot) GetCPU() CPUSnapshot {
	return s.CPU
}

// GetMemory returns the value of Memory.
func (s *ResourceSnapshot) GetMemory() MemorySnapshot {
	return s.Memory
}

// GetProcesses returns the value of Processes.
func (s *ResourceSnapshot) GetProcesses() ProcessesSnapshot {
	return s.Processes
}

// GetNetwork returns the value of Network.
func (s *ResourceSnapshot) GetNetwork() NetworkSnapshot {
	return s.Network
}

// GetHugetlb returns the value of Hugetlb.
func (s *ResourceSnapshot) GetHugetlb() OptHugeTLB {
	return s.Hugetlb
}

// SetTime sets the value of Time.
func (s *ResourceSnapshot) SetTime(val DateTime) {
	s.Time = val
}

// SetHubID sets the value of HubID.
func (s *ResourceSnapshot) SetHubID(val OptNilString) {
	s.HubID = val
}

// SetContainerID sets the value of ContainerID.
func (s *ResourceSnapshot) SetContainerID(val OptNilString) {
	s.ContainerID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *ResourceSnapshot) SetInstanceID(val OptNilString) {
	s.InstanceID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *ResourceSnapshot) SetEnvironmentID(val OptNilString) {
	s.EnvironmentID = val
}

// SetServerID sets the value of ServerID.
func (s *ResourceSnapshot) SetServerID(val OptNilString) {
	s.ServerID = val
}

// SetCluster sets the value of Cluster.
func (s *ResourceSnapshot) SetCluster(val OptNilString) {
	s.Cluster = val
}

// SetCPU sets the value of CPU.
func (s *ResourceSnapshot) SetCPU(val CPUSnapshot) {
	s.CPU = val
}

// SetMemory sets the value of Memory.
func (s *ResourceSnapshot) SetMemory(val MemorySnapshot) {
	s.Memory = val
}

// SetProcesses sets the value of Processes.
func (s *ResourceSnapshot) SetProcesses(val ProcessesSnapshot) {
	s.Processes = val
}

// SetNetwork sets the value of Network.
func (s *ResourceSnapshot) SetNetwork(val NetworkSnapshot) {
	s.Network = val
}

// SetHugetlb sets the value of Hugetlb.
func (s *ResourceSnapshot) SetHugetlb(val OptHugeTLB) {
	s.Hugetlb = val
}

// A job that restarts compute service on a given server.
// Ref: #/components/schemas/RestartCompute
type RestartCompute struct{}

// The action to take.
type RestartComputeAction string

const (
	RestartComputeActionComputeRestart RestartComputeAction = "compute.restart"
)

// AllValues returns all RestartComputeAction values.
func (RestartComputeAction) AllValues() []RestartComputeAction {
	return []RestartComputeAction{
		RestartComputeActionComputeRestart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RestartComputeAction) MarshalText() ([]byte, error) {
	switch s {
	case RestartComputeActionComputeRestart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RestartComputeAction) UnmarshalText(data []byte) error {
	switch RestartComputeAction(data) {
	case RestartComputeActionComputeRestart:
		*s = RestartComputeActionComputeRestart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A job that restarts compute service on a given server.
// Ref: #/components/schemas/RestartComputeSpawner
type RestartComputeSpawner struct{}

// The action to take.
type RestartComputeSpawnerAction string

const (
	RestartComputeSpawnerActionComputeSpawnerRestart RestartComputeSpawnerAction = "compute.spawner.restart"
)

// AllValues returns all RestartComputeSpawnerAction values.
func (RestartComputeSpawnerAction) AllValues() []RestartComputeSpawnerAction {
	return []RestartComputeSpawnerAction{
		RestartComputeSpawnerActionComputeSpawnerRestart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RestartComputeSpawnerAction) MarshalText() ([]byte, error) {
	switch s {
	case RestartComputeSpawnerActionComputeSpawnerRestart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RestartComputeSpawnerAction) UnmarshalText(data []byte) error {
	switch RestartComputeSpawnerAction(data) {
	case RestartComputeSpawnerActionComputeSpawnerRestart:
		*s = RestartComputeSpawnerActionComputeSpawnerRestart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A job that restarts the server.
// Ref: #/components/schemas/RestartServer
type RestartServer struct{}

// The action to take.
type RestartServerAction string

const (
	RestartServerActionRestart RestartServerAction = "restart"
)

// AllValues returns all RestartServerAction values.
func (RestartServerAction) AllValues() []RestartServerAction {
	return []RestartServerAction{
		RestartServerActionRestart,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RestartServerAction) MarshalText() ([]byte, error) {
	switch s {
	case RestartServerActionRestart:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RestartServerAction) UnmarshalText(data []byte) error {
	switch RestartServerAction(data) {
	case RestartServerActionRestart:
		*s = RestartServerActionRestart
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RevertMigration
type RevertMigration struct{}

// The name of the action to perform.
type RevertMigrationAction string

const (
	RevertMigrationActionMigrateRevert RevertMigrationAction = "migrate_revert"
)

// AllValues returns all RevertMigrationAction values.
func (RevertMigrationAction) AllValues() []RevertMigrationAction {
	return []RevertMigrationAction{
		RevertMigrationActionMigrateRevert,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RevertMigrationAction) MarshalText() ([]byte, error) {
	switch s {
	case RevertMigrationActionMigrateRevert:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RevertMigrationAction) UnmarshalText(data []byte) error {
	switch RevertMigrationAction(data) {
	case RevertMigrationActionMigrateRevert:
		*s = RevertMigrationActionMigrateRevert
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A Role is a custom combination of platform-level capabilities, allowing for fully customizable
// role-based access controls across the platform.
// Ref: #/components/schemas/Role
type Role struct {
	ID   string       `json:"id"`
	Name OptNilString `json:"name"`
	// The Role marked as root has full moderation control over all Roles.
	Root bool `json:"root"`
	// A reference to the original identifier of the default Role this Role was built from.  A value of
	// null means it is a fully custom Role.
	Default OptNilString `json:"default"`
	// An integer between 0 and 10 that indicates the Role hierarchy. An account can only edit a Role
	// that is less than their rank. The 'owner' Role is rank 10.
	Rank       int          `json:"rank"`
	Identifier Identifier   `json:"identifier"`
	Creator    CreatorScope `json:"creator"`
	// The list of platform level capabilities assigned to this Role.
	Capabilities RoleCapabilities `json:"capabilities"`
	// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
	Extra OptRoleExtra `json:"extra"`
	HubID HubID        `json:"hub_id"`
	State RoleState    `json:"state"`
	// Timestamps for each event in the Role's lifetime.
	Events RoleEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Role) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Role) GetName() OptNilString {
	return s.Name
}

// GetRoot returns the value of Root.
func (s *Role) GetRoot() bool {
	return s.Root
}

// GetDefault returns the value of Default.
func (s *Role) GetDefault() OptNilString {
	return s.Default
}

// GetRank returns the value of Rank.
func (s *Role) GetRank() int {
	return s.Rank
}

// GetIdentifier returns the value of Identifier.
func (s *Role) GetIdentifier() Identifier {
	return s.Identifier
}

// GetCreator returns the value of Creator.
func (s *Role) GetCreator() CreatorScope {
	return s.Creator
}

// GetCapabilities returns the value of Capabilities.
func (s *Role) GetCapabilities() RoleCapabilities {
	return s.Capabilities
}

// GetExtra returns the value of Extra.
func (s *Role) GetExtra() OptRoleExtra {
	return s.Extra
}

// GetHubID returns the value of HubID.
func (s *Role) GetHubID() HubID {
	return s.HubID
}

// GetState returns the value of State.
func (s *Role) GetState() RoleState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Role) GetEvents() RoleEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Role) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val OptNilString) {
	s.Name = val
}

// SetRoot sets the value of Root.
func (s *Role) SetRoot(val bool) {
	s.Root = val
}

// SetDefault sets the value of Default.
func (s *Role) SetDefault(val OptNilString) {
	s.Default = val
}

// SetRank sets the value of Rank.
func (s *Role) SetRank(val int) {
	s.Rank = val
}

// SetIdentifier sets the value of Identifier.
func (s *Role) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetCreator sets the value of Creator.
func (s *Role) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetCapabilities sets the value of Capabilities.
func (s *Role) SetCapabilities(val RoleCapabilities) {
	s.Capabilities = val
}

// SetExtra sets the value of Extra.
func (s *Role) SetExtra(val OptRoleExtra) {
	s.Extra = val
}

// SetHubID sets the value of HubID.
func (s *Role) SetHubID(val HubID) {
	s.HubID = val
}

// SetState sets the value of State.
func (s *Role) SetState(val RoleState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Role) SetEvents(val RoleEvents) {
	s.Events = val
}

// The list of platform level capabilities assigned to this Role.
type RoleCapabilities struct {
	// If true, the Role has all capabilities.
	All      bool         `json:"all"`
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *RoleCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *RoleCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *RoleCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *RoleCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

// Timestamps for each event in the Role's lifetime.
type RoleEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *RoleEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RoleEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *RoleEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *RoleEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RoleEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *RoleEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
type RoleExtra map[string]string

func (s *RoleExtra) init() RoleExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Merged schema.
type RoleState struct {
	// The current state of the Role.
	Current RoleStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptRoleStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *RoleState) GetCurrent() RoleStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *RoleState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *RoleState) GetError() OptRoleStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *RoleState) SetCurrent(val RoleStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *RoleState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *RoleState) SetError(val OptRoleStateError) {
	s.Error = val
}

// The current state of the Role.
type RoleStateCurrent string

const (
	RoleStateCurrentLive RoleStateCurrent = "live"
)

// AllValues returns all RoleStateCurrent values.
func (RoleStateCurrent) AllValues() []RoleStateCurrent {
	return []RoleStateCurrent{
		RoleStateCurrentLive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RoleStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case RoleStateCurrentLive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RoleStateCurrent) UnmarshalText(data []byte) error {
	switch RoleStateCurrent(data) {
	case RoleStateCurrentLive:
		*s = RoleStateCurrentLive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type RoleStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *RoleStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *RoleStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *RoleStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *RoleStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Merged schema.
// Ref: #/components/schemas/RunState
type RunState struct {
	// The current state of the pipeline run.
	Current RunStateCurrent `json:"current"`
	Changed DateTime        `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptRunStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *RunState) GetCurrent() RunStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *RunState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *RunState) GetError() OptRunStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *RunState) SetCurrent(val RunStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *RunState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *RunState) SetError(val OptRunStateError) {
	s.Error = val
}

// The current state of the pipeline run.
type RunStateCurrent string

const (
	RunStateCurrentNew      RunStateCurrent = "new"
	RunStateCurrentQueued   RunStateCurrent = "queued"
	RunStateCurrentRunning  RunStateCurrent = "running"
	RunStateCurrentDeleting RunStateCurrent = "deleting"
	RunStateCurrentDeleted  RunStateCurrent = "deleted"
)

// AllValues returns all RunStateCurrent values.
func (RunStateCurrent) AllValues() []RunStateCurrent {
	return []RunStateCurrent{
		RunStateCurrentNew,
		RunStateCurrentQueued,
		RunStateCurrentRunning,
		RunStateCurrentDeleting,
		RunStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case RunStateCurrentNew:
		return []byte(s), nil
	case RunStateCurrentQueued:
		return []byte(s), nil
	case RunStateCurrentRunning:
		return []byte(s), nil
	case RunStateCurrentDeleting:
		return []byte(s), nil
	case RunStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStateCurrent) UnmarshalText(data []byte) error {
	switch RunStateCurrent(data) {
	case RunStateCurrentNew:
		*s = RunStateCurrentNew
		return nil
	case RunStateCurrentQueued:
		*s = RunStateCurrentQueued
		return nil
	case RunStateCurrentRunning:
		*s = RunStateCurrentRunning
		return nil
	case RunStateCurrentDeleting:
		*s = RunStateCurrentDeleting
		return nil
	case RunStateCurrentDeleted:
		*s = RunStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type RunStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *RunStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *RunStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *RunStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *RunStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Information about connecting to a instance volume over SFTP.
// Ref: #/components/schemas/SFTP
type SFTP struct {
	// The hostname for connecting to the volume over SFTP.
	Host string `json:"host"`
	// The port number to use when connecting.
	Port float64 `json:"port"`
	// The username to use when connecting.
	Username string `json:"username"`
	// Password configuration settings for the remote access of the container volume.
	Password SFTPPassword `json:"password"`
}

// GetHost returns the value of Host.
func (s *SFTP) GetHost() string {
	return s.Host
}

// GetPort returns the value of Port.
func (s *SFTP) GetPort() float64 {
	return s.Port
}

// GetUsername returns the value of Username.
func (s *SFTP) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SFTP) GetPassword() SFTPPassword {
	return s.Password
}

// SetHost sets the value of Host.
func (s *SFTP) SetHost(val string) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *SFTP) SetPort(val float64) {
	s.Port = val
}

// SetUsername sets the value of Username.
func (s *SFTP) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SFTP) SetPassword(val SFTPPassword) {
	s.Password = val
}

// Password configuration settings for the remote access of the container volume.
type SFTPPassword struct {
	// The hashing algorithm used to has the password.
	Algorithm SFTPPasswordAlgorithm `json:"algorithm"`
	// The raw or hashed password.
	Data string `json:"data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *SFTPPassword) GetAlgorithm() SFTPPasswordAlgorithm {
	return s.Algorithm
}

// GetData returns the value of Data.
func (s *SFTPPassword) GetData() string {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *SFTPPassword) SetAlgorithm(val SFTPPasswordAlgorithm) {
	s.Algorithm = val
}

// SetData sets the value of Data.
func (s *SFTPPassword) SetData(val string) {
	s.Data = val
}

// The hashing algorithm used to has the password.
type SFTPPasswordAlgorithm string

const (
	SFTPPasswordAlgorithmRaw    SFTPPasswordAlgorithm = "raw"
	SFTPPasswordAlgorithmSha512 SFTPPasswordAlgorithm = "sha512"
	SFTPPasswordAlgorithmMD5    SFTPPasswordAlgorithm = "md5"
)

// AllValues returns all SFTPPasswordAlgorithm values.
func (SFTPPasswordAlgorithm) AllValues() []SFTPPasswordAlgorithm {
	return []SFTPPasswordAlgorithm{
		SFTPPasswordAlgorithmRaw,
		SFTPPasswordAlgorithmSha512,
		SFTPPasswordAlgorithmMD5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SFTPPasswordAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case SFTPPasswordAlgorithmRaw:
		return []byte(s), nil
	case SFTPPasswordAlgorithmSha512:
		return []byte(s), nil
	case SFTPPasswordAlgorithmMD5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SFTPPasswordAlgorithm) UnmarshalText(data []byte) error {
	switch SFTPPasswordAlgorithm(data) {
	case SFTPPasswordAlgorithmRaw:
		*s = SFTPPasswordAlgorithmRaw
		return nil
	case SFTPPasswordAlgorithmSha512:
		*s = SFTPPasswordAlgorithmSha512
		return nil
	case SFTPPasswordAlgorithmMD5:
		*s = SFTPPasswordAlgorithmMD5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// SSH connection information for a given container instance.
// Ref: #/components/schemas/SSHResponse
type SSHResponse struct {
	Token SSHToken `json:"token"`
	// The SSH connection response secret.
	Secret string `json:"secret"`
	// The SSH connection response address.
	Address string `json:"address"`
}

// GetToken returns the value of Token.
func (s *SSHResponse) GetToken() SSHToken {
	return s.Token
}

// GetSecret returns the value of Secret.
func (s *SSHResponse) GetSecret() string {
	return s.Secret
}

// GetAddress returns the value of Address.
func (s *SSHResponse) GetAddress() string {
	return s.Address
}

// SetToken sets the value of Token.
func (s *SSHResponse) SetToken(val SSHToken) {
	s.Token = val
}

// SetSecret sets the value of Secret.
func (s *SSHResponse) SetSecret(val string) {
	s.Secret = val
}

// SetAddress sets the value of Address.
func (s *SSHResponse) SetAddress(val string) {
	s.Address = val
}

// An Instance SSH token.
// Ref: #/components/schemas/SSHToken
type SSHToken struct {
	ID ID `json:"id"`
	// The ID of the instance being connected to.
	InstanceID string `json:"instance_id"`
	// The ID of the container from which the instance was created.
	ContainerID string       `json:"container_id"`
	HubID       HubID        `json:"hub_id"`
	Creator     CreatorScope `json:"creator"`
	// A collection of timestamps for each event in the SSH token's lifetime.
	Events SSHTokenEvents `json:"events"`
	// A boolean where true represents the token as being a valid token to be used for connection.
	Valid bool `json:"valid"`
}

// GetID returns the value of ID.
func (s *SSHToken) GetID() ID {
	return s.ID
}

// GetInstanceID returns the value of InstanceID.
func (s *SSHToken) GetInstanceID() string {
	return s.InstanceID
}

// GetContainerID returns the value of ContainerID.
func (s *SSHToken) GetContainerID() string {
	return s.ContainerID
}

// GetHubID returns the value of HubID.
func (s *SSHToken) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *SSHToken) GetCreator() CreatorScope {
	return s.Creator
}

// GetEvents returns the value of Events.
func (s *SSHToken) GetEvents() SSHTokenEvents {
	return s.Events
}

// GetValid returns the value of Valid.
func (s *SSHToken) GetValid() bool {
	return s.Valid
}

// SetID sets the value of ID.
func (s *SSHToken) SetID(val ID) {
	s.ID = val
}

// SetInstanceID sets the value of InstanceID.
func (s *SSHToken) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetContainerID sets the value of ContainerID.
func (s *SSHToken) SetContainerID(val string) {
	s.ContainerID = val
}

// SetHubID sets the value of HubID.
func (s *SSHToken) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *SSHToken) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetEvents sets the value of Events.
func (s *SSHToken) SetEvents(val SSHTokenEvents) {
	s.Events = val
}

// SetValid sets the value of Valid.
func (s *SSHToken) SetValid(val bool) {
	s.Valid = val
}

// A collection of timestamps for each event in the SSH token's lifetime.
type SSHTokenEvents struct {
	Created DateTime `json:"created"`
	Used    DateTime `json:"used"`
	Expires DateTime `json:"expires"`
}

// GetCreated returns the value of Created.
func (s *SSHTokenEvents) GetCreated() DateTime {
	return s.Created
}

// GetUsed returns the value of Used.
func (s *SSHTokenEvents) GetUsed() DateTime {
	return s.Used
}

// GetExpires returns the value of Expires.
func (s *SSHTokenEvents) GetExpires() DateTime {
	return s.Expires
}

// SetCreated sets the value of Created.
func (s *SSHTokenEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUsed sets the value of Used.
func (s *SSHTokenEvents) SetUsed(val DateTime) {
	s.Used = val
}

// SetExpires sets the value of Expires.
func (s *SSHTokenEvents) SetExpires(val DateTime) {
	s.Expires = val
}

// Ref: #/components/schemas/Scale
type Scale struct {
	// Additional information needed to complete the job.
	Contents ScaleContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *Scale) GetContents() ScaleContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *Scale) SetContents(val ScaleContents) {
	s.Contents = val
}

// The action to take.
type ScaleAction string

const (
	ScaleActionScale ScaleAction = "scale"
)

// AllValues returns all ScaleAction values.
func (ScaleAction) AllValues() []ScaleAction {
	return []ScaleAction{
		ScaleActionScale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleAction) MarshalText() ([]byte, error) {
	switch s {
	case ScaleActionScale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleAction) UnmarshalText(data []byte) error {
	switch ScaleAction(data) {
	case ScaleActionScale:
		*s = ScaleActionScale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information needed to complete the job.
type ScaleContents struct {
	// The number of desired instances to scale to.
	Instances int `json:"instances"`
}

// GetInstances returns the value of Instances.
func (s *ScaleContents) GetInstances() int {
	return s.Instances
}

// SetInstances sets the value of Instances.
func (s *ScaleContents) SetInstances(val int) {
	s.Instances = val
}

// Discriminated union describing the different types of scaling threshold and their respective
// details.
// Ref: #/components/schemas/ScaleThresholdMetric
type ScaleThresholdMetric struct {
	OneOf ScaleThresholdMetricSum
}

// GetOneOf returns the value of OneOf.
func (s *ScaleThresholdMetric) GetOneOf() ScaleThresholdMetricSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *ScaleThresholdMetric) SetOneOf(val ScaleThresholdMetricSum) {
	s.OneOf = val
}

// Describes the CPU threshold at which scaling will occur.
// Ref: #/components/schemas/ScaleThresholdMetricCpu
type ScaleThresholdMetricCpu struct {
	Details ScaleThresholdMetricCpuDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *ScaleThresholdMetricCpu) GetDetails() ScaleThresholdMetricCpuDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *ScaleThresholdMetricCpu) SetDetails(val ScaleThresholdMetricCpuDetails) {
	s.Details = val
}

type ScaleThresholdMetricCpuDetails struct {
	Utilization int `json:"utilization"`
}

// GetUtilization returns the value of Utilization.
func (s *ScaleThresholdMetricCpuDetails) GetUtilization() int {
	return s.Utilization
}

// SetUtilization sets the value of Utilization.
func (s *ScaleThresholdMetricCpuDetails) SetUtilization(val int) {
	s.Utilization = val
}

type ScaleThresholdMetricCpuType string

const (
	ScaleThresholdMetricCpuTypeCPU ScaleThresholdMetricCpuType = "cpu"
)

// AllValues returns all ScaleThresholdMetricCpuType values.
func (ScaleThresholdMetricCpuType) AllValues() []ScaleThresholdMetricCpuType {
	return []ScaleThresholdMetricCpuType{
		ScaleThresholdMetricCpuTypeCPU,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleThresholdMetricCpuType) MarshalText() ([]byte, error) {
	switch s {
	case ScaleThresholdMetricCpuTypeCPU:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleThresholdMetricCpuType) UnmarshalText(data []byte) error {
	switch ScaleThresholdMetricCpuType(data) {
	case ScaleThresholdMetricCpuTypeCPU:
		*s = ScaleThresholdMetricCpuTypeCPU
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network connections threshold at which scaling will occur.
// Ref: #/components/schemas/ScaleThresholdMetricNetworkConnections
type ScaleThresholdMetricNetworkConnections struct {
	Details ScaleThresholdMetricNetworkConnectionsDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *ScaleThresholdMetricNetworkConnections) GetDetails() ScaleThresholdMetricNetworkConnectionsDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *ScaleThresholdMetricNetworkConnections) SetDetails(val ScaleThresholdMetricNetworkConnectionsDetails) {
	s.Details = val
}

type ScaleThresholdMetricNetworkConnectionsDetails struct {
	ConnectionsTotal int `json:"connections_total"`
}

// GetConnectionsTotal returns the value of ConnectionsTotal.
func (s *ScaleThresholdMetricNetworkConnectionsDetails) GetConnectionsTotal() int {
	return s.ConnectionsTotal
}

// SetConnectionsTotal sets the value of ConnectionsTotal.
func (s *ScaleThresholdMetricNetworkConnectionsDetails) SetConnectionsTotal(val int) {
	s.ConnectionsTotal = val
}

type ScaleThresholdMetricNetworkConnectionsType string

const (
	ScaleThresholdMetricNetworkConnectionsTypeNetworkConnections ScaleThresholdMetricNetworkConnectionsType = "network-connections"
)

// AllValues returns all ScaleThresholdMetricNetworkConnectionsType values.
func (ScaleThresholdMetricNetworkConnectionsType) AllValues() []ScaleThresholdMetricNetworkConnectionsType {
	return []ScaleThresholdMetricNetworkConnectionsType{
		ScaleThresholdMetricNetworkConnectionsTypeNetworkConnections,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleThresholdMetricNetworkConnectionsType) MarshalText() ([]byte, error) {
	switch s {
	case ScaleThresholdMetricNetworkConnectionsTypeNetworkConnections:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleThresholdMetricNetworkConnectionsType) UnmarshalText(data []byte) error {
	switch ScaleThresholdMetricNetworkConnectionsType(data) {
	case ScaleThresholdMetricNetworkConnectionsTypeNetworkConnections:
		*s = ScaleThresholdMetricNetworkConnectionsTypeNetworkConnections
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network requests threshold at which scaling will occur.
// Ref: #/components/schemas/ScaleThresholdMetricNetworkRequests
type ScaleThresholdMetricNetworkRequests struct {
	Details ScaleThresholdMetricNetworkRequestsDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *ScaleThresholdMetricNetworkRequests) GetDetails() ScaleThresholdMetricNetworkRequestsDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *ScaleThresholdMetricNetworkRequests) SetDetails(val ScaleThresholdMetricNetworkRequestsDetails) {
	s.Details = val
}

type ScaleThresholdMetricNetworkRequestsDetails struct {
	RequestsTotal int `json:"requests_total"`
}

// GetRequestsTotal returns the value of RequestsTotal.
func (s *ScaleThresholdMetricNetworkRequestsDetails) GetRequestsTotal() int {
	return s.RequestsTotal
}

// SetRequestsTotal sets the value of RequestsTotal.
func (s *ScaleThresholdMetricNetworkRequestsDetails) SetRequestsTotal(val int) {
	s.RequestsTotal = val
}

type ScaleThresholdMetricNetworkRequestsType string

const (
	ScaleThresholdMetricNetworkRequestsTypeNetworkRequests ScaleThresholdMetricNetworkRequestsType = "network-requests"
)

// AllValues returns all ScaleThresholdMetricNetworkRequestsType values.
func (ScaleThresholdMetricNetworkRequestsType) AllValues() []ScaleThresholdMetricNetworkRequestsType {
	return []ScaleThresholdMetricNetworkRequestsType{
		ScaleThresholdMetricNetworkRequestsTypeNetworkRequests,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleThresholdMetricNetworkRequestsType) MarshalText() ([]byte, error) {
	switch s {
	case ScaleThresholdMetricNetworkRequestsTypeNetworkRequests:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleThresholdMetricNetworkRequestsType) UnmarshalText(data []byte) error {
	switch ScaleThresholdMetricNetworkRequestsType(data) {
	case ScaleThresholdMetricNetworkRequestsTypeNetworkRequests:
		*s = ScaleThresholdMetricNetworkRequestsTypeNetworkRequests
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network throughput threshold at which scaling will occur.
// Ref: #/components/schemas/ScaleThresholdMetricNetworkThroughput
type ScaleThresholdMetricNetworkThroughput struct {
	Details ScaleThresholdMetricNetworkThroughputDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *ScaleThresholdMetricNetworkThroughput) GetDetails() ScaleThresholdMetricNetworkThroughputDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *ScaleThresholdMetricNetworkThroughput) SetDetails(val ScaleThresholdMetricNetworkThroughputDetails) {
	s.Details = val
}

type ScaleThresholdMetricNetworkThroughputDetails struct {
	Private bool `json:"private"`
	// The limit (maximum) amount of throughput each instance of the given container can use before
	// triggering a scaling event.
	Bandwidth string `json:"bandwidth"`
}

// GetPrivate returns the value of Private.
func (s *ScaleThresholdMetricNetworkThroughputDetails) GetPrivate() bool {
	return s.Private
}

// GetBandwidth returns the value of Bandwidth.
func (s *ScaleThresholdMetricNetworkThroughputDetails) GetBandwidth() string {
	return s.Bandwidth
}

// SetPrivate sets the value of Private.
func (s *ScaleThresholdMetricNetworkThroughputDetails) SetPrivate(val bool) {
	s.Private = val
}

// SetBandwidth sets the value of Bandwidth.
func (s *ScaleThresholdMetricNetworkThroughputDetails) SetBandwidth(val string) {
	s.Bandwidth = val
}

type ScaleThresholdMetricNetworkThroughputType string

const (
	ScaleThresholdMetricNetworkThroughputTypeNetworkThroughput ScaleThresholdMetricNetworkThroughputType = "network-throughput"
)

// AllValues returns all ScaleThresholdMetricNetworkThroughputType values.
func (ScaleThresholdMetricNetworkThroughputType) AllValues() []ScaleThresholdMetricNetworkThroughputType {
	return []ScaleThresholdMetricNetworkThroughputType{
		ScaleThresholdMetricNetworkThroughputTypeNetworkThroughput,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleThresholdMetricNetworkThroughputType) MarshalText() ([]byte, error) {
	switch s {
	case ScaleThresholdMetricNetworkThroughputTypeNetworkThroughput:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleThresholdMetricNetworkThroughputType) UnmarshalText(data []byte) error {
	switch ScaleThresholdMetricNetworkThroughputType(data) {
	case ScaleThresholdMetricNetworkThroughputTypeNetworkThroughput:
		*s = ScaleThresholdMetricNetworkThroughputTypeNetworkThroughput
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the RAM threshold at which scaling will occur.
// Ref: #/components/schemas/ScaleThresholdMetricRam
type ScaleThresholdMetricRam struct {
	Details ScaleThresholdMetricRamDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *ScaleThresholdMetricRam) GetDetails() ScaleThresholdMetricRamDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *ScaleThresholdMetricRam) SetDetails(val ScaleThresholdMetricRamDetails) {
	s.Details = val
}

type ScaleThresholdMetricRamDetails struct {
	// The limit (maximum) amount of RAM each instance of the given container can use before triggering a
	// scaling event.
	Used string `json:"used"`
}

// GetUsed returns the value of Used.
func (s *ScaleThresholdMetricRamDetails) GetUsed() string {
	return s.Used
}

// SetUsed sets the value of Used.
func (s *ScaleThresholdMetricRamDetails) SetUsed(val string) {
	s.Used = val
}

type ScaleThresholdMetricRamType string

const (
	ScaleThresholdMetricRamTypeRAM ScaleThresholdMetricRamType = "ram"
)

// AllValues returns all ScaleThresholdMetricRamType values.
func (ScaleThresholdMetricRamType) AllValues() []ScaleThresholdMetricRamType {
	return []ScaleThresholdMetricRamType{
		ScaleThresholdMetricRamTypeRAM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScaleThresholdMetricRamType) MarshalText() ([]byte, error) {
	switch s {
	case ScaleThresholdMetricRamTypeRAM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScaleThresholdMetricRamType) UnmarshalText(data []byte) error {
	switch ScaleThresholdMetricRamType(data) {
	case ScaleThresholdMetricRamTypeRAM:
		*s = ScaleThresholdMetricRamTypeRAM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ScaleThresholdMetricSum represents sum type.
type ScaleThresholdMetricSum struct {
	Type                                   ScaleThresholdMetricSumType // switch on this field
	ScaleThresholdMetricRam                ScaleThresholdMetricRam
	ScaleThresholdMetricCpu                ScaleThresholdMetricCpu
	ScaleThresholdMetricNetworkConnections ScaleThresholdMetricNetworkConnections
	ScaleThresholdMetricNetworkRequests    ScaleThresholdMetricNetworkRequests
	ScaleThresholdMetricNetworkThroughput  ScaleThresholdMetricNetworkThroughput
}

// ScaleThresholdMetricSumType is oneOf type of ScaleThresholdMetricSum.
type ScaleThresholdMetricSumType string

// Possible values for ScaleThresholdMetricSumType.
const (
	ScaleThresholdMetricRamScaleThresholdMetricSum                ScaleThresholdMetricSumType = "ram"
	ScaleThresholdMetricCpuScaleThresholdMetricSum                ScaleThresholdMetricSumType = "cpu"
	ScaleThresholdMetricNetworkConnectionsScaleThresholdMetricSum ScaleThresholdMetricSumType = "network-connections"
	ScaleThresholdMetricNetworkRequestsScaleThresholdMetricSum    ScaleThresholdMetricSumType = "network-requests"
	ScaleThresholdMetricNetworkThroughputScaleThresholdMetricSum  ScaleThresholdMetricSumType = "network-throughput"
)

// IsScaleThresholdMetricRam reports whether ScaleThresholdMetricSum is ScaleThresholdMetricRam.
func (s ScaleThresholdMetricSum) IsScaleThresholdMetricRam() bool {
	return s.Type == ScaleThresholdMetricRamScaleThresholdMetricSum
}

// IsScaleThresholdMetricCpu reports whether ScaleThresholdMetricSum is ScaleThresholdMetricCpu.
func (s ScaleThresholdMetricSum) IsScaleThresholdMetricCpu() bool {
	return s.Type == ScaleThresholdMetricCpuScaleThresholdMetricSum
}

// IsScaleThresholdMetricNetworkConnections reports whether ScaleThresholdMetricSum is ScaleThresholdMetricNetworkConnections.
func (s ScaleThresholdMetricSum) IsScaleThresholdMetricNetworkConnections() bool {
	return s.Type == ScaleThresholdMetricNetworkConnectionsScaleThresholdMetricSum
}

// IsScaleThresholdMetricNetworkRequests reports whether ScaleThresholdMetricSum is ScaleThresholdMetricNetworkRequests.
func (s ScaleThresholdMetricSum) IsScaleThresholdMetricNetworkRequests() bool {
	return s.Type == ScaleThresholdMetricNetworkRequestsScaleThresholdMetricSum
}

// IsScaleThresholdMetricNetworkThroughput reports whether ScaleThresholdMetricSum is ScaleThresholdMetricNetworkThroughput.
func (s ScaleThresholdMetricSum) IsScaleThresholdMetricNetworkThroughput() bool {
	return s.Type == ScaleThresholdMetricNetworkThroughputScaleThresholdMetricSum
}

// SetScaleThresholdMetricRam sets ScaleThresholdMetricSum to ScaleThresholdMetricRam.
func (s *ScaleThresholdMetricSum) SetScaleThresholdMetricRam(v ScaleThresholdMetricRam) {
	s.Type = ScaleThresholdMetricRamScaleThresholdMetricSum
	s.ScaleThresholdMetricRam = v
}

// GetScaleThresholdMetricRam returns ScaleThresholdMetricRam and true boolean if ScaleThresholdMetricSum is ScaleThresholdMetricRam.
func (s ScaleThresholdMetricSum) GetScaleThresholdMetricRam() (v ScaleThresholdMetricRam, ok bool) {
	if !s.IsScaleThresholdMetricRam() {
		return v, false
	}
	return s.ScaleThresholdMetricRam, true
}

// NewScaleThresholdMetricRamScaleThresholdMetricSum returns new ScaleThresholdMetricSum from ScaleThresholdMetricRam.
func NewScaleThresholdMetricRamScaleThresholdMetricSum(v ScaleThresholdMetricRam) ScaleThresholdMetricSum {
	var s ScaleThresholdMetricSum
	s.SetScaleThresholdMetricRam(v)
	return s
}

// SetScaleThresholdMetricCpu sets ScaleThresholdMetricSum to ScaleThresholdMetricCpu.
func (s *ScaleThresholdMetricSum) SetScaleThresholdMetricCpu(v ScaleThresholdMetricCpu) {
	s.Type = ScaleThresholdMetricCpuScaleThresholdMetricSum
	s.ScaleThresholdMetricCpu = v
}

// GetScaleThresholdMetricCpu returns ScaleThresholdMetricCpu and true boolean if ScaleThresholdMetricSum is ScaleThresholdMetricCpu.
func (s ScaleThresholdMetricSum) GetScaleThresholdMetricCpu() (v ScaleThresholdMetricCpu, ok bool) {
	if !s.IsScaleThresholdMetricCpu() {
		return v, false
	}
	return s.ScaleThresholdMetricCpu, true
}

// NewScaleThresholdMetricCpuScaleThresholdMetricSum returns new ScaleThresholdMetricSum from ScaleThresholdMetricCpu.
func NewScaleThresholdMetricCpuScaleThresholdMetricSum(v ScaleThresholdMetricCpu) ScaleThresholdMetricSum {
	var s ScaleThresholdMetricSum
	s.SetScaleThresholdMetricCpu(v)
	return s
}

// SetScaleThresholdMetricNetworkConnections sets ScaleThresholdMetricSum to ScaleThresholdMetricNetworkConnections.
func (s *ScaleThresholdMetricSum) SetScaleThresholdMetricNetworkConnections(v ScaleThresholdMetricNetworkConnections) {
	s.Type = ScaleThresholdMetricNetworkConnectionsScaleThresholdMetricSum
	s.ScaleThresholdMetricNetworkConnections = v
}

// GetScaleThresholdMetricNetworkConnections returns ScaleThresholdMetricNetworkConnections and true boolean if ScaleThresholdMetricSum is ScaleThresholdMetricNetworkConnections.
func (s ScaleThresholdMetricSum) GetScaleThresholdMetricNetworkConnections() (v ScaleThresholdMetricNetworkConnections, ok bool) {
	if !s.IsScaleThresholdMetricNetworkConnections() {
		return v, false
	}
	return s.ScaleThresholdMetricNetworkConnections, true
}

// NewScaleThresholdMetricNetworkConnectionsScaleThresholdMetricSum returns new ScaleThresholdMetricSum from ScaleThresholdMetricNetworkConnections.
func NewScaleThresholdMetricNetworkConnectionsScaleThresholdMetricSum(v ScaleThresholdMetricNetworkConnections) ScaleThresholdMetricSum {
	var s ScaleThresholdMetricSum
	s.SetScaleThresholdMetricNetworkConnections(v)
	return s
}

// SetScaleThresholdMetricNetworkRequests sets ScaleThresholdMetricSum to ScaleThresholdMetricNetworkRequests.
func (s *ScaleThresholdMetricSum) SetScaleThresholdMetricNetworkRequests(v ScaleThresholdMetricNetworkRequests) {
	s.Type = ScaleThresholdMetricNetworkRequestsScaleThresholdMetricSum
	s.ScaleThresholdMetricNetworkRequests = v
}

// GetScaleThresholdMetricNetworkRequests returns ScaleThresholdMetricNetworkRequests and true boolean if ScaleThresholdMetricSum is ScaleThresholdMetricNetworkRequests.
func (s ScaleThresholdMetricSum) GetScaleThresholdMetricNetworkRequests() (v ScaleThresholdMetricNetworkRequests, ok bool) {
	if !s.IsScaleThresholdMetricNetworkRequests() {
		return v, false
	}
	return s.ScaleThresholdMetricNetworkRequests, true
}

// NewScaleThresholdMetricNetworkRequestsScaleThresholdMetricSum returns new ScaleThresholdMetricSum from ScaleThresholdMetricNetworkRequests.
func NewScaleThresholdMetricNetworkRequestsScaleThresholdMetricSum(v ScaleThresholdMetricNetworkRequests) ScaleThresholdMetricSum {
	var s ScaleThresholdMetricSum
	s.SetScaleThresholdMetricNetworkRequests(v)
	return s
}

// SetScaleThresholdMetricNetworkThroughput sets ScaleThresholdMetricSum to ScaleThresholdMetricNetworkThroughput.
func (s *ScaleThresholdMetricSum) SetScaleThresholdMetricNetworkThroughput(v ScaleThresholdMetricNetworkThroughput) {
	s.Type = ScaleThresholdMetricNetworkThroughputScaleThresholdMetricSum
	s.ScaleThresholdMetricNetworkThroughput = v
}

// GetScaleThresholdMetricNetworkThroughput returns ScaleThresholdMetricNetworkThroughput and true boolean if ScaleThresholdMetricSum is ScaleThresholdMetricNetworkThroughput.
func (s ScaleThresholdMetricSum) GetScaleThresholdMetricNetworkThroughput() (v ScaleThresholdMetricNetworkThroughput, ok bool) {
	if !s.IsScaleThresholdMetricNetworkThroughput() {
		return v, false
	}
	return s.ScaleThresholdMetricNetworkThroughput, true
}

// NewScaleThresholdMetricNetworkThroughputScaleThresholdMetricSum returns new ScaleThresholdMetricSum from ScaleThresholdMetricNetworkThroughput.
func NewScaleThresholdMetricNetworkThroughputScaleThresholdMetricSum(v ScaleThresholdMetricNetworkThroughput) ScaleThresholdMetricSum {
	var s ScaleThresholdMetricSum
	s.SetScaleThresholdMetricNetworkThroughput(v)
	return s
}

// Custom authorization keys for the scheduler service.
// Ref: #/components/schemas/SchedulerAccessKey
type SchedulerAccessKey struct {
	// The name given to this access key.
	Name string `json:"name"`
	// The access key secret. This should be submitted with requests to a publicly accessible scheduler
	// service.
	Secret string `json:"secret"`
	// Whitelisted IPs that are allowed to make requests to the scheduler service.
	Ips []string `json:"ips"`
}

// GetName returns the value of Name.
func (s *SchedulerAccessKey) GetName() string {
	return s.Name
}

// GetSecret returns the value of Secret.
func (s *SchedulerAccessKey) GetSecret() string {
	return s.Secret
}

// GetIps returns the value of Ips.
func (s *SchedulerAccessKey) GetIps() []string {
	return s.Ips
}

// SetName sets the value of Name.
func (s *SchedulerAccessKey) SetName(val string) {
	s.Name = val
}

// SetSecret sets the value of Secret.
func (s *SchedulerAccessKey) SetSecret(val string) {
	s.Secret = val
}

// SetIps sets the value of Ips.
func (s *SchedulerAccessKey) SetIps(val []string) {
	s.Ips = val
}

// Scoped variables are a way for users to dynamically allocate runtime specific environment
// variables across any number of containers in an environment.
// Ref: #/components/schemas/ScopedVariable
type ScopedVariable struct {
	ID      ID           `json:"id"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// An identifier used to reference the environment this resource is scoped to.
	EnvironmentID string               `json:"environment_id"`
	Identifier    Identifier           `json:"identifier"`
	Scope         ScopedVariableScope  `json:"scope"`
	Access        ScopedVariableAccess `json:"access"`
	// The source or value of the scoped variable.
	Source NilScopedVariableSource `json:"source"`
	State  ScopedVariableState     `json:"state"`
	// A collection of timestamps for each event in the Scoped Variable's lifetime.
	Events ScopedVariableEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *ScopedVariable) GetID() ID {
	return s.ID
}

// GetCreator returns the value of Creator.
func (s *ScopedVariable) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *ScopedVariable) GetHubID() HubID {
	return s.HubID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *ScopedVariable) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetIdentifier returns the value of Identifier.
func (s *ScopedVariable) GetIdentifier() Identifier {
	return s.Identifier
}

// GetScope returns the value of Scope.
func (s *ScopedVariable) GetScope() ScopedVariableScope {
	return s.Scope
}

// GetAccess returns the value of Access.
func (s *ScopedVariable) GetAccess() ScopedVariableAccess {
	return s.Access
}

// GetSource returns the value of Source.
func (s *ScopedVariable) GetSource() NilScopedVariableSource {
	return s.Source
}

// GetState returns the value of State.
func (s *ScopedVariable) GetState() ScopedVariableState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *ScopedVariable) GetEvents() ScopedVariableEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *ScopedVariable) SetID(val ID) {
	s.ID = val
}

// SetCreator sets the value of Creator.
func (s *ScopedVariable) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *ScopedVariable) SetHubID(val HubID) {
	s.HubID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *ScopedVariable) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetIdentifier sets the value of Identifier.
func (s *ScopedVariable) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetScope sets the value of Scope.
func (s *ScopedVariable) SetScope(val ScopedVariableScope) {
	s.Scope = val
}

// SetAccess sets the value of Access.
func (s *ScopedVariable) SetAccess(val ScopedVariableAccess) {
	s.Access = val
}

// SetSource sets the value of Source.
func (s *ScopedVariable) SetSource(val NilScopedVariableSource) {
	s.Source = val
}

// SetState sets the value of State.
func (s *ScopedVariable) SetState(val ScopedVariableState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *ScopedVariable) SetEvents(val ScopedVariableEvents) {
	s.Events = val
}

// The way the scoped variable is accessed.
// Ref: #/components/schemas/ScopedVariableAccess
type ScopedVariableAccess struct {
	// When set to true, this scoped variable is set as an environment variable inside the container.
	EnvVariable OptNilScopedVariableAccessEnvVariable `json:"env_variable"`
	// If set, this scoped variable will be available over the internal API. Contains settings for
	// accessing this variable over the internal API.
	InternalAPI OptNilScopedVariableAccessInternalAPI `json:"internal_api"`
	// File is an object that describes a path to mount the file to inside the container.
	File OptNilScopedVariableAccessFile `json:"file"`
}

// GetEnvVariable returns the value of EnvVariable.
func (s *ScopedVariableAccess) GetEnvVariable() OptNilScopedVariableAccessEnvVariable {
	return s.EnvVariable
}

// GetInternalAPI returns the value of InternalAPI.
func (s *ScopedVariableAccess) GetInternalAPI() OptNilScopedVariableAccessInternalAPI {
	return s.InternalAPI
}

// GetFile returns the value of File.
func (s *ScopedVariableAccess) GetFile() OptNilScopedVariableAccessFile {
	return s.File
}

// SetEnvVariable sets the value of EnvVariable.
func (s *ScopedVariableAccess) SetEnvVariable(val OptNilScopedVariableAccessEnvVariable) {
	s.EnvVariable = val
}

// SetInternalAPI sets the value of InternalAPI.
func (s *ScopedVariableAccess) SetInternalAPI(val OptNilScopedVariableAccessInternalAPI) {
	s.InternalAPI = val
}

// SetFile sets the value of File.
func (s *ScopedVariableAccess) SetFile(val OptNilScopedVariableAccessFile) {
	s.File = val
}

// When set to true, this scoped variable is set as an environment variable inside the container.
type ScopedVariableAccessEnvVariable struct {
	// The name of the environment variable set on the target container.
	Key string `json:"key"`
}

// GetKey returns the value of Key.
func (s *ScopedVariableAccessEnvVariable) GetKey() string {
	return s.Key
}

// SetKey sets the value of Key.
func (s *ScopedVariableAccessEnvVariable) SetKey(val string) {
	s.Key = val
}

// File is an object that describes a path to mount the file to inside the container.
type ScopedVariableAccessFile struct {
	// When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before
	// passing it into the container.
	DecodeBase64 bool `json:"decode"`
	// The path to mount the file to inside the container.
	Path NilString `json:"path"`
}

// GetDecodeBase64 returns the value of DecodeBase64.
func (s *ScopedVariableAccessFile) GetDecodeBase64() bool {
	return s.DecodeBase64
}

// GetPath returns the value of Path.
func (s *ScopedVariableAccessFile) GetPath() NilString {
	return s.Path
}

// SetDecodeBase64 sets the value of DecodeBase64.
func (s *ScopedVariableAccessFile) SetDecodeBase64(val bool) {
	s.DecodeBase64 = val
}

// SetPath sets the value of Path.
func (s *ScopedVariableAccessFile) SetPath(val NilString) {
	s.Path = val
}

// If set, this scoped variable will be available over the internal API. Contains settings for
// accessing this variable over the internal API.
type ScopedVariableAccessInternalAPI struct {
	// Duration is a time string that the internal API will serve that variable after runtime starts.
	Duration OptNilString `json:"duration"`
}

// GetDuration returns the value of Duration.
func (s *ScopedVariableAccessInternalAPI) GetDuration() OptNilString {
	return s.Duration
}

// SetDuration sets the value of Duration.
func (s *ScopedVariableAccessInternalAPI) SetDuration(val OptNilString) {
	s.Duration = val
}

// A collection of timestamps for each event in the Scoped Variable's lifetime.
type ScopedVariableEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *ScopedVariableEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ScopedVariableEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ScopedVariableEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *ScopedVariableEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ScopedVariableEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ScopedVariableEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Information about the assignment of the scoped variable and how it is invoked.
// Ref: #/components/schemas/ScopedVariableScope
type ScopedVariableScope struct {
	// Information about the assignment of the scoped variable to different containers in the environment.
	Containers ScopedVariableScopeContainers `json:"containers"`
}

// GetContainers returns the value of Containers.
func (s *ScopedVariableScope) GetContainers() ScopedVariableScopeContainers {
	return s.Containers
}

// SetContainers sets the value of Containers.
func (s *ScopedVariableScope) SetContainers(val ScopedVariableScopeContainers) {
	s.Containers = val
}

// Information about the assignment of the scoped variable to different containers in the environment.
type ScopedVariableScopeContainers struct {
	// A boolean where true represents the scoped variables is globally assigned to all current and
	// future containers in the environment.
	Global bool `json:"global"`
	// An array of container IDs, where each container identified will have access to the scoped variable.
	Ids []string `json:"ids"`
	// An array of container identifiers, where each container identfied will have access to the scoped
	// variable.
	Identifiers []string `json:"identifiers"`
}

// GetGlobal returns the value of Global.
func (s *ScopedVariableScopeContainers) GetGlobal() bool {
	return s.Global
}

// GetIds returns the value of Ids.
func (s *ScopedVariableScopeContainers) GetIds() []string {
	return s.Ids
}

// GetIdentifiers returns the value of Identifiers.
func (s *ScopedVariableScopeContainers) GetIdentifiers() []string {
	return s.Identifiers
}

// SetGlobal sets the value of Global.
func (s *ScopedVariableScopeContainers) SetGlobal(val bool) {
	s.Global = val
}

// SetIds sets the value of Ids.
func (s *ScopedVariableScopeContainers) SetIds(val []string) {
	s.Ids = val
}

// SetIdentifiers sets the value of Identifiers.
func (s *ScopedVariableScopeContainers) SetIdentifiers(val []string) {
	s.Identifiers = val
}

// The source or value of the scoped variable.
type ScopedVariableSource struct {
	OneOf ScopedVariableSourceSum
}

// GetOneOf returns the value of OneOf.
func (s *ScopedVariableSource) GetOneOf() ScopedVariableSourceSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *ScopedVariableSource) SetOneOf(val ScopedVariableSourceSum) {
	s.OneOf = val
}

// ScopedVariableSourceSum represents sum type.
type ScopedVariableSourceSum struct {
	Type      ScopedVariableSourceSumType // switch on this field
	URLSource URLSource
	RawSource RawSource
}

// ScopedVariableSourceSumType is oneOf type of ScopedVariableSourceSum.
type ScopedVariableSourceSumType string

// Possible values for ScopedVariableSourceSumType.
const (
	URLSourceScopedVariableSourceSum ScopedVariableSourceSumType = "url"
	RawSourceScopedVariableSourceSum ScopedVariableSourceSumType = "raw"
)

// IsURLSource reports whether ScopedVariableSourceSum is URLSource.
func (s ScopedVariableSourceSum) IsURLSource() bool {
	return s.Type == URLSourceScopedVariableSourceSum
}

// IsRawSource reports whether ScopedVariableSourceSum is RawSource.
func (s ScopedVariableSourceSum) IsRawSource() bool {
	return s.Type == RawSourceScopedVariableSourceSum
}

// SetURLSource sets ScopedVariableSourceSum to URLSource.
func (s *ScopedVariableSourceSum) SetURLSource(v URLSource) {
	s.Type = URLSourceScopedVariableSourceSum
	s.URLSource = v
}

// GetURLSource returns URLSource and true boolean if ScopedVariableSourceSum is URLSource.
func (s ScopedVariableSourceSum) GetURLSource() (v URLSource, ok bool) {
	if !s.IsURLSource() {
		return v, false
	}
	return s.URLSource, true
}

// NewURLSourceScopedVariableSourceSum returns new ScopedVariableSourceSum from URLSource.
func NewURLSourceScopedVariableSourceSum(v URLSource) ScopedVariableSourceSum {
	var s ScopedVariableSourceSum
	s.SetURLSource(v)
	return s
}

// SetRawSource sets ScopedVariableSourceSum to RawSource.
func (s *ScopedVariableSourceSum) SetRawSource(v RawSource) {
	s.Type = RawSourceScopedVariableSourceSum
	s.RawSource = v
}

// GetRawSource returns RawSource and true boolean if ScopedVariableSourceSum is RawSource.
func (s ScopedVariableSourceSum) GetRawSource() (v RawSource, ok bool) {
	if !s.IsRawSource() {
		return v, false
	}
	return s.RawSource, true
}

// NewRawSourceScopedVariableSourceSum returns new ScopedVariableSourceSum from RawSource.
func NewRawSourceScopedVariableSourceSum(v RawSource) ScopedVariableSourceSum {
	var s ScopedVariableSourceSum
	s.SetRawSource(v)
	return s
}

// Merged schema.
// Ref: #/components/schemas/ScopedVariableState
type ScopedVariableState struct {
	// The current state of the scoped variable.
	Current ScopedVariableStateCurrent `json:"current"`
	Changed DateTime                   `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptScopedVariableStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ScopedVariableState) GetCurrent() ScopedVariableStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ScopedVariableState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ScopedVariableState) GetError() OptScopedVariableStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ScopedVariableState) SetCurrent(val ScopedVariableStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ScopedVariableState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ScopedVariableState) SetError(val OptScopedVariableStateError) {
	s.Error = val
}

// The current state of the scoped variable.
type ScopedVariableStateCurrent string

const (
	ScopedVariableStateCurrentLive     ScopedVariableStateCurrent = "live"
	ScopedVariableStateCurrentDeleting ScopedVariableStateCurrent = "deleting"
	ScopedVariableStateCurrentDeleted  ScopedVariableStateCurrent = "deleted"
)

// AllValues returns all ScopedVariableStateCurrent values.
func (ScopedVariableStateCurrent) AllValues() []ScopedVariableStateCurrent {
	return []ScopedVariableStateCurrent{
		ScopedVariableStateCurrentLive,
		ScopedVariableStateCurrentDeleting,
		ScopedVariableStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScopedVariableStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ScopedVariableStateCurrentLive:
		return []byte(s), nil
	case ScopedVariableStateCurrentDeleting:
		return []byte(s), nil
	case ScopedVariableStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScopedVariableStateCurrent) UnmarshalText(data []byte) error {
	switch ScopedVariableStateCurrent(data) {
	case ScopedVariableStateCurrentLive:
		*s = ScopedVariableStateCurrentLive
		return nil
	case ScopedVariableStateCurrentDeleting:
		*s = ScopedVariableStateCurrentDeleting
		return nil
	case ScopedVariableStateCurrentDeleted:
		*s = ScopedVariableStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ScopedVariableStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ScopedVariableStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ScopedVariableStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ScopedVariableStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ScopedVariableStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Rules for controlling Linux seccomp inside a container.
// Ref: #/components/schemas/SeccompRule
type SeccompRule struct {
	Capabilities OptSeccompRuleCapabilities `json:"capabilities"`
	// LinuxSyscall is used to match a syscall in Seccomp.
	Syscall OptSeccompRuleSyscall `json:"syscall"`
}

// GetCapabilities returns the value of Capabilities.
func (s *SeccompRule) GetCapabilities() OptSeccompRuleCapabilities {
	return s.Capabilities
}

// GetSyscall returns the value of Syscall.
func (s *SeccompRule) GetSyscall() OptSeccompRuleSyscall {
	return s.Syscall
}

// SetCapabilities sets the value of Capabilities.
func (s *SeccompRule) SetCapabilities(val OptSeccompRuleCapabilities) {
	s.Capabilities = val
}

// SetSyscall sets the value of Syscall.
func (s *SeccompRule) SetSyscall(val OptSeccompRuleSyscall) {
	s.Syscall = val
}

type SeccompRuleCapabilities struct {
	Includes OptString `json:"includes"`
	Excludes OptString `json:"excludes"`
}

// GetIncludes returns the value of Includes.
func (s *SeccompRuleCapabilities) GetIncludes() OptString {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *SeccompRuleCapabilities) GetExcludes() OptString {
	return s.Excludes
}

// SetIncludes sets the value of Includes.
func (s *SeccompRuleCapabilities) SetIncludes(val OptString) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *SeccompRuleCapabilities) SetExcludes(val OptString) {
	s.Excludes = val
}

// LinuxSyscall is used to match a syscall in Seccomp.
type SeccompRuleSyscall struct {
	Names    []string                     `json:"names"`
	Action   string                       `json:"action"`
	ErrnoRet OptInt                       `json:"errnoRet"`
	Args     []SeccompRuleSyscallArgsItem `json:"args"`
}

// GetNames returns the value of Names.
func (s *SeccompRuleSyscall) GetNames() []string {
	return s.Names
}

// GetAction returns the value of Action.
func (s *SeccompRuleSyscall) GetAction() string {
	return s.Action
}

// GetErrnoRet returns the value of ErrnoRet.
func (s *SeccompRuleSyscall) GetErrnoRet() OptInt {
	return s.ErrnoRet
}

// GetArgs returns the value of Args.
func (s *SeccompRuleSyscall) GetArgs() []SeccompRuleSyscallArgsItem {
	return s.Args
}

// SetNames sets the value of Names.
func (s *SeccompRuleSyscall) SetNames(val []string) {
	s.Names = val
}

// SetAction sets the value of Action.
func (s *SeccompRuleSyscall) SetAction(val string) {
	s.Action = val
}

// SetErrnoRet sets the value of ErrnoRet.
func (s *SeccompRuleSyscall) SetErrnoRet(val OptInt) {
	s.ErrnoRet = val
}

// SetArgs sets the value of Args.
func (s *SeccompRuleSyscall) SetArgs(val []SeccompRuleSyscallArgsItem) {
	s.Args = val
}

type SeccompRuleSyscallArgsItem struct {
	Index    int    `json:"index"`
	Value    int    `json:"value"`
	ValueTwo OptInt `json:"valueTwo"`
	Op       string `json:"op"`
}

// GetIndex returns the value of Index.
func (s *SeccompRuleSyscallArgsItem) GetIndex() int {
	return s.Index
}

// GetValue returns the value of Value.
func (s *SeccompRuleSyscallArgsItem) GetValue() int {
	return s.Value
}

// GetValueTwo returns the value of ValueTwo.
func (s *SeccompRuleSyscallArgsItem) GetValueTwo() OptInt {
	return s.ValueTwo
}

// GetOp returns the value of Op.
func (s *SeccompRuleSyscallArgsItem) GetOp() string {
	return s.Op
}

// SetIndex sets the value of Index.
func (s *SeccompRuleSyscallArgsItem) SetIndex(val int) {
	s.Index = val
}

// SetValue sets the value of Value.
func (s *SeccompRuleSyscallArgsItem) SetValue(val int) {
	s.Value = val
}

// SetValueTwo sets the value of ValueTwo.
func (s *SeccompRuleSyscallArgsItem) SetValueTwo(val OptInt) {
	s.ValueTwo = val
}

// SetOp sets the value of Op.
func (s *SeccompRuleSyscallArgsItem) SetOp(val string) {
	s.Op = val
}

// Details about a security incident/event that occurred.
// Ref: #/components/schemas/SecurityIncident
type SecurityIncident struct {
	// The risk level of the security.
	Risk SecurityIncidentRisk `json:"risk"`
	// The vector of attack.
	Surface SecurityIncidentSurface `json:"surface"`
	// How the platform handled the event.
	Event SecurityIncidentEvent `json:"event"`
	// The type of attack detected.
	Attack SecurityIncidentAttack `json:"attack"`
	Count  int                    `json:"count"`
}

// GetRisk returns the value of Risk.
func (s *SecurityIncident) GetRisk() SecurityIncidentRisk {
	return s.Risk
}

// GetSurface returns the value of Surface.
func (s *SecurityIncident) GetSurface() SecurityIncidentSurface {
	return s.Surface
}

// GetEvent returns the value of Event.
func (s *SecurityIncident) GetEvent() SecurityIncidentEvent {
	return s.Event
}

// GetAttack returns the value of Attack.
func (s *SecurityIncident) GetAttack() SecurityIncidentAttack {
	return s.Attack
}

// GetCount returns the value of Count.
func (s *SecurityIncident) GetCount() int {
	return s.Count
}

// SetRisk sets the value of Risk.
func (s *SecurityIncident) SetRisk(val SecurityIncidentRisk) {
	s.Risk = val
}

// SetSurface sets the value of Surface.
func (s *SecurityIncident) SetSurface(val SecurityIncidentSurface) {
	s.Surface = val
}

// SetEvent sets the value of Event.
func (s *SecurityIncident) SetEvent(val SecurityIncidentEvent) {
	s.Event = val
}

// SetAttack sets the value of Attack.
func (s *SecurityIncident) SetAttack(val SecurityIncidentAttack) {
	s.Attack = val
}

// SetCount sets the value of Count.
func (s *SecurityIncident) SetCount(val int) {
	s.Count = val
}

// The type of attack detected.
type SecurityIncidentAttack string

const (
	SecurityIncidentAttackNone                 SecurityIncidentAttack = "none"
	SecurityIncidentAttackAuthFailure          SecurityIncidentAttack = "auth-failure"
	SecurityIncidentAttackBruteForce           SecurityIncidentAttack = "brute-force"
	SecurityIncidentAttackExploitVulnerability SecurityIncidentAttack = "exploit-vulnerability"
	SecurityIncidentAttackSocialEngineer       SecurityIncidentAttack = "social-engineer"
	SecurityIncidentAttackServiceInterruption  SecurityIncidentAttack = "service-interruption"
	SecurityIncidentAttackAccessElevation      SecurityIncidentAttack = "access-elevation"
)

// AllValues returns all SecurityIncidentAttack values.
func (SecurityIncidentAttack) AllValues() []SecurityIncidentAttack {
	return []SecurityIncidentAttack{
		SecurityIncidentAttackNone,
		SecurityIncidentAttackAuthFailure,
		SecurityIncidentAttackBruteForce,
		SecurityIncidentAttackExploitVulnerability,
		SecurityIncidentAttackSocialEngineer,
		SecurityIncidentAttackServiceInterruption,
		SecurityIncidentAttackAccessElevation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentAttack) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentAttackNone:
		return []byte(s), nil
	case SecurityIncidentAttackAuthFailure:
		return []byte(s), nil
	case SecurityIncidentAttackBruteForce:
		return []byte(s), nil
	case SecurityIncidentAttackExploitVulnerability:
		return []byte(s), nil
	case SecurityIncidentAttackSocialEngineer:
		return []byte(s), nil
	case SecurityIncidentAttackServiceInterruption:
		return []byte(s), nil
	case SecurityIncidentAttackAccessElevation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentAttack) UnmarshalText(data []byte) error {
	switch SecurityIncidentAttack(data) {
	case SecurityIncidentAttackNone:
		*s = SecurityIncidentAttackNone
		return nil
	case SecurityIncidentAttackAuthFailure:
		*s = SecurityIncidentAttackAuthFailure
		return nil
	case SecurityIncidentAttackBruteForce:
		*s = SecurityIncidentAttackBruteForce
		return nil
	case SecurityIncidentAttackExploitVulnerability:
		*s = SecurityIncidentAttackExploitVulnerability
		return nil
	case SecurityIncidentAttackSocialEngineer:
		*s = SecurityIncidentAttackSocialEngineer
		return nil
	case SecurityIncidentAttackServiceInterruption:
		*s = SecurityIncidentAttackServiceInterruption
		return nil
	case SecurityIncidentAttackAccessElevation:
		*s = SecurityIncidentAttackAccessElevation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// How the platform handled the event.
type SecurityIncidentEvent string

const (
	SecurityIncidentEventSuggestion SecurityIncidentEvent = "suggestion"
	SecurityIncidentEventNotice     SecurityIncidentEvent = "notice"
	SecurityIncidentEventPrevention SecurityIncidentEvent = "prevention"
	SecurityIncidentEventDetection  SecurityIncidentEvent = "detection"
	SecurityIncidentEventReaction   SecurityIncidentEvent = "reaction"
)

// AllValues returns all SecurityIncidentEvent values.
func (SecurityIncidentEvent) AllValues() []SecurityIncidentEvent {
	return []SecurityIncidentEvent{
		SecurityIncidentEventSuggestion,
		SecurityIncidentEventNotice,
		SecurityIncidentEventPrevention,
		SecurityIncidentEventDetection,
		SecurityIncidentEventReaction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentEvent) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentEventSuggestion:
		return []byte(s), nil
	case SecurityIncidentEventNotice:
		return []byte(s), nil
	case SecurityIncidentEventPrevention:
		return []byte(s), nil
	case SecurityIncidentEventDetection:
		return []byte(s), nil
	case SecurityIncidentEventReaction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentEvent) UnmarshalText(data []byte) error {
	switch SecurityIncidentEvent(data) {
	case SecurityIncidentEventSuggestion:
		*s = SecurityIncidentEventSuggestion
		return nil
	case SecurityIncidentEventNotice:
		*s = SecurityIncidentEventNotice
		return nil
	case SecurityIncidentEventPrevention:
		*s = SecurityIncidentEventPrevention
		return nil
	case SecurityIncidentEventDetection:
		*s = SecurityIncidentEventDetection
		return nil
	case SecurityIncidentEventReaction:
		*s = SecurityIncidentEventReaction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The risk level of the security.
type SecurityIncidentRisk string

const (
	SecurityIncidentRiskInfo     SecurityIncidentRisk = "info"
	SecurityIncidentRiskLow      SecurityIncidentRisk = "low"
	SecurityIncidentRiskMedium   SecurityIncidentRisk = "medium"
	SecurityIncidentRiskHigh     SecurityIncidentRisk = "high"
	SecurityIncidentRiskCritical SecurityIncidentRisk = "critical"
)

// AllValues returns all SecurityIncidentRisk values.
func (SecurityIncidentRisk) AllValues() []SecurityIncidentRisk {
	return []SecurityIncidentRisk{
		SecurityIncidentRiskInfo,
		SecurityIncidentRiskLow,
		SecurityIncidentRiskMedium,
		SecurityIncidentRiskHigh,
		SecurityIncidentRiskCritical,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentRisk) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentRiskInfo:
		return []byte(s), nil
	case SecurityIncidentRiskLow:
		return []byte(s), nil
	case SecurityIncidentRiskMedium:
		return []byte(s), nil
	case SecurityIncidentRiskHigh:
		return []byte(s), nil
	case SecurityIncidentRiskCritical:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentRisk) UnmarshalText(data []byte) error {
	switch SecurityIncidentRisk(data) {
	case SecurityIncidentRiskInfo:
		*s = SecurityIncidentRiskInfo
		return nil
	case SecurityIncidentRiskLow:
		*s = SecurityIncidentRiskLow
		return nil
	case SecurityIncidentRiskMedium:
		*s = SecurityIncidentRiskMedium
		return nil
	case SecurityIncidentRiskHigh:
		*s = SecurityIncidentRiskHigh
		return nil
	case SecurityIncidentRiskCritical:
		*s = SecurityIncidentRiskCritical
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The vector of attack.
type SecurityIncidentSurface string

const (
	SecurityIncidentSurfaceNetwork SecurityIncidentSurface = "network"
	SecurityIncidentSurfaceService SecurityIncidentSurface = "service"
	SecurityIncidentSurfaceFs      SecurityIncidentSurface = "fs"
	SecurityIncidentSurfaceAPI     SecurityIncidentSurface = "api"
)

// AllValues returns all SecurityIncidentSurface values.
func (SecurityIncidentSurface) AllValues() []SecurityIncidentSurface {
	return []SecurityIncidentSurface{
		SecurityIncidentSurfaceNetwork,
		SecurityIncidentSurfaceService,
		SecurityIncidentSurfaceFs,
		SecurityIncidentSurfaceAPI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SecurityIncidentSurface) MarshalText() ([]byte, error) {
	switch s {
	case SecurityIncidentSurfaceNetwork:
		return []byte(s), nil
	case SecurityIncidentSurfaceService:
		return []byte(s), nil
	case SecurityIncidentSurfaceFs:
		return []byte(s), nil
	case SecurityIncidentSurfaceAPI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SecurityIncidentSurface) UnmarshalText(data []byte) error {
	switch SecurityIncidentSurface(data) {
	case SecurityIncidentSurfaceNetwork:
		*s = SecurityIncidentSurfaceNetwork
		return nil
	case SecurityIncidentSurfaceService:
		*s = SecurityIncidentSurfaceService
		return nil
	case SecurityIncidentSurfaceFs:
		*s = SecurityIncidentSurfaceFs
		return nil
	case SecurityIncidentSurfaceAPI:
		*s = SecurityIncidentSurfaceAPI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A report of all security events captured by the platform over a range of time.
// Ref: #/components/schemas/SecurityReport
type SecurityReport struct {
	HubID   HubID                 `json:"hub_id"`
	Created DateTime              `json:"created"`
	Range   Range                 `json:"range"`
	Summary SecurityReportSummary `json:"summary"`
	// The ID of the environment this instnace is in.
	Snapshots []SecurityReportSnapshot `json:"snapshots"`
}

// GetHubID returns the value of HubID.
func (s *SecurityReport) GetHubID() HubID {
	return s.HubID
}

// GetCreated returns the value of Created.
func (s *SecurityReport) GetCreated() DateTime {
	return s.Created
}

// GetRange returns the value of Range.
func (s *SecurityReport) GetRange() Range {
	return s.Range
}

// GetSummary returns the value of Summary.
func (s *SecurityReport) GetSummary() SecurityReportSummary {
	return s.Summary
}

// GetSnapshots returns the value of Snapshots.
func (s *SecurityReport) GetSnapshots() []SecurityReportSnapshot {
	return s.Snapshots
}

// SetHubID sets the value of HubID.
func (s *SecurityReport) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreated sets the value of Created.
func (s *SecurityReport) SetCreated(val DateTime) {
	s.Created = val
}

// SetRange sets the value of Range.
func (s *SecurityReport) SetRange(val Range) {
	s.Range = val
}

// SetSummary sets the value of Summary.
func (s *SecurityReport) SetSummary(val SecurityReportSummary) {
	s.Summary = val
}

// SetSnapshots sets the value of Snapshots.
func (s *SecurityReport) SetSnapshots(val []SecurityReportSnapshot) {
	s.Snapshots = val
}

// A snapshot of security events for the given interval.
// Ref: #/components/schemas/SecurityReportSnapshot
type SecurityReportSnapshot struct {
	Time      DateTime                        `json:"time"`
	Incidents SecurityReportSnapshotIncidents `json:"incidents"`
	Count     int                             `json:"count"`
}

// GetTime returns the value of Time.
func (s *SecurityReportSnapshot) GetTime() DateTime {
	return s.Time
}

// GetIncidents returns the value of Incidents.
func (s *SecurityReportSnapshot) GetIncidents() SecurityReportSnapshotIncidents {
	return s.Incidents
}

// GetCount returns the value of Count.
func (s *SecurityReportSnapshot) GetCount() int {
	return s.Count
}

// SetTime sets the value of Time.
func (s *SecurityReportSnapshot) SetTime(val DateTime) {
	s.Time = val
}

// SetIncidents sets the value of Incidents.
func (s *SecurityReportSnapshot) SetIncidents(val SecurityReportSnapshotIncidents) {
	s.Incidents = val
}

// SetCount sets the value of Count.
func (s *SecurityReportSnapshot) SetCount(val int) {
	s.Count = val
}

type SecurityReportSnapshotIncidents struct {
	Info     OptSecuritySnapshotIncidentBreakdown `json:"info"`
	Low      OptSecuritySnapshotIncidentBreakdown `json:"low"`
	Medium   OptSecuritySnapshotIncidentBreakdown `json:"medium"`
	High     OptSecuritySnapshotIncidentBreakdown `json:"high"`
	Critical OptSecuritySnapshotIncidentBreakdown `json:"critical"`
}

// GetInfo returns the value of Info.
func (s *SecurityReportSnapshotIncidents) GetInfo() OptSecuritySnapshotIncidentBreakdown {
	return s.Info
}

// GetLow returns the value of Low.
func (s *SecurityReportSnapshotIncidents) GetLow() OptSecuritySnapshotIncidentBreakdown {
	return s.Low
}

// GetMedium returns the value of Medium.
func (s *SecurityReportSnapshotIncidents) GetMedium() OptSecuritySnapshotIncidentBreakdown {
	return s.Medium
}

// GetHigh returns the value of High.
func (s *SecurityReportSnapshotIncidents) GetHigh() OptSecuritySnapshotIncidentBreakdown {
	return s.High
}

// GetCritical returns the value of Critical.
func (s *SecurityReportSnapshotIncidents) GetCritical() OptSecuritySnapshotIncidentBreakdown {
	return s.Critical
}

// SetInfo sets the value of Info.
func (s *SecurityReportSnapshotIncidents) SetInfo(val OptSecuritySnapshotIncidentBreakdown) {
	s.Info = val
}

// SetLow sets the value of Low.
func (s *SecurityReportSnapshotIncidents) SetLow(val OptSecuritySnapshotIncidentBreakdown) {
	s.Low = val
}

// SetMedium sets the value of Medium.
func (s *SecurityReportSnapshotIncidents) SetMedium(val OptSecuritySnapshotIncidentBreakdown) {
	s.Medium = val
}

// SetHigh sets the value of High.
func (s *SecurityReportSnapshotIncidents) SetHigh(val OptSecuritySnapshotIncidentBreakdown) {
	s.High = val
}

// SetCritical sets the value of Critical.
func (s *SecurityReportSnapshotIncidents) SetCritical(val OptSecuritySnapshotIncidentBreakdown) {
	s.Critical = val
}

// A summary of the incidents tags accumulated over the report's range.
// Ref: #/components/schemas/SecurityReportSummary
type SecurityReportSummary struct {
	Incidents []SecurityIncident `json:"incidents"`
}

// GetIncidents returns the value of Incidents.
func (s *SecurityReportSummary) GetIncidents() []SecurityIncident {
	return s.Incidents
}

// SetIncidents sets the value of Incidents.
func (s *SecurityReportSummary) SetIncidents(val []SecurityIncident) {
	s.Incidents = val
}

// A breakdown of a snapshot's incidents inside a security report.
// Ref: #/components/schemas/SecuritySnapshotIncidentBreakdown
type SecuritySnapshotIncidentBreakdown struct {
	Surface SecuritySnapshotIncidentBreakdownSurface `json:"surface"`
	Attack  SecuritySnapshotIncidentBreakdownAttack  `json:"attack"`
}

// GetSurface returns the value of Surface.
func (s *SecuritySnapshotIncidentBreakdown) GetSurface() SecuritySnapshotIncidentBreakdownSurface {
	return s.Surface
}

// GetAttack returns the value of Attack.
func (s *SecuritySnapshotIncidentBreakdown) GetAttack() SecuritySnapshotIncidentBreakdownAttack {
	return s.Attack
}

// SetSurface sets the value of Surface.
func (s *SecuritySnapshotIncidentBreakdown) SetSurface(val SecuritySnapshotIncidentBreakdownSurface) {
	s.Surface = val
}

// SetAttack sets the value of Attack.
func (s *SecuritySnapshotIncidentBreakdown) SetAttack(val SecuritySnapshotIncidentBreakdownAttack) {
	s.Attack = val
}

type SecuritySnapshotIncidentBreakdownAttack struct {
	None                      OptInt `json:"none"`
	AuthMinusFailure          OptInt `json:"auth-failure"`
	BruteMinusForce           OptInt `json:"brute-force"`
	ExploitMinusVulnerability OptInt `json:"exploit-vulnerability"`
	SocialMinusEngineer       OptInt `json:"social-engineer"`
	ServiceMinusInterruption  OptInt `json:"service-interruption"`
	AccessMinusElevation      OptInt `json:"access-elevation"`
}

// GetNone returns the value of None.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetNone() OptInt {
	return s.None
}

// GetAuthMinusFailure returns the value of AuthMinusFailure.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetAuthMinusFailure() OptInt {
	return s.AuthMinusFailure
}

// GetBruteMinusForce returns the value of BruteMinusForce.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetBruteMinusForce() OptInt {
	return s.BruteMinusForce
}

// GetExploitMinusVulnerability returns the value of ExploitMinusVulnerability.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetExploitMinusVulnerability() OptInt {
	return s.ExploitMinusVulnerability
}

// GetSocialMinusEngineer returns the value of SocialMinusEngineer.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetSocialMinusEngineer() OptInt {
	return s.SocialMinusEngineer
}

// GetServiceMinusInterruption returns the value of ServiceMinusInterruption.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetServiceMinusInterruption() OptInt {
	return s.ServiceMinusInterruption
}

// GetAccessMinusElevation returns the value of AccessMinusElevation.
func (s *SecuritySnapshotIncidentBreakdownAttack) GetAccessMinusElevation() OptInt {
	return s.AccessMinusElevation
}

// SetNone sets the value of None.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetNone(val OptInt) {
	s.None = val
}

// SetAuthMinusFailure sets the value of AuthMinusFailure.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetAuthMinusFailure(val OptInt) {
	s.AuthMinusFailure = val
}

// SetBruteMinusForce sets the value of BruteMinusForce.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetBruteMinusForce(val OptInt) {
	s.BruteMinusForce = val
}

// SetExploitMinusVulnerability sets the value of ExploitMinusVulnerability.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetExploitMinusVulnerability(val OptInt) {
	s.ExploitMinusVulnerability = val
}

// SetSocialMinusEngineer sets the value of SocialMinusEngineer.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetSocialMinusEngineer(val OptInt) {
	s.SocialMinusEngineer = val
}

// SetServiceMinusInterruption sets the value of ServiceMinusInterruption.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetServiceMinusInterruption(val OptInt) {
	s.ServiceMinusInterruption = val
}

// SetAccessMinusElevation sets the value of AccessMinusElevation.
func (s *SecuritySnapshotIncidentBreakdownAttack) SetAccessMinusElevation(val OptInt) {
	s.AccessMinusElevation = val
}

type SecuritySnapshotIncidentBreakdownSurface struct {
	Network OptInt `json:"network"`
	Service OptInt `json:"service"`
	Fs      OptInt `json:"fs"`
	API     OptInt `json:"api"`
}

// GetNetwork returns the value of Network.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetNetwork() OptInt {
	return s.Network
}

// GetService returns the value of Service.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetService() OptInt {
	return s.Service
}

// GetFs returns the value of Fs.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetFs() OptInt {
	return s.Fs
}

// GetAPI returns the value of API.
func (s *SecuritySnapshotIncidentBreakdownSurface) GetAPI() OptInt {
	return s.API
}

// SetNetwork sets the value of Network.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetNetwork(val OptInt) {
	s.Network = val
}

// SetService sets the value of Service.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetService(val OptInt) {
	s.Service = val
}

// SetFs sets the value of Fs.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetFs(val OptInt) {
	s.Fs = val
}

// SetAPI sets the value of API.
func (s *SecuritySnapshotIncidentBreakdownSurface) SetAPI(val OptInt) {
	s.API = val
}

// Constraints to apply to the server.
// Ref: #/components/schemas/ServerConstraints
type ServerConstraints struct {
	// A list of server tags to put on the given server.
	Tags []string `json:"tags"`
	// Settings for the server, things that are or are not allowed.
	Allow ServerConstraintsAllow `json:"allow"`
}

// GetTags returns the value of Tags.
func (s *ServerConstraints) GetTags() []string {
	return s.Tags
}

// GetAllow returns the value of Allow.
func (s *ServerConstraints) GetAllow() ServerConstraintsAllow {
	return s.Allow
}

// SetTags sets the value of Tags.
func (s *ServerConstraints) SetTags(val []string) {
	s.Tags = val
}

// SetAllow sets the value of Allow.
func (s *ServerConstraints) SetAllow(val ServerConstraintsAllow) {
	s.Allow = val
}

// Settings for the server, things that are or are not allowed.
type ServerConstraintsAllow struct {
	// A boolean where true means - allow containers with no tags specified to be deployed to this server.
	Pool bool `json:"pool"`
	// A boolean where true means - allow service containers to be deployed to this container.
	Services bool `json:"services"`
	// A boolean where true means - allow twice the normal amount of CPU shares to be allocated to
	// containers deployed to this server.
	Overcommit bool `json:"overcommit"`
}

// GetPool returns the value of Pool.
func (s *ServerConstraintsAllow) GetPool() bool {
	return s.Pool
}

// GetServices returns the value of Services.
func (s *ServerConstraintsAllow) GetServices() bool {
	return s.Services
}

// GetOvercommit returns the value of Overcommit.
func (s *ServerConstraintsAllow) GetOvercommit() bool {
	return s.Overcommit
}

// SetPool sets the value of Pool.
func (s *ServerConstraintsAllow) SetPool(val bool) {
	s.Pool = val
}

// SetServices sets the value of Services.
func (s *ServerConstraintsAllow) SetServices(val bool) {
	s.Services = val
}

// SetOvercommit sets the value of Overcommit.
func (s *ServerConstraintsAllow) SetOvercommit(val bool) {
	s.Overcommit = val
}

// A set of features a given server can have and their information.
// Ref: #/components/schemas/ServerFeatures
type ServerFeatures struct {
	// A boolean where true means the server accepts incoming SFTP connections through the remote volume
	// integration.
	Sftp bool `json:"sftp"`
	// The size of the base volume (where Cycle stores container images on this server).
	BaseVolumeGB OptNilInt `json:"base_volume_gb"`
}

// GetSftp returns the value of Sftp.
func (s *ServerFeatures) GetSftp() bool {
	return s.Sftp
}

// GetBaseVolumeGB returns the value of BaseVolumeGB.
func (s *ServerFeatures) GetBaseVolumeGB() OptNilInt {
	return s.BaseVolumeGB
}

// SetSftp sets the value of Sftp.
func (s *ServerFeatures) SetSftp(val bool) {
	s.Sftp = val
}

// SetBaseVolumeGB sets the value of BaseVolumeGB.
func (s *ServerFeatures) SetBaseVolumeGB(val OptNilInt) {
	s.BaseVolumeGB = val
}

// A resource associated with a server.
// Ref: #/components/schemas/ServerIncludes
type ServerIncludes struct {
	Locations    OptLocationsIncludes    `json:"locations"`
	Models       OptServerModelIncludes  `json:"models"`
	Integrations OptIntegrationsIncludes `json:"integrations"`
}

// GetLocations returns the value of Locations.
func (s *ServerIncludes) GetLocations() OptLocationsIncludes {
	return s.Locations
}

// GetModels returns the value of Models.
func (s *ServerIncludes) GetModels() OptServerModelIncludes {
	return s.Models
}

// GetIntegrations returns the value of Integrations.
func (s *ServerIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// SetLocations sets the value of Locations.
func (s *ServerIncludes) SetLocations(val OptLocationsIncludes) {
	s.Locations = val
}

// SetModels sets the value of Models.
func (s *ServerIncludes) SetModels(val OptServerModelIncludes) {
	s.Models = val
}

// SetIntegrations sets the value of Integrations.
func (s *ServerIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// A Server ID and number of Instances of a specific Container it hosts.
// Ref: #/components/schemas/ServerInstancesSummary
type ServerInstancesSummary struct {
	ServerID  ID  `json:"server_id"`
	Instances int `json:"instances"`
}

// GetServerID returns the value of ServerID.
func (s *ServerInstancesSummary) GetServerID() ID {
	return s.ServerID
}

// GetInstances returns the value of Instances.
func (s *ServerInstancesSummary) GetInstances() int {
	return s.Instances
}

// SetServerID sets the value of ServerID.
func (s *ServerInstancesSummary) SetServerID(val ID) {
	s.ServerID = val
}

// SetInstances sets the value of Instances.
func (s *ServerInstancesSummary) SetInstances(val int) {
	s.Instances = val
}

// A list of meta fields that can be applied to a server.
// Ref: #/components/schemas/ServerMeta
type ServerMeta struct {
	// Infrormation about the status of the server.
	Node           OptServerMetaNode    `json:"node"`
	InstancesCount OptStateCountSummary `json:"instances_count"`
}

// GetNode returns the value of Node.
func (s *ServerMeta) GetNode() OptServerMetaNode {
	return s.Node
}

// GetInstancesCount returns the value of InstancesCount.
func (s *ServerMeta) GetInstancesCount() OptStateCountSummary {
	return s.InstancesCount
}

// SetNode sets the value of Node.
func (s *ServerMeta) SetNode(val OptServerMetaNode) {
	s.Node = val
}

// SetInstancesCount sets the value of InstancesCount.
func (s *ServerMeta) SetInstancesCount(val OptStateCountSummary) {
	s.InstancesCount = val
}

// Infrormation about the status of the server.
type ServerMetaNode struct {
	LastCheckin DateTime `json:"last_checkin"`
	// An array a drivers associated with the given server.
	Drivers []string      `json:"drivers"`
	State   NodeState     `json:"state"`
	Stats   NodeMetaStats `json:"stats"`
	// A boolean where true means the platform is reporting the server as healthy.
	Healthy bool `json:"healthy"`
	// A boolean where true means the server is online and reachable by the platform.
	Online bool `json:"online"`
}

// GetLastCheckin returns the value of LastCheckin.
func (s *ServerMetaNode) GetLastCheckin() DateTime {
	return s.LastCheckin
}

// GetDrivers returns the value of Drivers.
func (s *ServerMetaNode) GetDrivers() []string {
	return s.Drivers
}

// GetState returns the value of State.
func (s *ServerMetaNode) GetState() NodeState {
	return s.State
}

// GetStats returns the value of Stats.
func (s *ServerMetaNode) GetStats() NodeMetaStats {
	return s.Stats
}

// GetHealthy returns the value of Healthy.
func (s *ServerMetaNode) GetHealthy() bool {
	return s.Healthy
}

// GetOnline returns the value of Online.
func (s *ServerMetaNode) GetOnline() bool {
	return s.Online
}

// SetLastCheckin sets the value of LastCheckin.
func (s *ServerMetaNode) SetLastCheckin(val DateTime) {
	s.LastCheckin = val
}

// SetDrivers sets the value of Drivers.
func (s *ServerMetaNode) SetDrivers(val []string) {
	s.Drivers = val
}

// SetState sets the value of State.
func (s *ServerMetaNode) SetState(val NodeState) {
	s.State = val
}

// SetStats sets the value of Stats.
func (s *ServerMetaNode) SetStats(val NodeMetaStats) {
	s.Stats = val
}

// SetHealthy sets the value of Healthy.
func (s *ServerMetaNode) SetHealthy(val bool) {
	s.Healthy = val
}

// SetOnline sets the value of Online.
func (s *ServerMetaNode) SetOnline(val bool) {
	s.Online = val
}

// A resources that assocaited with a provider server.
// Ref: #/components/schemas/ServerModelIncludes
type ServerModelIncludes map[string]ProviderServerModel

func (s *ServerModelIncludes) init() ServerModelIncludes {
	m := *s
	if m == nil {
		m = map[string]ProviderServerModel{}
		*s = m
	}
	return m
}

// A resource associated with a server models.
// Ref: #/components/schemas/ServerModelsIncludes
type ServerModelsIncludes map[string]ProviderServerModel

func (s *ServerModelsIncludes) init() ServerModelsIncludes {
	m := *s
	if m == nil {
		m = map[string]ProviderServerModel{}
		*s = m
	}
	return m
}

// A resource regarding the provider a given server is deployed from.
// Ref: #/components/schemas/ServerProvider
type ServerProvider struct {
	// The vendor for the provider this server is deployed from.
	Vendor string `json:"vendor"`
	// The model of the server that is deployed.
	Model string `json:"model"`
	// A location where the server is deployed.
	Location string `json:"location"`
	// A provider specific identifier for the server.
	Server string `json:"server"`
	// The IP's assigned to this server during provisioning.
	InitIps []string `json:"init_ips"`
	// The mac address for the server.
	MACAddr          OptString                         `json:"mac_addr"`
	Extra            OptServerProviderExtra            `json:"extra"`
	ProvisionOptions OptServerProviderProvisionOptions `json:"provision_options"`
}

// GetVendor returns the value of Vendor.
func (s *ServerProvider) GetVendor() string {
	return s.Vendor
}

// GetModel returns the value of Model.
func (s *ServerProvider) GetModel() string {
	return s.Model
}

// GetLocation returns the value of Location.
func (s *ServerProvider) GetLocation() string {
	return s.Location
}

// GetServer returns the value of Server.
func (s *ServerProvider) GetServer() string {
	return s.Server
}

// GetInitIps returns the value of InitIps.
func (s *ServerProvider) GetInitIps() []string {
	return s.InitIps
}

// GetMACAddr returns the value of MACAddr.
func (s *ServerProvider) GetMACAddr() OptString {
	return s.MACAddr
}

// GetExtra returns the value of Extra.
func (s *ServerProvider) GetExtra() OptServerProviderExtra {
	return s.Extra
}

// GetProvisionOptions returns the value of ProvisionOptions.
func (s *ServerProvider) GetProvisionOptions() OptServerProviderProvisionOptions {
	return s.ProvisionOptions
}

// SetVendor sets the value of Vendor.
func (s *ServerProvider) SetVendor(val string) {
	s.Vendor = val
}

// SetModel sets the value of Model.
func (s *ServerProvider) SetModel(val string) {
	s.Model = val
}

// SetLocation sets the value of Location.
func (s *ServerProvider) SetLocation(val string) {
	s.Location = val
}

// SetServer sets the value of Server.
func (s *ServerProvider) SetServer(val string) {
	s.Server = val
}

// SetInitIps sets the value of InitIps.
func (s *ServerProvider) SetInitIps(val []string) {
	s.InitIps = val
}

// SetMACAddr sets the value of MACAddr.
func (s *ServerProvider) SetMACAddr(val OptString) {
	s.MACAddr = val
}

// SetExtra sets the value of Extra.
func (s *ServerProvider) SetExtra(val OptServerProviderExtra) {
	s.Extra = val
}

// SetProvisionOptions sets the value of ProvisionOptions.
func (s *ServerProvider) SetProvisionOptions(val OptServerProviderProvisionOptions) {
	s.ProvisionOptions = val
}

type ServerProviderExtra map[string]jx.Raw

func (s *ServerProviderExtra) init() ServerProviderExtra {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ServerProviderProvisionOptions struct {
	AttachesdStorageSize OptFloat64 `json:"attachesd_storage_size"`
	ReservationID        OptString  `json:"reservation_id"`
}

// GetAttachesdStorageSize returns the value of AttachesdStorageSize.
func (s *ServerProviderProvisionOptions) GetAttachesdStorageSize() OptFloat64 {
	return s.AttachesdStorageSize
}

// GetReservationID returns the value of ReservationID.
func (s *ServerProviderProvisionOptions) GetReservationID() OptString {
	return s.ReservationID
}

// SetAttachesdStorageSize sets the value of AttachesdStorageSize.
func (s *ServerProviderProvisionOptions) SetAttachesdStorageSize(val OptFloat64) {
	s.AttachesdStorageSize = val
}

// SetReservationID sets the value of ReservationID.
func (s *ServerProviderProvisionOptions) SetReservationID(val OptString) {
	s.ReservationID = val
}

// Ref: #/components/schemas/ServerSharedFileSystems
type ServerSharedFileSystems struct {
	Mounts OptNilServerSharedFileSystemsMounts `json:"mounts"`
	// An object describing directory identifiers with value {}.
	Directories OptNilServerSharedFileSystemsDirectories `json:"directories"`
}

// GetMounts returns the value of Mounts.
func (s *ServerSharedFileSystems) GetMounts() OptNilServerSharedFileSystemsMounts {
	return s.Mounts
}

// GetDirectories returns the value of Directories.
func (s *ServerSharedFileSystems) GetDirectories() OptNilServerSharedFileSystemsDirectories {
	return s.Directories
}

// SetMounts sets the value of Mounts.
func (s *ServerSharedFileSystems) SetMounts(val OptNilServerSharedFileSystemsMounts) {
	s.Mounts = val
}

// SetDirectories sets the value of Directories.
func (s *ServerSharedFileSystems) SetDirectories(val OptNilServerSharedFileSystemsDirectories) {
	s.Directories = val
}

// An object describing directory identifiers with value {}.
type ServerSharedFileSystemsDirectories map[string]jx.Raw

func (s *ServerSharedFileSystemsDirectories) init() ServerSharedFileSystemsDirectories {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type ServerSharedFileSystemsMounts map[string]ServerSharedFileSystemsMountsItem

func (s *ServerSharedFileSystemsMounts) init() ServerSharedFileSystemsMounts {
	m := *s
	if m == nil {
		m = map[string]ServerSharedFileSystemsMountsItem{}
		*s = m
	}
	return m
}

type ServerSharedFileSystemsMountsItem struct {
	// String describing the server mount type.
	Type string `json:"type"`
	// Comma separated string describing the server mount options.
	Options string `json:"options"`
	// String describing the server mount source.
	Source string `json:"source"`
}

// GetType returns the value of Type.
func (s *ServerSharedFileSystemsMountsItem) GetType() string {
	return s.Type
}

// GetOptions returns the value of Options.
func (s *ServerSharedFileSystemsMountsItem) GetOptions() string {
	return s.Options
}

// GetSource returns the value of Source.
func (s *ServerSharedFileSystemsMountsItem) GetSource() string {
	return s.Source
}

// SetType sets the value of Type.
func (s *ServerSharedFileSystemsMountsItem) SetType(val string) {
	s.Type = val
}

// SetOptions sets the value of Options.
func (s *ServerSharedFileSystemsMountsItem) SetOptions(val string) {
	s.Options = val
}

// SetSource sets the value of Source.
func (s *ServerSharedFileSystemsMountsItem) SetSource(val string) {
	s.Source = val
}

// Specs for a given server.
// Ref: #/components/schemas/ServerSpecs
type ServerSpecs struct {
	CPU      CPUSpec       `json:"cpu"`
	Gpu      GPUSpec       `json:"gpu"`
	Memory   MemorySpec    `json:"memory"`
	Storage  []StorageSpec `json:"storage"`
	Network  []NetworkSpec `json:"network"`
	Features FeaturesSpec  `json:"features"`
}

// GetCPU returns the value of CPU.
func (s *ServerSpecs) GetCPU() CPUSpec {
	return s.CPU
}

// GetGpu returns the value of Gpu.
func (s *ServerSpecs) GetGpu() GPUSpec {
	return s.Gpu
}

// GetMemory returns the value of Memory.
func (s *ServerSpecs) GetMemory() MemorySpec {
	return s.Memory
}

// GetStorage returns the value of Storage.
func (s *ServerSpecs) GetStorage() []StorageSpec {
	return s.Storage
}

// GetNetwork returns the value of Network.
func (s *ServerSpecs) GetNetwork() []NetworkSpec {
	return s.Network
}

// GetFeatures returns the value of Features.
func (s *ServerSpecs) GetFeatures() FeaturesSpec {
	return s.Features
}

// SetCPU sets the value of CPU.
func (s *ServerSpecs) SetCPU(val CPUSpec) {
	s.CPU = val
}

// SetGpu sets the value of Gpu.
func (s *ServerSpecs) SetGpu(val GPUSpec) {
	s.Gpu = val
}

// SetMemory sets the value of Memory.
func (s *ServerSpecs) SetMemory(val MemorySpec) {
	s.Memory = val
}

// SetStorage sets the value of Storage.
func (s *ServerSpecs) SetStorage(val []StorageSpec) {
	s.Storage = val
}

// SetNetwork sets the value of Network.
func (s *ServerSpecs) SetNetwork(val []NetworkSpec) {
	s.Network = val
}

// SetFeatures sets the value of Features.
func (s *ServerSpecs) SetFeatures(val FeaturesSpec) {
	s.Features = val
}

// Merged schema.
// Ref: #/components/schemas/ServerState
type ServerState struct {
	// The current state of the server.
	Current ServerStateCurrent `json:"current"`
	Changed DateTime           `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptServerStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ServerState) GetCurrent() ServerStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ServerState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ServerState) GetError() OptServerStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ServerState) SetCurrent(val ServerStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ServerState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ServerState) SetError(val OptServerStateError) {
	s.Error = val
}

// The current state of the server.
type ServerStateCurrent string

const (
	ServerStateCurrentNew          ServerStateCurrent = "new"
	ServerStateCurrentProvisioning ServerStateCurrent = "provisioning"
	ServerStateCurrentConfiguring  ServerStateCurrent = "configuring"
	ServerStateCurrentLive         ServerStateCurrent = "live"
	ServerStateCurrentDeleting     ServerStateCurrent = "deleting"
	ServerStateCurrentDeleted      ServerStateCurrent = "deleted"
)

// AllValues returns all ServerStateCurrent values.
func (ServerStateCurrent) AllValues() []ServerStateCurrent {
	return []ServerStateCurrent{
		ServerStateCurrentNew,
		ServerStateCurrentProvisioning,
		ServerStateCurrentConfiguring,
		ServerStateCurrentLive,
		ServerStateCurrentDeleting,
		ServerStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ServerStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ServerStateCurrentNew:
		return []byte(s), nil
	case ServerStateCurrentProvisioning:
		return []byte(s), nil
	case ServerStateCurrentConfiguring:
		return []byte(s), nil
	case ServerStateCurrentLive:
		return []byte(s), nil
	case ServerStateCurrentDeleting:
		return []byte(s), nil
	case ServerStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServerStateCurrent) UnmarshalText(data []byte) error {
	switch ServerStateCurrent(data) {
	case ServerStateCurrentNew:
		*s = ServerStateCurrentNew
		return nil
	case ServerStateCurrentProvisioning:
		*s = ServerStateCurrentProvisioning
		return nil
	case ServerStateCurrentConfiguring:
		*s = ServerStateCurrentConfiguring
		return nil
	case ServerStateCurrentLive:
		*s = ServerStateCurrentLive
		return nil
	case ServerStateCurrentDeleting:
		*s = ServerStateCurrentDeleting
		return nil
	case ServerStateCurrentDeleted:
		*s = ServerStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ServerStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ServerStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ServerStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ServerStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ServerStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Statistics about the CPU resources on a server.
// Ref: #/components/schemas/ServerStatsCpu
type ServerStatsCpu struct {
	// The number of CPU's or vCPU's for a given server.
	Cores OptInt `json:"cores"`
	// An array of processor information objects.
	Processors []ServerStatsCpuProcessorsItem `json:"processors"`
	Usage      OptServerStatsCpuUsage         `json:"usage"`
}

// GetCores returns the value of Cores.
func (s *ServerStatsCpu) GetCores() OptInt {
	return s.Cores
}

// GetProcessors returns the value of Processors.
func (s *ServerStatsCpu) GetProcessors() []ServerStatsCpuProcessorsItem {
	return s.Processors
}

// GetUsage returns the value of Usage.
func (s *ServerStatsCpu) GetUsage() OptServerStatsCpuUsage {
	return s.Usage
}

// SetCores sets the value of Cores.
func (s *ServerStatsCpu) SetCores(val OptInt) {
	s.Cores = val
}

// SetProcessors sets the value of Processors.
func (s *ServerStatsCpu) SetProcessors(val []ServerStatsCpuProcessorsItem) {
	s.Processors = val
}

// SetUsage sets the value of Usage.
func (s *ServerStatsCpu) SetUsage(val OptServerStatsCpuUsage) {
	s.Usage = val
}

// Processor information.
type ServerStatsCpuProcessorsItem struct {
	// The model of the processor.
	Model OptString `json:"model"`
	// The speed of the processor.
	Speed OptFloat32 `json:"speed"`
}

// GetModel returns the value of Model.
func (s *ServerStatsCpuProcessorsItem) GetModel() OptString {
	return s.Model
}

// GetSpeed returns the value of Speed.
func (s *ServerStatsCpuProcessorsItem) GetSpeed() OptFloat32 {
	return s.Speed
}

// SetModel sets the value of Model.
func (s *ServerStatsCpuProcessorsItem) SetModel(val OptString) {
	s.Model = val
}

// SetSpeed sets the value of Speed.
func (s *ServerStatsCpuProcessorsItem) SetSpeed(val OptFloat32) {
	s.Speed = val
}

// Ref: #/components/schemas/ServerStatsCpuUsage
type ServerStatsCpuUsage struct {
	User      OptInt `json:"user"`
	Nice      OptInt `json:"nice"`
	System    OptInt `json:"system"`
	Idle      OptInt `json:"idle"`
	Iowait    OptInt `json:"iowait"`
	Irq       OptInt `json:"irq"`
	SoftIrq   OptInt `json:"soft_irq"`
	Steal     OptInt `json:"steal"`
	Guest     OptInt `json:"guest"`
	GuestNice OptInt `json:"guest_nice"`
}

// GetUser returns the value of User.
func (s *ServerStatsCpuUsage) GetUser() OptInt {
	return s.User
}

// GetNice returns the value of Nice.
func (s *ServerStatsCpuUsage) GetNice() OptInt {
	return s.Nice
}

// GetSystem returns the value of System.
func (s *ServerStatsCpuUsage) GetSystem() OptInt {
	return s.System
}

// GetIdle returns the value of Idle.
func (s *ServerStatsCpuUsage) GetIdle() OptInt {
	return s.Idle
}

// GetIowait returns the value of Iowait.
func (s *ServerStatsCpuUsage) GetIowait() OptInt {
	return s.Iowait
}

// GetIrq returns the value of Irq.
func (s *ServerStatsCpuUsage) GetIrq() OptInt {
	return s.Irq
}

// GetSoftIrq returns the value of SoftIrq.
func (s *ServerStatsCpuUsage) GetSoftIrq() OptInt {
	return s.SoftIrq
}

// GetSteal returns the value of Steal.
func (s *ServerStatsCpuUsage) GetSteal() OptInt {
	return s.Steal
}

// GetGuest returns the value of Guest.
func (s *ServerStatsCpuUsage) GetGuest() OptInt {
	return s.Guest
}

// GetGuestNice returns the value of GuestNice.
func (s *ServerStatsCpuUsage) GetGuestNice() OptInt {
	return s.GuestNice
}

// SetUser sets the value of User.
func (s *ServerStatsCpuUsage) SetUser(val OptInt) {
	s.User = val
}

// SetNice sets the value of Nice.
func (s *ServerStatsCpuUsage) SetNice(val OptInt) {
	s.Nice = val
}

// SetSystem sets the value of System.
func (s *ServerStatsCpuUsage) SetSystem(val OptInt) {
	s.System = val
}

// SetIdle sets the value of Idle.
func (s *ServerStatsCpuUsage) SetIdle(val OptInt) {
	s.Idle = val
}

// SetIowait sets the value of Iowait.
func (s *ServerStatsCpuUsage) SetIowait(val OptInt) {
	s.Iowait = val
}

// SetIrq sets the value of Irq.
func (s *ServerStatsCpuUsage) SetIrq(val OptInt) {
	s.Irq = val
}

// SetSoftIrq sets the value of SoftIrq.
func (s *ServerStatsCpuUsage) SetSoftIrq(val OptInt) {
	s.SoftIrq = val
}

// SetSteal sets the value of Steal.
func (s *ServerStatsCpuUsage) SetSteal(val OptInt) {
	s.Steal = val
}

// SetGuest sets the value of Guest.
func (s *ServerStatsCpuUsage) SetGuest(val OptInt) {
	s.Guest = val
}

// SetGuestNice sets the value of GuestNice.
func (s *ServerStatsCpuUsage) SetGuestNice(val OptInt) {
	s.GuestNice = val
}

// Ref: #/components/schemas/ServerStatsCpuUsageTelemetry
type ServerStatsCpuUsageTelemetry struct {
	User      OptFloat32 `json:"user"`
	Nice      OptFloat32 `json:"nice"`
	System    OptFloat32 `json:"system"`
	Idle      OptFloat32 `json:"idle"`
	Iowait    OptFloat32 `json:"iowait"`
	Irq       OptFloat32 `json:"irq"`
	SoftIrq   OptFloat32 `json:"soft_irq"`
	Steal     OptFloat32 `json:"steal"`
	Guest     OptFloat32 `json:"guest"`
	GuestNice OptFloat32 `json:"guest_nice"`
}

// GetUser returns the value of User.
func (s *ServerStatsCpuUsageTelemetry) GetUser() OptFloat32 {
	return s.User
}

// GetNice returns the value of Nice.
func (s *ServerStatsCpuUsageTelemetry) GetNice() OptFloat32 {
	return s.Nice
}

// GetSystem returns the value of System.
func (s *ServerStatsCpuUsageTelemetry) GetSystem() OptFloat32 {
	return s.System
}

// GetIdle returns the value of Idle.
func (s *ServerStatsCpuUsageTelemetry) GetIdle() OptFloat32 {
	return s.Idle
}

// GetIowait returns the value of Iowait.
func (s *ServerStatsCpuUsageTelemetry) GetIowait() OptFloat32 {
	return s.Iowait
}

// GetIrq returns the value of Irq.
func (s *ServerStatsCpuUsageTelemetry) GetIrq() OptFloat32 {
	return s.Irq
}

// GetSoftIrq returns the value of SoftIrq.
func (s *ServerStatsCpuUsageTelemetry) GetSoftIrq() OptFloat32 {
	return s.SoftIrq
}

// GetSteal returns the value of Steal.
func (s *ServerStatsCpuUsageTelemetry) GetSteal() OptFloat32 {
	return s.Steal
}

// GetGuest returns the value of Guest.
func (s *ServerStatsCpuUsageTelemetry) GetGuest() OptFloat32 {
	return s.Guest
}

// GetGuestNice returns the value of GuestNice.
func (s *ServerStatsCpuUsageTelemetry) GetGuestNice() OptFloat32 {
	return s.GuestNice
}

// SetUser sets the value of User.
func (s *ServerStatsCpuUsageTelemetry) SetUser(val OptFloat32) {
	s.User = val
}

// SetNice sets the value of Nice.
func (s *ServerStatsCpuUsageTelemetry) SetNice(val OptFloat32) {
	s.Nice = val
}

// SetSystem sets the value of System.
func (s *ServerStatsCpuUsageTelemetry) SetSystem(val OptFloat32) {
	s.System = val
}

// SetIdle sets the value of Idle.
func (s *ServerStatsCpuUsageTelemetry) SetIdle(val OptFloat32) {
	s.Idle = val
}

// SetIowait sets the value of Iowait.
func (s *ServerStatsCpuUsageTelemetry) SetIowait(val OptFloat32) {
	s.Iowait = val
}

// SetIrq sets the value of Irq.
func (s *ServerStatsCpuUsageTelemetry) SetIrq(val OptFloat32) {
	s.Irq = val
}

// SetSoftIrq sets the value of SoftIrq.
func (s *ServerStatsCpuUsageTelemetry) SetSoftIrq(val OptFloat32) {
	s.SoftIrq = val
}

// SetSteal sets the value of Steal.
func (s *ServerStatsCpuUsageTelemetry) SetSteal(val OptFloat32) {
	s.Steal = val
}

// SetGuest sets the value of Guest.
func (s *ServerStatsCpuUsageTelemetry) SetGuest(val OptFloat32) {
	s.Guest = val
}

// SetGuestNice sets the value of GuestNice.
func (s *ServerStatsCpuUsageTelemetry) SetGuestNice(val OptFloat32) {
	s.GuestNice = val
}

// Statistics about the current load on the server.
// Ref: #/components/schemas/ServerStatsLoad
type ServerStatsLoad struct {
	// The 1 minute load average.
	Avg1m float32 `json:"avg1m"`
	// The 5 minute load average.
	Avg5m float32 `json:"avg5m"`
	// The 15 minute load average.
	Avg15m float32 `json:"avg15m"`
}

// GetAvg1m returns the value of Avg1m.
func (s *ServerStatsLoad) GetAvg1m() float32 {
	return s.Avg1m
}

// GetAvg5m returns the value of Avg5m.
func (s *ServerStatsLoad) GetAvg5m() float32 {
	return s.Avg5m
}

// GetAvg15m returns the value of Avg15m.
func (s *ServerStatsLoad) GetAvg15m() float32 {
	return s.Avg15m
}

// SetAvg1m sets the value of Avg1m.
func (s *ServerStatsLoad) SetAvg1m(val float32) {
	s.Avg1m = val
}

// SetAvg5m sets the value of Avg5m.
func (s *ServerStatsLoad) SetAvg5m(val float32) {
	s.Avg5m = val
}

// SetAvg15m sets the value of Avg15m.
func (s *ServerStatsLoad) SetAvg15m(val float32) {
	s.Avg15m = val
}

// Statistics about the networks on a given server.
// Ref: #/components/schemas/ServerStatsNetwork
type ServerStatsNetwork struct {
	// Network interfaces for a given server.
	Interfaces OptServerStatsNetworkInterfaces `json:"interfaces"`
	// The public IPv4 address used to connect to this server.
	ExternalIpv4 string `json:"external_ipv4"`
	// The public IPv6 address used to connect to this server.
	ExternalIpv6 string `json:"external_ipv6"`
}

// GetInterfaces returns the value of Interfaces.
func (s *ServerStatsNetwork) GetInterfaces() OptServerStatsNetworkInterfaces {
	return s.Interfaces
}

// GetExternalIpv4 returns the value of ExternalIpv4.
func (s *ServerStatsNetwork) GetExternalIpv4() string {
	return s.ExternalIpv4
}

// GetExternalIpv6 returns the value of ExternalIpv6.
func (s *ServerStatsNetwork) GetExternalIpv6() string {
	return s.ExternalIpv6
}

// SetInterfaces sets the value of Interfaces.
func (s *ServerStatsNetwork) SetInterfaces(val OptServerStatsNetworkInterfaces) {
	s.Interfaces = val
}

// SetExternalIpv4 sets the value of ExternalIpv4.
func (s *ServerStatsNetwork) SetExternalIpv4(val string) {
	s.ExternalIpv4 = val
}

// SetExternalIpv6 sets the value of ExternalIpv6.
func (s *ServerStatsNetwork) SetExternalIpv6(val string) {
	s.ExternalIpv6 = val
}

// Network interfaces for a given server.
type ServerStatsNetworkInterfaces map[string]ServerStatsNetworkInterfacesItem

func (s *ServerStatsNetworkInterfaces) init() ServerStatsNetworkInterfaces {
	m := *s
	if m == nil {
		m = map[string]ServerStatsNetworkInterfacesItem{}
		*s = m
	}
	return m
}

// Network interface.
type ServerStatsNetworkInterfacesItem struct {
	// The interface name.
	Interface OptString `json:"interface"`
	// Flags for the given interface.
	Flags OptString `json:"flags"`
	// The maximum transmission unit for the interface.
	Mtu OptInt `json:"mtu"`
	// The mac address for the interface.
	MACAddr OptString `json:"mac_addr"`
	// An array of IP addresses associated with the interface.
	Addrs OptNilStringArray `json:"addrs"`
}

// GetInterface returns the value of Interface.
func (s *ServerStatsNetworkInterfacesItem) GetInterface() OptString {
	return s.Interface
}

// GetFlags returns the value of Flags.
func (s *ServerStatsNetworkInterfacesItem) GetFlags() OptString {
	return s.Flags
}

// GetMtu returns the value of Mtu.
func (s *ServerStatsNetworkInterfacesItem) GetMtu() OptInt {
	return s.Mtu
}

// GetMACAddr returns the value of MACAddr.
func (s *ServerStatsNetworkInterfacesItem) GetMACAddr() OptString {
	return s.MACAddr
}

// GetAddrs returns the value of Addrs.
func (s *ServerStatsNetworkInterfacesItem) GetAddrs() OptNilStringArray {
	return s.Addrs
}

// SetInterface sets the value of Interface.
func (s *ServerStatsNetworkInterfacesItem) SetInterface(val OptString) {
	s.Interface = val
}

// SetFlags sets the value of Flags.
func (s *ServerStatsNetworkInterfacesItem) SetFlags(val OptString) {
	s.Flags = val
}

// SetMtu sets the value of Mtu.
func (s *ServerStatsNetworkInterfacesItem) SetMtu(val OptInt) {
	s.Mtu = val
}

// SetMACAddr sets the value of MACAddr.
func (s *ServerStatsNetworkInterfacesItem) SetMACAddr(val OptString) {
	s.MACAddr = val
}

// SetAddrs sets the value of Addrs.
func (s *ServerStatsNetworkInterfacesItem) SetAddrs(val OptNilStringArray) {
	s.Addrs = val
}

// Statistics about the operating system installed on the server (CycleOS).
// Ref: #/components/schemas/ServerStatsOS
type ServerStatsOS struct {
	// The currently installed release version of the OS.
	Release OptString `json:"release"`
	// The currently installed kernel version.
	Kernel OptString `json:"kernel"`
	// The hostname as set by the given server's OS.
	Hostname OptString `json:"hostname"`
}

// GetRelease returns the value of Release.
func (s *ServerStatsOS) GetRelease() OptString {
	return s.Release
}

// GetKernel returns the value of Kernel.
func (s *ServerStatsOS) GetKernel() OptString {
	return s.Kernel
}

// GetHostname returns the value of Hostname.
func (s *ServerStatsOS) GetHostname() OptString {
	return s.Hostname
}

// SetRelease sets the value of Release.
func (s *ServerStatsOS) SetRelease(val OptString) {
	s.Release = val
}

// SetKernel sets the value of Kernel.
func (s *ServerStatsOS) SetKernel(val OptString) {
	s.Kernel = val
}

// SetHostname sets the value of Hostname.
func (s *ServerStatsOS) SetHostname(val OptString) {
	s.Hostname = val
}

// Statistics about the RAM on a given server.
// Ref: #/components/schemas/ServerStatsRam
type ServerStatsRam struct {
	// The available RAM on the server.
	Available int `json:"available"`
	// The free RAM on the server.
	Free int `json:"free"`
	// The total RAM on the server.
	Total int `json:"total"`
}

// GetAvailable returns the value of Available.
func (s *ServerStatsRam) GetAvailable() int {
	return s.Available
}

// GetFree returns the value of Free.
func (s *ServerStatsRam) GetFree() int {
	return s.Free
}

// GetTotal returns the value of Total.
func (s *ServerStatsRam) GetTotal() int {
	return s.Total
}

// SetAvailable sets the value of Available.
func (s *ServerStatsRam) SetAvailable(val int) {
	s.Available = val
}

// SetFree sets the value of Free.
func (s *ServerStatsRam) SetFree(val int) {
	s.Free = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsRam) SetTotal(val int) {
	s.Total = val
}

// Statistics about the RAM on a given server.
// Ref: #/components/schemas/ServerStatsRamTelemetry
type ServerStatsRamTelemetry struct {
	// The available RAM on the server.
	Available float32 `json:"available"`
	// The free RAM on the server.
	Free float32 `json:"free"`
	// The total RAM on the server.
	Total float32 `json:"total"`
}

// GetAvailable returns the value of Available.
func (s *ServerStatsRamTelemetry) GetAvailable() float32 {
	return s.Available
}

// GetFree returns the value of Free.
func (s *ServerStatsRamTelemetry) GetFree() float32 {
	return s.Free
}

// GetTotal returns the value of Total.
func (s *ServerStatsRamTelemetry) GetTotal() float32 {
	return s.Total
}

// SetAvailable sets the value of Available.
func (s *ServerStatsRamTelemetry) SetAvailable(val float32) {
	s.Available = val
}

// SetFree sets the value of Free.
func (s *ServerStatsRamTelemetry) SetFree(val float32) {
	s.Free = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsRamTelemetry) SetTotal(val float32) {
	s.Total = val
}

// Statistics about storage for a given server.
// Ref: #/components/schemas/ServerStatsStorage
type ServerStatsStorage struct {
	// An array of volume group objects.
	VolumeGroups ServerStatsStorageVolumeGroups `json:"volume_groups"`
	// Records that show information about mounted filesystems where the key is the path to the mount.
	Mounts ServerStatsStorageMounts `json:"mounts"`
}

// GetVolumeGroups returns the value of VolumeGroups.
func (s *ServerStatsStorage) GetVolumeGroups() ServerStatsStorageVolumeGroups {
	return s.VolumeGroups
}

// GetMounts returns the value of Mounts.
func (s *ServerStatsStorage) GetMounts() ServerStatsStorageMounts {
	return s.Mounts
}

// SetVolumeGroups sets the value of VolumeGroups.
func (s *ServerStatsStorage) SetVolumeGroups(val ServerStatsStorageVolumeGroups) {
	s.VolumeGroups = val
}

// SetMounts sets the value of Mounts.
func (s *ServerStatsStorage) SetMounts(val ServerStatsStorageMounts) {
	s.Mounts = val
}

// Records that show information about mounted filesystems where the key is the path to the mount.
type ServerStatsStorageMounts map[string]ServerStatsStorageMountsItem

func (s *ServerStatsStorageMounts) init() ServerStatsStorageMounts {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageMountsItem{}
		*s = m
	}
	return m
}

// Mounted filesystem information.
type ServerStatsStorageMountsItem struct {
	// The device assocaited with the mount.
	Device OptString `json:"device"`
	// The type of filesystem in use by the mount.
	Type string `json:"type"`
	// The path the mount is associated with.
	Mountpoint OptString `json:"mountpoint"`
	// The total amount of storage in KB available at this mount.
	Total int `json:"total"`
	// The amount of uninitialized storage in KB.
	Free int `json:"free"`
	// The amount of storage being used in KB.
	Used int `json:"used"`
}

// GetDevice returns the value of Device.
func (s *ServerStatsStorageMountsItem) GetDevice() OptString {
	return s.Device
}

// GetType returns the value of Type.
func (s *ServerStatsStorageMountsItem) GetType() string {
	return s.Type
}

// GetMountpoint returns the value of Mountpoint.
func (s *ServerStatsStorageMountsItem) GetMountpoint() OptString {
	return s.Mountpoint
}

// GetTotal returns the value of Total.
func (s *ServerStatsStorageMountsItem) GetTotal() int {
	return s.Total
}

// GetFree returns the value of Free.
func (s *ServerStatsStorageMountsItem) GetFree() int {
	return s.Free
}

// GetUsed returns the value of Used.
func (s *ServerStatsStorageMountsItem) GetUsed() int {
	return s.Used
}

// SetDevice sets the value of Device.
func (s *ServerStatsStorageMountsItem) SetDevice(val OptString) {
	s.Device = val
}

// SetType sets the value of Type.
func (s *ServerStatsStorageMountsItem) SetType(val string) {
	s.Type = val
}

// SetMountpoint sets the value of Mountpoint.
func (s *ServerStatsStorageMountsItem) SetMountpoint(val OptString) {
	s.Mountpoint = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsStorageMountsItem) SetTotal(val int) {
	s.Total = val
}

// SetFree sets the value of Free.
func (s *ServerStatsStorageMountsItem) SetFree(val int) {
	s.Free = val
}

// SetUsed sets the value of Used.
func (s *ServerStatsStorageMountsItem) SetUsed(val int) {
	s.Used = val
}

// An array of volume group objects.
type ServerStatsStorageVolumeGroups map[string]ServerStatsStorageVolumeGroupsItem

func (s *ServerStatsStorageVolumeGroups) init() ServerStatsStorageVolumeGroups {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageVolumeGroupsItem{}
		*s = m
	}
	return m
}

// Volume group.
type ServerStatsStorageVolumeGroupsItem struct {
	// A name for the volume group.
	Name string `json:"name"`
	// A number representing the aggregate group volume size in megabytes.
	Size int `json:"size"`
	// The actual volumes.
	Volumes ServerStatsStorageVolumeGroupsItemVolumes `json:"volumes"`
}

// GetName returns the value of Name.
func (s *ServerStatsStorageVolumeGroupsItem) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *ServerStatsStorageVolumeGroupsItem) GetSize() int {
	return s.Size
}

// GetVolumes returns the value of Volumes.
func (s *ServerStatsStorageVolumeGroupsItem) GetVolumes() ServerStatsStorageVolumeGroupsItemVolumes {
	return s.Volumes
}

// SetName sets the value of Name.
func (s *ServerStatsStorageVolumeGroupsItem) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *ServerStatsStorageVolumeGroupsItem) SetSize(val int) {
	s.Size = val
}

// SetVolumes sets the value of Volumes.
func (s *ServerStatsStorageVolumeGroupsItem) SetVolumes(val ServerStatsStorageVolumeGroupsItemVolumes) {
	s.Volumes = val
}

// The actual volumes.
type ServerStatsStorageVolumeGroupsItemVolumes map[string]ServerStatsStorageVolumeGroupsItemVolumesItem

func (s *ServerStatsStorageVolumeGroupsItemVolumes) init() ServerStatsStorageVolumeGroupsItemVolumes {
	m := *s
	if m == nil {
		m = map[string]ServerStatsStorageVolumeGroupsItemVolumesItem{}
		*s = m
	}
	return m
}

type ServerStatsStorageVolumeGroupsItemVolumesItem struct {
	// The name of the volume.
	Name string `json:"name"`
	// The size in megabytes of the volume.
	Size int `json:"size"`
	// The percent of the volumes size being used by data.
	DataPercent int `json:"data_percent"`
	// The percent of the volumes size being used by meta data.
	MetaPercent int `json:"meta_percent"`
	// The name of the volume pool this volume is associated with.
	Pool string `json:"pool"`
}

// GetName returns the value of Name.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetName() string {
	return s.Name
}

// GetSize returns the value of Size.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetSize() int {
	return s.Size
}

// GetDataPercent returns the value of DataPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetDataPercent() int {
	return s.DataPercent
}

// GetMetaPercent returns the value of MetaPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetMetaPercent() int {
	return s.MetaPercent
}

// GetPool returns the value of Pool.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) GetPool() string {
	return s.Pool
}

// SetName sets the value of Name.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetName(val string) {
	s.Name = val
}

// SetSize sets the value of Size.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetSize(val int) {
	s.Size = val
}

// SetDataPercent sets the value of DataPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetDataPercent(val int) {
	s.DataPercent = val
}

// SetMetaPercent sets the value of MetaPercent.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetMetaPercent(val int) {
	s.MetaPercent = val
}

// SetPool sets the value of Pool.
func (s *ServerStatsStorageVolumeGroupsItemVolumesItem) SetPool(val string) {
	s.Pool = val
}

// Statistics about a given servers telemetery data.
// Ref: #/components/schemas/ServerStatsTelemetry
type ServerStatsTelemetry struct {
	Time     DateTime                        `json:"time"`
	CPUUsage OptServerStatsCpuUsageTelemetry `json:"cpu_usage"`
	Load     ServerStatsLoad                 `json:"load"`
	RAM      ServerStatsRamTelemetry         `json:"ram"`
	// Telemetry data for the base volume of a given server.
	StorageBase ServerStatsTelemetryStorageBase `json:"storage_base"`
	// User data storage across all devices.
	StoragePool ServerStatsTelemetryStoragePool `json:"storage_pool"`
}

// GetTime returns the value of Time.
func (s *ServerStatsTelemetry) GetTime() DateTime {
	return s.Time
}

// GetCPUUsage returns the value of CPUUsage.
func (s *ServerStatsTelemetry) GetCPUUsage() OptServerStatsCpuUsageTelemetry {
	return s.CPUUsage
}

// GetLoad returns the value of Load.
func (s *ServerStatsTelemetry) GetLoad() ServerStatsLoad {
	return s.Load
}

// GetRAM returns the value of RAM.
func (s *ServerStatsTelemetry) GetRAM() ServerStatsRamTelemetry {
	return s.RAM
}

// GetStorageBase returns the value of StorageBase.
func (s *ServerStatsTelemetry) GetStorageBase() ServerStatsTelemetryStorageBase {
	return s.StorageBase
}

// GetStoragePool returns the value of StoragePool.
func (s *ServerStatsTelemetry) GetStoragePool() ServerStatsTelemetryStoragePool {
	return s.StoragePool
}

// SetTime sets the value of Time.
func (s *ServerStatsTelemetry) SetTime(val DateTime) {
	s.Time = val
}

// SetCPUUsage sets the value of CPUUsage.
func (s *ServerStatsTelemetry) SetCPUUsage(val OptServerStatsCpuUsageTelemetry) {
	s.CPUUsage = val
}

// SetLoad sets the value of Load.
func (s *ServerStatsTelemetry) SetLoad(val ServerStatsLoad) {
	s.Load = val
}

// SetRAM sets the value of RAM.
func (s *ServerStatsTelemetry) SetRAM(val ServerStatsRamTelemetry) {
	s.RAM = val
}

// SetStorageBase sets the value of StorageBase.
func (s *ServerStatsTelemetry) SetStorageBase(val ServerStatsTelemetryStorageBase) {
	s.StorageBase = val
}

// SetStoragePool sets the value of StoragePool.
func (s *ServerStatsTelemetry) SetStoragePool(val ServerStatsTelemetryStoragePool) {
	s.StoragePool = val
}

// Telemetry data for the base volume of a given server.
type ServerStatsTelemetryStorageBase struct {
	// The amount of storage currently used in the base volume.
	Used int `json:"used"`
	// The amount of free space on the base volume.
	Free int `json:"free"`
	// The total amount of space on the base volume.
	Total int `json:"total"`
}

// GetUsed returns the value of Used.
func (s *ServerStatsTelemetryStorageBase) GetUsed() int {
	return s.Used
}

// GetFree returns the value of Free.
func (s *ServerStatsTelemetryStorageBase) GetFree() int {
	return s.Free
}

// GetTotal returns the value of Total.
func (s *ServerStatsTelemetryStorageBase) GetTotal() int {
	return s.Total
}

// SetUsed sets the value of Used.
func (s *ServerStatsTelemetryStorageBase) SetUsed(val int) {
	s.Used = val
}

// SetFree sets the value of Free.
func (s *ServerStatsTelemetryStorageBase) SetFree(val int) {
	s.Free = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsTelemetryStorageBase) SetTotal(val int) {
	s.Total = val
}

// User data storage across all devices.
type ServerStatsTelemetryStoragePool struct {
	// The percentage of storage used by user data.
	DataPercent float64 `json:"data_percent"`
	// The percentage of storage used by the file allocation stables, etc.
	MetaPercent float64 `json:"meta_percent"`
	// The total amount of storage available.
	Total float64 `json:"total"`
}

// GetDataPercent returns the value of DataPercent.
func (s *ServerStatsTelemetryStoragePool) GetDataPercent() float64 {
	return s.DataPercent
}

// GetMetaPercent returns the value of MetaPercent.
func (s *ServerStatsTelemetryStoragePool) GetMetaPercent() float64 {
	return s.MetaPercent
}

// GetTotal returns the value of Total.
func (s *ServerStatsTelemetryStoragePool) GetTotal() float64 {
	return s.Total
}

// SetDataPercent sets the value of DataPercent.
func (s *ServerStatsTelemetryStoragePool) SetDataPercent(val float64) {
	s.DataPercent = val
}

// SetMetaPercent sets the value of MetaPercent.
func (s *ServerStatsTelemetryStoragePool) SetMetaPercent(val float64) {
	s.MetaPercent = val
}

// SetTotal sets the value of Total.
func (s *ServerStatsTelemetryStoragePool) SetTotal(val float64) {
	s.Total = val
}

// Statistics describing the uptime of a given server.
// Ref: #/components/schemas/ServerStatsUptime
type ServerStatsUptime struct {
	// The amount in seconds the server has been up (resets on restart).
	Seconds OptFloat64 `json:"seconds"`
	// CPU idle time.
	CPUIdle OptFloat64 `json:"cpu_idle"`
}

// GetSeconds returns the value of Seconds.
func (s *ServerStatsUptime) GetSeconds() OptFloat64 {
	return s.Seconds
}

// GetCPUIdle returns the value of CPUIdle.
func (s *ServerStatsUptime) GetCPUIdle() OptFloat64 {
	return s.CPUIdle
}

// SetSeconds sets the value of Seconds.
func (s *ServerStatsUptime) SetSeconds(val OptFloat64) {
	s.Seconds = val
}

// SetCPUIdle sets the value of CPUIdle.
func (s *ServerStatsUptime) SetCPUIdle(val OptFloat64) {
	s.CPUIdle = val
}

// Information about the versions of Cycle services on a given server.
// Ref: #/components/schemas/ServerStatsVersions
type ServerStatsVersions struct {
	// A list of records about Cycle services.
	Services ServerStatsVersionsServices `json:"services"`
}

// GetServices returns the value of Services.
func (s *ServerStatsVersions) GetServices() ServerStatsVersionsServices {
	return s.Services
}

// SetServices sets the value of Services.
func (s *ServerStatsVersions) SetServices(val ServerStatsVersionsServices) {
	s.Services = val
}

// A list of records about Cycle services.
type ServerStatsVersionsServices map[string]string

func (s *ServerStatsVersionsServices) init() ServerStatsVersionsServices {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Tags for a given server.
// Ref: #/components/schemas/ServerTags
type ServerTags struct {
	// An array of server tags.
	Data []string `json:"data"`
}

// GetData returns the value of Data.
func (s *ServerTags) GetData() []string {
	return s.Data
}

// SetData sets the value of Data.
func (s *ServerTags) SetData(val []string) {
	s.Data = val
}

// A resource thats associated with a server.
// Ref: #/components/schemas/ServersIncludes
type ServersIncludes map[string]InfraServer

func (s *ServersIncludes) init() ServersIncludes {
	m := *s
	if m == nil {
		m = map[string]InfraServer{}
		*s = m
	}
	return m
}

// Information about billing service.
// Ref: #/components/schemas/Service
type Service struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// Billing service title.
	Title    string             `json:"title"`
	Order    Order              `json:"order"`
	Item     ServiceItem        `json:"item"`
	Discount AssociatedDiscount `json:"discount"`
	Price    BillingAmount      `json:"price"`
	Term     Term               `json:"term"`
	// A collection of timestamps for each event in the billing service's lifetime.
	Events ServiceEvents       `json:"events"`
	State  BillingServiceState `json:"state"`
}

// GetID returns the value of ID.
func (s *Service) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Service) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Service) GetCreator() CreatorScope {
	return s.Creator
}

// GetTitle returns the value of Title.
func (s *Service) GetTitle() string {
	return s.Title
}

// GetOrder returns the value of Order.
func (s *Service) GetOrder() Order {
	return s.Order
}

// GetItem returns the value of Item.
func (s *Service) GetItem() ServiceItem {
	return s.Item
}

// GetDiscount returns the value of Discount.
func (s *Service) GetDiscount() AssociatedDiscount {
	return s.Discount
}

// GetPrice returns the value of Price.
func (s *Service) GetPrice() BillingAmount {
	return s.Price
}

// GetTerm returns the value of Term.
func (s *Service) GetTerm() Term {
	return s.Term
}

// GetEvents returns the value of Events.
func (s *Service) GetEvents() ServiceEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *Service) GetState() BillingServiceState {
	return s.State
}

// SetID sets the value of ID.
func (s *Service) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Service) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Service) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetTitle sets the value of Title.
func (s *Service) SetTitle(val string) {
	s.Title = val
}

// SetOrder sets the value of Order.
func (s *Service) SetOrder(val Order) {
	s.Order = val
}

// SetItem sets the value of Item.
func (s *Service) SetItem(val ServiceItem) {
	s.Item = val
}

// SetDiscount sets the value of Discount.
func (s *Service) SetDiscount(val AssociatedDiscount) {
	s.Discount = val
}

// SetPrice sets the value of Price.
func (s *Service) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetTerm sets the value of Term.
func (s *Service) SetTerm(val Term) {
	s.Term = val
}

// SetEvents sets the value of Events.
func (s *Service) SetEvents(val ServiceEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *Service) SetState(val BillingServiceState) {
	s.State = val
}

// Identifier of a service Container within an Environment.
// Ref: #/components/schemas/ServiceContainerIdentifier
type ServiceContainerIdentifier string

const (
	ServiceContainerIdentifierDiscovery    ServiceContainerIdentifier = "discovery"
	ServiceContainerIdentifierVpn          ServiceContainerIdentifier = "vpn"
	ServiceContainerIdentifierLoadbalancer ServiceContainerIdentifier = "loadbalancer"
	ServiceContainerIdentifierScheduler    ServiceContainerIdentifier = "scheduler"
)

// AllValues returns all ServiceContainerIdentifier values.
func (ServiceContainerIdentifier) AllValues() []ServiceContainerIdentifier {
	return []ServiceContainerIdentifier{
		ServiceContainerIdentifierDiscovery,
		ServiceContainerIdentifierVpn,
		ServiceContainerIdentifierLoadbalancer,
		ServiceContainerIdentifierScheduler,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ServiceContainerIdentifier) MarshalText() ([]byte, error) {
	switch s {
	case ServiceContainerIdentifierDiscovery:
		return []byte(s), nil
	case ServiceContainerIdentifierVpn:
		return []byte(s), nil
	case ServiceContainerIdentifierLoadbalancer:
		return []byte(s), nil
	case ServiceContainerIdentifierScheduler:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ServiceContainerIdentifier) UnmarshalText(data []byte) error {
	switch ServiceContainerIdentifier(data) {
	case ServiceContainerIdentifierDiscovery:
		*s = ServiceContainerIdentifierDiscovery
		return nil
	case ServiceContainerIdentifierVpn:
		*s = ServiceContainerIdentifierVpn
		return nil
	case ServiceContainerIdentifierLoadbalancer:
		*s = ServiceContainerIdentifierLoadbalancer
		return nil
	case ServiceContainerIdentifierScheduler:
		*s = ServiceContainerIdentifierScheduler
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A collection of timestamps for each event in the billing service's lifetime.
type ServiceEvents struct {
	Created    DateTime `json:"created"`
	Updated    DateTime `json:"updated"`
	Deleted    DateTime `json:"deleted"`
	LastBilled DateTime `json:"last_billed"`
}

// GetCreated returns the value of Created.
func (s *ServiceEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ServiceEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ServiceEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastBilled returns the value of LastBilled.
func (s *ServiceEvents) GetLastBilled() DateTime {
	return s.LastBilled
}

// SetCreated sets the value of Created.
func (s *ServiceEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ServiceEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ServiceEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastBilled sets the value of LastBilled.
func (s *ServiceEvents) SetLastBilled(val DateTime) {
	s.LastBilled = val
}

// Information for an item's plan.
// Ref: #/components/schemas/ServiceItem
type ServiceItem struct {
	// Information about the support component of the billing item.
	Support OptServiceItemSupport `json:"support"`
	// Information about the tier component of the billing item.
	Tier OptServiceItemTier `json:"tier"`
}

// GetSupport returns the value of Support.
func (s *ServiceItem) GetSupport() OptServiceItemSupport {
	return s.Support
}

// GetTier returns the value of Tier.
func (s *ServiceItem) GetTier() OptServiceItemTier {
	return s.Tier
}

// SetSupport sets the value of Support.
func (s *ServiceItem) SetSupport(val OptServiceItemSupport) {
	s.Support = val
}

// SetTier sets the value of Tier.
func (s *ServiceItem) SetTier(val OptServiceItemTier) {
	s.Tier = val
}

// Information about the support component of the billing item.
type ServiceItemSupport struct {
	ID ID `json:"id"`
	// The support contract name.
	Name string `json:"name"`
	// The price of the support contract (monthly).
	Price int `json:"price"`
}

// GetID returns the value of ID.
func (s *ServiceItemSupport) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ServiceItemSupport) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *ServiceItemSupport) GetPrice() int {
	return s.Price
}

// SetID sets the value of ID.
func (s *ServiceItemSupport) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ServiceItemSupport) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *ServiceItemSupport) SetPrice(val int) {
	s.Price = val
}

// Information about the tier component of the billing item.
type ServiceItemTier struct {
	ID ID `json:"id"`
	// The support contract name.
	Name  string        `json:"name"`
	Price BillingAmount `json:"price"`
}

// GetID returns the value of ID.
func (s *ServiceItemTier) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ServiceItemTier) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *ServiceItemTier) GetPrice() BillingAmount {
	return s.Price
}

// SetID sets the value of ID.
func (s *ServiceItemTier) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ServiceItemTier) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *ServiceItemTier) SetPrice(val BillingAmount) {
	s.Price = val
}

// Settings for the sleep step for a pipeline.
// Ref: #/components/schemas/SleepStep
type SleepStep struct {
	// An identifier for the step.
	Identifier OptString           `json:"identifier"`
	Options    OptSleepStepOptions `json:"options"`
	Details    SleepStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *SleepStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *SleepStep) GetOptions() OptSleepStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *SleepStep) GetDetails() SleepStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *SleepStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *SleepStep) SetOptions(val OptSleepStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *SleepStep) SetDetails(val SleepStepDetails) {
	s.Details = val
}

// The action that the step takes.
type SleepStepAction string

const (
	SleepStepActionSleep SleepStepAction = "sleep"
)

// AllValues returns all SleepStepAction values.
func (SleepStepAction) AllValues() []SleepStepAction {
	return []SleepStepAction{
		SleepStepActionSleep,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SleepStepAction) MarshalText() ([]byte, error) {
	switch s {
	case SleepStepActionSleep:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SleepStepAction) UnmarshalText(data []byte) error {
	switch SleepStepAction(data) {
	case SleepStepActionSleep:
		*s = SleepStepActionSleep
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SleepStepDetails struct {
	Duration OptDuration `json:"duration"`
}

// GetDuration returns the value of Duration.
func (s *SleepStepDetails) GetDuration() OptDuration {
	return s.Duration
}

// SetDuration sets the value of Duration.
func (s *SleepStepDetails) SetDuration(val OptDuration) {
	s.Duration = val
}

type SleepStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *SleepStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *SleepStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A resource associate with an image source.
// Ref: #/components/schemas/SourceIncludes
type SourceIncludes struct {
	Creators                OptCreatorInclude       `json:"creators"`
	Integrations            OptIntegrationsIncludes `json:"integrations"`
	IntegrationsIdentifiers OptIdentifierIncludes   `json:"integrations:identifiers"`
}

// GetCreators returns the value of Creators.
func (s *SourceIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// GetIntegrations returns the value of Integrations.
func (s *SourceIncludes) GetIntegrations() OptIntegrationsIncludes {
	return s.Integrations
}

// GetIntegrationsIdentifiers returns the value of IntegrationsIdentifiers.
func (s *SourceIncludes) GetIntegrationsIdentifiers() OptIdentifierIncludes {
	return s.IntegrationsIdentifiers
}

// SetCreators sets the value of Creators.
func (s *SourceIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// SetIntegrations sets the value of Integrations.
func (s *SourceIncludes) SetIntegrations(val OptIntegrationsIncludes) {
	s.Integrations = val
}

// SetIntegrationsIdentifiers sets the value of IntegrationsIdentifiers.
func (s *SourceIncludes) SetIntegrationsIdentifiers(val OptIdentifierIncludes) {
	s.IntegrationsIdentifiers = val
}

// Stacks are a way to orchestrate multiple containers atomically and automatically.
// Ref: #/components/schemas/Stack
type Stack struct {
	ID         ID         `json:"id"`
	Identifier Identifier `json:"identifier"`
	// A user defined name for the stack resource.
	Name    string      `json:"name"`
	HubID   HubID       `json:"hub_id"`
	Creator UserScope   `json:"creator"`
	Source  StackSource `json:"source"`
	State   StackState  `json:"state"`
	// A map of default variable values used when building this stack. A variable can be added anywhere
	// in a stack using the format `{{var}}` where `var` would be a key in this map.
	Variables OptStackVariables `json:"variables"`
	// A collection of timestamps for each event in the Stacks lifetime.
	Events StackEvents  `json:"events"`
	Meta   OptStackMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *Stack) GetID() ID {
	return s.ID
}

// GetIdentifier returns the value of Identifier.
func (s *Stack) GetIdentifier() Identifier {
	return s.Identifier
}

// GetName returns the value of Name.
func (s *Stack) GetName() string {
	return s.Name
}

// GetHubID returns the value of HubID.
func (s *Stack) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Stack) GetCreator() UserScope {
	return s.Creator
}

// GetSource returns the value of Source.
func (s *Stack) GetSource() StackSource {
	return s.Source
}

// GetState returns the value of State.
func (s *Stack) GetState() StackState {
	return s.State
}

// GetVariables returns the value of Variables.
func (s *Stack) GetVariables() OptStackVariables {
	return s.Variables
}

// GetEvents returns the value of Events.
func (s *Stack) GetEvents() StackEvents {
	return s.Events
}

// GetMeta returns the value of Meta.
func (s *Stack) GetMeta() OptStackMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *Stack) SetID(val ID) {
	s.ID = val
}

// SetIdentifier sets the value of Identifier.
func (s *Stack) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetName sets the value of Name.
func (s *Stack) SetName(val string) {
	s.Name = val
}

// SetHubID sets the value of HubID.
func (s *Stack) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Stack) SetCreator(val UserScope) {
	s.Creator = val
}

// SetSource sets the value of Source.
func (s *Stack) SetSource(val StackSource) {
	s.Source = val
}

// SetState sets the value of State.
func (s *Stack) SetState(val StackState) {
	s.State = val
}

// SetVariables sets the value of Variables.
func (s *Stack) SetVariables(val OptStackVariables) {
	s.Variables = val
}

// SetEvents sets the value of Events.
func (s *Stack) SetEvents(val StackEvents) {
	s.Events = val
}

// SetMeta sets the value of Meta.
func (s *Stack) SetMeta(val OptStackMeta) {
	s.Meta = val
}

// A stack build resource.
// Ref: #/components/schemas/StackBuild
type StackBuild struct {
	ID    ID    `json:"id"`
	HubID HubID `json:"hub_id"`
	// An identifier for the stack related to this build.
	StackID string               `json:"stack_id"`
	Spec    OptNilStackBuildSpec `json:"spec"`
	// Information about the stack build.
	About        StackBuildAboutDetails        `json:"about"`
	Instructions StackBuildInstructionsDetails `json:"instructions"`
	// A collection of timestamps for each event in the stack build's lifetime.
	Events StackBuildEvents  `json:"events"`
	State  StackBuildState   `json:"state"`
	Meta   OptStackBuildMeta `json:"meta"`
}

// GetID returns the value of ID.
func (s *StackBuild) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *StackBuild) GetHubID() HubID {
	return s.HubID
}

// GetStackID returns the value of StackID.
func (s *StackBuild) GetStackID() string {
	return s.StackID
}

// GetSpec returns the value of Spec.
func (s *StackBuild) GetSpec() OptNilStackBuildSpec {
	return s.Spec
}

// GetAbout returns the value of About.
func (s *StackBuild) GetAbout() StackBuildAboutDetails {
	return s.About
}

// GetInstructions returns the value of Instructions.
func (s *StackBuild) GetInstructions() StackBuildInstructionsDetails {
	return s.Instructions
}

// GetEvents returns the value of Events.
func (s *StackBuild) GetEvents() StackBuildEvents {
	return s.Events
}

// GetState returns the value of State.
func (s *StackBuild) GetState() StackBuildState {
	return s.State
}

// GetMeta returns the value of Meta.
func (s *StackBuild) GetMeta() OptStackBuildMeta {
	return s.Meta
}

// SetID sets the value of ID.
func (s *StackBuild) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *StackBuild) SetHubID(val HubID) {
	s.HubID = val
}

// SetStackID sets the value of StackID.
func (s *StackBuild) SetStackID(val string) {
	s.StackID = val
}

// SetSpec sets the value of Spec.
func (s *StackBuild) SetSpec(val OptNilStackBuildSpec) {
	s.Spec = val
}

// SetAbout sets the value of About.
func (s *StackBuild) SetAbout(val StackBuildAboutDetails) {
	s.About = val
}

// SetInstructions sets the value of Instructions.
func (s *StackBuild) SetInstructions(val StackBuildInstructionsDetails) {
	s.Instructions = val
}

// SetEvents sets the value of Events.
func (s *StackBuild) SetEvents(val StackBuildEvents) {
	s.Events = val
}

// SetState sets the value of State.
func (s *StackBuild) SetState(val StackBuildState) {
	s.State = val
}

// SetMeta sets the value of Meta.
func (s *StackBuild) SetMeta(val OptStackBuildMeta) {
	s.Meta = val
}

// Information about the stack build.
// Ref: #/components/schemas/StackBuildAbout
type StackBuildAbout struct {
	// A user defined version of the build.
	Version string `json:"version"`
	// A user defined description for the build.
	Description string            `json:"description"`
	GitCommit   OptStackGitCommit `json:"git_commit"`
}

// GetVersion returns the value of Version.
func (s *StackBuildAbout) GetVersion() string {
	return s.Version
}

// GetDescription returns the value of Description.
func (s *StackBuildAbout) GetDescription() string {
	return s.Description
}

// GetGitCommit returns the value of GitCommit.
func (s *StackBuildAbout) GetGitCommit() OptStackGitCommit {
	return s.GitCommit
}

// SetVersion sets the value of Version.
func (s *StackBuildAbout) SetVersion(val string) {
	s.Version = val
}

// SetDescription sets the value of Description.
func (s *StackBuildAbout) SetDescription(val string) {
	s.Description = val
}

// SetGitCommit sets the value of GitCommit.
func (s *StackBuildAbout) SetGitCommit(val OptStackGitCommit) {
	s.GitCommit = val
}

// Information about the stack build.
type StackBuildAboutDetails struct {
	// Information about the version of the stack.
	Version string `json:"version"`
	// Information describing the stack.
	Description string            `json:"description"`
	GitCommit   OptStackGitCommit `json:"git_commit"`
}

// GetVersion returns the value of Version.
func (s *StackBuildAboutDetails) GetVersion() string {
	return s.Version
}

// GetDescription returns the value of Description.
func (s *StackBuildAboutDetails) GetDescription() string {
	return s.Description
}

// GetGitCommit returns the value of GitCommit.
func (s *StackBuildAboutDetails) GetGitCommit() OptStackGitCommit {
	return s.GitCommit
}

// SetVersion sets the value of Version.
func (s *StackBuildAboutDetails) SetVersion(val string) {
	s.Version = val
}

// SetDescription sets the value of Description.
func (s *StackBuildAboutDetails) SetDescription(val string) {
	s.Description = val
}

// SetGitCommit sets the value of GitCommit.
func (s *StackBuildAboutDetails) SetGitCommit(val OptStackGitCommit) {
	s.GitCommit = val
}

// Settings for creating a stack build in a pipeline.
// Ref: #/components/schemas/StackBuildCreateStep
type StackBuildCreateStep struct {
	// An identifier for the step.
	Identifier OptString                      `json:"identifier"`
	Options    OptStackBuildCreateStepOptions `json:"options"`
	Details    StackBuildCreateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *StackBuildCreateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *StackBuildCreateStep) GetOptions() OptStackBuildCreateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *StackBuildCreateStep) GetDetails() StackBuildCreateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *StackBuildCreateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *StackBuildCreateStep) SetOptions(val OptStackBuildCreateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *StackBuildCreateStep) SetDetails(val StackBuildCreateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type StackBuildCreateStepAction string

const (
	StackBuildCreateStepActionStackBuildCreate StackBuildCreateStepAction = "stack.build.create"
)

// AllValues returns all StackBuildCreateStepAction values.
func (StackBuildCreateStepAction) AllValues() []StackBuildCreateStepAction {
	return []StackBuildCreateStepAction{
		StackBuildCreateStepActionStackBuildCreate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildCreateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildCreateStepActionStackBuildCreate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildCreateStepAction) UnmarshalText(data []byte) error {
	switch StackBuildCreateStepAction(data) {
	case StackBuildCreateStepActionStackBuildCreate:
		*s = StackBuildCreateStepActionStackBuildCreate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackBuildCreateStepDetails struct {
	Stack FluidIdentifier `json:"stack"`
	// Additional instructions used when generating this stack build.
	Instructions OptNilStackBuildCreateStepDetailsInstructions `json:"instructions"`
	// Information about the stack build.
	About OptNilStackBuildCreateStepDetailsAbout `json:"about"`
}

// GetStack returns the value of Stack.
func (s *StackBuildCreateStepDetails) GetStack() FluidIdentifier {
	return s.Stack
}

// GetInstructions returns the value of Instructions.
func (s *StackBuildCreateStepDetails) GetInstructions() OptNilStackBuildCreateStepDetailsInstructions {
	return s.Instructions
}

// GetAbout returns the value of About.
func (s *StackBuildCreateStepDetails) GetAbout() OptNilStackBuildCreateStepDetailsAbout {
	return s.About
}

// SetStack sets the value of Stack.
func (s *StackBuildCreateStepDetails) SetStack(val FluidIdentifier) {
	s.Stack = val
}

// SetInstructions sets the value of Instructions.
func (s *StackBuildCreateStepDetails) SetInstructions(val OptNilStackBuildCreateStepDetailsInstructions) {
	s.Instructions = val
}

// SetAbout sets the value of About.
func (s *StackBuildCreateStepDetails) SetAbout(val OptNilStackBuildCreateStepDetailsAbout) {
	s.About = val
}

// Information about the stack build.
type StackBuildCreateStepDetailsAbout struct {
	// A user defined version of the build.
	Version string `json:"version"`
	// A user defined description for the build.
	Description string `json:"description"`
}

// GetVersion returns the value of Version.
func (s *StackBuildCreateStepDetailsAbout) GetVersion() string {
	return s.Version
}

// GetDescription returns the value of Description.
func (s *StackBuildCreateStepDetailsAbout) GetDescription() string {
	return s.Description
}

// SetVersion sets the value of Version.
func (s *StackBuildCreateStepDetailsAbout) SetVersion(val string) {
	s.Version = val
}

// SetDescription sets the value of Description.
func (s *StackBuildCreateStepDetailsAbout) SetDescription(val string) {
	s.Description = val
}

// Additional instructions used when generating this stack build.
type StackBuildCreateStepDetailsInstructions struct {
	// Git information specifics.
	Git OptStackBuildCreateStepDetailsInstructionsGit `json:"git"`
	// Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}`
	// is used is replaced with the value of the variable supplied in this map.
	Variables OptStackBuildCreateStepDetailsInstructionsVariables `json:"variables"`
}

// GetGit returns the value of Git.
func (s *StackBuildCreateStepDetailsInstructions) GetGit() OptStackBuildCreateStepDetailsInstructionsGit {
	return s.Git
}

// GetVariables returns the value of Variables.
func (s *StackBuildCreateStepDetailsInstructions) GetVariables() OptStackBuildCreateStepDetailsInstructionsVariables {
	return s.Variables
}

// SetGit sets the value of Git.
func (s *StackBuildCreateStepDetailsInstructions) SetGit(val OptStackBuildCreateStepDetailsInstructionsGit) {
	s.Git = val
}

// SetVariables sets the value of Variables.
func (s *StackBuildCreateStepDetailsInstructions) SetVariables(val OptStackBuildCreateStepDetailsInstructionsVariables) {
	s.Variables = val
}

// Git information specifics.
type StackBuildCreateStepDetailsInstructionsGit struct {
	// The type of information the user is passing.
	Type StackBuildCreateStepDetailsInstructionsGitType `json:"type"`
	// The actual value to be passed.
	Value string `json:"value"`
}

// GetType returns the value of Type.
func (s *StackBuildCreateStepDetailsInstructionsGit) GetType() StackBuildCreateStepDetailsInstructionsGitType {
	return s.Type
}

// GetValue returns the value of Value.
func (s *StackBuildCreateStepDetailsInstructionsGit) GetValue() string {
	return s.Value
}

// SetType sets the value of Type.
func (s *StackBuildCreateStepDetailsInstructionsGit) SetType(val StackBuildCreateStepDetailsInstructionsGitType) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *StackBuildCreateStepDetailsInstructionsGit) SetValue(val string) {
	s.Value = val
}

// The type of information the user is passing.
type StackBuildCreateStepDetailsInstructionsGitType string

const (
	StackBuildCreateStepDetailsInstructionsGitTypeBranch StackBuildCreateStepDetailsInstructionsGitType = "branch"
	StackBuildCreateStepDetailsInstructionsGitTypeHash   StackBuildCreateStepDetailsInstructionsGitType = "hash"
	StackBuildCreateStepDetailsInstructionsGitTypeTag    StackBuildCreateStepDetailsInstructionsGitType = "tag"
)

// AllValues returns all StackBuildCreateStepDetailsInstructionsGitType values.
func (StackBuildCreateStepDetailsInstructionsGitType) AllValues() []StackBuildCreateStepDetailsInstructionsGitType {
	return []StackBuildCreateStepDetailsInstructionsGitType{
		StackBuildCreateStepDetailsInstructionsGitTypeBranch,
		StackBuildCreateStepDetailsInstructionsGitTypeHash,
		StackBuildCreateStepDetailsInstructionsGitTypeTag,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildCreateStepDetailsInstructionsGitType) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildCreateStepDetailsInstructionsGitTypeBranch:
		return []byte(s), nil
	case StackBuildCreateStepDetailsInstructionsGitTypeHash:
		return []byte(s), nil
	case StackBuildCreateStepDetailsInstructionsGitTypeTag:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildCreateStepDetailsInstructionsGitType) UnmarshalText(data []byte) error {
	switch StackBuildCreateStepDetailsInstructionsGitType(data) {
	case StackBuildCreateStepDetailsInstructionsGitTypeBranch:
		*s = StackBuildCreateStepDetailsInstructionsGitTypeBranch
		return nil
	case StackBuildCreateStepDetailsInstructionsGitTypeHash:
		*s = StackBuildCreateStepDetailsInstructionsGitTypeHash
		return nil
	case StackBuildCreateStepDetailsInstructionsGitTypeTag:
		*s = StackBuildCreateStepDetailsInstructionsGitTypeTag
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}`
// is used is replaced with the value of the variable supplied in this map.
type StackBuildCreateStepDetailsInstructionsVariables map[string]string

func (s *StackBuildCreateStepDetailsInstructionsVariables) init() StackBuildCreateStepDetailsInstructionsVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackBuildCreateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *StackBuildCreateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *StackBuildCreateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// Settings for deploying a stack build in a pipeline.
// Ref: #/components/schemas/StackBuildDeployStep
type StackBuildDeployStep struct {
	// An identifier for the step.
	Identifier OptString                      `json:"identifier"`
	Options    OptStackBuildDeployStepOptions `json:"options"`
	Details    StackBuildDeployStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *StackBuildDeployStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *StackBuildDeployStep) GetOptions() OptStackBuildDeployStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *StackBuildDeployStep) GetDetails() StackBuildDeployStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *StackBuildDeployStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *StackBuildDeployStep) SetOptions(val OptStackBuildDeployStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *StackBuildDeployStep) SetDetails(val StackBuildDeployStepDetails) {
	s.Details = val
}

// The action that the step takes.
type StackBuildDeployStepAction string

const (
	StackBuildDeployStepActionStackBuildDeploy StackBuildDeployStepAction = "stack.build.deploy"
)

// AllValues returns all StackBuildDeployStepAction values.
func (StackBuildDeployStepAction) AllValues() []StackBuildDeployStepAction {
	return []StackBuildDeployStepAction{
		StackBuildDeployStepActionStackBuildDeploy,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildDeployStepAction) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildDeployStepActionStackBuildDeploy:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildDeployStepAction) UnmarshalText(data []byte) error {
	switch StackBuildDeployStepAction(data) {
	case StackBuildDeployStepActionStackBuildDeploy:
		*s = StackBuildDeployStepActionStackBuildDeploy
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackBuildDeployStepDetails struct {
	Build       FluidIdentifier                             `json:"build"`
	Environment FluidIdentifier                             `json:"environment"`
	Update      OptNilStackBuildDeployStepDetailsUpdate     `json:"update"`
	Deployment  OptNilStackBuildDeployStepDetailsDeployment `json:"deployment"`
}

// GetBuild returns the value of Build.
func (s *StackBuildDeployStepDetails) GetBuild() FluidIdentifier {
	return s.Build
}

// GetEnvironment returns the value of Environment.
func (s *StackBuildDeployStepDetails) GetEnvironment() FluidIdentifier {
	return s.Environment
}

// GetUpdate returns the value of Update.
func (s *StackBuildDeployStepDetails) GetUpdate() OptNilStackBuildDeployStepDetailsUpdate {
	return s.Update
}

// GetDeployment returns the value of Deployment.
func (s *StackBuildDeployStepDetails) GetDeployment() OptNilStackBuildDeployStepDetailsDeployment {
	return s.Deployment
}

// SetBuild sets the value of Build.
func (s *StackBuildDeployStepDetails) SetBuild(val FluidIdentifier) {
	s.Build = val
}

// SetEnvironment sets the value of Environment.
func (s *StackBuildDeployStepDetails) SetEnvironment(val FluidIdentifier) {
	s.Environment = val
}

// SetUpdate sets the value of Update.
func (s *StackBuildDeployStepDetails) SetUpdate(val OptNilStackBuildDeployStepDetailsUpdate) {
	s.Update = val
}

// SetDeployment sets the value of Deployment.
func (s *StackBuildDeployStepDetails) SetDeployment(val OptNilStackBuildDeployStepDetailsDeployment) {
	s.Deployment = val
}

// A logical grouping of containers inside of an Environment. Facilitates zero-downtime deployments
// by separating multiple versions of the same application within an environment.
// If a container is a member of a deployment, it can only resolve containers in that same deployment,
//
//	or containers NOT in a deployment. If a container is NOT a member of a deployment, it can resolve
//
// all containers in the environment.
type StackBuildDeployStepDetailsDeployment struct {
	Version Version `json:"version"`
}

// GetVersion returns the value of Version.
func (s *StackBuildDeployStepDetailsDeployment) GetVersion() Version {
	return s.Version
}

// SetVersion sets the value of Version.
func (s *StackBuildDeployStepDetailsDeployment) SetVersion(val Version) {
	s.Version = val
}

// Optional update object used to specify specific params to update from the stack build.
type StackBuildDeployStepDetailsUpdate struct {
	// A map of the container names to update within the environment.
	Containers StackBuildDeployStepDetailsUpdateContainers `json:"containers"`
	// An object that describes configuration options for scoped variables on stack build.
	ScopedVariables NilStackBuildDeployStepDetailsUpdateScopedVariables `json:"scoped_variables"`
}

// GetContainers returns the value of Containers.
func (s *StackBuildDeployStepDetailsUpdate) GetContainers() StackBuildDeployStepDetailsUpdateContainers {
	return s.Containers
}

// GetScopedVariables returns the value of ScopedVariables.
func (s *StackBuildDeployStepDetailsUpdate) GetScopedVariables() NilStackBuildDeployStepDetailsUpdateScopedVariables {
	return s.ScopedVariables
}

// SetContainers sets the value of Containers.
func (s *StackBuildDeployStepDetailsUpdate) SetContainers(val StackBuildDeployStepDetailsUpdateContainers) {
	s.Containers = val
}

// SetScopedVariables sets the value of ScopedVariables.
func (s *StackBuildDeployStepDetailsUpdate) SetScopedVariables(val NilStackBuildDeployStepDetailsUpdateScopedVariables) {
	s.ScopedVariables = val
}

// A map of the container names to update within the environment.
type StackBuildDeployStepDetailsUpdateContainers map[string]StackDeployContainersObject

func (s *StackBuildDeployStepDetailsUpdateContainers) init() StackBuildDeployStepDetailsUpdateContainers {
	m := *s
	if m == nil {
		m = map[string]StackDeployContainersObject{}
		*s = m
	}
	return m
}

// An object that describes configuration options for scoped variables on stack build.
type StackBuildDeployStepDetailsUpdateScopedVariables struct {
	// Add new scoped variables defined in the stack.
	AddNew bool `json:"add_new"`
	// Replace all scoped variables with those defined in the stack.
	ReplaceExisting bool `json:"replace_existing"`
}

// GetAddNew returns the value of AddNew.
func (s *StackBuildDeployStepDetailsUpdateScopedVariables) GetAddNew() bool {
	return s.AddNew
}

// GetReplaceExisting returns the value of ReplaceExisting.
func (s *StackBuildDeployStepDetailsUpdateScopedVariables) GetReplaceExisting() bool {
	return s.ReplaceExisting
}

// SetAddNew sets the value of AddNew.
func (s *StackBuildDeployStepDetailsUpdateScopedVariables) SetAddNew(val bool) {
	s.AddNew = val
}

// SetReplaceExisting sets the value of ReplaceExisting.
func (s *StackBuildDeployStepDetailsUpdateScopedVariables) SetReplaceExisting(val bool) {
	s.ReplaceExisting = val
}

type StackBuildDeployStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *StackBuildDeployStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *StackBuildDeployStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A collection of timestamps for each event in the stack build's lifetime.
type StackBuildEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *StackBuildEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *StackBuildEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *StackBuildEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *StackBuildEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *StackBuildEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *StackBuildEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Settings for the stack build generate step for a pipeline.
// Ref: #/components/schemas/StackBuildGenerateStep
type StackBuildGenerateStep struct {
	// An identifier for the step.
	Identifier OptString                        `json:"identifier"`
	Options    OptStackBuildGenerateStepOptions `json:"options"`
	Details    StackBuildGenerateStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *StackBuildGenerateStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *StackBuildGenerateStep) GetOptions() OptStackBuildGenerateStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *StackBuildGenerateStep) GetDetails() StackBuildGenerateStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *StackBuildGenerateStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *StackBuildGenerateStep) SetOptions(val OptStackBuildGenerateStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *StackBuildGenerateStep) SetDetails(val StackBuildGenerateStepDetails) {
	s.Details = val
}

// The action that the step takes.
type StackBuildGenerateStepAction string

const (
	StackBuildGenerateStepActionStackBuildGenerate StackBuildGenerateStepAction = "stack.build.generate"
)

// AllValues returns all StackBuildGenerateStepAction values.
func (StackBuildGenerateStepAction) AllValues() []StackBuildGenerateStepAction {
	return []StackBuildGenerateStepAction{
		StackBuildGenerateStepActionStackBuildGenerate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildGenerateStepAction) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildGenerateStepActionStackBuildGenerate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildGenerateStepAction) UnmarshalText(data []byte) error {
	switch StackBuildGenerateStepAction(data) {
	case StackBuildGenerateStepActionStackBuildGenerate:
		*s = StackBuildGenerateStepActionStackBuildGenerate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackBuildGenerateStepDetails struct {
	Build FluidIdentifier `json:"build"`
}

// GetBuild returns the value of Build.
func (s *StackBuildGenerateStepDetails) GetBuild() FluidIdentifier {
	return s.Build
}

// SetBuild sets the value of Build.
func (s *StackBuildGenerateStepDetails) SetBuild(val FluidIdentifier) {
	s.Build = val
}

type StackBuildGenerateStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *StackBuildGenerateStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *StackBuildGenerateStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A resource thats associated with a stack build.
// Ref: #/components/schemas/StackBuildIncludes
type StackBuildIncludes map[string]StackBuild

func (s *StackBuildIncludes) init() StackBuildIncludes {
	m := *s
	if m == nil {
		m = map[string]StackBuild{}
		*s = m
	}
	return m
}

// Additional instructions used when generating this stack build.
// Ref: #/components/schemas/StackBuildInstructions
type StackBuildInstructionsDetails struct {
	// Git information specifics.
	Git OptStackBuildInstructionsDetailsGit `json:"git"`
	// Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}`
	// is used is replaced with the value of the variable supplied in this map.
	Variables OptStackBuildInstructionsDetailsVariables `json:"variables"`
}

// GetGit returns the value of Git.
func (s *StackBuildInstructionsDetails) GetGit() OptStackBuildInstructionsDetailsGit {
	return s.Git
}

// GetVariables returns the value of Variables.
func (s *StackBuildInstructionsDetails) GetVariables() OptStackBuildInstructionsDetailsVariables {
	return s.Variables
}

// SetGit sets the value of Git.
func (s *StackBuildInstructionsDetails) SetGit(val OptStackBuildInstructionsDetailsGit) {
	s.Git = val
}

// SetVariables sets the value of Variables.
func (s *StackBuildInstructionsDetails) SetVariables(val OptStackBuildInstructionsDetailsVariables) {
	s.Variables = val
}

// Git information specifics.
type StackBuildInstructionsDetailsGit struct {
	// The type of information the user is passing.
	Type StackBuildInstructionsDetailsGitType `json:"type"`
	// The actual value to be passed.
	Value string `json:"value"`
}

// GetType returns the value of Type.
func (s *StackBuildInstructionsDetailsGit) GetType() StackBuildInstructionsDetailsGitType {
	return s.Type
}

// GetValue returns the value of Value.
func (s *StackBuildInstructionsDetailsGit) GetValue() string {
	return s.Value
}

// SetType sets the value of Type.
func (s *StackBuildInstructionsDetailsGit) SetType(val StackBuildInstructionsDetailsGitType) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *StackBuildInstructionsDetailsGit) SetValue(val string) {
	s.Value = val
}

// The type of information the user is passing.
type StackBuildInstructionsDetailsGitType string

const (
	StackBuildInstructionsDetailsGitTypeHash   StackBuildInstructionsDetailsGitType = "hash"
	StackBuildInstructionsDetailsGitTypeTag    StackBuildInstructionsDetailsGitType = "tag"
	StackBuildInstructionsDetailsGitTypeBranch StackBuildInstructionsDetailsGitType = "branch"
)

// AllValues returns all StackBuildInstructionsDetailsGitType values.
func (StackBuildInstructionsDetailsGitType) AllValues() []StackBuildInstructionsDetailsGitType {
	return []StackBuildInstructionsDetailsGitType{
		StackBuildInstructionsDetailsGitTypeHash,
		StackBuildInstructionsDetailsGitTypeTag,
		StackBuildInstructionsDetailsGitTypeBranch,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildInstructionsDetailsGitType) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildInstructionsDetailsGitTypeHash:
		return []byte(s), nil
	case StackBuildInstructionsDetailsGitTypeTag:
		return []byte(s), nil
	case StackBuildInstructionsDetailsGitTypeBranch:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildInstructionsDetailsGitType) UnmarshalText(data []byte) error {
	switch StackBuildInstructionsDetailsGitType(data) {
	case StackBuildInstructionsDetailsGitTypeHash:
		*s = StackBuildInstructionsDetailsGitTypeHash
		return nil
	case StackBuildInstructionsDetailsGitTypeTag:
		*s = StackBuildInstructionsDetailsGitTypeTag
		return nil
	case StackBuildInstructionsDetailsGitTypeBranch:
		*s = StackBuildInstructionsDetailsGitTypeBranch
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Custom variables applied to the stack during build. Any place in the stack where a `{{variable}}`
// is used is replaced with the value of the variable supplied in this map.
type StackBuildInstructionsDetailsVariables map[string]string

func (s *StackBuildInstructionsDetailsVariables) init() StackBuildInstructionsDetailsVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to a stack build.
// Ref: #/components/schemas/StackBuildMeta
type StackBuildMeta struct {
	ContainersCount OptStateCountSummary `json:"containers_count"`
}

// GetContainersCount returns the value of ContainersCount.
func (s *StackBuildMeta) GetContainersCount() OptStateCountSummary {
	return s.ContainersCount
}

// SetContainersCount sets the value of ContainersCount.
func (s *StackBuildMeta) SetContainersCount(val OptStateCountSummary) {
	s.ContainersCount = val
}

type StackBuildSpec struct {
	// A string defining the version of the stack spec.
	Version string `json:"version"`
	// Information about the stack.
	About           OptNilStackBuildSpecAbout          `json:"about"`
	Tests           OptNilStackSpecTestContainerArray  `json:"tests"`
	ScopedVariables OptNilStackSpecScopedVariableArray `json:"scoped_variables"`
	Containers      StackContainer                     `json:"containers"`
	Services        OptNilStackBuildSpecServices       `json:"services"`
	// Additional meta info about the stack.
	Annotations OptStackBuildSpecAnnotations `json:"annotations"`
}

// GetVersion returns the value of Version.
func (s *StackBuildSpec) GetVersion() string {
	return s.Version
}

// GetAbout returns the value of About.
func (s *StackBuildSpec) GetAbout() OptNilStackBuildSpecAbout {
	return s.About
}

// GetTests returns the value of Tests.
func (s *StackBuildSpec) GetTests() OptNilStackSpecTestContainerArray {
	return s.Tests
}

// GetScopedVariables returns the value of ScopedVariables.
func (s *StackBuildSpec) GetScopedVariables() OptNilStackSpecScopedVariableArray {
	return s.ScopedVariables
}

// GetContainers returns the value of Containers.
func (s *StackBuildSpec) GetContainers() StackContainer {
	return s.Containers
}

// GetServices returns the value of Services.
func (s *StackBuildSpec) GetServices() OptNilStackBuildSpecServices {
	return s.Services
}

// GetAnnotations returns the value of Annotations.
func (s *StackBuildSpec) GetAnnotations() OptStackBuildSpecAnnotations {
	return s.Annotations
}

// SetVersion sets the value of Version.
func (s *StackBuildSpec) SetVersion(val string) {
	s.Version = val
}

// SetAbout sets the value of About.
func (s *StackBuildSpec) SetAbout(val OptNilStackBuildSpecAbout) {
	s.About = val
}

// SetTests sets the value of Tests.
func (s *StackBuildSpec) SetTests(val OptNilStackSpecTestContainerArray) {
	s.Tests = val
}

// SetScopedVariables sets the value of ScopedVariables.
func (s *StackBuildSpec) SetScopedVariables(val OptNilStackSpecScopedVariableArray) {
	s.ScopedVariables = val
}

// SetContainers sets the value of Containers.
func (s *StackBuildSpec) SetContainers(val StackContainer) {
	s.Containers = val
}

// SetServices sets the value of Services.
func (s *StackBuildSpec) SetServices(val OptNilStackBuildSpecServices) {
	s.Services = val
}

// SetAnnotations sets the value of Annotations.
func (s *StackBuildSpec) SetAnnotations(val OptStackBuildSpecAnnotations) {
	s.Annotations = val
}

// Information about the stack.
type StackBuildSpecAbout struct {
	// Internal version information set by the user.
	Version string `json:"version"`
	// Information describing the stack.
	Description string `json:"description"`
}

// GetVersion returns the value of Version.
func (s *StackBuildSpecAbout) GetVersion() string {
	return s.Version
}

// GetDescription returns the value of Description.
func (s *StackBuildSpecAbout) GetDescription() string {
	return s.Description
}

// SetVersion sets the value of Version.
func (s *StackBuildSpecAbout) SetVersion(val string) {
	s.Version = val
}

// SetDescription sets the value of Description.
func (s *StackBuildSpecAbout) SetDescription(val string) {
	s.Description = val
}

// Additional meta info about the stack.
type StackBuildSpecAnnotations map[string]jx.Raw

func (s *StackBuildSpecAnnotations) init() StackBuildSpecAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type StackBuildSpecServices struct {
	Discovery    OptNilStackBuildSpecServicesDiscovery    `json:"discovery"`
	Loadbalancer OptNilStackBuildSpecServicesLoadbalancer `json:"loadbalancer"`
	Vpn          OptStackBuildSpecServicesVpn             `json:"vpn"`
}

// GetDiscovery returns the value of Discovery.
func (s *StackBuildSpecServices) GetDiscovery() OptNilStackBuildSpecServicesDiscovery {
	return s.Discovery
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *StackBuildSpecServices) GetLoadbalancer() OptNilStackBuildSpecServicesLoadbalancer {
	return s.Loadbalancer
}

// GetVpn returns the value of Vpn.
func (s *StackBuildSpecServices) GetVpn() OptStackBuildSpecServicesVpn {
	return s.Vpn
}

// SetDiscovery sets the value of Discovery.
func (s *StackBuildSpecServices) SetDiscovery(val OptNilStackBuildSpecServicesDiscovery) {
	s.Discovery = val
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *StackBuildSpecServices) SetLoadbalancer(val OptNilStackBuildSpecServicesLoadbalancer) {
	s.Loadbalancer = val
}

// SetVpn sets the value of Vpn.
func (s *StackBuildSpecServices) SetVpn(val OptStackBuildSpecServicesVpn) {
	s.Vpn = val
}

type StackBuildSpecServicesDiscovery struct {
	Hosts OptNilStackBuildSpecServicesDiscoveryHosts `json:"hosts"`
}

// GetHosts returns the value of Hosts.
func (s *StackBuildSpecServicesDiscovery) GetHosts() OptNilStackBuildSpecServicesDiscoveryHosts {
	return s.Hosts
}

// SetHosts sets the value of Hosts.
func (s *StackBuildSpecServicesDiscovery) SetHosts(val OptNilStackBuildSpecServicesDiscoveryHosts) {
	s.Hosts = val
}

type StackBuildSpecServicesDiscoveryHosts map[string]StackBuildSpecServicesDiscoveryHostsItem

func (s *StackBuildSpecServicesDiscoveryHosts) init() StackBuildSpecServicesDiscoveryHosts {
	m := *s
	if m == nil {
		m = map[string]StackBuildSpecServicesDiscoveryHostsItem{}
		*s = m
	}
	return m
}

type StackBuildSpecServicesDiscoveryHostsItem struct {
	Ipv4 OptNilStringArray `json:"ipv4"`
	Ipv6 OptNilStringArray `json:"ipv6"`
}

// GetIpv4 returns the value of Ipv4.
func (s *StackBuildSpecServicesDiscoveryHostsItem) GetIpv4() OptNilStringArray {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *StackBuildSpecServicesDiscoveryHostsItem) GetIpv6() OptNilStringArray {
	return s.Ipv6
}

// SetIpv4 sets the value of Ipv4.
func (s *StackBuildSpecServicesDiscoveryHostsItem) SetIpv4(val OptNilStringArray) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *StackBuildSpecServicesDiscoveryHostsItem) SetIpv6(val OptNilStringArray) {
	s.Ipv6 = val
}

// The config object for the loadbalancer service.
type StackBuildSpecServicesLoadbalancer struct {
	OneOf StackBuildSpecServicesLoadbalancerSum
}

// GetOneOf returns the value of OneOf.
func (s *StackBuildSpecServicesLoadbalancer) GetOneOf() StackBuildSpecServicesLoadbalancerSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackBuildSpecServicesLoadbalancer) SetOneOf(val StackBuildSpecServicesLoadbalancerSum) {
	s.OneOf = val
}

// StackBuildSpecServicesLoadbalancerSum represents sum type.
type StackBuildSpecServicesLoadbalancerSum struct {
	Type          StackBuildSpecServicesLoadbalancerSumType // switch on this field
	HaProxyLbType HaProxyLbType
	V1LbType      V1LbType
	DefaultLbType DefaultLbType
}

// StackBuildSpecServicesLoadbalancerSumType is oneOf type of StackBuildSpecServicesLoadbalancerSum.
type StackBuildSpecServicesLoadbalancerSumType string

// Possible values for StackBuildSpecServicesLoadbalancerSumType.
const (
	HaProxyLbTypeStackBuildSpecServicesLoadbalancerSum StackBuildSpecServicesLoadbalancerSumType = "haproxy"
	V1LbTypeStackBuildSpecServicesLoadbalancerSum      StackBuildSpecServicesLoadbalancerSumType = "v1"
	DefaultLbTypeStackBuildSpecServicesLoadbalancerSum StackBuildSpecServicesLoadbalancerSumType = "default"
)

// IsHaProxyLbType reports whether StackBuildSpecServicesLoadbalancerSum is HaProxyLbType.
func (s StackBuildSpecServicesLoadbalancerSum) IsHaProxyLbType() bool {
	return s.Type == HaProxyLbTypeStackBuildSpecServicesLoadbalancerSum
}

// IsV1LbType reports whether StackBuildSpecServicesLoadbalancerSum is V1LbType.
func (s StackBuildSpecServicesLoadbalancerSum) IsV1LbType() bool {
	return s.Type == V1LbTypeStackBuildSpecServicesLoadbalancerSum
}

// IsDefaultLbType reports whether StackBuildSpecServicesLoadbalancerSum is DefaultLbType.
func (s StackBuildSpecServicesLoadbalancerSum) IsDefaultLbType() bool {
	return s.Type == DefaultLbTypeStackBuildSpecServicesLoadbalancerSum
}

// SetHaProxyLbType sets StackBuildSpecServicesLoadbalancerSum to HaProxyLbType.
func (s *StackBuildSpecServicesLoadbalancerSum) SetHaProxyLbType(v HaProxyLbType) {
	s.Type = HaProxyLbTypeStackBuildSpecServicesLoadbalancerSum
	s.HaProxyLbType = v
}

// GetHaProxyLbType returns HaProxyLbType and true boolean if StackBuildSpecServicesLoadbalancerSum is HaProxyLbType.
func (s StackBuildSpecServicesLoadbalancerSum) GetHaProxyLbType() (v HaProxyLbType, ok bool) {
	if !s.IsHaProxyLbType() {
		return v, false
	}
	return s.HaProxyLbType, true
}

// NewHaProxyLbTypeStackBuildSpecServicesLoadbalancerSum returns new StackBuildSpecServicesLoadbalancerSum from HaProxyLbType.
func NewHaProxyLbTypeStackBuildSpecServicesLoadbalancerSum(v HaProxyLbType) StackBuildSpecServicesLoadbalancerSum {
	var s StackBuildSpecServicesLoadbalancerSum
	s.SetHaProxyLbType(v)
	return s
}

// SetV1LbType sets StackBuildSpecServicesLoadbalancerSum to V1LbType.
func (s *StackBuildSpecServicesLoadbalancerSum) SetV1LbType(v V1LbType) {
	s.Type = V1LbTypeStackBuildSpecServicesLoadbalancerSum
	s.V1LbType = v
}

// GetV1LbType returns V1LbType and true boolean if StackBuildSpecServicesLoadbalancerSum is V1LbType.
func (s StackBuildSpecServicesLoadbalancerSum) GetV1LbType() (v V1LbType, ok bool) {
	if !s.IsV1LbType() {
		return v, false
	}
	return s.V1LbType, true
}

// NewV1LbTypeStackBuildSpecServicesLoadbalancerSum returns new StackBuildSpecServicesLoadbalancerSum from V1LbType.
func NewV1LbTypeStackBuildSpecServicesLoadbalancerSum(v V1LbType) StackBuildSpecServicesLoadbalancerSum {
	var s StackBuildSpecServicesLoadbalancerSum
	s.SetV1LbType(v)
	return s
}

// SetDefaultLbType sets StackBuildSpecServicesLoadbalancerSum to DefaultLbType.
func (s *StackBuildSpecServicesLoadbalancerSum) SetDefaultLbType(v DefaultLbType) {
	s.Type = DefaultLbTypeStackBuildSpecServicesLoadbalancerSum
	s.DefaultLbType = v
}

// GetDefaultLbType returns DefaultLbType and true boolean if StackBuildSpecServicesLoadbalancerSum is DefaultLbType.
func (s StackBuildSpecServicesLoadbalancerSum) GetDefaultLbType() (v DefaultLbType, ok bool) {
	if !s.IsDefaultLbType() {
		return v, false
	}
	return s.DefaultLbType, true
}

// NewDefaultLbTypeStackBuildSpecServicesLoadbalancerSum returns new StackBuildSpecServicesLoadbalancerSum from DefaultLbType.
func NewDefaultLbTypeStackBuildSpecServicesLoadbalancerSum(v DefaultLbType) StackBuildSpecServicesLoadbalancerSum {
	var s StackBuildSpecServicesLoadbalancerSum
	s.SetDefaultLbType(v)
	return s
}

type StackBuildSpecServicesVpn struct {
	Auth          StackBuildSpecServicesVpnAuth `json:"auth"`
	AllowInternet bool                          `json:"allow_internet"`
}

// GetAuth returns the value of Auth.
func (s *StackBuildSpecServicesVpn) GetAuth() StackBuildSpecServicesVpnAuth {
	return s.Auth
}

// GetAllowInternet returns the value of AllowInternet.
func (s *StackBuildSpecServicesVpn) GetAllowInternet() bool {
	return s.AllowInternet
}

// SetAuth sets the value of Auth.
func (s *StackBuildSpecServicesVpn) SetAuth(val StackBuildSpecServicesVpnAuth) {
	s.Auth = val
}

// SetAllowInternet sets the value of AllowInternet.
func (s *StackBuildSpecServicesVpn) SetAllowInternet(val bool) {
	s.AllowInternet = val
}

type StackBuildSpecServicesVpnAuth struct {
	Webhook       OptString `json:"webhook"`
	CycleAccounts bool      `json:"cycle_accounts"`
	VpnAccounts   bool      `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *StackBuildSpecServicesVpnAuth) GetWebhook() OptString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *StackBuildSpecServicesVpnAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *StackBuildSpecServicesVpnAuth) GetVpnAccounts() bool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *StackBuildSpecServicesVpnAuth) SetWebhook(val OptString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *StackBuildSpecServicesVpnAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *StackBuildSpecServicesVpnAuth) SetVpnAccounts(val bool) {
	s.VpnAccounts = val
}

// Merged schema.
// Ref: #/components/schemas/StackBuildState
type StackBuildState struct {
	// The current state of the stack build.
	Current StackBuildStateCurrent `json:"current"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptStackBuildStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *StackBuildState) GetCurrent() StackBuildStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *StackBuildState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *StackBuildState) GetError() OptStackBuildStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *StackBuildState) SetCurrent(val StackBuildStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *StackBuildState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *StackBuildState) SetError(val OptStackBuildStateError) {
	s.Error = val
}

// The current state of the stack build.
type StackBuildStateCurrent string

const (
	StackBuildStateCurrentNew       StackBuildStateCurrent = "new"
	StackBuildStateCurrentImporting StackBuildStateCurrent = "importing"
	StackBuildStateCurrentBuilding  StackBuildStateCurrent = "building"
	StackBuildStateCurrentVerifying StackBuildStateCurrent = "verifying"
	StackBuildStateCurrentSaving    StackBuildStateCurrent = "saving"
	StackBuildStateCurrentLive      StackBuildStateCurrent = "live"
	StackBuildStateCurrentDeploying StackBuildStateCurrent = "deploying"
	StackBuildStateCurrentDeleting  StackBuildStateCurrent = "deleting"
	StackBuildStateCurrentDeleted   StackBuildStateCurrent = "deleted"
)

// AllValues returns all StackBuildStateCurrent values.
func (StackBuildStateCurrent) AllValues() []StackBuildStateCurrent {
	return []StackBuildStateCurrent{
		StackBuildStateCurrentNew,
		StackBuildStateCurrentImporting,
		StackBuildStateCurrentBuilding,
		StackBuildStateCurrentVerifying,
		StackBuildStateCurrentSaving,
		StackBuildStateCurrentLive,
		StackBuildStateCurrentDeploying,
		StackBuildStateCurrentDeleting,
		StackBuildStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackBuildStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case StackBuildStateCurrentNew:
		return []byte(s), nil
	case StackBuildStateCurrentImporting:
		return []byte(s), nil
	case StackBuildStateCurrentBuilding:
		return []byte(s), nil
	case StackBuildStateCurrentVerifying:
		return []byte(s), nil
	case StackBuildStateCurrentSaving:
		return []byte(s), nil
	case StackBuildStateCurrentLive:
		return []byte(s), nil
	case StackBuildStateCurrentDeploying:
		return []byte(s), nil
	case StackBuildStateCurrentDeleting:
		return []byte(s), nil
	case StackBuildStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackBuildStateCurrent) UnmarshalText(data []byte) error {
	switch StackBuildStateCurrent(data) {
	case StackBuildStateCurrentNew:
		*s = StackBuildStateCurrentNew
		return nil
	case StackBuildStateCurrentImporting:
		*s = StackBuildStateCurrentImporting
		return nil
	case StackBuildStateCurrentBuilding:
		*s = StackBuildStateCurrentBuilding
		return nil
	case StackBuildStateCurrentVerifying:
		*s = StackBuildStateCurrentVerifying
		return nil
	case StackBuildStateCurrentSaving:
		*s = StackBuildStateCurrentSaving
		return nil
	case StackBuildStateCurrentLive:
		*s = StackBuildStateCurrentLive
		return nil
	case StackBuildStateCurrentDeploying:
		*s = StackBuildStateCurrentDeploying
		return nil
	case StackBuildStateCurrentDeleting:
		*s = StackBuildStateCurrentDeleting
		return nil
	case StackBuildStateCurrentDeleted:
		*s = StackBuildStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type StackBuildStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *StackBuildStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *StackBuildStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *StackBuildStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *StackBuildStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Records defining the containers within the stack.
// Ref: #/components/schemas/StackContainer
type StackContainer map[string]StackContainerItem

func (s *StackContainer) init() StackContainer {
	m := *s
	if m == nil {
		m = map[string]StackContainerItem{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/StackContainerConfigDeploy
type StackContainerConfigDeploy struct {
	Instances   int                                         `json:"instances"`
	Strategy    OptNilStackContainerConfigDeployStrategy    `json:"strategy"`
	Stateful    OptNilStackContainerConfigDeployStateful    `json:"stateful"`
	Constraints OptNilStackContainerConfigDeployConstraints `json:"constraints"`
	Shutdown    OptNilStackContainerConfigDeployShutdown    `json:"shutdown"`
	Startup     OptNilStackContainerConfigDeployStartup     `json:"startup"`
	// Configurations for container updates.
	Update      OptNilStackContainerConfigDeployUpdate      `json:"update"`
	Restart     OptNilStackContainerConfigDeployRestart     `json:"restart"`
	HealthCheck OptNilStackContainerConfigDeployHealthCheck `json:"health_check"`
	Telemetry   OptNilStackContainerConfigDeployTelemetry   `json:"telemetry"`
}

// GetInstances returns the value of Instances.
func (s *StackContainerConfigDeploy) GetInstances() int {
	return s.Instances
}

// GetStrategy returns the value of Strategy.
func (s *StackContainerConfigDeploy) GetStrategy() OptNilStackContainerConfigDeployStrategy {
	return s.Strategy
}

// GetStateful returns the value of Stateful.
func (s *StackContainerConfigDeploy) GetStateful() OptNilStackContainerConfigDeployStateful {
	return s.Stateful
}

// GetConstraints returns the value of Constraints.
func (s *StackContainerConfigDeploy) GetConstraints() OptNilStackContainerConfigDeployConstraints {
	return s.Constraints
}

// GetShutdown returns the value of Shutdown.
func (s *StackContainerConfigDeploy) GetShutdown() OptNilStackContainerConfigDeployShutdown {
	return s.Shutdown
}

// GetStartup returns the value of Startup.
func (s *StackContainerConfigDeploy) GetStartup() OptNilStackContainerConfigDeployStartup {
	return s.Startup
}

// GetUpdate returns the value of Update.
func (s *StackContainerConfigDeploy) GetUpdate() OptNilStackContainerConfigDeployUpdate {
	return s.Update
}

// GetRestart returns the value of Restart.
func (s *StackContainerConfigDeploy) GetRestart() OptNilStackContainerConfigDeployRestart {
	return s.Restart
}

// GetHealthCheck returns the value of HealthCheck.
func (s *StackContainerConfigDeploy) GetHealthCheck() OptNilStackContainerConfigDeployHealthCheck {
	return s.HealthCheck
}

// GetTelemetry returns the value of Telemetry.
func (s *StackContainerConfigDeploy) GetTelemetry() OptNilStackContainerConfigDeployTelemetry {
	return s.Telemetry
}

// SetInstances sets the value of Instances.
func (s *StackContainerConfigDeploy) SetInstances(val int) {
	s.Instances = val
}

// SetStrategy sets the value of Strategy.
func (s *StackContainerConfigDeploy) SetStrategy(val OptNilStackContainerConfigDeployStrategy) {
	s.Strategy = val
}

// SetStateful sets the value of Stateful.
func (s *StackContainerConfigDeploy) SetStateful(val OptNilStackContainerConfigDeployStateful) {
	s.Stateful = val
}

// SetConstraints sets the value of Constraints.
func (s *StackContainerConfigDeploy) SetConstraints(val OptNilStackContainerConfigDeployConstraints) {
	s.Constraints = val
}

// SetShutdown sets the value of Shutdown.
func (s *StackContainerConfigDeploy) SetShutdown(val OptNilStackContainerConfigDeployShutdown) {
	s.Shutdown = val
}

// SetStartup sets the value of Startup.
func (s *StackContainerConfigDeploy) SetStartup(val OptNilStackContainerConfigDeployStartup) {
	s.Startup = val
}

// SetUpdate sets the value of Update.
func (s *StackContainerConfigDeploy) SetUpdate(val OptNilStackContainerConfigDeployUpdate) {
	s.Update = val
}

// SetRestart sets the value of Restart.
func (s *StackContainerConfigDeploy) SetRestart(val OptNilStackContainerConfigDeployRestart) {
	s.Restart = val
}

// SetHealthCheck sets the value of HealthCheck.
func (s *StackContainerConfigDeploy) SetHealthCheck(val OptNilStackContainerConfigDeployHealthCheck) {
	s.HealthCheck = val
}

// SetTelemetry sets the value of Telemetry.
func (s *StackContainerConfigDeploy) SetTelemetry(val OptNilStackContainerConfigDeployTelemetry) {
	s.Telemetry = val
}

type StackContainerConfigDeployConstraints struct {
	Node       OptNilStackContainerConfigDeployConstraintsNode `json:"node"`
	Secrets    OptNilStringArray                               `json:"secrets"`
	Containers OptNilStringArray                               `json:"containers"`
}

// GetNode returns the value of Node.
func (s *StackContainerConfigDeployConstraints) GetNode() OptNilStackContainerConfigDeployConstraintsNode {
	return s.Node
}

// GetSecrets returns the value of Secrets.
func (s *StackContainerConfigDeployConstraints) GetSecrets() OptNilStringArray {
	return s.Secrets
}

// GetContainers returns the value of Containers.
func (s *StackContainerConfigDeployConstraints) GetContainers() OptNilStringArray {
	return s.Containers
}

// SetNode sets the value of Node.
func (s *StackContainerConfigDeployConstraints) SetNode(val OptNilStackContainerConfigDeployConstraintsNode) {
	s.Node = val
}

// SetSecrets sets the value of Secrets.
func (s *StackContainerConfigDeployConstraints) SetSecrets(val OptNilStringArray) {
	s.Secrets = val
}

// SetContainers sets the value of Containers.
func (s *StackContainerConfigDeployConstraints) SetContainers(val OptNilStringArray) {
	s.Containers = val
}

type StackContainerConfigDeployConstraintsNode struct {
	Tags StackContainerConfigDeployConstraintsNodeTags `json:"tags"`
}

// GetTags returns the value of Tags.
func (s *StackContainerConfigDeployConstraintsNode) GetTags() StackContainerConfigDeployConstraintsNodeTags {
	return s.Tags
}

// SetTags sets the value of Tags.
func (s *StackContainerConfigDeployConstraintsNode) SetTags(val StackContainerConfigDeployConstraintsNodeTags) {
	s.Tags = val
}

type StackContainerConfigDeployConstraintsNodeTags struct {
	Any []string `json:"any"`
	All []string `json:"all"`
}

// GetAny returns the value of Any.
func (s *StackContainerConfigDeployConstraintsNodeTags) GetAny() []string {
	return s.Any
}

// GetAll returns the value of All.
func (s *StackContainerConfigDeployConstraintsNodeTags) GetAll() []string {
	return s.All
}

// SetAny sets the value of Any.
func (s *StackContainerConfigDeployConstraintsNodeTags) SetAny(val []string) {
	s.Any = val
}

// SetAll sets the value of All.
func (s *StackContainerConfigDeployConstraintsNodeTags) SetAll(val []string) {
	s.All = val
}

type StackContainerConfigDeployHealthCheck struct {
	// The command to run as your health check.
	Command string `json:"command"`
	// The number of times to retry the command before marking an instance unhealthy.
	Retries  int      `json:"retries"`
	Interval Duration `json:"interval"`
	Timeout  Duration `json:"timeout"`
	// A boolean where true represents the desire for the container to restart if any instance is
	// unhealthy.
	Restart bool `json:"restart"`
	// How long to wait after a container start event before starting health checks.
	Delay OptNilString `json:"delay"`
}

// GetCommand returns the value of Command.
func (s *StackContainerConfigDeployHealthCheck) GetCommand() string {
	return s.Command
}

// GetRetries returns the value of Retries.
func (s *StackContainerConfigDeployHealthCheck) GetRetries() int {
	return s.Retries
}

// GetInterval returns the value of Interval.
func (s *StackContainerConfigDeployHealthCheck) GetInterval() Duration {
	return s.Interval
}

// GetTimeout returns the value of Timeout.
func (s *StackContainerConfigDeployHealthCheck) GetTimeout() Duration {
	return s.Timeout
}

// GetRestart returns the value of Restart.
func (s *StackContainerConfigDeployHealthCheck) GetRestart() bool {
	return s.Restart
}

// GetDelay returns the value of Delay.
func (s *StackContainerConfigDeployHealthCheck) GetDelay() OptNilString {
	return s.Delay
}

// SetCommand sets the value of Command.
func (s *StackContainerConfigDeployHealthCheck) SetCommand(val string) {
	s.Command = val
}

// SetRetries sets the value of Retries.
func (s *StackContainerConfigDeployHealthCheck) SetRetries(val int) {
	s.Retries = val
}

// SetInterval sets the value of Interval.
func (s *StackContainerConfigDeployHealthCheck) SetInterval(val Duration) {
	s.Interval = val
}

// SetTimeout sets the value of Timeout.
func (s *StackContainerConfigDeployHealthCheck) SetTimeout(val Duration) {
	s.Timeout = val
}

// SetRestart sets the value of Restart.
func (s *StackContainerConfigDeployHealthCheck) SetRestart(val bool) {
	s.Restart = val
}

// SetDelay sets the value of Delay.
func (s *StackContainerConfigDeployHealthCheck) SetDelay(val OptNilString) {
	s.Delay = val
}

type StackContainerConfigDeployRestart struct {
	Condition   StackContainerConfigDeployRestartCondition    `json:"condition"`
	Delay       Duration                                      `json:"delay"`
	MaxAttempts int                                           `json:"max_attempts"`
	Notify      OptNilStackContainerConfigDeployRestartNotify `json:"notify"`
}

// GetCondition returns the value of Condition.
func (s *StackContainerConfigDeployRestart) GetCondition() StackContainerConfigDeployRestartCondition {
	return s.Condition
}

// GetDelay returns the value of Delay.
func (s *StackContainerConfigDeployRestart) GetDelay() Duration {
	return s.Delay
}

// GetMaxAttempts returns the value of MaxAttempts.
func (s *StackContainerConfigDeployRestart) GetMaxAttempts() int {
	return s.MaxAttempts
}

// GetNotify returns the value of Notify.
func (s *StackContainerConfigDeployRestart) GetNotify() OptNilStackContainerConfigDeployRestartNotify {
	return s.Notify
}

// SetCondition sets the value of Condition.
func (s *StackContainerConfigDeployRestart) SetCondition(val StackContainerConfigDeployRestartCondition) {
	s.Condition = val
}

// SetDelay sets the value of Delay.
func (s *StackContainerConfigDeployRestart) SetDelay(val Duration) {
	s.Delay = val
}

// SetMaxAttempts sets the value of MaxAttempts.
func (s *StackContainerConfigDeployRestart) SetMaxAttempts(val int) {
	s.MaxAttempts = val
}

// SetNotify sets the value of Notify.
func (s *StackContainerConfigDeployRestart) SetNotify(val OptNilStackContainerConfigDeployRestartNotify) {
	s.Notify = val
}

type StackContainerConfigDeployRestartCondition string

const (
	StackContainerConfigDeployRestartConditionAlways  StackContainerConfigDeployRestartCondition = "always"
	StackContainerConfigDeployRestartConditionNever   StackContainerConfigDeployRestartCondition = "never"
	StackContainerConfigDeployRestartConditionFailure StackContainerConfigDeployRestartCondition = "failure"
)

// AllValues returns all StackContainerConfigDeployRestartCondition values.
func (StackContainerConfigDeployRestartCondition) AllValues() []StackContainerConfigDeployRestartCondition {
	return []StackContainerConfigDeployRestartCondition{
		StackContainerConfigDeployRestartConditionAlways,
		StackContainerConfigDeployRestartConditionNever,
		StackContainerConfigDeployRestartConditionFailure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerConfigDeployRestartCondition) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerConfigDeployRestartConditionAlways:
		return []byte(s), nil
	case StackContainerConfigDeployRestartConditionNever:
		return []byte(s), nil
	case StackContainerConfigDeployRestartConditionFailure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerConfigDeployRestartCondition) UnmarshalText(data []byte) error {
	switch StackContainerConfigDeployRestartCondition(data) {
	case StackContainerConfigDeployRestartConditionAlways:
		*s = StackContainerConfigDeployRestartConditionAlways
		return nil
	case StackContainerConfigDeployRestartConditionNever:
		*s = StackContainerConfigDeployRestartConditionNever
		return nil
	case StackContainerConfigDeployRestartConditionFailure:
		*s = StackContainerConfigDeployRestartConditionFailure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerConfigDeployRestartNotify struct {
	Emails  []string  `json:"emails"`
	WebHook OptString `json:"web_hook"`
}

// GetEmails returns the value of Emails.
func (s *StackContainerConfigDeployRestartNotify) GetEmails() []string {
	return s.Emails
}

// GetWebHook returns the value of WebHook.
func (s *StackContainerConfigDeployRestartNotify) GetWebHook() OptString {
	return s.WebHook
}

// SetEmails sets the value of Emails.
func (s *StackContainerConfigDeployRestartNotify) SetEmails(val []string) {
	s.Emails = val
}

// SetWebHook sets the value of WebHook.
func (s *StackContainerConfigDeployRestartNotify) SetWebHook(val OptString) {
	s.WebHook = val
}

type StackContainerConfigDeployShutdown struct {
	// How long the platform will wait for a container to stop gracefully.
	GracefulTimeout OptNilString `json:"graceful_timeout"`
	Signals         []string     `json:"signals"`
}

// GetGracefulTimeout returns the value of GracefulTimeout.
func (s *StackContainerConfigDeployShutdown) GetGracefulTimeout() OptNilString {
	return s.GracefulTimeout
}

// GetSignals returns the value of Signals.
func (s *StackContainerConfigDeployShutdown) GetSignals() []string {
	return s.Signals
}

// SetGracefulTimeout sets the value of GracefulTimeout.
func (s *StackContainerConfigDeployShutdown) SetGracefulTimeout(val OptNilString) {
	s.GracefulTimeout = val
}

// SetSignals sets the value of Signals.
func (s *StackContainerConfigDeployShutdown) SetSignals(val []string) {
	s.Signals = val
}

type StackContainerConfigDeployStartup struct {
	// How long the platform will wait before sending the start signal to the given container.
	Delay OptNilString `json:"delay"`
}

// GetDelay returns the value of Delay.
func (s *StackContainerConfigDeployStartup) GetDelay() OptNilString {
	return s.Delay
}

// SetDelay sets the value of Delay.
func (s *StackContainerConfigDeployStartup) SetDelay(val OptNilString) {
	s.Delay = val
}

type StackContainerConfigDeployStateful struct {
	Options NilStackContainerConfigDeployStatefulOptions `json:"options"`
}

// GetOptions returns the value of Options.
func (s *StackContainerConfigDeployStateful) GetOptions() NilStackContainerConfigDeployStatefulOptions {
	return s.Options
}

// SetOptions sets the value of Options.
func (s *StackContainerConfigDeployStateful) SetOptions(val NilStackContainerConfigDeployStatefulOptions) {
	s.Options = val
}

type StackContainerConfigDeployStatefulOptions struct {
	UseBaseHostname OptNilBool `json:"use_base_hostname"`
}

// GetUseBaseHostname returns the value of UseBaseHostname.
func (s *StackContainerConfigDeployStatefulOptions) GetUseBaseHostname() OptNilBool {
	return s.UseBaseHostname
}

// SetUseBaseHostname sets the value of UseBaseHostname.
func (s *StackContainerConfigDeployStatefulOptions) SetUseBaseHostname(val OptNilBool) {
	s.UseBaseHostname = val
}

type StackContainerConfigDeployStrategy string

const (
	StackContainerConfigDeployStrategyResourceDensity  StackContainerConfigDeployStrategy = "resource-density"
	StackContainerConfigDeployStrategyManual           StackContainerConfigDeployStrategy = "manual"
	StackContainerConfigDeployStrategyHighAvailability StackContainerConfigDeployStrategy = "high-availability"
	StackContainerConfigDeployStrategyFirstAvailable   StackContainerConfigDeployStrategy = "first-available"
	StackContainerConfigDeployStrategyNode             StackContainerConfigDeployStrategy = "node"
	StackContainerConfigDeployStrategyEdge             StackContainerConfigDeployStrategy = "edge"
	StackContainerConfigDeployStrategyFunction         StackContainerConfigDeployStrategy = "function"
)

// AllValues returns all StackContainerConfigDeployStrategy values.
func (StackContainerConfigDeployStrategy) AllValues() []StackContainerConfigDeployStrategy {
	return []StackContainerConfigDeployStrategy{
		StackContainerConfigDeployStrategyResourceDensity,
		StackContainerConfigDeployStrategyManual,
		StackContainerConfigDeployStrategyHighAvailability,
		StackContainerConfigDeployStrategyFirstAvailable,
		StackContainerConfigDeployStrategyNode,
		StackContainerConfigDeployStrategyEdge,
		StackContainerConfigDeployStrategyFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerConfigDeployStrategy) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerConfigDeployStrategyResourceDensity:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyManual:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyHighAvailability:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyFirstAvailable:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyNode:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyEdge:
		return []byte(s), nil
	case StackContainerConfigDeployStrategyFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerConfigDeployStrategy) UnmarshalText(data []byte) error {
	switch StackContainerConfigDeployStrategy(data) {
	case StackContainerConfigDeployStrategyResourceDensity:
		*s = StackContainerConfigDeployStrategyResourceDensity
		return nil
	case StackContainerConfigDeployStrategyManual:
		*s = StackContainerConfigDeployStrategyManual
		return nil
	case StackContainerConfigDeployStrategyHighAvailability:
		*s = StackContainerConfigDeployStrategyHighAvailability
		return nil
	case StackContainerConfigDeployStrategyFirstAvailable:
		*s = StackContainerConfigDeployStrategyFirstAvailable
		return nil
	case StackContainerConfigDeployStrategyNode:
		*s = StackContainerConfigDeployStrategyNode
		return nil
	case StackContainerConfigDeployStrategyEdge:
		*s = StackContainerConfigDeployStrategyEdge
		return nil
	case StackContainerConfigDeployStrategyFunction:
		*s = StackContainerConfigDeployStrategyFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerConfigDeployTelemetry struct {
	// How long telemetry data should be retained.
	Retention OptNilString `json:"retention"`
	// The duration between samples.
	Interval OptNilString `json:"interval"`
	// A URL where Cycle will send telemetry data to.
	WebHook OptNilString `json:"web_hook"`
	Disable bool         `json:"disable"`
}

// GetRetention returns the value of Retention.
func (s *StackContainerConfigDeployTelemetry) GetRetention() OptNilString {
	return s.Retention
}

// GetInterval returns the value of Interval.
func (s *StackContainerConfigDeployTelemetry) GetInterval() OptNilString {
	return s.Interval
}

// GetWebHook returns the value of WebHook.
func (s *StackContainerConfigDeployTelemetry) GetWebHook() OptNilString {
	return s.WebHook
}

// GetDisable returns the value of Disable.
func (s *StackContainerConfigDeployTelemetry) GetDisable() bool {
	return s.Disable
}

// SetRetention sets the value of Retention.
func (s *StackContainerConfigDeployTelemetry) SetRetention(val OptNilString) {
	s.Retention = val
}

// SetInterval sets the value of Interval.
func (s *StackContainerConfigDeployTelemetry) SetInterval(val OptNilString) {
	s.Interval = val
}

// SetWebHook sets the value of WebHook.
func (s *StackContainerConfigDeployTelemetry) SetWebHook(val OptNilString) {
	s.WebHook = val
}

// SetDisable sets the value of Disable.
func (s *StackContainerConfigDeployTelemetry) SetDisable(val bool) {
	s.Disable = val
}

// Configurations for container updates.
type StackContainerConfigDeployUpdate struct {
	// When set, Cycle will pick a random time from `0 - this duration`, and stagger the instances so
	// they all start at different times (up to the time specified here).
	Stagger OptNilString `json:"stagger"`
}

// GetStagger returns the value of Stagger.
func (s *StackContainerConfigDeployUpdate) GetStagger() OptNilString {
	return s.Stagger
}

// SetStagger sets the value of Stagger.
func (s *StackContainerConfigDeployUpdate) SetStagger(val OptNilString) {
	s.Stagger = val
}

// Ref: #/components/schemas/StackContainerConfigNetwork
type StackContainerConfigNetwork struct {
	Public   StackContainerConfigNetworkPublic `json:"public"`
	Hostname string                            `json:"hostname"`
	Ports    []string                          `json:"ports"`
}

// GetPublic returns the value of Public.
func (s *StackContainerConfigNetwork) GetPublic() StackContainerConfigNetworkPublic {
	return s.Public
}

// GetHostname returns the value of Hostname.
func (s *StackContainerConfigNetwork) GetHostname() string {
	return s.Hostname
}

// GetPorts returns the value of Ports.
func (s *StackContainerConfigNetwork) GetPorts() []string {
	return s.Ports
}

// SetPublic sets the value of Public.
func (s *StackContainerConfigNetwork) SetPublic(val StackContainerConfigNetworkPublic) {
	s.Public = val
}

// SetHostname sets the value of Hostname.
func (s *StackContainerConfigNetwork) SetHostname(val string) {
	s.Hostname = val
}

// SetPorts sets the value of Ports.
func (s *StackContainerConfigNetwork) SetPorts(val []string) {
	s.Ports = val
}

type StackContainerConfigNetworkPublic string

const (
	StackContainerConfigNetworkPublicEnable     StackContainerConfigNetworkPublic = "enable"
	StackContainerConfigNetworkPublicDisable    StackContainerConfigNetworkPublic = "disable"
	StackContainerConfigNetworkPublicEgressOnly StackContainerConfigNetworkPublic = "egress-only"
)

// AllValues returns all StackContainerConfigNetworkPublic values.
func (StackContainerConfigNetworkPublic) AllValues() []StackContainerConfigNetworkPublic {
	return []StackContainerConfigNetworkPublic{
		StackContainerConfigNetworkPublicEnable,
		StackContainerConfigNetworkPublicDisable,
		StackContainerConfigNetworkPublicEgressOnly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerConfigNetworkPublic) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerConfigNetworkPublicEnable:
		return []byte(s), nil
	case StackContainerConfigNetworkPublicDisable:
		return []byte(s), nil
	case StackContainerConfigNetworkPublicEgressOnly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerConfigNetworkPublic) UnmarshalText(data []byte) error {
	switch StackContainerConfigNetworkPublic(data) {
	case StackContainerConfigNetworkPublicEnable:
		*s = StackContainerConfigNetworkPublicEnable
		return nil
	case StackContainerConfigNetworkPublicDisable:
		*s = StackContainerConfigNetworkPublicDisable
		return nil
	case StackContainerConfigNetworkPublicEgressOnly:
		*s = StackContainerConfigNetworkPublicEgressOnly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Stacks container object.
type StackContainerItem struct {
	Name  string                  `json:"name"`
	Image StackSpecContainerImage `json:"image"`
	// Additional meta info about the container.
	Annotations OptNilStackContainerItemAnnotations      `json:"annotations"`
	Stateful    bool                                     `json:"stateful"`
	Config      StackContainerItemConfig                 `json:"config"`
	Role        OptNilStackContainerItemRole             `json:"role"`
	Pod         OptNilString                             `json:"pod"`
	Volumes     OptNilStackContainerItemVolumesItemArray `json:"volumes"`
	Deprecate   OptBool                                  `json:"deprecate"`
	Lock        OptBool                                  `json:"lock"`
}

// GetName returns the value of Name.
func (s *StackContainerItem) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *StackContainerItem) GetImage() StackSpecContainerImage {
	return s.Image
}

// GetAnnotations returns the value of Annotations.
func (s *StackContainerItem) GetAnnotations() OptNilStackContainerItemAnnotations {
	return s.Annotations
}

// GetStateful returns the value of Stateful.
func (s *StackContainerItem) GetStateful() bool {
	return s.Stateful
}

// GetConfig returns the value of Config.
func (s *StackContainerItem) GetConfig() StackContainerItemConfig {
	return s.Config
}

// GetRole returns the value of Role.
func (s *StackContainerItem) GetRole() OptNilStackContainerItemRole {
	return s.Role
}

// GetPod returns the value of Pod.
func (s *StackContainerItem) GetPod() OptNilString {
	return s.Pod
}

// GetVolumes returns the value of Volumes.
func (s *StackContainerItem) GetVolumes() OptNilStackContainerItemVolumesItemArray {
	return s.Volumes
}

// GetDeprecate returns the value of Deprecate.
func (s *StackContainerItem) GetDeprecate() OptBool {
	return s.Deprecate
}

// GetLock returns the value of Lock.
func (s *StackContainerItem) GetLock() OptBool {
	return s.Lock
}

// SetName sets the value of Name.
func (s *StackContainerItem) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *StackContainerItem) SetImage(val StackSpecContainerImage) {
	s.Image = val
}

// SetAnnotations sets the value of Annotations.
func (s *StackContainerItem) SetAnnotations(val OptNilStackContainerItemAnnotations) {
	s.Annotations = val
}

// SetStateful sets the value of Stateful.
func (s *StackContainerItem) SetStateful(val bool) {
	s.Stateful = val
}

// SetConfig sets the value of Config.
func (s *StackContainerItem) SetConfig(val StackContainerItemConfig) {
	s.Config = val
}

// SetRole sets the value of Role.
func (s *StackContainerItem) SetRole(val OptNilStackContainerItemRole) {
	s.Role = val
}

// SetPod sets the value of Pod.
func (s *StackContainerItem) SetPod(val OptNilString) {
	s.Pod = val
}

// SetVolumes sets the value of Volumes.
func (s *StackContainerItem) SetVolumes(val OptNilStackContainerItemVolumesItemArray) {
	s.Volumes = val
}

// SetDeprecate sets the value of Deprecate.
func (s *StackContainerItem) SetDeprecate(val OptBool) {
	s.Deprecate = val
}

// SetLock sets the value of Lock.
func (s *StackContainerItem) SetLock(val OptBool) {
	s.Lock = val
}

// Additional meta info about the container.
type StackContainerItemAnnotations map[string]jx.Raw

func (s *StackContainerItemAnnotations) init() StackContainerItemAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type StackContainerItemConfig struct {
	Network      StackContainerConfigNetwork                `json:"network"`
	Deploy       StackContainerConfigDeploy                 `json:"deploy"`
	Scaling      OptNilStackContainerItemConfigScaling      `json:"scaling"`
	Runtime      OptNilStackContainerItemConfigRuntime      `json:"runtime"`
	Resources    OptNilStackContainerItemConfigResources    `json:"resources"`
	Integrations OptNilStackContainerItemConfigIntegrations `json:"integrations"`
}

// GetNetwork returns the value of Network.
func (s *StackContainerItemConfig) GetNetwork() StackContainerConfigNetwork {
	return s.Network
}

// GetDeploy returns the value of Deploy.
func (s *StackContainerItemConfig) GetDeploy() StackContainerConfigDeploy {
	return s.Deploy
}

// GetScaling returns the value of Scaling.
func (s *StackContainerItemConfig) GetScaling() OptNilStackContainerItemConfigScaling {
	return s.Scaling
}

// GetRuntime returns the value of Runtime.
func (s *StackContainerItemConfig) GetRuntime() OptNilStackContainerItemConfigRuntime {
	return s.Runtime
}

// GetResources returns the value of Resources.
func (s *StackContainerItemConfig) GetResources() OptNilStackContainerItemConfigResources {
	return s.Resources
}

// GetIntegrations returns the value of Integrations.
func (s *StackContainerItemConfig) GetIntegrations() OptNilStackContainerItemConfigIntegrations {
	return s.Integrations
}

// SetNetwork sets the value of Network.
func (s *StackContainerItemConfig) SetNetwork(val StackContainerConfigNetwork) {
	s.Network = val
}

// SetDeploy sets the value of Deploy.
func (s *StackContainerItemConfig) SetDeploy(val StackContainerConfigDeploy) {
	s.Deploy = val
}

// SetScaling sets the value of Scaling.
func (s *StackContainerItemConfig) SetScaling(val OptNilStackContainerItemConfigScaling) {
	s.Scaling = val
}

// SetRuntime sets the value of Runtime.
func (s *StackContainerItemConfig) SetRuntime(val OptNilStackContainerItemConfigRuntime) {
	s.Runtime = val
}

// SetResources sets the value of Resources.
func (s *StackContainerItemConfig) SetResources(val OptNilStackContainerItemConfigResources) {
	s.Resources = val
}

// SetIntegrations sets the value of Integrations.
func (s *StackContainerItemConfig) SetIntegrations(val OptNilStackContainerItemConfigIntegrations) {
	s.Integrations = val
}

type StackContainerItemConfigIntegrations struct {
	Webhooks          OptNilStackContainerItemConfigIntegrationsWebhooks          `json:"webhooks"`
	LetsEncrypt       OptNilStackContainerItemConfigIntegrationsLetsEncrypt       `json:"lets_encrypt"`
	Files             OptNilStackContainerItemConfigIntegrationsFilesItemArray    `json:"files"`
	Backups           OptNilStackContainerItemConfigIntegrationsBackups           `json:"backups"`
	SharedFileSystems OptNilStackContainerItemConfigIntegrationsSharedFileSystems `json:"shared_file_systems"`
}

// GetWebhooks returns the value of Webhooks.
func (s *StackContainerItemConfigIntegrations) GetWebhooks() OptNilStackContainerItemConfigIntegrationsWebhooks {
	return s.Webhooks
}

// GetLetsEncrypt returns the value of LetsEncrypt.
func (s *StackContainerItemConfigIntegrations) GetLetsEncrypt() OptNilStackContainerItemConfigIntegrationsLetsEncrypt {
	return s.LetsEncrypt
}

// GetFiles returns the value of Files.
func (s *StackContainerItemConfigIntegrations) GetFiles() OptNilStackContainerItemConfigIntegrationsFilesItemArray {
	return s.Files
}

// GetBackups returns the value of Backups.
func (s *StackContainerItemConfigIntegrations) GetBackups() OptNilStackContainerItemConfigIntegrationsBackups {
	return s.Backups
}

// GetSharedFileSystems returns the value of SharedFileSystems.
func (s *StackContainerItemConfigIntegrations) GetSharedFileSystems() OptNilStackContainerItemConfigIntegrationsSharedFileSystems {
	return s.SharedFileSystems
}

// SetWebhooks sets the value of Webhooks.
func (s *StackContainerItemConfigIntegrations) SetWebhooks(val OptNilStackContainerItemConfigIntegrationsWebhooks) {
	s.Webhooks = val
}

// SetLetsEncrypt sets the value of LetsEncrypt.
func (s *StackContainerItemConfigIntegrations) SetLetsEncrypt(val OptNilStackContainerItemConfigIntegrationsLetsEncrypt) {
	s.LetsEncrypt = val
}

// SetFiles sets the value of Files.
func (s *StackContainerItemConfigIntegrations) SetFiles(val OptNilStackContainerItemConfigIntegrationsFilesItemArray) {
	s.Files = val
}

// SetBackups sets the value of Backups.
func (s *StackContainerItemConfigIntegrations) SetBackups(val OptNilStackContainerItemConfigIntegrationsBackups) {
	s.Backups = val
}

// SetSharedFileSystems sets the value of SharedFileSystems.
func (s *StackContainerItemConfigIntegrations) SetSharedFileSystems(val OptNilStackContainerItemConfigIntegrationsSharedFileSystems) {
	s.SharedFileSystems = val
}

type StackContainerItemConfigIntegrationsBackups struct {
	Destination string                                                `json:"destination"`
	Backup      StackContainerItemConfigIntegrationsBackupsBackup     `json:"backup"`
	Restore     NilStackContainerItemConfigIntegrationsBackupsRestore `json:"restore"`
	// How long the platform will keep backups. Default is 1 year.
	Retention NilString `json:"retention"`
}

// GetDestination returns the value of Destination.
func (s *StackContainerItemConfigIntegrationsBackups) GetDestination() string {
	return s.Destination
}

// GetBackup returns the value of Backup.
func (s *StackContainerItemConfigIntegrationsBackups) GetBackup() StackContainerItemConfigIntegrationsBackupsBackup {
	return s.Backup
}

// GetRestore returns the value of Restore.
func (s *StackContainerItemConfigIntegrationsBackups) GetRestore() NilStackContainerItemConfigIntegrationsBackupsRestore {
	return s.Restore
}

// GetRetention returns the value of Retention.
func (s *StackContainerItemConfigIntegrationsBackups) GetRetention() NilString {
	return s.Retention
}

// SetDestination sets the value of Destination.
func (s *StackContainerItemConfigIntegrationsBackups) SetDestination(val string) {
	s.Destination = val
}

// SetBackup sets the value of Backup.
func (s *StackContainerItemConfigIntegrationsBackups) SetBackup(val StackContainerItemConfigIntegrationsBackupsBackup) {
	s.Backup = val
}

// SetRestore sets the value of Restore.
func (s *StackContainerItemConfigIntegrationsBackups) SetRestore(val NilStackContainerItemConfigIntegrationsBackupsRestore) {
	s.Restore = val
}

// SetRetention sets the value of Retention.
func (s *StackContainerItemConfigIntegrationsBackups) SetRetention(val NilString) {
	s.Retention = val
}

type StackContainerItemConfigIntegrationsBackupsBackup struct {
	Command string `json:"command"`
	// How long the backup will attempt to run before timing out.
	Timeout    NilString `json:"timeout"`
	CronString NilString `json:"cron_string"`
}

// GetCommand returns the value of Command.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) GetTimeout() NilString {
	return s.Timeout
}

// GetCronString returns the value of CronString.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) GetCronString() NilString {
	return s.CronString
}

// SetCommand sets the value of Command.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) SetTimeout(val NilString) {
	s.Timeout = val
}

// SetCronString sets the value of CronString.
func (s *StackContainerItemConfigIntegrationsBackupsBackup) SetCronString(val NilString) {
	s.CronString = val
}

type StackContainerItemConfigIntegrationsBackupsRestore struct {
	Command string `json:"command"`
	// The time in seconds for the restore to attempt to complete before timing out.
	Timeout NilString `json:"timeout"`
}

// GetCommand returns the value of Command.
func (s *StackContainerItemConfigIntegrationsBackupsRestore) GetCommand() string {
	return s.Command
}

// GetTimeout returns the value of Timeout.
func (s *StackContainerItemConfigIntegrationsBackupsRestore) GetTimeout() NilString {
	return s.Timeout
}

// SetCommand sets the value of Command.
func (s *StackContainerItemConfigIntegrationsBackupsRestore) SetCommand(val string) {
	s.Command = val
}

// SetTimeout sets the value of Timeout.
func (s *StackContainerItemConfigIntegrationsBackupsRestore) SetTimeout(val NilString) {
	s.Timeout = val
}

type StackContainerItemConfigIntegrationsFilesItem struct {
	Source      string `json:"source"`
	Destination string `json:"destination"`
}

// GetSource returns the value of Source.
func (s *StackContainerItemConfigIntegrationsFilesItem) GetSource() string {
	return s.Source
}

// GetDestination returns the value of Destination.
func (s *StackContainerItemConfigIntegrationsFilesItem) GetDestination() string {
	return s.Destination
}

// SetSource sets the value of Source.
func (s *StackContainerItemConfigIntegrationsFilesItem) SetSource(val string) {
	s.Source = val
}

// SetDestination sets the value of Destination.
func (s *StackContainerItemConfigIntegrationsFilesItem) SetDestination(val string) {
	s.Destination = val
}

type StackContainerItemConfigIntegrationsLetsEncrypt struct {
	Enable              bool         `json:"enable"`
	CertificatePath     OptNilString `json:"certificate_path"`
	ChainPath           OptNilString `json:"chain_path"`
	KeyPath             OptNilString `json:"key_path"`
	BundlePath          OptNilString `json:"bundle_path"`
	AdditionalCertsPath OptNilString `json:"additional_certs_path"`
}

// GetEnable returns the value of Enable.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetEnable() bool {
	return s.Enable
}

// GetCertificatePath returns the value of CertificatePath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetCertificatePath() OptNilString {
	return s.CertificatePath
}

// GetChainPath returns the value of ChainPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetChainPath() OptNilString {
	return s.ChainPath
}

// GetKeyPath returns the value of KeyPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetKeyPath() OptNilString {
	return s.KeyPath
}

// GetBundlePath returns the value of BundlePath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetBundlePath() OptNilString {
	return s.BundlePath
}

// GetAdditionalCertsPath returns the value of AdditionalCertsPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) GetAdditionalCertsPath() OptNilString {
	return s.AdditionalCertsPath
}

// SetEnable sets the value of Enable.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetEnable(val bool) {
	s.Enable = val
}

// SetCertificatePath sets the value of CertificatePath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetCertificatePath(val OptNilString) {
	s.CertificatePath = val
}

// SetChainPath sets the value of ChainPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetChainPath(val OptNilString) {
	s.ChainPath = val
}

// SetKeyPath sets the value of KeyPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetKeyPath(val OptNilString) {
	s.KeyPath = val
}

// SetBundlePath sets the value of BundlePath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetBundlePath(val OptNilString) {
	s.BundlePath = val
}

// SetAdditionalCertsPath sets the value of AdditionalCertsPath.
func (s *StackContainerItemConfigIntegrationsLetsEncrypt) SetAdditionalCertsPath(val OptNilString) {
	s.AdditionalCertsPath = val
}

type StackContainerItemConfigIntegrationsSharedFileSystems map[string]StackContainerItemConfigIntegrationsSharedFileSystemsItem

func (s *StackContainerItemConfigIntegrationsSharedFileSystems) init() StackContainerItemConfigIntegrationsSharedFileSystems {
	m := *s
	if m == nil {
		m = map[string]StackContainerItemConfigIntegrationsSharedFileSystemsItem{}
		*s = m
	}
	return m
}

type StackContainerItemConfigIntegrationsSharedFileSystemsItem struct {
	Writable   bool   `json:"writable"`
	MountPoint string `json:"mount_point"`
}

// GetWritable returns the value of Writable.
func (s *StackContainerItemConfigIntegrationsSharedFileSystemsItem) GetWritable() bool {
	return s.Writable
}

// GetMountPoint returns the value of MountPoint.
func (s *StackContainerItemConfigIntegrationsSharedFileSystemsItem) GetMountPoint() string {
	return s.MountPoint
}

// SetWritable sets the value of Writable.
func (s *StackContainerItemConfigIntegrationsSharedFileSystemsItem) SetWritable(val bool) {
	s.Writable = val
}

// SetMountPoint sets the value of MountPoint.
func (s *StackContainerItemConfigIntegrationsSharedFileSystemsItem) SetMountPoint(val string) {
	s.MountPoint = val
}

type StackContainerItemConfigIntegrationsWebhooks struct {
	Events OptNilStackContainerItemConfigIntegrationsWebhooksEvents `json:"events"`
	Config OptNilString                                             `json:"config"`
}

// GetEvents returns the value of Events.
func (s *StackContainerItemConfigIntegrationsWebhooks) GetEvents() OptNilStackContainerItemConfigIntegrationsWebhooksEvents {
	return s.Events
}

// GetConfig returns the value of Config.
func (s *StackContainerItemConfigIntegrationsWebhooks) GetConfig() OptNilString {
	return s.Config
}

// SetEvents sets the value of Events.
func (s *StackContainerItemConfigIntegrationsWebhooks) SetEvents(val OptNilStackContainerItemConfigIntegrationsWebhooksEvents) {
	s.Events = val
}

// SetConfig sets the value of Config.
func (s *StackContainerItemConfigIntegrationsWebhooks) SetConfig(val OptNilString) {
	s.Config = val
}

type StackContainerItemConfigIntegrationsWebhooksEvents struct {
	Deploy OptNilString `json:"deploy"`
	Start  OptNilString `json:"start"`
	Stop   OptNilString `json:"stop"`
}

// GetDeploy returns the value of Deploy.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) GetDeploy() OptNilString {
	return s.Deploy
}

// GetStart returns the value of Start.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) GetStart() OptNilString {
	return s.Start
}

// GetStop returns the value of Stop.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) GetStop() OptNilString {
	return s.Stop
}

// SetDeploy sets the value of Deploy.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) SetDeploy(val OptNilString) {
	s.Deploy = val
}

// SetStart sets the value of Start.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) SetStart(val OptNilString) {
	s.Start = val
}

// SetStop sets the value of Stop.
func (s *StackContainerItemConfigIntegrationsWebhooksEvents) SetStop(val OptNilString) {
	s.Stop = val
}

type StackContainerItemConfigResources struct {
	CPU StackContainerItemConfigResourcesCPU `json:"cpu"`
	RAM StackContainerItemConfigResourcesRAM `json:"ram"`
}

// GetCPU returns the value of CPU.
func (s *StackContainerItemConfigResources) GetCPU() StackContainerItemConfigResourcesCPU {
	return s.CPU
}

// GetRAM returns the value of RAM.
func (s *StackContainerItemConfigResources) GetRAM() StackContainerItemConfigResourcesRAM {
	return s.RAM
}

// SetCPU sets the value of CPU.
func (s *StackContainerItemConfigResources) SetCPU(val StackContainerItemConfigResourcesCPU) {
	s.CPU = val
}

// SetRAM sets the value of RAM.
func (s *StackContainerItemConfigResources) SetRAM(val StackContainerItemConfigResourcesRAM) {
	s.RAM = val
}

type StackContainerItemConfigResourcesCPU struct {
	Shares OptStackContainerItemConfigResourcesCPUShares `json:"shares"`
	Cpus   OptString                                     `json:"cpus"`
}

// GetShares returns the value of Shares.
func (s *StackContainerItemConfigResourcesCPU) GetShares() OptStackContainerItemConfigResourcesCPUShares {
	return s.Shares
}

// GetCpus returns the value of Cpus.
func (s *StackContainerItemConfigResourcesCPU) GetCpus() OptString {
	return s.Cpus
}

// SetShares sets the value of Shares.
func (s *StackContainerItemConfigResourcesCPU) SetShares(val OptStackContainerItemConfigResourcesCPUShares) {
	s.Shares = val
}

// SetCpus sets the value of Cpus.
func (s *StackContainerItemConfigResourcesCPU) SetCpus(val OptString) {
	s.Cpus = val
}

type StackContainerItemConfigResourcesCPUShares struct {
	Limit   int `json:"limit"`
	Reserve int `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *StackContainerItemConfigResourcesCPUShares) GetLimit() int {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *StackContainerItemConfigResourcesCPUShares) GetReserve() int {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *StackContainerItemConfigResourcesCPUShares) SetLimit(val int) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *StackContainerItemConfigResourcesCPUShares) SetReserve(val int) {
	s.Reserve = val
}

type StackContainerItemConfigResourcesRAM struct {
	Limit      OptString  `json:"limit"`
	Reserve    OptString  `json:"reserve"`
	Swappiness OptFloat64 `json:"swappiness"`
}

// GetLimit returns the value of Limit.
func (s *StackContainerItemConfigResourcesRAM) GetLimit() OptString {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *StackContainerItemConfigResourcesRAM) GetReserve() OptString {
	return s.Reserve
}

// GetSwappiness returns the value of Swappiness.
func (s *StackContainerItemConfigResourcesRAM) GetSwappiness() OptFloat64 {
	return s.Swappiness
}

// SetLimit sets the value of Limit.
func (s *StackContainerItemConfigResourcesRAM) SetLimit(val OptString) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *StackContainerItemConfigResourcesRAM) SetReserve(val OptString) {
	s.Reserve = val
}

// SetSwappiness sets the value of Swappiness.
func (s *StackContainerItemConfigResourcesRAM) SetSwappiness(val OptFloat64) {
	s.Swappiness = val
}

type StackContainerItemConfigRuntime struct {
	Workdir         OptString                                         `json:"workdir"`
	Command         OptStackContainerItemConfigRuntimeCommand         `json:"command"`
	EnvironmentVars OptStackContainerItemConfigRuntimeEnvironmentVars `json:"environment_vars"`
	Namespaces      []StackContainerItemConfigRuntimeNamespacesItem   `json:"namespaces"`
	Sysctl          OptStackContainerItemConfigRuntimeSysctl          `json:"sysctl"`
	Rlimits         OptStackContainerItemConfigRuntimeRlimits         `json:"rlimits"`
	Seccomp         OptStackContainerItemConfigRuntimeSeccomp         `json:"seccomp"`
	Host            OptNilStackContainerItemConfigRuntimeHost         `json:"host"`
	Privileged      OptBool                                           `json:"privileged"`
	Capabilities    []StackContainerItemConfigRuntimeCapabilitiesItem `json:"capabilities"`
	Rootfs          OptStackContainerItemConfigRuntimeRootfs          `json:"rootfs"`
}

// GetWorkdir returns the value of Workdir.
func (s *StackContainerItemConfigRuntime) GetWorkdir() OptString {
	return s.Workdir
}

// GetCommand returns the value of Command.
func (s *StackContainerItemConfigRuntime) GetCommand() OptStackContainerItemConfigRuntimeCommand {
	return s.Command
}

// GetEnvironmentVars returns the value of EnvironmentVars.
func (s *StackContainerItemConfigRuntime) GetEnvironmentVars() OptStackContainerItemConfigRuntimeEnvironmentVars {
	return s.EnvironmentVars
}

// GetNamespaces returns the value of Namespaces.
func (s *StackContainerItemConfigRuntime) GetNamespaces() []StackContainerItemConfigRuntimeNamespacesItem {
	return s.Namespaces
}

// GetSysctl returns the value of Sysctl.
func (s *StackContainerItemConfigRuntime) GetSysctl() OptStackContainerItemConfigRuntimeSysctl {
	return s.Sysctl
}

// GetRlimits returns the value of Rlimits.
func (s *StackContainerItemConfigRuntime) GetRlimits() OptStackContainerItemConfigRuntimeRlimits {
	return s.Rlimits
}

// GetSeccomp returns the value of Seccomp.
func (s *StackContainerItemConfigRuntime) GetSeccomp() OptStackContainerItemConfigRuntimeSeccomp {
	return s.Seccomp
}

// GetHost returns the value of Host.
func (s *StackContainerItemConfigRuntime) GetHost() OptNilStackContainerItemConfigRuntimeHost {
	return s.Host
}

// GetPrivileged returns the value of Privileged.
func (s *StackContainerItemConfigRuntime) GetPrivileged() OptBool {
	return s.Privileged
}

// GetCapabilities returns the value of Capabilities.
func (s *StackContainerItemConfigRuntime) GetCapabilities() []StackContainerItemConfigRuntimeCapabilitiesItem {
	return s.Capabilities
}

// GetRootfs returns the value of Rootfs.
func (s *StackContainerItemConfigRuntime) GetRootfs() OptStackContainerItemConfigRuntimeRootfs {
	return s.Rootfs
}

// SetWorkdir sets the value of Workdir.
func (s *StackContainerItemConfigRuntime) SetWorkdir(val OptString) {
	s.Workdir = val
}

// SetCommand sets the value of Command.
func (s *StackContainerItemConfigRuntime) SetCommand(val OptStackContainerItemConfigRuntimeCommand) {
	s.Command = val
}

// SetEnvironmentVars sets the value of EnvironmentVars.
func (s *StackContainerItemConfigRuntime) SetEnvironmentVars(val OptStackContainerItemConfigRuntimeEnvironmentVars) {
	s.EnvironmentVars = val
}

// SetNamespaces sets the value of Namespaces.
func (s *StackContainerItemConfigRuntime) SetNamespaces(val []StackContainerItemConfigRuntimeNamespacesItem) {
	s.Namespaces = val
}

// SetSysctl sets the value of Sysctl.
func (s *StackContainerItemConfigRuntime) SetSysctl(val OptStackContainerItemConfigRuntimeSysctl) {
	s.Sysctl = val
}

// SetRlimits sets the value of Rlimits.
func (s *StackContainerItemConfigRuntime) SetRlimits(val OptStackContainerItemConfigRuntimeRlimits) {
	s.Rlimits = val
}

// SetSeccomp sets the value of Seccomp.
func (s *StackContainerItemConfigRuntime) SetSeccomp(val OptStackContainerItemConfigRuntimeSeccomp) {
	s.Seccomp = val
}

// SetHost sets the value of Host.
func (s *StackContainerItemConfigRuntime) SetHost(val OptNilStackContainerItemConfigRuntimeHost) {
	s.Host = val
}

// SetPrivileged sets the value of Privileged.
func (s *StackContainerItemConfigRuntime) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetCapabilities sets the value of Capabilities.
func (s *StackContainerItemConfigRuntime) SetCapabilities(val []StackContainerItemConfigRuntimeCapabilitiesItem) {
	s.Capabilities = val
}

// SetRootfs sets the value of Rootfs.
func (s *StackContainerItemConfigRuntime) SetRootfs(val OptStackContainerItemConfigRuntimeRootfs) {
	s.Rootfs = val
}

type StackContainerItemConfigRuntimeCapabilitiesItem string

const (
	StackContainerItemConfigRuntimeCapabilitiesItemCAPCHOWN          StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_CHOWN"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPFSETID         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_FSETID"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPDACOVERRIDE    StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_DAC_OVERRIDE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPFOWNER         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_FOWNER"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSETFCAP        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SETFCAP"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSETGID         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SETGID"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSETUID         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SETUID"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPKILL           StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_KILL"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPMKNOD          StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_MKNOD"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_NET_BIND_SERVICE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPNETRAW         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_NET_RAW"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITWRITE     StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_AUDIT_WRITE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSCHROOT      StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_CHROOT"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSETPCAP        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SETPCAP"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPDACREADSEARCH  StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_DAC_READ_SEARCH"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPNETADMIN       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_NET_ADMIN"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBROADCAST   StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_NET_BROADCAST"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSADMIN       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_ADMIN"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSMODULE      StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_MODULE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSNICE        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_NICE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPACCT       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_PACCT"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPTRACE      StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_PTRACE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRAWIO       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_RAWIO"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRESOURCE    StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_RESOURCE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSBOOT        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_BOOT"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTIME        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_TIME"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG   StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYS_TTY_CONFIG"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSLOG         StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_SYSLOG"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITCONTROL   StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_AUDIT_CONTROL"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITREAD      StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_AUDIT_READ"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCLOCK        StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_IPC_LOCK"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCOWNER       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_IPC_OWNER"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_LINUX_IMMUTABLE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPMACADMIN       StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_MAC_ADMIN"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPMACOVERRIDE    StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_MAC_OVERRIDE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND   StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_BLOCK_SUSPEND"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPLEASE          StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_LEASE"
	StackContainerItemConfigRuntimeCapabilitiesItemCAPWAKEALARM      StackContainerItemConfigRuntimeCapabilitiesItem = "CAP_WAKE_ALARM"
)

// AllValues returns all StackContainerItemConfigRuntimeCapabilitiesItem values.
func (StackContainerItemConfigRuntimeCapabilitiesItem) AllValues() []StackContainerItemConfigRuntimeCapabilitiesItem {
	return []StackContainerItemConfigRuntimeCapabilitiesItem{
		StackContainerItemConfigRuntimeCapabilitiesItemCAPCHOWN,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPFSETID,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPDACOVERRIDE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPFOWNER,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSETFCAP,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSETGID,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSETUID,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPKILL,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPMKNOD,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPNETRAW,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITWRITE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSCHROOT,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSETPCAP,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPDACREADSEARCH,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPNETADMIN,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBROADCAST,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSADMIN,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSMODULE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSNICE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPACCT,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPTRACE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRAWIO,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRESOURCE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSBOOT,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTIME,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSLOG,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITCONTROL,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITREAD,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCLOCK,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCOWNER,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPMACADMIN,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPMACOVERRIDE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPLEASE,
		StackContainerItemConfigRuntimeCapabilitiesItemCAPWAKEALARM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemConfigRuntimeCapabilitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPCHOWN:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPFSETID:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPDACOVERRIDE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPFOWNER:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETFCAP:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETGID:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETUID:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPKILL:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMKNOD:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETRAW:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITWRITE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSCHROOT:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETPCAP:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPDACREADSEARCH:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETADMIN:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBROADCAST:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSADMIN:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSMODULE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSNICE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPACCT:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPTRACE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRAWIO:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRESOURCE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSBOOT:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTIME:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSLOG:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITCONTROL:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITREAD:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCLOCK:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCOWNER:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMACADMIN:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMACOVERRIDE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPLEASE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPWAKEALARM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemConfigRuntimeCapabilitiesItem) UnmarshalText(data []byte) error {
	switch StackContainerItemConfigRuntimeCapabilitiesItem(data) {
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPCHOWN:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPCHOWN
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPFSETID:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPFSETID
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPDACOVERRIDE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPDACOVERRIDE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPFOWNER:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPFOWNER
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETFCAP:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSETFCAP
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETGID:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSETGID
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETUID:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSETUID
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPKILL:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPKILL
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMKNOD:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPMKNOD
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETRAW:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPNETRAW
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITWRITE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITWRITE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSCHROOT:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSCHROOT
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSETPCAP:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSETPCAP
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPDACREADSEARCH:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPDACREADSEARCH
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETADMIN:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPNETADMIN
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBROADCAST:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPNETBROADCAST
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSADMIN:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSADMIN
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSMODULE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSMODULE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSNICE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSNICE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPACCT:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPACCT
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPTRACE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSPTRACE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRAWIO:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRAWIO
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRESOURCE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSRESOURCE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSBOOT:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSBOOT
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTIME:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTIME
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSLOG:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPSYSLOG
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITCONTROL:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITCONTROL
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITREAD:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPAUDITREAD
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCLOCK:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCLOCK
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCOWNER:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPIPCOWNER
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMACADMIN:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPMACADMIN
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPMACOVERRIDE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPMACOVERRIDE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPLEASE:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPLEASE
		return nil
	case StackContainerItemConfigRuntimeCapabilitiesItemCAPWAKEALARM:
		*s = StackContainerItemConfigRuntimeCapabilitiesItemCAPWAKEALARM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerItemConfigRuntimeCommand struct {
	Path OptString `json:"path"`
	Args OptString `json:"args"`
}

// GetPath returns the value of Path.
func (s *StackContainerItemConfigRuntimeCommand) GetPath() OptString {
	return s.Path
}

// GetArgs returns the value of Args.
func (s *StackContainerItemConfigRuntimeCommand) GetArgs() OptString {
	return s.Args
}

// SetPath sets the value of Path.
func (s *StackContainerItemConfigRuntimeCommand) SetPath(val OptString) {
	s.Path = val
}

// SetArgs sets the value of Args.
func (s *StackContainerItemConfigRuntimeCommand) SetArgs(val OptString) {
	s.Args = val
}

type StackContainerItemConfigRuntimeEnvironmentVars map[string]string

func (s *StackContainerItemConfigRuntimeEnvironmentVars) init() StackContainerItemConfigRuntimeEnvironmentVars {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackContainerItemConfigRuntimeHost struct {
	ExposeProc OptNilBool `json:"expose_proc"`
}

// GetExposeProc returns the value of ExposeProc.
func (s *StackContainerItemConfigRuntimeHost) GetExposeProc() OptNilBool {
	return s.ExposeProc
}

// SetExposeProc sets the value of ExposeProc.
func (s *StackContainerItemConfigRuntimeHost) SetExposeProc(val OptNilBool) {
	s.ExposeProc = val
}

type StackContainerItemConfigRuntimeNamespacesItem string

const (
	StackContainerItemConfigRuntimeNamespacesItemIpc     StackContainerItemConfigRuntimeNamespacesItem = "ipc"
	StackContainerItemConfigRuntimeNamespacesItemPid     StackContainerItemConfigRuntimeNamespacesItem = "pid"
	StackContainerItemConfigRuntimeNamespacesItemUts     StackContainerItemConfigRuntimeNamespacesItem = "uts"
	StackContainerItemConfigRuntimeNamespacesItemNetwork StackContainerItemConfigRuntimeNamespacesItem = "network"
	StackContainerItemConfigRuntimeNamespacesItemMount   StackContainerItemConfigRuntimeNamespacesItem = "mount"
	StackContainerItemConfigRuntimeNamespacesItemUser    StackContainerItemConfigRuntimeNamespacesItem = "user"
	StackContainerItemConfigRuntimeNamespacesItemCgroup  StackContainerItemConfigRuntimeNamespacesItem = "cgroup"
)

// AllValues returns all StackContainerItemConfigRuntimeNamespacesItem values.
func (StackContainerItemConfigRuntimeNamespacesItem) AllValues() []StackContainerItemConfigRuntimeNamespacesItem {
	return []StackContainerItemConfigRuntimeNamespacesItem{
		StackContainerItemConfigRuntimeNamespacesItemIpc,
		StackContainerItemConfigRuntimeNamespacesItemPid,
		StackContainerItemConfigRuntimeNamespacesItemUts,
		StackContainerItemConfigRuntimeNamespacesItemNetwork,
		StackContainerItemConfigRuntimeNamespacesItemMount,
		StackContainerItemConfigRuntimeNamespacesItemUser,
		StackContainerItemConfigRuntimeNamespacesItemCgroup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemConfigRuntimeNamespacesItem) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemConfigRuntimeNamespacesItemIpc:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemPid:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemUts:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemNetwork:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemMount:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemUser:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeNamespacesItemCgroup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemConfigRuntimeNamespacesItem) UnmarshalText(data []byte) error {
	switch StackContainerItemConfigRuntimeNamespacesItem(data) {
	case StackContainerItemConfigRuntimeNamespacesItemIpc:
		*s = StackContainerItemConfigRuntimeNamespacesItemIpc
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemPid:
		*s = StackContainerItemConfigRuntimeNamespacesItemPid
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemUts:
		*s = StackContainerItemConfigRuntimeNamespacesItemUts
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemNetwork:
		*s = StackContainerItemConfigRuntimeNamespacesItemNetwork
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemMount:
		*s = StackContainerItemConfigRuntimeNamespacesItemMount
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemUser:
		*s = StackContainerItemConfigRuntimeNamespacesItemUser
		return nil
	case StackContainerItemConfigRuntimeNamespacesItemCgroup:
		*s = StackContainerItemConfigRuntimeNamespacesItemCgroup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerItemConfigRuntimeRlimits map[string]StackContainerItemConfigRuntimeRlimitsItem

func (s *StackContainerItemConfigRuntimeRlimits) init() StackContainerItemConfigRuntimeRlimits {
	m := *s
	if m == nil {
		m = map[string]StackContainerItemConfigRuntimeRlimitsItem{}
		*s = m
	}
	return m
}

type StackContainerItemConfigRuntimeRlimitsItem struct {
	Hard int `json:"hard"`
	Soft int `json:"soft"`
}

// GetHard returns the value of Hard.
func (s *StackContainerItemConfigRuntimeRlimitsItem) GetHard() int {
	return s.Hard
}

// GetSoft returns the value of Soft.
func (s *StackContainerItemConfigRuntimeRlimitsItem) GetSoft() int {
	return s.Soft
}

// SetHard sets the value of Hard.
func (s *StackContainerItemConfigRuntimeRlimitsItem) SetHard(val int) {
	s.Hard = val
}

// SetSoft sets the value of Soft.
func (s *StackContainerItemConfigRuntimeRlimitsItem) SetSoft(val int) {
	s.Soft = val
}

type StackContainerItemConfigRuntimeRootfs struct {
	Readonly bool `json:"readonly"`
}

// GetReadonly returns the value of Readonly.
func (s *StackContainerItemConfigRuntimeRootfs) GetReadonly() bool {
	return s.Readonly
}

// SetReadonly sets the value of Readonly.
func (s *StackContainerItemConfigRuntimeRootfs) SetReadonly(val bool) {
	s.Readonly = val
}

type StackContainerItemConfigRuntimeSeccomp struct {
	Disable bool                                              `json:"disable"`
	Rules   []StackContainerItemConfigRuntimeSeccompRulesItem `json:"rules"`
}

// GetDisable returns the value of Disable.
func (s *StackContainerItemConfigRuntimeSeccomp) GetDisable() bool {
	return s.Disable
}

// GetRules returns the value of Rules.
func (s *StackContainerItemConfigRuntimeSeccomp) GetRules() []StackContainerItemConfigRuntimeSeccompRulesItem {
	return s.Rules
}

// SetDisable sets the value of Disable.
func (s *StackContainerItemConfigRuntimeSeccomp) SetDisable(val bool) {
	s.Disable = val
}

// SetRules sets the value of Rules.
func (s *StackContainerItemConfigRuntimeSeccomp) SetRules(val []StackContainerItemConfigRuntimeSeccompRulesItem) {
	s.Rules = val
}

type StackContainerItemConfigRuntimeSeccompRulesItem struct {
	Capabilities StackContainerItemConfigRuntimeSeccompRulesItemCapabilities `json:"capabilities"`
	Syscall      StackContainerItemConfigRuntimeSeccompRulesItemSyscall      `json:"syscall"`
}

// GetCapabilities returns the value of Capabilities.
func (s *StackContainerItemConfigRuntimeSeccompRulesItem) GetCapabilities() StackContainerItemConfigRuntimeSeccompRulesItemCapabilities {
	return s.Capabilities
}

// GetSyscall returns the value of Syscall.
func (s *StackContainerItemConfigRuntimeSeccompRulesItem) GetSyscall() StackContainerItemConfigRuntimeSeccompRulesItemSyscall {
	return s.Syscall
}

// SetCapabilities sets the value of Capabilities.
func (s *StackContainerItemConfigRuntimeSeccompRulesItem) SetCapabilities(val StackContainerItemConfigRuntimeSeccompRulesItemCapabilities) {
	s.Capabilities = val
}

// SetSyscall sets the value of Syscall.
func (s *StackContainerItemConfigRuntimeSeccompRulesItem) SetSyscall(val StackContainerItemConfigRuntimeSeccompRulesItemSyscall) {
	s.Syscall = val
}

type StackContainerItemConfigRuntimeSeccompRulesItemCapabilities struct {
	Includes string `json:"includes"`
	Excludes string `json:"excludes"`
}

// GetIncludes returns the value of Includes.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemCapabilities) GetIncludes() string {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemCapabilities) GetExcludes() string {
	return s.Excludes
}

// SetIncludes sets the value of Includes.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemCapabilities) SetIncludes(val string) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemCapabilities) SetExcludes(val string) {
	s.Excludes = val
}

type StackContainerItemConfigRuntimeSeccompRulesItemSyscall struct {
	Names    []string                                                         `json:"names"`
	Action   StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction     `json:"action"`
	ErrnoRet OptInt                                                           `json:"errnoRet"`
	Args     []StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem `json:"args"`
}

// GetNames returns the value of Names.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) GetNames() []string {
	return s.Names
}

// GetAction returns the value of Action.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) GetAction() StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction {
	return s.Action
}

// GetErrnoRet returns the value of ErrnoRet.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) GetErrnoRet() OptInt {
	return s.ErrnoRet
}

// GetArgs returns the value of Args.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) GetArgs() []StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem {
	return s.Args
}

// SetNames sets the value of Names.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) SetNames(val []string) {
	s.Names = val
}

// SetAction sets the value of Action.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) SetAction(val StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction) {
	s.Action = val
}

// SetErrnoRet sets the value of ErrnoRet.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) SetErrnoRet(val OptInt) {
	s.ErrnoRet = val
}

// SetArgs sets the value of Args.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscall) SetArgs(val []StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) {
	s.Args = val
}

type StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction string

const (
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL        StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL_PROCESS"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD  StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL_THREAD"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP        StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_TRAP"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO       StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_ERRNO"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE       StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_TRACE"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW       StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_ALLOW"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG         StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_LOG"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY      StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_NOTIFY"
)

// AllValues returns all StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction values.
func (StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction) AllValues() []StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction {
	return []StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction{
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction) UnmarshalText(data []byte) error {
	switch StackContainerItemConfigRuntimeSeccompRulesItemSyscallAction(data) {
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem struct {
	Index    int                                                              `json:"index"`
	Value    int                                                              `json:"value"`
	Valuetwo OptInt                                                           `json:"valuetwo"`
	Op       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp `json:"op"`
}

// GetIndex returns the value of Index.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) GetIndex() int {
	return s.Index
}

// GetValue returns the value of Value.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) GetValue() int {
	return s.Value
}

// GetValuetwo returns the value of Valuetwo.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) GetValuetwo() OptInt {
	return s.Valuetwo
}

// GetOp returns the value of Op.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) GetOp() StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp {
	return s.Op
}

// SetIndex sets the value of Index.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) SetIndex(val int) {
	s.Index = val
}

// SetValue sets the value of Value.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) SetValue(val int) {
	s.Value = val
}

// SetValuetwo sets the value of Valuetwo.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) SetValuetwo(val OptInt) {
	s.Valuetwo = val
}

// SetOp sets the value of Op.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItem) SetOp(val StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp) {
	s.Op = val
}

type StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp string

const (
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_NE"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_LT"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_LE"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_EQ"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_GE"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT       StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_GT"
	StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_MASKED_EQ"
)

// AllValues returns all StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp values.
func (StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp) AllValues() []StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp {
	return []StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp{
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT,
		StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT:
		return []byte(s), nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp) UnmarshalText(data []byte) error {
	switch StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOp(data) {
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT
		return nil
	case StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ:
		*s = StackContainerItemConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerItemConfigRuntimeSysctl map[string]string

func (s *StackContainerItemConfigRuntimeSysctl) init() StackContainerItemConfigRuntimeSysctl {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Network configuration for a container.
type StackContainerItemConfigScaling struct {
	// The autoscaling group describes which servers should be deployed.
	AutoscaleGroup NilString `json:"autoscale_group"`
	// Describes how many instances should be running.
	Instances StackContainerItemConfigScalingInstances `json:"instances"`
	Window    Duration                                 `json:"window"`
	// An array of rules that dictate when a scaling event will be triggered.
	Thresholds []StackContainerScaleThreshold `json:"thresholds"`
}

// GetAutoscaleGroup returns the value of AutoscaleGroup.
func (s *StackContainerItemConfigScaling) GetAutoscaleGroup() NilString {
	return s.AutoscaleGroup
}

// GetInstances returns the value of Instances.
func (s *StackContainerItemConfigScaling) GetInstances() StackContainerItemConfigScalingInstances {
	return s.Instances
}

// GetWindow returns the value of Window.
func (s *StackContainerItemConfigScaling) GetWindow() Duration {
	return s.Window
}

// GetThresholds returns the value of Thresholds.
func (s *StackContainerItemConfigScaling) GetThresholds() []StackContainerScaleThreshold {
	return s.Thresholds
}

// SetAutoscaleGroup sets the value of AutoscaleGroup.
func (s *StackContainerItemConfigScaling) SetAutoscaleGroup(val NilString) {
	s.AutoscaleGroup = val
}

// SetInstances sets the value of Instances.
func (s *StackContainerItemConfigScaling) SetInstances(val StackContainerItemConfigScalingInstances) {
	s.Instances = val
}

// SetWindow sets the value of Window.
func (s *StackContainerItemConfigScaling) SetWindow(val Duration) {
	s.Window = val
}

// SetThresholds sets the value of Thresholds.
func (s *StackContainerItemConfigScaling) SetThresholds(val []StackContainerScaleThreshold) {
	s.Thresholds = val
}

// Describes how many instances should be running.
type StackContainerItemConfigScalingInstances struct {
	// Number of additional instances the auto-scaler will add/subtract per scaling event.
	Delta int `json:"delta"`
	// Maximum additional instances the auto-scaler will run at any time.
	Max int `json:"max"`
	// Minimum number of instances per server.
	MaxServer int      `json:"max_server"`
	MinTTL    Duration `json:"min_ttl"`
}

// GetDelta returns the value of Delta.
func (s *StackContainerItemConfigScalingInstances) GetDelta() int {
	return s.Delta
}

// GetMax returns the value of Max.
func (s *StackContainerItemConfigScalingInstances) GetMax() int {
	return s.Max
}

// GetMaxServer returns the value of MaxServer.
func (s *StackContainerItemConfigScalingInstances) GetMaxServer() int {
	return s.MaxServer
}

// GetMinTTL returns the value of MinTTL.
func (s *StackContainerItemConfigScalingInstances) GetMinTTL() Duration {
	return s.MinTTL
}

// SetDelta sets the value of Delta.
func (s *StackContainerItemConfigScalingInstances) SetDelta(val int) {
	s.Delta = val
}

// SetMax sets the value of Max.
func (s *StackContainerItemConfigScalingInstances) SetMax(val int) {
	s.Max = val
}

// SetMaxServer sets the value of MaxServer.
func (s *StackContainerItemConfigScalingInstances) SetMaxServer(val int) {
	s.MaxServer = val
}

// SetMinTTL sets the value of MinTTL.
func (s *StackContainerItemConfigScalingInstances) SetMinTTL(val Duration) {
	s.MinTTL = val
}

type StackContainerItemRole string

const (
	StackContainerItemRoleConductor StackContainerItemRole = "conductor"
)

// AllValues returns all StackContainerItemRole values.
func (StackContainerItemRole) AllValues() []StackContainerItemRole {
	return []StackContainerItemRole{
		StackContainerItemRoleConductor,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemRole) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemRoleConductor:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemRole) UnmarshalText(data []byte) error {
	switch StackContainerItemRole(data) {
	case StackContainerItemRoleConductor:
		*s = StackContainerItemRoleConductor
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackContainerItemVolumesItem struct {
	Local        OptStackContainerItemVolumesItemLocal        `json:"local"`
	Destination  string                                       `json:"destination"`
	ReadOnly     bool                                         `json:"read_only"`
	RemoteAccess OptStackContainerItemVolumesItemRemoteAccess `json:"remote_access"`
}

// GetLocal returns the value of Local.
func (s *StackContainerItemVolumesItem) GetLocal() OptStackContainerItemVolumesItemLocal {
	return s.Local
}

// GetDestination returns the value of Destination.
func (s *StackContainerItemVolumesItem) GetDestination() string {
	return s.Destination
}

// GetReadOnly returns the value of ReadOnly.
func (s *StackContainerItemVolumesItem) GetReadOnly() bool {
	return s.ReadOnly
}

// GetRemoteAccess returns the value of RemoteAccess.
func (s *StackContainerItemVolumesItem) GetRemoteAccess() OptStackContainerItemVolumesItemRemoteAccess {
	return s.RemoteAccess
}

// SetLocal sets the value of Local.
func (s *StackContainerItemVolumesItem) SetLocal(val OptStackContainerItemVolumesItemLocal) {
	s.Local = val
}

// SetDestination sets the value of Destination.
func (s *StackContainerItemVolumesItem) SetDestination(val string) {
	s.Destination = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *StackContainerItemVolumesItem) SetReadOnly(val bool) {
	s.ReadOnly = val
}

// SetRemoteAccess sets the value of RemoteAccess.
func (s *StackContainerItemVolumesItem) SetRemoteAccess(val OptStackContainerItemVolumesItemRemoteAccess) {
	s.RemoteAccess = val
}

type StackContainerItemVolumesItemLocal struct {
	MaxSize     string  `json:"max_size"`
	StoragePool OptBool `json:"storage_pool"`
}

// GetMaxSize returns the value of MaxSize.
func (s *StackContainerItemVolumesItemLocal) GetMaxSize() string {
	return s.MaxSize
}

// GetStoragePool returns the value of StoragePool.
func (s *StackContainerItemVolumesItemLocal) GetStoragePool() OptBool {
	return s.StoragePool
}

// SetMaxSize sets the value of MaxSize.
func (s *StackContainerItemVolumesItemLocal) SetMaxSize(val string) {
	s.MaxSize = val
}

// SetStoragePool sets the value of StoragePool.
func (s *StackContainerItemVolumesItemLocal) SetStoragePool(val OptBool) {
	s.StoragePool = val
}

type StackContainerItemVolumesItemRemoteAccess struct {
	Enable   bool                                              `json:"enable"`
	Ips      []string                                          `json:"ips"`
	WebHook  OptString                                         `json:"web_hook"`
	Password StackContainerItemVolumesItemRemoteAccessPassword `json:"password"`
}

// GetEnable returns the value of Enable.
func (s *StackContainerItemVolumesItemRemoteAccess) GetEnable() bool {
	return s.Enable
}

// GetIps returns the value of Ips.
func (s *StackContainerItemVolumesItemRemoteAccess) GetIps() []string {
	return s.Ips
}

// GetWebHook returns the value of WebHook.
func (s *StackContainerItemVolumesItemRemoteAccess) GetWebHook() OptString {
	return s.WebHook
}

// GetPassword returns the value of Password.
func (s *StackContainerItemVolumesItemRemoteAccess) GetPassword() StackContainerItemVolumesItemRemoteAccessPassword {
	return s.Password
}

// SetEnable sets the value of Enable.
func (s *StackContainerItemVolumesItemRemoteAccess) SetEnable(val bool) {
	s.Enable = val
}

// SetIps sets the value of Ips.
func (s *StackContainerItemVolumesItemRemoteAccess) SetIps(val []string) {
	s.Ips = val
}

// SetWebHook sets the value of WebHook.
func (s *StackContainerItemVolumesItemRemoteAccess) SetWebHook(val OptString) {
	s.WebHook = val
}

// SetPassword sets the value of Password.
func (s *StackContainerItemVolumesItemRemoteAccess) SetPassword(val StackContainerItemVolumesItemRemoteAccessPassword) {
	s.Password = val
}

type StackContainerItemVolumesItemRemoteAccessPassword struct {
	Algorithm OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm `json:"algorithm"`
	Data      string                                                        `json:"data"`
}

// GetAlgorithm returns the value of Algorithm.
func (s *StackContainerItemVolumesItemRemoteAccessPassword) GetAlgorithm() OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm {
	return s.Algorithm
}

// GetData returns the value of Data.
func (s *StackContainerItemVolumesItemRemoteAccessPassword) GetData() string {
	return s.Data
}

// SetAlgorithm sets the value of Algorithm.
func (s *StackContainerItemVolumesItemRemoteAccessPassword) SetAlgorithm(val OptStackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) {
	s.Algorithm = val
}

// SetData sets the value of Data.
func (s *StackContainerItemVolumesItemRemoteAccessPassword) SetData(val string) {
	s.Data = val
}

type StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm string

const (
	StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmRaw    StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm = "raw"
	StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmSha512 StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm = "sha512"
	StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmMD5    StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm = "md5"
)

// AllValues returns all StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm values.
func (StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) AllValues() []StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm {
	return []StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm{
		StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmRaw,
		StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmSha512,
		StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmMD5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmRaw:
		return []byte(s), nil
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmSha512:
		return []byte(s), nil
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmMD5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm) UnmarshalText(data []byte) error {
	switch StackContainerItemVolumesItemRemoteAccessPasswordAlgorithm(data) {
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmRaw:
		*s = StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmRaw
		return nil
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmSha512:
		*s = StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmSha512
		return nil
	case StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmMD5:
		*s = StackContainerItemVolumesItemRemoteAccessPasswordAlgorithmMD5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Discriminated union describing the different types of scaling threshold and their respective
// details.
// Ref: #/components/schemas/StackContainerScaleThreshold
type StackContainerScaleThreshold struct {
	OneOf StackContainerScaleThresholdSum
}

// GetOneOf returns the value of OneOf.
func (s *StackContainerScaleThreshold) GetOneOf() StackContainerScaleThresholdSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackContainerScaleThreshold) SetOneOf(val StackContainerScaleThresholdSum) {
	s.OneOf = val
}

// Describes the CPU threshold at which scaling will occur.
// Ref: #/components/schemas/StackContainerScaleThresholdCpu
type StackContainerScaleThresholdCpu struct {
	Details StackContainerScaleThresholdCpuDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackContainerScaleThresholdCpu) GetDetails() StackContainerScaleThresholdCpuDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackContainerScaleThresholdCpu) SetDetails(val StackContainerScaleThresholdCpuDetails) {
	s.Details = val
}

type StackContainerScaleThresholdCpuDetails struct {
	Utilization int `json:"utilization"`
}

// GetUtilization returns the value of Utilization.
func (s *StackContainerScaleThresholdCpuDetails) GetUtilization() int {
	return s.Utilization
}

// SetUtilization sets the value of Utilization.
func (s *StackContainerScaleThresholdCpuDetails) SetUtilization(val int) {
	s.Utilization = val
}

type StackContainerScaleThresholdCpuType string

const (
	StackContainerScaleThresholdCpuTypeCPU StackContainerScaleThresholdCpuType = "cpu"
)

// AllValues returns all StackContainerScaleThresholdCpuType values.
func (StackContainerScaleThresholdCpuType) AllValues() []StackContainerScaleThresholdCpuType {
	return []StackContainerScaleThresholdCpuType{
		StackContainerScaleThresholdCpuTypeCPU,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerScaleThresholdCpuType) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerScaleThresholdCpuTypeCPU:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerScaleThresholdCpuType) UnmarshalText(data []byte) error {
	switch StackContainerScaleThresholdCpuType(data) {
	case StackContainerScaleThresholdCpuTypeCPU:
		*s = StackContainerScaleThresholdCpuTypeCPU
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network connections threshold at which scaling will occur.
// Ref: #/components/schemas/StackContainerScaleThresholdNetworkConnections
type StackContainerScaleThresholdNetworkConnections struct {
	Details StackContainerScaleThresholdNetworkConnectionsDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackContainerScaleThresholdNetworkConnections) GetDetails() StackContainerScaleThresholdNetworkConnectionsDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackContainerScaleThresholdNetworkConnections) SetDetails(val StackContainerScaleThresholdNetworkConnectionsDetails) {
	s.Details = val
}

type StackContainerScaleThresholdNetworkConnectionsDetails struct {
	ConnectionsTotal int `json:"connections_total"`
}

// GetConnectionsTotal returns the value of ConnectionsTotal.
func (s *StackContainerScaleThresholdNetworkConnectionsDetails) GetConnectionsTotal() int {
	return s.ConnectionsTotal
}

// SetConnectionsTotal sets the value of ConnectionsTotal.
func (s *StackContainerScaleThresholdNetworkConnectionsDetails) SetConnectionsTotal(val int) {
	s.ConnectionsTotal = val
}

type StackContainerScaleThresholdNetworkConnectionsType string

const (
	StackContainerScaleThresholdNetworkConnectionsTypeNetworkConnections StackContainerScaleThresholdNetworkConnectionsType = "network-connections"
)

// AllValues returns all StackContainerScaleThresholdNetworkConnectionsType values.
func (StackContainerScaleThresholdNetworkConnectionsType) AllValues() []StackContainerScaleThresholdNetworkConnectionsType {
	return []StackContainerScaleThresholdNetworkConnectionsType{
		StackContainerScaleThresholdNetworkConnectionsTypeNetworkConnections,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerScaleThresholdNetworkConnectionsType) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerScaleThresholdNetworkConnectionsTypeNetworkConnections:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerScaleThresholdNetworkConnectionsType) UnmarshalText(data []byte) error {
	switch StackContainerScaleThresholdNetworkConnectionsType(data) {
	case StackContainerScaleThresholdNetworkConnectionsTypeNetworkConnections:
		*s = StackContainerScaleThresholdNetworkConnectionsTypeNetworkConnections
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network requests threshold at which scaling will occur.
// Ref: #/components/schemas/StackContainerScaleThresholdNetworkRequests
type StackContainerScaleThresholdNetworkRequests struct {
	Details StackContainerScaleThresholdNetworkRequestsDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackContainerScaleThresholdNetworkRequests) GetDetails() StackContainerScaleThresholdNetworkRequestsDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackContainerScaleThresholdNetworkRequests) SetDetails(val StackContainerScaleThresholdNetworkRequestsDetails) {
	s.Details = val
}

type StackContainerScaleThresholdNetworkRequestsDetails struct {
	RequestsTotal int `json:"requests_total"`
}

// GetRequestsTotal returns the value of RequestsTotal.
func (s *StackContainerScaleThresholdNetworkRequestsDetails) GetRequestsTotal() int {
	return s.RequestsTotal
}

// SetRequestsTotal sets the value of RequestsTotal.
func (s *StackContainerScaleThresholdNetworkRequestsDetails) SetRequestsTotal(val int) {
	s.RequestsTotal = val
}

type StackContainerScaleThresholdNetworkRequestsType string

const (
	StackContainerScaleThresholdNetworkRequestsTypeNetworkRequests StackContainerScaleThresholdNetworkRequestsType = "network-requests"
)

// AllValues returns all StackContainerScaleThresholdNetworkRequestsType values.
func (StackContainerScaleThresholdNetworkRequestsType) AllValues() []StackContainerScaleThresholdNetworkRequestsType {
	return []StackContainerScaleThresholdNetworkRequestsType{
		StackContainerScaleThresholdNetworkRequestsTypeNetworkRequests,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerScaleThresholdNetworkRequestsType) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerScaleThresholdNetworkRequestsTypeNetworkRequests:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerScaleThresholdNetworkRequestsType) UnmarshalText(data []byte) error {
	switch StackContainerScaleThresholdNetworkRequestsType(data) {
	case StackContainerScaleThresholdNetworkRequestsTypeNetworkRequests:
		*s = StackContainerScaleThresholdNetworkRequestsTypeNetworkRequests
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the network throughput threshold at which scaling will occur.
// Ref: #/components/schemas/StackContainerScaleThresholdNetworkThroughput
type StackContainerScaleThresholdNetworkThroughput struct {
	Details StackContainerScaleThresholdNetworkThroughputDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackContainerScaleThresholdNetworkThroughput) GetDetails() StackContainerScaleThresholdNetworkThroughputDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackContainerScaleThresholdNetworkThroughput) SetDetails(val StackContainerScaleThresholdNetworkThroughputDetails) {
	s.Details = val
}

type StackContainerScaleThresholdNetworkThroughputDetails struct {
	Private bool `json:"private"`
	// The limit (maximum) amount of throughput each instance of the given container can use before
	// triggering a scaling event.
	Bandwidth string `json:"bandwidth"`
}

// GetPrivate returns the value of Private.
func (s *StackContainerScaleThresholdNetworkThroughputDetails) GetPrivate() bool {
	return s.Private
}

// GetBandwidth returns the value of Bandwidth.
func (s *StackContainerScaleThresholdNetworkThroughputDetails) GetBandwidth() string {
	return s.Bandwidth
}

// SetPrivate sets the value of Private.
func (s *StackContainerScaleThresholdNetworkThroughputDetails) SetPrivate(val bool) {
	s.Private = val
}

// SetBandwidth sets the value of Bandwidth.
func (s *StackContainerScaleThresholdNetworkThroughputDetails) SetBandwidth(val string) {
	s.Bandwidth = val
}

type StackContainerScaleThresholdNetworkThroughputType string

const (
	StackContainerScaleThresholdNetworkThroughputTypeNetworkThroughput StackContainerScaleThresholdNetworkThroughputType = "network-throughput"
)

// AllValues returns all StackContainerScaleThresholdNetworkThroughputType values.
func (StackContainerScaleThresholdNetworkThroughputType) AllValues() []StackContainerScaleThresholdNetworkThroughputType {
	return []StackContainerScaleThresholdNetworkThroughputType{
		StackContainerScaleThresholdNetworkThroughputTypeNetworkThroughput,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerScaleThresholdNetworkThroughputType) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerScaleThresholdNetworkThroughputTypeNetworkThroughput:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerScaleThresholdNetworkThroughputType) UnmarshalText(data []byte) error {
	switch StackContainerScaleThresholdNetworkThroughputType(data) {
	case StackContainerScaleThresholdNetworkThroughputTypeNetworkThroughput:
		*s = StackContainerScaleThresholdNetworkThroughputTypeNetworkThroughput
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes the RAM threshold at which scaling will occur.
// Ref: #/components/schemas/StackContainerScaleThresholdRam
type StackContainerScaleThresholdRam struct {
	Details StackContainerScaleThresholdRamDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackContainerScaleThresholdRam) GetDetails() StackContainerScaleThresholdRamDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackContainerScaleThresholdRam) SetDetails(val StackContainerScaleThresholdRamDetails) {
	s.Details = val
}

type StackContainerScaleThresholdRamDetails struct {
	// The limit (maximum) amount of RAM each instance of the given container can use before triggering a
	// scaling event.
	Used string `json:"used"`
}

// GetUsed returns the value of Used.
func (s *StackContainerScaleThresholdRamDetails) GetUsed() string {
	return s.Used
}

// SetUsed sets the value of Used.
func (s *StackContainerScaleThresholdRamDetails) SetUsed(val string) {
	s.Used = val
}

type StackContainerScaleThresholdRamType string

const (
	StackContainerScaleThresholdRamTypeRAM StackContainerScaleThresholdRamType = "ram"
)

// AllValues returns all StackContainerScaleThresholdRamType values.
func (StackContainerScaleThresholdRamType) AllValues() []StackContainerScaleThresholdRamType {
	return []StackContainerScaleThresholdRamType{
		StackContainerScaleThresholdRamTypeRAM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackContainerScaleThresholdRamType) MarshalText() ([]byte, error) {
	switch s {
	case StackContainerScaleThresholdRamTypeRAM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackContainerScaleThresholdRamType) UnmarshalText(data []byte) error {
	switch StackContainerScaleThresholdRamType(data) {
	case StackContainerScaleThresholdRamTypeRAM:
		*s = StackContainerScaleThresholdRamTypeRAM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// StackContainerScaleThresholdSum represents sum type.
type StackContainerScaleThresholdSum struct {
	Type                                           StackContainerScaleThresholdSumType // switch on this field
	StackContainerScaleThresholdRam                StackContainerScaleThresholdRam
	StackContainerScaleThresholdCpu                StackContainerScaleThresholdCpu
	StackContainerScaleThresholdNetworkConnections StackContainerScaleThresholdNetworkConnections
	StackContainerScaleThresholdNetworkRequests    StackContainerScaleThresholdNetworkRequests
	StackContainerScaleThresholdNetworkThroughput  StackContainerScaleThresholdNetworkThroughput
}

// StackContainerScaleThresholdSumType is oneOf type of StackContainerScaleThresholdSum.
type StackContainerScaleThresholdSumType string

// Possible values for StackContainerScaleThresholdSumType.
const (
	StackContainerScaleThresholdRamStackContainerScaleThresholdSum                StackContainerScaleThresholdSumType = "ram"
	StackContainerScaleThresholdCpuStackContainerScaleThresholdSum                StackContainerScaleThresholdSumType = "cpu"
	StackContainerScaleThresholdNetworkConnectionsStackContainerScaleThresholdSum StackContainerScaleThresholdSumType = "network-connections"
	StackContainerScaleThresholdNetworkRequestsStackContainerScaleThresholdSum    StackContainerScaleThresholdSumType = "network-requests"
	StackContainerScaleThresholdNetworkThroughputStackContainerScaleThresholdSum  StackContainerScaleThresholdSumType = "network-throughput"
)

// IsStackContainerScaleThresholdRam reports whether StackContainerScaleThresholdSum is StackContainerScaleThresholdRam.
func (s StackContainerScaleThresholdSum) IsStackContainerScaleThresholdRam() bool {
	return s.Type == StackContainerScaleThresholdRamStackContainerScaleThresholdSum
}

// IsStackContainerScaleThresholdCpu reports whether StackContainerScaleThresholdSum is StackContainerScaleThresholdCpu.
func (s StackContainerScaleThresholdSum) IsStackContainerScaleThresholdCpu() bool {
	return s.Type == StackContainerScaleThresholdCpuStackContainerScaleThresholdSum
}

// IsStackContainerScaleThresholdNetworkConnections reports whether StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkConnections.
func (s StackContainerScaleThresholdSum) IsStackContainerScaleThresholdNetworkConnections() bool {
	return s.Type == StackContainerScaleThresholdNetworkConnectionsStackContainerScaleThresholdSum
}

// IsStackContainerScaleThresholdNetworkRequests reports whether StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkRequests.
func (s StackContainerScaleThresholdSum) IsStackContainerScaleThresholdNetworkRequests() bool {
	return s.Type == StackContainerScaleThresholdNetworkRequestsStackContainerScaleThresholdSum
}

// IsStackContainerScaleThresholdNetworkThroughput reports whether StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkThroughput.
func (s StackContainerScaleThresholdSum) IsStackContainerScaleThresholdNetworkThroughput() bool {
	return s.Type == StackContainerScaleThresholdNetworkThroughputStackContainerScaleThresholdSum
}

// SetStackContainerScaleThresholdRam sets StackContainerScaleThresholdSum to StackContainerScaleThresholdRam.
func (s *StackContainerScaleThresholdSum) SetStackContainerScaleThresholdRam(v StackContainerScaleThresholdRam) {
	s.Type = StackContainerScaleThresholdRamStackContainerScaleThresholdSum
	s.StackContainerScaleThresholdRam = v
}

// GetStackContainerScaleThresholdRam returns StackContainerScaleThresholdRam and true boolean if StackContainerScaleThresholdSum is StackContainerScaleThresholdRam.
func (s StackContainerScaleThresholdSum) GetStackContainerScaleThresholdRam() (v StackContainerScaleThresholdRam, ok bool) {
	if !s.IsStackContainerScaleThresholdRam() {
		return v, false
	}
	return s.StackContainerScaleThresholdRam, true
}

// NewStackContainerScaleThresholdRamStackContainerScaleThresholdSum returns new StackContainerScaleThresholdSum from StackContainerScaleThresholdRam.
func NewStackContainerScaleThresholdRamStackContainerScaleThresholdSum(v StackContainerScaleThresholdRam) StackContainerScaleThresholdSum {
	var s StackContainerScaleThresholdSum
	s.SetStackContainerScaleThresholdRam(v)
	return s
}

// SetStackContainerScaleThresholdCpu sets StackContainerScaleThresholdSum to StackContainerScaleThresholdCpu.
func (s *StackContainerScaleThresholdSum) SetStackContainerScaleThresholdCpu(v StackContainerScaleThresholdCpu) {
	s.Type = StackContainerScaleThresholdCpuStackContainerScaleThresholdSum
	s.StackContainerScaleThresholdCpu = v
}

// GetStackContainerScaleThresholdCpu returns StackContainerScaleThresholdCpu and true boolean if StackContainerScaleThresholdSum is StackContainerScaleThresholdCpu.
func (s StackContainerScaleThresholdSum) GetStackContainerScaleThresholdCpu() (v StackContainerScaleThresholdCpu, ok bool) {
	if !s.IsStackContainerScaleThresholdCpu() {
		return v, false
	}
	return s.StackContainerScaleThresholdCpu, true
}

// NewStackContainerScaleThresholdCpuStackContainerScaleThresholdSum returns new StackContainerScaleThresholdSum from StackContainerScaleThresholdCpu.
func NewStackContainerScaleThresholdCpuStackContainerScaleThresholdSum(v StackContainerScaleThresholdCpu) StackContainerScaleThresholdSum {
	var s StackContainerScaleThresholdSum
	s.SetStackContainerScaleThresholdCpu(v)
	return s
}

// SetStackContainerScaleThresholdNetworkConnections sets StackContainerScaleThresholdSum to StackContainerScaleThresholdNetworkConnections.
func (s *StackContainerScaleThresholdSum) SetStackContainerScaleThresholdNetworkConnections(v StackContainerScaleThresholdNetworkConnections) {
	s.Type = StackContainerScaleThresholdNetworkConnectionsStackContainerScaleThresholdSum
	s.StackContainerScaleThresholdNetworkConnections = v
}

// GetStackContainerScaleThresholdNetworkConnections returns StackContainerScaleThresholdNetworkConnections and true boolean if StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkConnections.
func (s StackContainerScaleThresholdSum) GetStackContainerScaleThresholdNetworkConnections() (v StackContainerScaleThresholdNetworkConnections, ok bool) {
	if !s.IsStackContainerScaleThresholdNetworkConnections() {
		return v, false
	}
	return s.StackContainerScaleThresholdNetworkConnections, true
}

// NewStackContainerScaleThresholdNetworkConnectionsStackContainerScaleThresholdSum returns new StackContainerScaleThresholdSum from StackContainerScaleThresholdNetworkConnections.
func NewStackContainerScaleThresholdNetworkConnectionsStackContainerScaleThresholdSum(v StackContainerScaleThresholdNetworkConnections) StackContainerScaleThresholdSum {
	var s StackContainerScaleThresholdSum
	s.SetStackContainerScaleThresholdNetworkConnections(v)
	return s
}

// SetStackContainerScaleThresholdNetworkRequests sets StackContainerScaleThresholdSum to StackContainerScaleThresholdNetworkRequests.
func (s *StackContainerScaleThresholdSum) SetStackContainerScaleThresholdNetworkRequests(v StackContainerScaleThresholdNetworkRequests) {
	s.Type = StackContainerScaleThresholdNetworkRequestsStackContainerScaleThresholdSum
	s.StackContainerScaleThresholdNetworkRequests = v
}

// GetStackContainerScaleThresholdNetworkRequests returns StackContainerScaleThresholdNetworkRequests and true boolean if StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkRequests.
func (s StackContainerScaleThresholdSum) GetStackContainerScaleThresholdNetworkRequests() (v StackContainerScaleThresholdNetworkRequests, ok bool) {
	if !s.IsStackContainerScaleThresholdNetworkRequests() {
		return v, false
	}
	return s.StackContainerScaleThresholdNetworkRequests, true
}

// NewStackContainerScaleThresholdNetworkRequestsStackContainerScaleThresholdSum returns new StackContainerScaleThresholdSum from StackContainerScaleThresholdNetworkRequests.
func NewStackContainerScaleThresholdNetworkRequestsStackContainerScaleThresholdSum(v StackContainerScaleThresholdNetworkRequests) StackContainerScaleThresholdSum {
	var s StackContainerScaleThresholdSum
	s.SetStackContainerScaleThresholdNetworkRequests(v)
	return s
}

// SetStackContainerScaleThresholdNetworkThroughput sets StackContainerScaleThresholdSum to StackContainerScaleThresholdNetworkThroughput.
func (s *StackContainerScaleThresholdSum) SetStackContainerScaleThresholdNetworkThroughput(v StackContainerScaleThresholdNetworkThroughput) {
	s.Type = StackContainerScaleThresholdNetworkThroughputStackContainerScaleThresholdSum
	s.StackContainerScaleThresholdNetworkThroughput = v
}

// GetStackContainerScaleThresholdNetworkThroughput returns StackContainerScaleThresholdNetworkThroughput and true boolean if StackContainerScaleThresholdSum is StackContainerScaleThresholdNetworkThroughput.
func (s StackContainerScaleThresholdSum) GetStackContainerScaleThresholdNetworkThroughput() (v StackContainerScaleThresholdNetworkThroughput, ok bool) {
	if !s.IsStackContainerScaleThresholdNetworkThroughput() {
		return v, false
	}
	return s.StackContainerScaleThresholdNetworkThroughput, true
}

// NewStackContainerScaleThresholdNetworkThroughputStackContainerScaleThresholdSum returns new StackContainerScaleThresholdSum from StackContainerScaleThresholdNetworkThroughput.
func NewStackContainerScaleThresholdNetworkThroughputStackContainerScaleThresholdSum(v StackContainerScaleThresholdNetworkThroughput) StackContainerScaleThresholdSum {
	var s StackContainerScaleThresholdSum
	s.SetStackContainerScaleThresholdNetworkThroughput(v)
	return s
}

// Options to control how a container behaves when a stack build is deployed.
// Ref: #/components/schemas/StackDeployContainersObject
type StackDeployContainersObject struct {
	// A boolean where true represents the container is to be reimaged.
	Reimage bool `json:"reimage"`
	// A boolean where true represents the container is to be reconfigured.
	Reconfigure bool `json:"reconfigure"`
}

// GetReimage returns the value of Reimage.
func (s *StackDeployContainersObject) GetReimage() bool {
	return s.Reimage
}

// GetReconfigure returns the value of Reconfigure.
func (s *StackDeployContainersObject) GetReconfigure() bool {
	return s.Reconfigure
}

// SetReimage sets the value of Reimage.
func (s *StackDeployContainersObject) SetReimage(val bool) {
	s.Reimage = val
}

// SetReconfigure sets the value of Reconfigure.
func (s *StackDeployContainersObject) SetReconfigure(val bool) {
	s.Reconfigure = val
}

// A collection of timestamps for each event in the Stacks lifetime.
type StackEvents struct {
	Created   DateTime `json:"created"`
	Updated   DateTime `json:"updated"`
	Deleted   DateTime `json:"deleted"`
	LastBuild DateTime `json:"last_build"`
}

// GetCreated returns the value of Created.
func (s *StackEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *StackEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *StackEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastBuild returns the value of LastBuild.
func (s *StackEvents) GetLastBuild() DateTime {
	return s.LastBuild
}

// SetCreated sets the value of Created.
func (s *StackEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *StackEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *StackEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastBuild sets the value of LastBuild.
func (s *StackEvents) SetLastBuild(val DateTime) {
	s.LastBuild = val
}

// Information about the git commit this stack build was created from.
// Ref: #/components/schemas/StackGitCommit
type StackGitCommit struct {
	// The commit hash for the given stack build.
	Hash string `json:"hash"`
	// The commit message for the given stack build hash.
	Message string   `json:"message"`
	Time    DateTime `json:"time"`
	// Inforamtion about the author of the commit.
	Author StackGitCommitAuthor `json:"author"`
}

// GetHash returns the value of Hash.
func (s *StackGitCommit) GetHash() string {
	return s.Hash
}

// GetMessage returns the value of Message.
func (s *StackGitCommit) GetMessage() string {
	return s.Message
}

// GetTime returns the value of Time.
func (s *StackGitCommit) GetTime() DateTime {
	return s.Time
}

// GetAuthor returns the value of Author.
func (s *StackGitCommit) GetAuthor() StackGitCommitAuthor {
	return s.Author
}

// SetHash sets the value of Hash.
func (s *StackGitCommit) SetHash(val string) {
	s.Hash = val
}

// SetMessage sets the value of Message.
func (s *StackGitCommit) SetMessage(val string) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *StackGitCommit) SetTime(val DateTime) {
	s.Time = val
}

// SetAuthor sets the value of Author.
func (s *StackGitCommit) SetAuthor(val StackGitCommitAuthor) {
	s.Author = val
}

// Inforamtion about the author of the commit.
type StackGitCommitAuthor struct {
	// The commit authors name.
	Name string `json:"name"`
	// The commit authors email address.
	Email string `json:"email"`
}

// GetName returns the value of Name.
func (s *StackGitCommitAuthor) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *StackGitCommitAuthor) GetEmail() string {
	return s.Email
}

// SetName sets the value of Name.
func (s *StackGitCommitAuthor) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *StackGitCommitAuthor) SetEmail(val string) {
	s.Email = val
}

// Ref: #/components/schemas/StackImageSourceType
type StackImageSourceType struct {
	Details  OptStackImageSourceTypeDetails  `json:"details"`
	Override OptStackImageSourceTypeOverride `json:"override"`
}

// GetDetails returns the value of Details.
func (s *StackImageSourceType) GetDetails() OptStackImageSourceTypeDetails {
	return s.Details
}

// GetOverride returns the value of Override.
func (s *StackImageSourceType) GetOverride() OptStackImageSourceTypeOverride {
	return s.Override
}

// SetDetails sets the value of Details.
func (s *StackImageSourceType) SetDetails(val OptStackImageSourceTypeDetails) {
	s.Details = val
}

// SetOverride sets the value of Override.
func (s *StackImageSourceType) SetOverride(val OptStackImageSourceTypeOverride) {
	s.Override = val
}

type StackImageSourceTypeDetails struct {
	ID         string       `json:"id"`
	StackID    string       `json:"stack_id"`
	Containers []Identifier `json:"containers"`
	Origin     ImageOrigin  `json:"origin"`
}

// GetID returns the value of ID.
func (s *StackImageSourceTypeDetails) GetID() string {
	return s.ID
}

// GetStackID returns the value of StackID.
func (s *StackImageSourceTypeDetails) GetStackID() string {
	return s.StackID
}

// GetContainers returns the value of Containers.
func (s *StackImageSourceTypeDetails) GetContainers() []Identifier {
	return s.Containers
}

// GetOrigin returns the value of Origin.
func (s *StackImageSourceTypeDetails) GetOrigin() ImageOrigin {
	return s.Origin
}

// SetID sets the value of ID.
func (s *StackImageSourceTypeDetails) SetID(val string) {
	s.ID = val
}

// SetStackID sets the value of StackID.
func (s *StackImageSourceTypeDetails) SetStackID(val string) {
	s.StackID = val
}

// SetContainers sets the value of Containers.
func (s *StackImageSourceTypeDetails) SetContainers(val []Identifier) {
	s.Containers = val
}

// SetOrigin sets the value of Origin.
func (s *StackImageSourceTypeDetails) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

type StackImageSourceTypeOverride struct {
	Target   OptString `json:"target"`
	TargzURL OptString `json:"targz_url"`
}

// GetTarget returns the value of Target.
func (s *StackImageSourceTypeOverride) GetTarget() OptString {
	return s.Target
}

// GetTargzURL returns the value of TargzURL.
func (s *StackImageSourceTypeOverride) GetTargzURL() OptString {
	return s.TargzURL
}

// SetTarget sets the value of Target.
func (s *StackImageSourceTypeOverride) SetTarget(val OptString) {
	s.Target = val
}

// SetTargzURL sets the value of TargzURL.
func (s *StackImageSourceTypeOverride) SetTargzURL(val OptString) {
	s.TargzURL = val
}

type StackImageSourceTypeType string

const (
	StackImageSourceTypeTypeStackBuild StackImageSourceTypeType = "stack-build"
)

// AllValues returns all StackImageSourceTypeType values.
func (StackImageSourceTypeType) AllValues() []StackImageSourceTypeType {
	return []StackImageSourceTypeType{
		StackImageSourceTypeTypeStackBuild,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackImageSourceTypeType) MarshalText() ([]byte, error) {
	switch s {
	case StackImageSourceTypeTypeStackBuild:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackImageSourceTypeType) UnmarshalText(data []byte) error {
	switch StackImageSourceTypeType(data) {
	case StackImageSourceTypeTypeStackBuild:
		*s = StackImageSourceTypeTypeStackBuild
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// All includable resources linkable to the given stack.
// Ref: #/components/schemas/StackInclude
type StackInclude struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *StackInclude) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *StackInclude) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// A resource associated with a stack.
// Ref: #/components/schemas/StackIncludes
type StackIncludes map[string]Stack

func (s *StackIncludes) init() StackIncludes {
	m := *s
	if m == nil {
		m = map[string]Stack{}
		*s = m
	}
	return m
}

// A list of meta fields that can be applied to this stack.
// Ref: #/components/schemas/StackMeta
type StackMeta struct {
	ContainersCount OptStateCountSummary `json:"containers_count"`
	BuildsCount     OptStateCountSummary `json:"builds_count"`
}

// GetContainersCount returns the value of ContainersCount.
func (s *StackMeta) GetContainersCount() OptStateCountSummary {
	return s.ContainersCount
}

// GetBuildsCount returns the value of BuildsCount.
func (s *StackMeta) GetBuildsCount() OptStateCountSummary {
	return s.BuildsCount
}

// SetContainersCount sets the value of ContainersCount.
func (s *StackMeta) SetContainersCount(val OptStateCountSummary) {
	s.ContainersCount = val
}

// SetBuildsCount sets the value of BuildsCount.
func (s *StackMeta) SetBuildsCount(val OptStateCountSummary) {
	s.BuildsCount = val
}

// Settings for pruning a stack in a pipeline.
// Ref: #/components/schemas/StackPruneStep
type StackPruneStep struct {
	// An identifier for the step.
	Identifier OptString                `json:"identifier"`
	Options    OptStackPruneStepOptions `json:"options"`
	Details    StackPruneStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *StackPruneStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *StackPruneStep) GetOptions() OptStackPruneStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *StackPruneStep) GetDetails() StackPruneStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *StackPruneStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *StackPruneStep) SetOptions(val OptStackPruneStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *StackPruneStep) SetDetails(val StackPruneStepDetails) {
	s.Details = val
}

// The action that the step takes.
type StackPruneStepAction string

const (
	StackPruneStepActionStackPrune StackPruneStepAction = "stack.prune"
)

// AllValues returns all StackPruneStepAction values.
func (StackPruneStepAction) AllValues() []StackPruneStepAction {
	return []StackPruneStepAction{
		StackPruneStepActionStackPrune,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackPruneStepAction) MarshalText() ([]byte, error) {
	switch s {
	case StackPruneStepActionStackPrune:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackPruneStepAction) UnmarshalText(data []byte) error {
	switch StackPruneStepAction(data) {
	case StackPruneStepActionStackPrune:
		*s = StackPruneStepActionStackPrune
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackPruneStepDetails struct {
	Stack    FluidIdentifier                     `json:"stack"`
	Criteria OptNilStackPruneStepDetailsCriteria `json:"criteria"`
}

// GetStack returns the value of Stack.
func (s *StackPruneStepDetails) GetStack() FluidIdentifier {
	return s.Stack
}

// GetCriteria returns the value of Criteria.
func (s *StackPruneStepDetails) GetCriteria() OptNilStackPruneStepDetailsCriteria {
	return s.Criteria
}

// SetStack sets the value of Stack.
func (s *StackPruneStepDetails) SetStack(val FluidIdentifier) {
	s.Stack = val
}

// SetCriteria sets the value of Criteria.
func (s *StackPruneStepDetails) SetCriteria(val OptNilStackPruneStepDetailsCriteria) {
	s.Criteria = val
}

type StackPruneStepDetailsCriteria struct {
	Expire OptDuration `json:"expire"`
}

// GetExpire returns the value of Expire.
func (s *StackPruneStepDetailsCriteria) GetExpire() OptDuration {
	return s.Expire
}

// SetExpire sets the value of Expire.
func (s *StackPruneStepDetailsCriteria) SetExpire(val OptDuration) {
	s.Expire = val
}

type StackPruneStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *StackPruneStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *StackPruneStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A stack spec resource.
// Ref: #/components/schemas/StackRawSource
type StackRawSource struct {
	Details NilStackRawSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackRawSource) GetDetails() NilStackRawSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackRawSource) SetDetails(val NilStackRawSourceDetails) {
	s.Details = val
}

type StackRawSourceDetails struct {
	// A string defining the version of the stack spec.
	Version string `json:"version"`
	// Information about the stack.
	About           OptNilStackRawSourceDetailsAbout    `json:"about"`
	Tests           OptNilStackSpecTestContainerArray   `json:"tests"`
	ScopedVariables OptNilStackSpecScopedVariableArray  `json:"scoped_variables"`
	Containers      StackContainer                      `json:"containers"`
	Services        OptNilStackRawSourceDetailsServices `json:"services"`
	// Additional meta info about the stack.
	Annotations OptStackRawSourceDetailsAnnotations `json:"annotations"`
}

// GetVersion returns the value of Version.
func (s *StackRawSourceDetails) GetVersion() string {
	return s.Version
}

// GetAbout returns the value of About.
func (s *StackRawSourceDetails) GetAbout() OptNilStackRawSourceDetailsAbout {
	return s.About
}

// GetTests returns the value of Tests.
func (s *StackRawSourceDetails) GetTests() OptNilStackSpecTestContainerArray {
	return s.Tests
}

// GetScopedVariables returns the value of ScopedVariables.
func (s *StackRawSourceDetails) GetScopedVariables() OptNilStackSpecScopedVariableArray {
	return s.ScopedVariables
}

// GetContainers returns the value of Containers.
func (s *StackRawSourceDetails) GetContainers() StackContainer {
	return s.Containers
}

// GetServices returns the value of Services.
func (s *StackRawSourceDetails) GetServices() OptNilStackRawSourceDetailsServices {
	return s.Services
}

// GetAnnotations returns the value of Annotations.
func (s *StackRawSourceDetails) GetAnnotations() OptStackRawSourceDetailsAnnotations {
	return s.Annotations
}

// SetVersion sets the value of Version.
func (s *StackRawSourceDetails) SetVersion(val string) {
	s.Version = val
}

// SetAbout sets the value of About.
func (s *StackRawSourceDetails) SetAbout(val OptNilStackRawSourceDetailsAbout) {
	s.About = val
}

// SetTests sets the value of Tests.
func (s *StackRawSourceDetails) SetTests(val OptNilStackSpecTestContainerArray) {
	s.Tests = val
}

// SetScopedVariables sets the value of ScopedVariables.
func (s *StackRawSourceDetails) SetScopedVariables(val OptNilStackSpecScopedVariableArray) {
	s.ScopedVariables = val
}

// SetContainers sets the value of Containers.
func (s *StackRawSourceDetails) SetContainers(val StackContainer) {
	s.Containers = val
}

// SetServices sets the value of Services.
func (s *StackRawSourceDetails) SetServices(val OptNilStackRawSourceDetailsServices) {
	s.Services = val
}

// SetAnnotations sets the value of Annotations.
func (s *StackRawSourceDetails) SetAnnotations(val OptStackRawSourceDetailsAnnotations) {
	s.Annotations = val
}

// Information about the stack.
type StackRawSourceDetailsAbout struct {
	// Internal version information set by the user.
	Version string `json:"version"`
	// Information describing the stack.
	Description string `json:"description"`
}

// GetVersion returns the value of Version.
func (s *StackRawSourceDetailsAbout) GetVersion() string {
	return s.Version
}

// GetDescription returns the value of Description.
func (s *StackRawSourceDetailsAbout) GetDescription() string {
	return s.Description
}

// SetVersion sets the value of Version.
func (s *StackRawSourceDetailsAbout) SetVersion(val string) {
	s.Version = val
}

// SetDescription sets the value of Description.
func (s *StackRawSourceDetailsAbout) SetDescription(val string) {
	s.Description = val
}

// Additional meta info about the stack.
type StackRawSourceDetailsAnnotations map[string]jx.Raw

func (s *StackRawSourceDetailsAnnotations) init() StackRawSourceDetailsAnnotations {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type StackRawSourceDetailsServices struct {
	Discovery    OptNilStackRawSourceDetailsServicesDiscovery    `json:"discovery"`
	Loadbalancer OptNilStackRawSourceDetailsServicesLoadbalancer `json:"loadbalancer"`
	Vpn          OptStackRawSourceDetailsServicesVpn             `json:"vpn"`
}

// GetDiscovery returns the value of Discovery.
func (s *StackRawSourceDetailsServices) GetDiscovery() OptNilStackRawSourceDetailsServicesDiscovery {
	return s.Discovery
}

// GetLoadbalancer returns the value of Loadbalancer.
func (s *StackRawSourceDetailsServices) GetLoadbalancer() OptNilStackRawSourceDetailsServicesLoadbalancer {
	return s.Loadbalancer
}

// GetVpn returns the value of Vpn.
func (s *StackRawSourceDetailsServices) GetVpn() OptStackRawSourceDetailsServicesVpn {
	return s.Vpn
}

// SetDiscovery sets the value of Discovery.
func (s *StackRawSourceDetailsServices) SetDiscovery(val OptNilStackRawSourceDetailsServicesDiscovery) {
	s.Discovery = val
}

// SetLoadbalancer sets the value of Loadbalancer.
func (s *StackRawSourceDetailsServices) SetLoadbalancer(val OptNilStackRawSourceDetailsServicesLoadbalancer) {
	s.Loadbalancer = val
}

// SetVpn sets the value of Vpn.
func (s *StackRawSourceDetailsServices) SetVpn(val OptStackRawSourceDetailsServicesVpn) {
	s.Vpn = val
}

type StackRawSourceDetailsServicesDiscovery struct {
	Hosts OptNilStackRawSourceDetailsServicesDiscoveryHosts `json:"hosts"`
}

// GetHosts returns the value of Hosts.
func (s *StackRawSourceDetailsServicesDiscovery) GetHosts() OptNilStackRawSourceDetailsServicesDiscoveryHosts {
	return s.Hosts
}

// SetHosts sets the value of Hosts.
func (s *StackRawSourceDetailsServicesDiscovery) SetHosts(val OptNilStackRawSourceDetailsServicesDiscoveryHosts) {
	s.Hosts = val
}

type StackRawSourceDetailsServicesDiscoveryHosts map[string]StackRawSourceDetailsServicesDiscoveryHostsItem

func (s *StackRawSourceDetailsServicesDiscoveryHosts) init() StackRawSourceDetailsServicesDiscoveryHosts {
	m := *s
	if m == nil {
		m = map[string]StackRawSourceDetailsServicesDiscoveryHostsItem{}
		*s = m
	}
	return m
}

type StackRawSourceDetailsServicesDiscoveryHostsItem struct {
	Ipv4 OptNilStringArray `json:"ipv4"`
	Ipv6 OptNilStringArray `json:"ipv6"`
}

// GetIpv4 returns the value of Ipv4.
func (s *StackRawSourceDetailsServicesDiscoveryHostsItem) GetIpv4() OptNilStringArray {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *StackRawSourceDetailsServicesDiscoveryHostsItem) GetIpv6() OptNilStringArray {
	return s.Ipv6
}

// SetIpv4 sets the value of Ipv4.
func (s *StackRawSourceDetailsServicesDiscoveryHostsItem) SetIpv4(val OptNilStringArray) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *StackRawSourceDetailsServicesDiscoveryHostsItem) SetIpv6(val OptNilStringArray) {
	s.Ipv6 = val
}

// The config object for the loadbalancer service.
type StackRawSourceDetailsServicesLoadbalancer struct {
	OneOf StackRawSourceDetailsServicesLoadbalancerSum
}

// GetOneOf returns the value of OneOf.
func (s *StackRawSourceDetailsServicesLoadbalancer) GetOneOf() StackRawSourceDetailsServicesLoadbalancerSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackRawSourceDetailsServicesLoadbalancer) SetOneOf(val StackRawSourceDetailsServicesLoadbalancerSum) {
	s.OneOf = val
}

// StackRawSourceDetailsServicesLoadbalancerSum represents sum type.
type StackRawSourceDetailsServicesLoadbalancerSum struct {
	Type          StackRawSourceDetailsServicesLoadbalancerSumType // switch on this field
	HaProxyLbType HaProxyLbType
	V1LbType      V1LbType
	DefaultLbType DefaultLbType
}

// StackRawSourceDetailsServicesLoadbalancerSumType is oneOf type of StackRawSourceDetailsServicesLoadbalancerSum.
type StackRawSourceDetailsServicesLoadbalancerSumType string

// Possible values for StackRawSourceDetailsServicesLoadbalancerSumType.
const (
	HaProxyLbTypeStackRawSourceDetailsServicesLoadbalancerSum StackRawSourceDetailsServicesLoadbalancerSumType = "haproxy"
	V1LbTypeStackRawSourceDetailsServicesLoadbalancerSum      StackRawSourceDetailsServicesLoadbalancerSumType = "v1"
	DefaultLbTypeStackRawSourceDetailsServicesLoadbalancerSum StackRawSourceDetailsServicesLoadbalancerSumType = "default"
)

// IsHaProxyLbType reports whether StackRawSourceDetailsServicesLoadbalancerSum is HaProxyLbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) IsHaProxyLbType() bool {
	return s.Type == HaProxyLbTypeStackRawSourceDetailsServicesLoadbalancerSum
}

// IsV1LbType reports whether StackRawSourceDetailsServicesLoadbalancerSum is V1LbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) IsV1LbType() bool {
	return s.Type == V1LbTypeStackRawSourceDetailsServicesLoadbalancerSum
}

// IsDefaultLbType reports whether StackRawSourceDetailsServicesLoadbalancerSum is DefaultLbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) IsDefaultLbType() bool {
	return s.Type == DefaultLbTypeStackRawSourceDetailsServicesLoadbalancerSum
}

// SetHaProxyLbType sets StackRawSourceDetailsServicesLoadbalancerSum to HaProxyLbType.
func (s *StackRawSourceDetailsServicesLoadbalancerSum) SetHaProxyLbType(v HaProxyLbType) {
	s.Type = HaProxyLbTypeStackRawSourceDetailsServicesLoadbalancerSum
	s.HaProxyLbType = v
}

// GetHaProxyLbType returns HaProxyLbType and true boolean if StackRawSourceDetailsServicesLoadbalancerSum is HaProxyLbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) GetHaProxyLbType() (v HaProxyLbType, ok bool) {
	if !s.IsHaProxyLbType() {
		return v, false
	}
	return s.HaProxyLbType, true
}

// NewHaProxyLbTypeStackRawSourceDetailsServicesLoadbalancerSum returns new StackRawSourceDetailsServicesLoadbalancerSum from HaProxyLbType.
func NewHaProxyLbTypeStackRawSourceDetailsServicesLoadbalancerSum(v HaProxyLbType) StackRawSourceDetailsServicesLoadbalancerSum {
	var s StackRawSourceDetailsServicesLoadbalancerSum
	s.SetHaProxyLbType(v)
	return s
}

// SetV1LbType sets StackRawSourceDetailsServicesLoadbalancerSum to V1LbType.
func (s *StackRawSourceDetailsServicesLoadbalancerSum) SetV1LbType(v V1LbType) {
	s.Type = V1LbTypeStackRawSourceDetailsServicesLoadbalancerSum
	s.V1LbType = v
}

// GetV1LbType returns V1LbType and true boolean if StackRawSourceDetailsServicesLoadbalancerSum is V1LbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) GetV1LbType() (v V1LbType, ok bool) {
	if !s.IsV1LbType() {
		return v, false
	}
	return s.V1LbType, true
}

// NewV1LbTypeStackRawSourceDetailsServicesLoadbalancerSum returns new StackRawSourceDetailsServicesLoadbalancerSum from V1LbType.
func NewV1LbTypeStackRawSourceDetailsServicesLoadbalancerSum(v V1LbType) StackRawSourceDetailsServicesLoadbalancerSum {
	var s StackRawSourceDetailsServicesLoadbalancerSum
	s.SetV1LbType(v)
	return s
}

// SetDefaultLbType sets StackRawSourceDetailsServicesLoadbalancerSum to DefaultLbType.
func (s *StackRawSourceDetailsServicesLoadbalancerSum) SetDefaultLbType(v DefaultLbType) {
	s.Type = DefaultLbTypeStackRawSourceDetailsServicesLoadbalancerSum
	s.DefaultLbType = v
}

// GetDefaultLbType returns DefaultLbType and true boolean if StackRawSourceDetailsServicesLoadbalancerSum is DefaultLbType.
func (s StackRawSourceDetailsServicesLoadbalancerSum) GetDefaultLbType() (v DefaultLbType, ok bool) {
	if !s.IsDefaultLbType() {
		return v, false
	}
	return s.DefaultLbType, true
}

// NewDefaultLbTypeStackRawSourceDetailsServicesLoadbalancerSum returns new StackRawSourceDetailsServicesLoadbalancerSum from DefaultLbType.
func NewDefaultLbTypeStackRawSourceDetailsServicesLoadbalancerSum(v DefaultLbType) StackRawSourceDetailsServicesLoadbalancerSum {
	var s StackRawSourceDetailsServicesLoadbalancerSum
	s.SetDefaultLbType(v)
	return s
}

type StackRawSourceDetailsServicesVpn struct {
	Auth          StackRawSourceDetailsServicesVpnAuth `json:"auth"`
	AllowInternet bool                                 `json:"allow_internet"`
}

// GetAuth returns the value of Auth.
func (s *StackRawSourceDetailsServicesVpn) GetAuth() StackRawSourceDetailsServicesVpnAuth {
	return s.Auth
}

// GetAllowInternet returns the value of AllowInternet.
func (s *StackRawSourceDetailsServicesVpn) GetAllowInternet() bool {
	return s.AllowInternet
}

// SetAuth sets the value of Auth.
func (s *StackRawSourceDetailsServicesVpn) SetAuth(val StackRawSourceDetailsServicesVpnAuth) {
	s.Auth = val
}

// SetAllowInternet sets the value of AllowInternet.
func (s *StackRawSourceDetailsServicesVpn) SetAllowInternet(val bool) {
	s.AllowInternet = val
}

type StackRawSourceDetailsServicesVpnAuth struct {
	Webhook       OptString `json:"webhook"`
	CycleAccounts bool      `json:"cycle_accounts"`
	VpnAccounts   bool      `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *StackRawSourceDetailsServicesVpnAuth) GetWebhook() OptString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *StackRawSourceDetailsServicesVpnAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *StackRawSourceDetailsServicesVpnAuth) GetVpnAccounts() bool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *StackRawSourceDetailsServicesVpnAuth) SetWebhook(val OptString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *StackRawSourceDetailsServicesVpnAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *StackRawSourceDetailsServicesVpnAuth) SetVpnAccounts(val bool) {
	s.VpnAccounts = val
}

type StackRawSourceType string

const (
	StackRawSourceTypeRaw StackRawSourceType = "raw"
)

// AllValues returns all StackRawSourceType values.
func (StackRawSourceType) AllValues() []StackRawSourceType {
	return []StackRawSourceType{
		StackRawSourceTypeRaw,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackRawSourceType) MarshalText() ([]byte, error) {
	switch s {
	case StackRawSourceTypeRaw:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackRawSourceType) UnmarshalText(data []byte) error {
	switch StackRawSourceType(data) {
	case StackRawSourceTypeRaw:
		*s = StackRawSourceTypeRaw
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A repo source type for a stack.
// Ref: #/components/schemas/StackRepoSource
type StackRepoSource struct {
	Details StackRepoSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackRepoSource) GetDetails() StackRepoSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackRepoSource) SetDetails(val StackRepoSourceDetails) {
	s.Details = val
}

type StackRepoSourceDetails struct {
	// The URL of the repository.
	URL string `json:"url"`
	// An optional branch arguement.  Default value is `master`.
	Branch OptString `json:"branch"`
	// Authentication information for the repository.
	Auth OptStackRepoSourceDetailsAuth `json:"auth"`
	// Repository reference information.
	Ref OptStackRepoSourceDetailsRef `json:"ref"`
}

// GetURL returns the value of URL.
func (s *StackRepoSourceDetails) GetURL() string {
	return s.URL
}

// GetBranch returns the value of Branch.
func (s *StackRepoSourceDetails) GetBranch() OptString {
	return s.Branch
}

// GetAuth returns the value of Auth.
func (s *StackRepoSourceDetails) GetAuth() OptStackRepoSourceDetailsAuth {
	return s.Auth
}

// GetRef returns the value of Ref.
func (s *StackRepoSourceDetails) GetRef() OptStackRepoSourceDetailsRef {
	return s.Ref
}

// SetURL sets the value of URL.
func (s *StackRepoSourceDetails) SetURL(val string) {
	s.URL = val
}

// SetBranch sets the value of Branch.
func (s *StackRepoSourceDetails) SetBranch(val OptString) {
	s.Branch = val
}

// SetAuth sets the value of Auth.
func (s *StackRepoSourceDetails) SetAuth(val OptStackRepoSourceDetailsAuth) {
	s.Auth = val
}

// SetRef sets the value of Ref.
func (s *StackRepoSourceDetails) SetRef(val OptStackRepoSourceDetailsRef) {
	s.Ref = val
}

// Authentication information for the repository.
type StackRepoSourceDetailsAuth struct {
	OneOf StackRepoSourceDetailsAuthSum
}

// GetOneOf returns the value of OneOf.
func (s *StackRepoSourceDetailsAuth) GetOneOf() StackRepoSourceDetailsAuthSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackRepoSourceDetailsAuth) SetOneOf(val StackRepoSourceDetailsAuthSum) {
	s.OneOf = val
}

// StackRepoSourceDetailsAuthSum represents sum type.
type StackRepoSourceDetailsAuthSum struct {
	Type            StackRepoSourceDetailsAuthSumType // switch on this field
	CredentialsHTTP CredentialsHTTP
	CredentialsSSH  CredentialsSSH
}

// StackRepoSourceDetailsAuthSumType is oneOf type of StackRepoSourceDetailsAuthSum.
type StackRepoSourceDetailsAuthSumType string

// Possible values for StackRepoSourceDetailsAuthSumType.
const (
	CredentialsHTTPStackRepoSourceDetailsAuthSum StackRepoSourceDetailsAuthSumType = "http"
	CredentialsSSHStackRepoSourceDetailsAuthSum  StackRepoSourceDetailsAuthSumType = "ssh"
)

// IsCredentialsHTTP reports whether StackRepoSourceDetailsAuthSum is CredentialsHTTP.
func (s StackRepoSourceDetailsAuthSum) IsCredentialsHTTP() bool {
	return s.Type == CredentialsHTTPStackRepoSourceDetailsAuthSum
}

// IsCredentialsSSH reports whether StackRepoSourceDetailsAuthSum is CredentialsSSH.
func (s StackRepoSourceDetailsAuthSum) IsCredentialsSSH() bool {
	return s.Type == CredentialsSSHStackRepoSourceDetailsAuthSum
}

// SetCredentialsHTTP sets StackRepoSourceDetailsAuthSum to CredentialsHTTP.
func (s *StackRepoSourceDetailsAuthSum) SetCredentialsHTTP(v CredentialsHTTP) {
	s.Type = CredentialsHTTPStackRepoSourceDetailsAuthSum
	s.CredentialsHTTP = v
}

// GetCredentialsHTTP returns CredentialsHTTP and true boolean if StackRepoSourceDetailsAuthSum is CredentialsHTTP.
func (s StackRepoSourceDetailsAuthSum) GetCredentialsHTTP() (v CredentialsHTTP, ok bool) {
	if !s.IsCredentialsHTTP() {
		return v, false
	}
	return s.CredentialsHTTP, true
}

// NewCredentialsHTTPStackRepoSourceDetailsAuthSum returns new StackRepoSourceDetailsAuthSum from CredentialsHTTP.
func NewCredentialsHTTPStackRepoSourceDetailsAuthSum(v CredentialsHTTP) StackRepoSourceDetailsAuthSum {
	var s StackRepoSourceDetailsAuthSum
	s.SetCredentialsHTTP(v)
	return s
}

// SetCredentialsSSH sets StackRepoSourceDetailsAuthSum to CredentialsSSH.
func (s *StackRepoSourceDetailsAuthSum) SetCredentialsSSH(v CredentialsSSH) {
	s.Type = CredentialsSSHStackRepoSourceDetailsAuthSum
	s.CredentialsSSH = v
}

// GetCredentialsSSH returns CredentialsSSH and true boolean if StackRepoSourceDetailsAuthSum is CredentialsSSH.
func (s StackRepoSourceDetailsAuthSum) GetCredentialsSSH() (v CredentialsSSH, ok bool) {
	if !s.IsCredentialsSSH() {
		return v, false
	}
	return s.CredentialsSSH, true
}

// NewCredentialsSSHStackRepoSourceDetailsAuthSum returns new StackRepoSourceDetailsAuthSum from CredentialsSSH.
func NewCredentialsSSHStackRepoSourceDetailsAuthSum(v CredentialsSSH) StackRepoSourceDetailsAuthSum {
	var s StackRepoSourceDetailsAuthSum
	s.SetCredentialsSSH(v)
	return s
}

// Repository reference information.
type StackRepoSourceDetailsRef struct {
	// The type of reference being used.
	Type string `json:"type"`
	// The value for the given reference type.
	Value string `json:"value"`
}

// GetType returns the value of Type.
func (s *StackRepoSourceDetailsRef) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *StackRepoSourceDetailsRef) GetValue() string {
	return s.Value
}

// SetType sets the value of Type.
func (s *StackRepoSourceDetailsRef) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *StackRepoSourceDetailsRef) SetValue(val string) {
	s.Value = val
}

type StackRepoSourceType string

const (
	StackRepoSourceTypeGitRepo StackRepoSourceType = "git-repo"
)

// AllValues returns all StackRepoSourceType values.
func (StackRepoSourceType) AllValues() []StackRepoSourceType {
	return []StackRepoSourceType{
		StackRepoSourceTypeGitRepo,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackRepoSourceType) MarshalText() ([]byte, error) {
	switch s {
	case StackRepoSourceTypeGitRepo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackRepoSourceType) UnmarshalText(data []byte) error {
	switch StackRepoSourceType(data) {
	case StackRepoSourceTypeGitRepo:
		*s = StackRepoSourceTypeGitRepo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A source for a stack to be created from.
// Ref: #/components/schemas/StackSource
type StackSource struct {
	OneOf StackSourceSum
}

// GetOneOf returns the value of OneOf.
func (s *StackSource) GetOneOf() StackSourceSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackSource) SetOneOf(val StackSourceSum) {
	s.OneOf = val
}

// StackSourceSum represents sum type.
type StackSourceSum struct {
	Type            StackSourceSumType // switch on this field
	StackRepoSource StackRepoSource
	StackRawSource  StackRawSource
}

// StackSourceSumType is oneOf type of StackSourceSum.
type StackSourceSumType string

// Possible values for StackSourceSumType.
const (
	StackRepoSourceStackSourceSum StackSourceSumType = "git-repo"
	StackRawSourceStackSourceSum  StackSourceSumType = "raw"
)

// IsStackRepoSource reports whether StackSourceSum is StackRepoSource.
func (s StackSourceSum) IsStackRepoSource() bool { return s.Type == StackRepoSourceStackSourceSum }

// IsStackRawSource reports whether StackSourceSum is StackRawSource.
func (s StackSourceSum) IsStackRawSource() bool { return s.Type == StackRawSourceStackSourceSum }

// SetStackRepoSource sets StackSourceSum to StackRepoSource.
func (s *StackSourceSum) SetStackRepoSource(v StackRepoSource) {
	s.Type = StackRepoSourceStackSourceSum
	s.StackRepoSource = v
}

// GetStackRepoSource returns StackRepoSource and true boolean if StackSourceSum is StackRepoSource.
func (s StackSourceSum) GetStackRepoSource() (v StackRepoSource, ok bool) {
	if !s.IsStackRepoSource() {
		return v, false
	}
	return s.StackRepoSource, true
}

// NewStackRepoSourceStackSourceSum returns new StackSourceSum from StackRepoSource.
func NewStackRepoSourceStackSourceSum(v StackRepoSource) StackSourceSum {
	var s StackSourceSum
	s.SetStackRepoSource(v)
	return s
}

// SetStackRawSource sets StackSourceSum to StackRawSource.
func (s *StackSourceSum) SetStackRawSource(v StackRawSource) {
	s.Type = StackRawSourceStackSourceSum
	s.StackRawSource = v
}

// GetStackRawSource returns StackRawSource and true boolean if StackSourceSum is StackRawSource.
func (s StackSourceSum) GetStackRawSource() (v StackRawSource, ok bool) {
	if !s.IsStackRawSource() {
		return v, false
	}
	return s.StackRawSource, true
}

// NewStackRawSourceStackSourceSum returns new StackSourceSum from StackRawSource.
func NewStackRawSourceStackSourceSum(v StackRawSource) StackSourceSum {
	var s StackSourceSum
	s.SetStackRawSource(v)
	return s
}

// Ref: #/components/schemas/StackSpecContainerImage
type StackSpecContainerImage struct {
	Name    NilString                            `json:"name"`
	Origin  ImageOrigin                          `json:"origin"`
	Build   OptNilStackSpecContainerImageBuild   `json:"build"`
	Builder OptNilStackSpecContainerImageBuilder `json:"builder"`
}

// GetName returns the value of Name.
func (s *StackSpecContainerImage) GetName() NilString {
	return s.Name
}

// GetOrigin returns the value of Origin.
func (s *StackSpecContainerImage) GetOrigin() ImageOrigin {
	return s.Origin
}

// GetBuild returns the value of Build.
func (s *StackSpecContainerImage) GetBuild() OptNilStackSpecContainerImageBuild {
	return s.Build
}

// GetBuilder returns the value of Builder.
func (s *StackSpecContainerImage) GetBuilder() OptNilStackSpecContainerImageBuilder {
	return s.Builder
}

// SetName sets the value of Name.
func (s *StackSpecContainerImage) SetName(val NilString) {
	s.Name = val
}

// SetOrigin sets the value of Origin.
func (s *StackSpecContainerImage) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

// SetBuild sets the value of Build.
func (s *StackSpecContainerImage) SetBuild(val OptNilStackSpecContainerImageBuild) {
	s.Build = val
}

// SetBuilder sets the value of Builder.
func (s *StackSpecContainerImage) SetBuilder(val OptNilStackSpecContainerImageBuilder) {
	s.Builder = val
}

type StackSpecContainerImageBuild struct {
	Args StackSpecContainerImageBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *StackSpecContainerImageBuild) GetArgs() StackSpecContainerImageBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *StackSpecContainerImageBuild) SetArgs(val StackSpecContainerImageBuildArgs) {
	s.Args = val
}

type StackSpecContainerImageBuildArgs map[string]string

func (s *StackSpecContainerImageBuildArgs) init() StackSpecContainerImageBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackSpecContainerImageBuilder struct {
	IntegrationID HybridIdentifier `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *StackSpecContainerImageBuilder) GetIntegrationID() HybridIdentifier {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *StackSpecContainerImageBuilder) SetIntegrationID(val HybridIdentifier) {
	s.IntegrationID = val
}

// Ref: #/components/schemas/StackSpecScopedVariable
type StackSpecScopedVariable struct {
	Identifier Identifier                    `json:"identifier"`
	Scope      StackSpecScopedVariableScope  `json:"scope"`
	Access     StackSpecScopedVariableAccess `json:"access"`
	// The source or value of the scoped variable.
	Source NilStackSpecScopedVariableSource `json:"source"`
}

// GetIdentifier returns the value of Identifier.
func (s *StackSpecScopedVariable) GetIdentifier() Identifier {
	return s.Identifier
}

// GetScope returns the value of Scope.
func (s *StackSpecScopedVariable) GetScope() StackSpecScopedVariableScope {
	return s.Scope
}

// GetAccess returns the value of Access.
func (s *StackSpecScopedVariable) GetAccess() StackSpecScopedVariableAccess {
	return s.Access
}

// GetSource returns the value of Source.
func (s *StackSpecScopedVariable) GetSource() NilStackSpecScopedVariableSource {
	return s.Source
}

// SetIdentifier sets the value of Identifier.
func (s *StackSpecScopedVariable) SetIdentifier(val Identifier) {
	s.Identifier = val
}

// SetScope sets the value of Scope.
func (s *StackSpecScopedVariable) SetScope(val StackSpecScopedVariableScope) {
	s.Scope = val
}

// SetAccess sets the value of Access.
func (s *StackSpecScopedVariable) SetAccess(val StackSpecScopedVariableAccess) {
	s.Access = val
}

// SetSource sets the value of Source.
func (s *StackSpecScopedVariable) SetSource(val NilStackSpecScopedVariableSource) {
	s.Source = val
}

type StackSpecScopedVariableAccess struct {
	EnvVariable NilStackSpecScopedVariableAccessEnvVariable `json:"env_variable"`
	// If set, this scoped variable will be available over the internal API. Contains settings for
	// accessing this variable over the internal API.
	InternalAPI OptNilStackSpecScopedVariableAccessInternalAPI `json:"internal_api"`
	// File is an object that describes a path to mount the file to inside the container.
	File OptNilStackSpecScopedVariableAccessFile `json:"file"`
}

// GetEnvVariable returns the value of EnvVariable.
func (s *StackSpecScopedVariableAccess) GetEnvVariable() NilStackSpecScopedVariableAccessEnvVariable {
	return s.EnvVariable
}

// GetInternalAPI returns the value of InternalAPI.
func (s *StackSpecScopedVariableAccess) GetInternalAPI() OptNilStackSpecScopedVariableAccessInternalAPI {
	return s.InternalAPI
}

// GetFile returns the value of File.
func (s *StackSpecScopedVariableAccess) GetFile() OptNilStackSpecScopedVariableAccessFile {
	return s.File
}

// SetEnvVariable sets the value of EnvVariable.
func (s *StackSpecScopedVariableAccess) SetEnvVariable(val NilStackSpecScopedVariableAccessEnvVariable) {
	s.EnvVariable = val
}

// SetInternalAPI sets the value of InternalAPI.
func (s *StackSpecScopedVariableAccess) SetInternalAPI(val OptNilStackSpecScopedVariableAccessInternalAPI) {
	s.InternalAPI = val
}

// SetFile sets the value of File.
func (s *StackSpecScopedVariableAccess) SetFile(val OptNilStackSpecScopedVariableAccessFile) {
	s.File = val
}

type StackSpecScopedVariableAccessEnvVariable struct {
	// The name of the environment variable set on the target container.
	Key string `json:"key"`
}

// GetKey returns the value of Key.
func (s *StackSpecScopedVariableAccessEnvVariable) GetKey() string {
	return s.Key
}

// SetKey sets the value of Key.
func (s *StackSpecScopedVariableAccessEnvVariable) SetKey(val string) {
	s.Key = val
}

// File is an object that describes a path to mount the file to inside the container.
type StackSpecScopedVariableAccessFile struct {
	// When true, Cycle will interpret this variable as a base-64 encoded string, and decode it before
	// passing it into the container.
	DecodeBase64 bool `json:"decode"`
	// The path to mount the file to inside the container.
	Path NilString `json:"path"`
}

// GetDecodeBase64 returns the value of DecodeBase64.
func (s *StackSpecScopedVariableAccessFile) GetDecodeBase64() bool {
	return s.DecodeBase64
}

// GetPath returns the value of Path.
func (s *StackSpecScopedVariableAccessFile) GetPath() NilString {
	return s.Path
}

// SetDecodeBase64 sets the value of DecodeBase64.
func (s *StackSpecScopedVariableAccessFile) SetDecodeBase64(val bool) {
	s.DecodeBase64 = val
}

// SetPath sets the value of Path.
func (s *StackSpecScopedVariableAccessFile) SetPath(val NilString) {
	s.Path = val
}

// If set, this scoped variable will be available over the internal API. Contains settings for
// accessing this variable over the internal API.
type StackSpecScopedVariableAccessInternalAPI struct {
	// Duration is a time string that the internal API will serve that variable after runtime starts.
	Duration OptNilString `json:"duration"`
}

// GetDuration returns the value of Duration.
func (s *StackSpecScopedVariableAccessInternalAPI) GetDuration() OptNilString {
	return s.Duration
}

// SetDuration sets the value of Duration.
func (s *StackSpecScopedVariableAccessInternalAPI) SetDuration(val OptNilString) {
	s.Duration = val
}

// A stack spec resource.
// Ref: #/components/schemas/StackSpecScopedVariableRawSource
type StackSpecScopedVariableRawSource struct {
	Details StackSpecScopedVariableRawSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackSpecScopedVariableRawSource) GetDetails() StackSpecScopedVariableRawSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackSpecScopedVariableRawSource) SetDetails(val StackSpecScopedVariableRawSourceDetails) {
	s.Details = val
}

type StackSpecScopedVariableRawSourceDetails struct {
	// The value of the variable.
	Value string `json:"value"`
	// A boolean where true represents the text the user is entering will be multi line.
	Blob   bool                                             `json:"blob"`
	Secret NilStackSpecScopedVariableRawSourceDetailsSecret `json:"secret"`
}

// GetValue returns the value of Value.
func (s *StackSpecScopedVariableRawSourceDetails) GetValue() string {
	return s.Value
}

// GetBlob returns the value of Blob.
func (s *StackSpecScopedVariableRawSourceDetails) GetBlob() bool {
	return s.Blob
}

// GetSecret returns the value of Secret.
func (s *StackSpecScopedVariableRawSourceDetails) GetSecret() NilStackSpecScopedVariableRawSourceDetailsSecret {
	return s.Secret
}

// SetValue sets the value of Value.
func (s *StackSpecScopedVariableRawSourceDetails) SetValue(val string) {
	s.Value = val
}

// SetBlob sets the value of Blob.
func (s *StackSpecScopedVariableRawSourceDetails) SetBlob(val bool) {
	s.Blob = val
}

// SetSecret sets the value of Secret.
func (s *StackSpecScopedVariableRawSourceDetails) SetSecret(val NilStackSpecScopedVariableRawSourceDetailsSecret) {
	s.Secret = val
}

type StackSpecScopedVariableRawSourceDetailsSecret struct {
	// A string describing the IV Hex associated with the encryption of the variable.
	Iv OptString `json:"iv"`
	// A user specified hint that will suggest what the encryption key might be.
	Hint OptString `json:"hint"`
}

// GetIv returns the value of Iv.
func (s *StackSpecScopedVariableRawSourceDetailsSecret) GetIv() OptString {
	return s.Iv
}

// GetHint returns the value of Hint.
func (s *StackSpecScopedVariableRawSourceDetailsSecret) GetHint() OptString {
	return s.Hint
}

// SetIv sets the value of Iv.
func (s *StackSpecScopedVariableRawSourceDetailsSecret) SetIv(val OptString) {
	s.Iv = val
}

// SetHint sets the value of Hint.
func (s *StackSpecScopedVariableRawSourceDetailsSecret) SetHint(val OptString) {
	s.Hint = val
}

type StackSpecScopedVariableRawSourceType string

const (
	StackSpecScopedVariableRawSourceTypeRaw StackSpecScopedVariableRawSourceType = "raw"
)

// AllValues returns all StackSpecScopedVariableRawSourceType values.
func (StackSpecScopedVariableRawSourceType) AllValues() []StackSpecScopedVariableRawSourceType {
	return []StackSpecScopedVariableRawSourceType{
		StackSpecScopedVariableRawSourceTypeRaw,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecScopedVariableRawSourceType) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecScopedVariableRawSourceTypeRaw:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecScopedVariableRawSourceType) UnmarshalText(data []byte) error {
	switch StackSpecScopedVariableRawSourceType(data) {
	case StackSpecScopedVariableRawSourceTypeRaw:
		*s = StackSpecScopedVariableRawSourceTypeRaw
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackSpecScopedVariableScope struct {
	// Information about the assignment of the scoped variable to different containers in the environment.
	Containers StackSpecScopedVariableScopeContainers `json:"containers"`
}

// GetContainers returns the value of Containers.
func (s *StackSpecScopedVariableScope) GetContainers() StackSpecScopedVariableScopeContainers {
	return s.Containers
}

// SetContainers sets the value of Containers.
func (s *StackSpecScopedVariableScope) SetContainers(val StackSpecScopedVariableScopeContainers) {
	s.Containers = val
}

// Information about the assignment of the scoped variable to different containers in the environment.
type StackSpecScopedVariableScopeContainers struct {
	// A boolean where true represents the scoped variables is globally assigned to all current and
	// future containers in the environment.
	Global bool `json:"global"`
	// An array of container IDs, where each container identified will have access to the scoped variable.
	Ids OptNilStringArray `json:"ids"`
	// An array of container identifiers, where each container identfied will have access to the scoped
	// variable.
	Identifiers OptNilStringArray `json:"identifiers"`
}

// GetGlobal returns the value of Global.
func (s *StackSpecScopedVariableScopeContainers) GetGlobal() bool {
	return s.Global
}

// GetIds returns the value of Ids.
func (s *StackSpecScopedVariableScopeContainers) GetIds() OptNilStringArray {
	return s.Ids
}

// GetIdentifiers returns the value of Identifiers.
func (s *StackSpecScopedVariableScopeContainers) GetIdentifiers() OptNilStringArray {
	return s.Identifiers
}

// SetGlobal sets the value of Global.
func (s *StackSpecScopedVariableScopeContainers) SetGlobal(val bool) {
	s.Global = val
}

// SetIds sets the value of Ids.
func (s *StackSpecScopedVariableScopeContainers) SetIds(val OptNilStringArray) {
	s.Ids = val
}

// SetIdentifiers sets the value of Identifiers.
func (s *StackSpecScopedVariableScopeContainers) SetIdentifiers(val OptNilStringArray) {
	s.Identifiers = val
}

// The source or value of the scoped variable.
type StackSpecScopedVariableSource struct {
	OneOf StackSpecScopedVariableSourceSum
}

// GetOneOf returns the value of OneOf.
func (s *StackSpecScopedVariableSource) GetOneOf() StackSpecScopedVariableSourceSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *StackSpecScopedVariableSource) SetOneOf(val StackSpecScopedVariableSourceSum) {
	s.OneOf = val
}

// StackSpecScopedVariableSourceSum represents sum type.
type StackSpecScopedVariableSourceSum struct {
	Type                             StackSpecScopedVariableSourceSumType // switch on this field
	StackSpecScopedVariableUrlSource StackSpecScopedVariableUrlSource
	StackSpecScopedVariableRawSource StackSpecScopedVariableRawSource
}

// StackSpecScopedVariableSourceSumType is oneOf type of StackSpecScopedVariableSourceSum.
type StackSpecScopedVariableSourceSumType string

// Possible values for StackSpecScopedVariableSourceSumType.
const (
	StackSpecScopedVariableUrlSourceStackSpecScopedVariableSourceSum StackSpecScopedVariableSourceSumType = "url"
	StackSpecScopedVariableRawSourceStackSpecScopedVariableSourceSum StackSpecScopedVariableSourceSumType = "raw"
)

// IsStackSpecScopedVariableUrlSource reports whether StackSpecScopedVariableSourceSum is StackSpecScopedVariableUrlSource.
func (s StackSpecScopedVariableSourceSum) IsStackSpecScopedVariableUrlSource() bool {
	return s.Type == StackSpecScopedVariableUrlSourceStackSpecScopedVariableSourceSum
}

// IsStackSpecScopedVariableRawSource reports whether StackSpecScopedVariableSourceSum is StackSpecScopedVariableRawSource.
func (s StackSpecScopedVariableSourceSum) IsStackSpecScopedVariableRawSource() bool {
	return s.Type == StackSpecScopedVariableRawSourceStackSpecScopedVariableSourceSum
}

// SetStackSpecScopedVariableUrlSource sets StackSpecScopedVariableSourceSum to StackSpecScopedVariableUrlSource.
func (s *StackSpecScopedVariableSourceSum) SetStackSpecScopedVariableUrlSource(v StackSpecScopedVariableUrlSource) {
	s.Type = StackSpecScopedVariableUrlSourceStackSpecScopedVariableSourceSum
	s.StackSpecScopedVariableUrlSource = v
}

// GetStackSpecScopedVariableUrlSource returns StackSpecScopedVariableUrlSource and true boolean if StackSpecScopedVariableSourceSum is StackSpecScopedVariableUrlSource.
func (s StackSpecScopedVariableSourceSum) GetStackSpecScopedVariableUrlSource() (v StackSpecScopedVariableUrlSource, ok bool) {
	if !s.IsStackSpecScopedVariableUrlSource() {
		return v, false
	}
	return s.StackSpecScopedVariableUrlSource, true
}

// NewStackSpecScopedVariableUrlSourceStackSpecScopedVariableSourceSum returns new StackSpecScopedVariableSourceSum from StackSpecScopedVariableUrlSource.
func NewStackSpecScopedVariableUrlSourceStackSpecScopedVariableSourceSum(v StackSpecScopedVariableUrlSource) StackSpecScopedVariableSourceSum {
	var s StackSpecScopedVariableSourceSum
	s.SetStackSpecScopedVariableUrlSource(v)
	return s
}

// SetStackSpecScopedVariableRawSource sets StackSpecScopedVariableSourceSum to StackSpecScopedVariableRawSource.
func (s *StackSpecScopedVariableSourceSum) SetStackSpecScopedVariableRawSource(v StackSpecScopedVariableRawSource) {
	s.Type = StackSpecScopedVariableRawSourceStackSpecScopedVariableSourceSum
	s.StackSpecScopedVariableRawSource = v
}

// GetStackSpecScopedVariableRawSource returns StackSpecScopedVariableRawSource and true boolean if StackSpecScopedVariableSourceSum is StackSpecScopedVariableRawSource.
func (s StackSpecScopedVariableSourceSum) GetStackSpecScopedVariableRawSource() (v StackSpecScopedVariableRawSource, ok bool) {
	if !s.IsStackSpecScopedVariableRawSource() {
		return v, false
	}
	return s.StackSpecScopedVariableRawSource, true
}

// NewStackSpecScopedVariableRawSourceStackSpecScopedVariableSourceSum returns new StackSpecScopedVariableSourceSum from StackSpecScopedVariableRawSource.
func NewStackSpecScopedVariableRawSourceStackSpecScopedVariableSourceSum(v StackSpecScopedVariableRawSource) StackSpecScopedVariableSourceSum {
	var s StackSpecScopedVariableSourceSum
	s.SetStackSpecScopedVariableRawSource(v)
	return s
}

// The `URL` type of scoped variable `value`, referred to as a source. This means the value of this
// variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the
// contents on every start.
// Ref: #/components/schemas/StackSpecScopedVariableUrlSource
type StackSpecScopedVariableUrlSource struct {
	Details StackSpecScopedVariableUrlSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *StackSpecScopedVariableUrlSource) GetDetails() StackSpecScopedVariableUrlSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *StackSpecScopedVariableUrlSource) SetDetails(val StackSpecScopedVariableUrlSourceDetails) {
	s.Details = val
}

type StackSpecScopedVariableUrlSourceDetails struct {
	// The URL to call to produce the value.
	URL string `json:"url"`
	// Additional headers that can be attached to the URL request. Useful for adding metadata to
	// third-party services.
	Headers StackSpecScopedVariableUrlSourceDetailsHeaders `json:"headers"`
	// A URL that can be provided to authenticate with a third party secret service. Cycle will make a
	// request to this URL before fetching the secret URL, and use the response as the value of an
	// Authorization header when requesting the secret.
	AuthTokenURL NilString `json:"auth_token_url"`
}

// GetURL returns the value of URL.
func (s *StackSpecScopedVariableUrlSourceDetails) GetURL() string {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *StackSpecScopedVariableUrlSourceDetails) GetHeaders() StackSpecScopedVariableUrlSourceDetailsHeaders {
	return s.Headers
}

// GetAuthTokenURL returns the value of AuthTokenURL.
func (s *StackSpecScopedVariableUrlSourceDetails) GetAuthTokenURL() NilString {
	return s.AuthTokenURL
}

// SetURL sets the value of URL.
func (s *StackSpecScopedVariableUrlSourceDetails) SetURL(val string) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *StackSpecScopedVariableUrlSourceDetails) SetHeaders(val StackSpecScopedVariableUrlSourceDetailsHeaders) {
	s.Headers = val
}

// SetAuthTokenURL sets the value of AuthTokenURL.
func (s *StackSpecScopedVariableUrlSourceDetails) SetAuthTokenURL(val NilString) {
	s.AuthTokenURL = val
}

// Additional headers that can be attached to the URL request. Useful for adding metadata to
// third-party services.
type StackSpecScopedVariableUrlSourceDetailsHeaders map[string]jx.Raw

func (s *StackSpecScopedVariableUrlSourceDetailsHeaders) init() StackSpecScopedVariableUrlSourceDetailsHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The type of source value, can be either `raw` or `url`.
type StackSpecScopedVariableUrlSourceType string

const (
	StackSpecScopedVariableUrlSourceTypeURL StackSpecScopedVariableUrlSourceType = "url"
)

// AllValues returns all StackSpecScopedVariableUrlSourceType values.
func (StackSpecScopedVariableUrlSourceType) AllValues() []StackSpecScopedVariableUrlSourceType {
	return []StackSpecScopedVariableUrlSourceType{
		StackSpecScopedVariableUrlSourceTypeURL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecScopedVariableUrlSourceType) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecScopedVariableUrlSourceTypeURL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecScopedVariableUrlSourceType) UnmarshalText(data []byte) error {
	switch StackSpecScopedVariableUrlSourceType(data) {
	case StackSpecScopedVariableUrlSourceTypeURL:
		*s = StackSpecScopedVariableUrlSourceTypeURL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/StackSpecTestContainer
type StackSpecTestContainer struct {
	Name   string                          `json:"name"`
	Image  NilStackSpecTestContainerImage  `json:"image"`
	Config NilStackSpecTestContainerConfig `json:"config"`
}

// GetName returns the value of Name.
func (s *StackSpecTestContainer) GetName() string {
	return s.Name
}

// GetImage returns the value of Image.
func (s *StackSpecTestContainer) GetImage() NilStackSpecTestContainerImage {
	return s.Image
}

// GetConfig returns the value of Config.
func (s *StackSpecTestContainer) GetConfig() NilStackSpecTestContainerConfig {
	return s.Config
}

// SetName sets the value of Name.
func (s *StackSpecTestContainer) SetName(val string) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *StackSpecTestContainer) SetImage(val NilStackSpecTestContainerImage) {
	s.Image = val
}

// SetConfig sets the value of Config.
func (s *StackSpecTestContainer) SetConfig(val NilStackSpecTestContainerConfig) {
	s.Config = val
}

type StackSpecTestContainerConfig struct {
	Runtime   OptNilStackSpecTestContainerConfigRuntime   `json:"runtime"`
	Resources OptNilStackSpecTestContainerConfigResources `json:"resources"`
}

// GetRuntime returns the value of Runtime.
func (s *StackSpecTestContainerConfig) GetRuntime() OptNilStackSpecTestContainerConfigRuntime {
	return s.Runtime
}

// GetResources returns the value of Resources.
func (s *StackSpecTestContainerConfig) GetResources() OptNilStackSpecTestContainerConfigResources {
	return s.Resources
}

// SetRuntime sets the value of Runtime.
func (s *StackSpecTestContainerConfig) SetRuntime(val OptNilStackSpecTestContainerConfigRuntime) {
	s.Runtime = val
}

// SetResources sets the value of Resources.
func (s *StackSpecTestContainerConfig) SetResources(val OptNilStackSpecTestContainerConfigResources) {
	s.Resources = val
}

type StackSpecTestContainerConfigResources struct {
	CPU StackSpecTestContainerConfigResourcesCPU `json:"cpu"`
	RAM StackSpecTestContainerConfigResourcesRAM `json:"ram"`
}

// GetCPU returns the value of CPU.
func (s *StackSpecTestContainerConfigResources) GetCPU() StackSpecTestContainerConfigResourcesCPU {
	return s.CPU
}

// GetRAM returns the value of RAM.
func (s *StackSpecTestContainerConfigResources) GetRAM() StackSpecTestContainerConfigResourcesRAM {
	return s.RAM
}

// SetCPU sets the value of CPU.
func (s *StackSpecTestContainerConfigResources) SetCPU(val StackSpecTestContainerConfigResourcesCPU) {
	s.CPU = val
}

// SetRAM sets the value of RAM.
func (s *StackSpecTestContainerConfigResources) SetRAM(val StackSpecTestContainerConfigResourcesRAM) {
	s.RAM = val
}

type StackSpecTestContainerConfigResourcesCPU struct {
	Shares OptStackSpecTestContainerConfigResourcesCPUShares `json:"shares"`
	Cpus   OptString                                         `json:"cpus"`
}

// GetShares returns the value of Shares.
func (s *StackSpecTestContainerConfigResourcesCPU) GetShares() OptStackSpecTestContainerConfigResourcesCPUShares {
	return s.Shares
}

// GetCpus returns the value of Cpus.
func (s *StackSpecTestContainerConfigResourcesCPU) GetCpus() OptString {
	return s.Cpus
}

// SetShares sets the value of Shares.
func (s *StackSpecTestContainerConfigResourcesCPU) SetShares(val OptStackSpecTestContainerConfigResourcesCPUShares) {
	s.Shares = val
}

// SetCpus sets the value of Cpus.
func (s *StackSpecTestContainerConfigResourcesCPU) SetCpus(val OptString) {
	s.Cpus = val
}

type StackSpecTestContainerConfigResourcesCPUShares struct {
	Limit   int `json:"limit"`
	Reserve int `json:"reserve"`
}

// GetLimit returns the value of Limit.
func (s *StackSpecTestContainerConfigResourcesCPUShares) GetLimit() int {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *StackSpecTestContainerConfigResourcesCPUShares) GetReserve() int {
	return s.Reserve
}

// SetLimit sets the value of Limit.
func (s *StackSpecTestContainerConfigResourcesCPUShares) SetLimit(val int) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *StackSpecTestContainerConfigResourcesCPUShares) SetReserve(val int) {
	s.Reserve = val
}

type StackSpecTestContainerConfigResourcesRAM struct {
	Limit      OptString  `json:"limit"`
	Reserve    OptString  `json:"reserve"`
	Swappiness OptFloat64 `json:"swappiness"`
}

// GetLimit returns the value of Limit.
func (s *StackSpecTestContainerConfigResourcesRAM) GetLimit() OptString {
	return s.Limit
}

// GetReserve returns the value of Reserve.
func (s *StackSpecTestContainerConfigResourcesRAM) GetReserve() OptString {
	return s.Reserve
}

// GetSwappiness returns the value of Swappiness.
func (s *StackSpecTestContainerConfigResourcesRAM) GetSwappiness() OptFloat64 {
	return s.Swappiness
}

// SetLimit sets the value of Limit.
func (s *StackSpecTestContainerConfigResourcesRAM) SetLimit(val OptString) {
	s.Limit = val
}

// SetReserve sets the value of Reserve.
func (s *StackSpecTestContainerConfigResourcesRAM) SetReserve(val OptString) {
	s.Reserve = val
}

// SetSwappiness sets the value of Swappiness.
func (s *StackSpecTestContainerConfigResourcesRAM) SetSwappiness(val OptFloat64) {
	s.Swappiness = val
}

type StackSpecTestContainerConfigRuntime struct {
	Workdir         OptString                                             `json:"workdir"`
	Command         OptStackSpecTestContainerConfigRuntimeCommand         `json:"command"`
	EnvironmentVars OptStackSpecTestContainerConfigRuntimeEnvironmentVars `json:"environment_vars"`
	Namespaces      []StackSpecTestContainerConfigRuntimeNamespacesItem   `json:"namespaces"`
	Sysctl          OptStackSpecTestContainerConfigRuntimeSysctl          `json:"sysctl"`
	Rlimits         OptStackSpecTestContainerConfigRuntimeRlimits         `json:"rlimits"`
	Seccomp         OptStackSpecTestContainerConfigRuntimeSeccomp         `json:"seccomp"`
	Host            OptNilStackSpecTestContainerConfigRuntimeHost         `json:"host"`
	Privileged      OptBool                                               `json:"privileged"`
	Capabilities    []StackSpecTestContainerConfigRuntimeCapabilitiesItem `json:"capabilities"`
	Rootfs          OptStackSpecTestContainerConfigRuntimeRootfs          `json:"rootfs"`
}

// GetWorkdir returns the value of Workdir.
func (s *StackSpecTestContainerConfigRuntime) GetWorkdir() OptString {
	return s.Workdir
}

// GetCommand returns the value of Command.
func (s *StackSpecTestContainerConfigRuntime) GetCommand() OptStackSpecTestContainerConfigRuntimeCommand {
	return s.Command
}

// GetEnvironmentVars returns the value of EnvironmentVars.
func (s *StackSpecTestContainerConfigRuntime) GetEnvironmentVars() OptStackSpecTestContainerConfigRuntimeEnvironmentVars {
	return s.EnvironmentVars
}

// GetNamespaces returns the value of Namespaces.
func (s *StackSpecTestContainerConfigRuntime) GetNamespaces() []StackSpecTestContainerConfigRuntimeNamespacesItem {
	return s.Namespaces
}

// GetSysctl returns the value of Sysctl.
func (s *StackSpecTestContainerConfigRuntime) GetSysctl() OptStackSpecTestContainerConfigRuntimeSysctl {
	return s.Sysctl
}

// GetRlimits returns the value of Rlimits.
func (s *StackSpecTestContainerConfigRuntime) GetRlimits() OptStackSpecTestContainerConfigRuntimeRlimits {
	return s.Rlimits
}

// GetSeccomp returns the value of Seccomp.
func (s *StackSpecTestContainerConfigRuntime) GetSeccomp() OptStackSpecTestContainerConfigRuntimeSeccomp {
	return s.Seccomp
}

// GetHost returns the value of Host.
func (s *StackSpecTestContainerConfigRuntime) GetHost() OptNilStackSpecTestContainerConfigRuntimeHost {
	return s.Host
}

// GetPrivileged returns the value of Privileged.
func (s *StackSpecTestContainerConfigRuntime) GetPrivileged() OptBool {
	return s.Privileged
}

// GetCapabilities returns the value of Capabilities.
func (s *StackSpecTestContainerConfigRuntime) GetCapabilities() []StackSpecTestContainerConfigRuntimeCapabilitiesItem {
	return s.Capabilities
}

// GetRootfs returns the value of Rootfs.
func (s *StackSpecTestContainerConfigRuntime) GetRootfs() OptStackSpecTestContainerConfigRuntimeRootfs {
	return s.Rootfs
}

// SetWorkdir sets the value of Workdir.
func (s *StackSpecTestContainerConfigRuntime) SetWorkdir(val OptString) {
	s.Workdir = val
}

// SetCommand sets the value of Command.
func (s *StackSpecTestContainerConfigRuntime) SetCommand(val OptStackSpecTestContainerConfigRuntimeCommand) {
	s.Command = val
}

// SetEnvironmentVars sets the value of EnvironmentVars.
func (s *StackSpecTestContainerConfigRuntime) SetEnvironmentVars(val OptStackSpecTestContainerConfigRuntimeEnvironmentVars) {
	s.EnvironmentVars = val
}

// SetNamespaces sets the value of Namespaces.
func (s *StackSpecTestContainerConfigRuntime) SetNamespaces(val []StackSpecTestContainerConfigRuntimeNamespacesItem) {
	s.Namespaces = val
}

// SetSysctl sets the value of Sysctl.
func (s *StackSpecTestContainerConfigRuntime) SetSysctl(val OptStackSpecTestContainerConfigRuntimeSysctl) {
	s.Sysctl = val
}

// SetRlimits sets the value of Rlimits.
func (s *StackSpecTestContainerConfigRuntime) SetRlimits(val OptStackSpecTestContainerConfigRuntimeRlimits) {
	s.Rlimits = val
}

// SetSeccomp sets the value of Seccomp.
func (s *StackSpecTestContainerConfigRuntime) SetSeccomp(val OptStackSpecTestContainerConfigRuntimeSeccomp) {
	s.Seccomp = val
}

// SetHost sets the value of Host.
func (s *StackSpecTestContainerConfigRuntime) SetHost(val OptNilStackSpecTestContainerConfigRuntimeHost) {
	s.Host = val
}

// SetPrivileged sets the value of Privileged.
func (s *StackSpecTestContainerConfigRuntime) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetCapabilities sets the value of Capabilities.
func (s *StackSpecTestContainerConfigRuntime) SetCapabilities(val []StackSpecTestContainerConfigRuntimeCapabilitiesItem) {
	s.Capabilities = val
}

// SetRootfs sets the value of Rootfs.
func (s *StackSpecTestContainerConfigRuntime) SetRootfs(val OptStackSpecTestContainerConfigRuntimeRootfs) {
	s.Rootfs = val
}

type StackSpecTestContainerConfigRuntimeCapabilitiesItem string

const (
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPCHOWN          StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_CHOWN"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFSETID         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_FSETID"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACOVERRIDE    StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_DAC_OVERRIDE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFOWNER         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_FOWNER"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETFCAP        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SETFCAP"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETGID         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SETGID"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETUID         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SETUID"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPKILL           StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_KILL"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMKNOD          StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_MKNOD"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_NET_BIND_SERVICE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETRAW         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_NET_RAW"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITWRITE     StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_AUDIT_WRITE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSCHROOT      StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_CHROOT"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETPCAP        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SETPCAP"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACREADSEARCH  StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_DAC_READ_SEARCH"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETADMIN       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_NET_ADMIN"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBROADCAST   StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_NET_BROADCAST"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSADMIN       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_ADMIN"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSMODULE      StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_MODULE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSNICE        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_NICE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPACCT       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_PACCT"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPTRACE      StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_PTRACE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRAWIO       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_RAWIO"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRESOURCE    StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_RESOURCE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSBOOT        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_BOOT"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTIME        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_TIME"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG   StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYS_TTY_CONFIG"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSLOG         StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_SYSLOG"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITCONTROL   StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_AUDIT_CONTROL"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITREAD      StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_AUDIT_READ"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCLOCK        StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_IPC_LOCK"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCOWNER       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_IPC_OWNER"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_LINUX_IMMUTABLE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACADMIN       StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_MAC_ADMIN"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACOVERRIDE    StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_MAC_OVERRIDE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND   StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_BLOCK_SUSPEND"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLEASE          StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_LEASE"
	StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPWAKEALARM      StackSpecTestContainerConfigRuntimeCapabilitiesItem = "CAP_WAKE_ALARM"
)

// AllValues returns all StackSpecTestContainerConfigRuntimeCapabilitiesItem values.
func (StackSpecTestContainerConfigRuntimeCapabilitiesItem) AllValues() []StackSpecTestContainerConfigRuntimeCapabilitiesItem {
	return []StackSpecTestContainerConfigRuntimeCapabilitiesItem{
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPCHOWN,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFSETID,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACOVERRIDE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFOWNER,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETFCAP,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETGID,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETUID,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPKILL,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMKNOD,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETRAW,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITWRITE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSCHROOT,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETPCAP,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACREADSEARCH,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETADMIN,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBROADCAST,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSADMIN,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSMODULE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSNICE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPACCT,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPTRACE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRAWIO,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRESOURCE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSBOOT,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTIME,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSLOG,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITCONTROL,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITREAD,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCLOCK,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCOWNER,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACADMIN,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACOVERRIDE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLEASE,
		StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPWAKEALARM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecTestContainerConfigRuntimeCapabilitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPCHOWN:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFSETID:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACOVERRIDE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFOWNER:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETFCAP:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETGID:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETUID:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPKILL:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMKNOD:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETRAW:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITWRITE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSCHROOT:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETPCAP:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACREADSEARCH:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETADMIN:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBROADCAST:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSADMIN:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSMODULE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSNICE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPACCT:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPTRACE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRAWIO:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRESOURCE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSBOOT:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTIME:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSLOG:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITCONTROL:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITREAD:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCLOCK:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCOWNER:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACADMIN:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACOVERRIDE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLEASE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPWAKEALARM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecTestContainerConfigRuntimeCapabilitiesItem) UnmarshalText(data []byte) error {
	switch StackSpecTestContainerConfigRuntimeCapabilitiesItem(data) {
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPCHOWN:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPCHOWN
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFSETID:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFSETID
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACOVERRIDE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACOVERRIDE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFOWNER:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPFOWNER
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETFCAP:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETFCAP
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETGID:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETGID
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETUID:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETUID
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPKILL:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPKILL
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMKNOD:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMKNOD
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBINDSERVICE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETRAW:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETRAW
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITWRITE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITWRITE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSCHROOT:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSCHROOT
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETPCAP:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSETPCAP
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACREADSEARCH:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPDACREADSEARCH
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETADMIN:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETADMIN
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBROADCAST:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPNETBROADCAST
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSADMIN:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSADMIN
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSMODULE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSMODULE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSNICE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSNICE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPACCT:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPACCT
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPTRACE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSPTRACE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRAWIO:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRAWIO
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRESOURCE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSRESOURCE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSBOOT:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSBOOT
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTIME:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTIME
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSTTYCONFIG
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSLOG:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPSYSLOG
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITCONTROL:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITCONTROL
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITREAD:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPAUDITREAD
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCLOCK:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCLOCK
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCOWNER:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPIPCOWNER
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLINUXIMMUTABLE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACADMIN:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACADMIN
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACOVERRIDE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPMACOVERRIDE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPBLOCKSUSPEND
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLEASE:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPLEASE
		return nil
	case StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPWAKEALARM:
		*s = StackSpecTestContainerConfigRuntimeCapabilitiesItemCAPWAKEALARM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackSpecTestContainerConfigRuntimeCommand struct {
	Path OptString `json:"path"`
	Args OptString `json:"args"`
}

// GetPath returns the value of Path.
func (s *StackSpecTestContainerConfigRuntimeCommand) GetPath() OptString {
	return s.Path
}

// GetArgs returns the value of Args.
func (s *StackSpecTestContainerConfigRuntimeCommand) GetArgs() OptString {
	return s.Args
}

// SetPath sets the value of Path.
func (s *StackSpecTestContainerConfigRuntimeCommand) SetPath(val OptString) {
	s.Path = val
}

// SetArgs sets the value of Args.
func (s *StackSpecTestContainerConfigRuntimeCommand) SetArgs(val OptString) {
	s.Args = val
}

type StackSpecTestContainerConfigRuntimeEnvironmentVars map[string]string

func (s *StackSpecTestContainerConfigRuntimeEnvironmentVars) init() StackSpecTestContainerConfigRuntimeEnvironmentVars {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackSpecTestContainerConfigRuntimeHost struct {
	ExposeProc OptNilBool `json:"expose_proc"`
}

// GetExposeProc returns the value of ExposeProc.
func (s *StackSpecTestContainerConfigRuntimeHost) GetExposeProc() OptNilBool {
	return s.ExposeProc
}

// SetExposeProc sets the value of ExposeProc.
func (s *StackSpecTestContainerConfigRuntimeHost) SetExposeProc(val OptNilBool) {
	s.ExposeProc = val
}

type StackSpecTestContainerConfigRuntimeNamespacesItem string

const (
	StackSpecTestContainerConfigRuntimeNamespacesItemIpc     StackSpecTestContainerConfigRuntimeNamespacesItem = "ipc"
	StackSpecTestContainerConfigRuntimeNamespacesItemPid     StackSpecTestContainerConfigRuntimeNamespacesItem = "pid"
	StackSpecTestContainerConfigRuntimeNamespacesItemUts     StackSpecTestContainerConfigRuntimeNamespacesItem = "uts"
	StackSpecTestContainerConfigRuntimeNamespacesItemNetwork StackSpecTestContainerConfigRuntimeNamespacesItem = "network"
	StackSpecTestContainerConfigRuntimeNamespacesItemMount   StackSpecTestContainerConfigRuntimeNamespacesItem = "mount"
	StackSpecTestContainerConfigRuntimeNamespacesItemUser    StackSpecTestContainerConfigRuntimeNamespacesItem = "user"
	StackSpecTestContainerConfigRuntimeNamespacesItemCgroup  StackSpecTestContainerConfigRuntimeNamespacesItem = "cgroup"
)

// AllValues returns all StackSpecTestContainerConfigRuntimeNamespacesItem values.
func (StackSpecTestContainerConfigRuntimeNamespacesItem) AllValues() []StackSpecTestContainerConfigRuntimeNamespacesItem {
	return []StackSpecTestContainerConfigRuntimeNamespacesItem{
		StackSpecTestContainerConfigRuntimeNamespacesItemIpc,
		StackSpecTestContainerConfigRuntimeNamespacesItemPid,
		StackSpecTestContainerConfigRuntimeNamespacesItemUts,
		StackSpecTestContainerConfigRuntimeNamespacesItemNetwork,
		StackSpecTestContainerConfigRuntimeNamespacesItemMount,
		StackSpecTestContainerConfigRuntimeNamespacesItemUser,
		StackSpecTestContainerConfigRuntimeNamespacesItemCgroup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecTestContainerConfigRuntimeNamespacesItem) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecTestContainerConfigRuntimeNamespacesItemIpc:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemPid:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemUts:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemNetwork:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemMount:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemUser:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemCgroup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecTestContainerConfigRuntimeNamespacesItem) UnmarshalText(data []byte) error {
	switch StackSpecTestContainerConfigRuntimeNamespacesItem(data) {
	case StackSpecTestContainerConfigRuntimeNamespacesItemIpc:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemIpc
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemPid:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemPid
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemUts:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemUts
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemNetwork:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemNetwork
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemMount:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemMount
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemUser:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemUser
		return nil
	case StackSpecTestContainerConfigRuntimeNamespacesItemCgroup:
		*s = StackSpecTestContainerConfigRuntimeNamespacesItemCgroup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackSpecTestContainerConfigRuntimeRlimits map[string]StackSpecTestContainerConfigRuntimeRlimitsItem

func (s *StackSpecTestContainerConfigRuntimeRlimits) init() StackSpecTestContainerConfigRuntimeRlimits {
	m := *s
	if m == nil {
		m = map[string]StackSpecTestContainerConfigRuntimeRlimitsItem{}
		*s = m
	}
	return m
}

type StackSpecTestContainerConfigRuntimeRlimitsItem struct {
	Hard int `json:"hard"`
	Soft int `json:"soft"`
}

// GetHard returns the value of Hard.
func (s *StackSpecTestContainerConfigRuntimeRlimitsItem) GetHard() int {
	return s.Hard
}

// GetSoft returns the value of Soft.
func (s *StackSpecTestContainerConfigRuntimeRlimitsItem) GetSoft() int {
	return s.Soft
}

// SetHard sets the value of Hard.
func (s *StackSpecTestContainerConfigRuntimeRlimitsItem) SetHard(val int) {
	s.Hard = val
}

// SetSoft sets the value of Soft.
func (s *StackSpecTestContainerConfigRuntimeRlimitsItem) SetSoft(val int) {
	s.Soft = val
}

type StackSpecTestContainerConfigRuntimeRootfs struct {
	Readonly bool `json:"readonly"`
}

// GetReadonly returns the value of Readonly.
func (s *StackSpecTestContainerConfigRuntimeRootfs) GetReadonly() bool {
	return s.Readonly
}

// SetReadonly sets the value of Readonly.
func (s *StackSpecTestContainerConfigRuntimeRootfs) SetReadonly(val bool) {
	s.Readonly = val
}

type StackSpecTestContainerConfigRuntimeSeccomp struct {
	Disable bool                                                  `json:"disable"`
	Rules   []StackSpecTestContainerConfigRuntimeSeccompRulesItem `json:"rules"`
}

// GetDisable returns the value of Disable.
func (s *StackSpecTestContainerConfigRuntimeSeccomp) GetDisable() bool {
	return s.Disable
}

// GetRules returns the value of Rules.
func (s *StackSpecTestContainerConfigRuntimeSeccomp) GetRules() []StackSpecTestContainerConfigRuntimeSeccompRulesItem {
	return s.Rules
}

// SetDisable sets the value of Disable.
func (s *StackSpecTestContainerConfigRuntimeSeccomp) SetDisable(val bool) {
	s.Disable = val
}

// SetRules sets the value of Rules.
func (s *StackSpecTestContainerConfigRuntimeSeccomp) SetRules(val []StackSpecTestContainerConfigRuntimeSeccompRulesItem) {
	s.Rules = val
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItem struct {
	Capabilities StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities `json:"capabilities"`
	Syscall      StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall      `json:"syscall"`
}

// GetCapabilities returns the value of Capabilities.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItem) GetCapabilities() StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities {
	return s.Capabilities
}

// GetSyscall returns the value of Syscall.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItem) GetSyscall() StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall {
	return s.Syscall
}

// SetCapabilities sets the value of Capabilities.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItem) SetCapabilities(val StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities) {
	s.Capabilities = val
}

// SetSyscall sets the value of Syscall.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItem) SetSyscall(val StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) {
	s.Syscall = val
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities struct {
	Includes string `json:"includes"`
	Excludes string `json:"excludes"`
}

// GetIncludes returns the value of Includes.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities) GetIncludes() string {
	return s.Includes
}

// GetExcludes returns the value of Excludes.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities) GetExcludes() string {
	return s.Excludes
}

// SetIncludes sets the value of Includes.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities) SetIncludes(val string) {
	s.Includes = val
}

// SetExcludes sets the value of Excludes.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemCapabilities) SetExcludes(val string) {
	s.Excludes = val
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall struct {
	Names    []string                                                             `json:"names"`
	Action   StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction     `json:"action"`
	ErrnoRet OptInt                                                               `json:"errnoRet"`
	Args     []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem `json:"args"`
}

// GetNames returns the value of Names.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) GetNames() []string {
	return s.Names
}

// GetAction returns the value of Action.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) GetAction() StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction {
	return s.Action
}

// GetErrnoRet returns the value of ErrnoRet.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) GetErrnoRet() OptInt {
	return s.ErrnoRet
}

// GetArgs returns the value of Args.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) GetArgs() []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem {
	return s.Args
}

// SetNames sets the value of Names.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) SetNames(val []string) {
	s.Names = val
}

// SetAction sets the value of Action.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) SetAction(val StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction) {
	s.Action = val
}

// SetErrnoRet sets the value of ErrnoRet.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) SetErrnoRet(val OptInt) {
	s.ErrnoRet = val
}

// SetArgs sets the value of Args.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscall) SetArgs(val []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) {
	s.Args = val
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction string

const (
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL        StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL_PROCESS"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD  StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_KILL_THREAD"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP        StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_TRAP"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_ERRNO"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_TRACE"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_ALLOW"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG         StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_LOG"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY      StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction = "SCMP_ACT_NOTIFY"
)

// AllValues returns all StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction values.
func (StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction) AllValues() []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction {
	return []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction{
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction) UnmarshalText(data []byte) error {
	switch StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallAction(data) {
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILL
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLPROCESS
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTKILLTHREAD
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRAP
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTERRNO
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTTRACE
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTALLOW
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTLOG
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallActionSCMPACTNOTIFY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem struct {
	Index    int                                                                  `json:"index"`
	Value    int                                                                  `json:"value"`
	Valuetwo OptInt                                                               `json:"valuetwo"`
	Op       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp `json:"op"`
}

// GetIndex returns the value of Index.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) GetIndex() int {
	return s.Index
}

// GetValue returns the value of Value.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) GetValue() int {
	return s.Value
}

// GetValuetwo returns the value of Valuetwo.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) GetValuetwo() OptInt {
	return s.Valuetwo
}

// GetOp returns the value of Op.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) GetOp() StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp {
	return s.Op
}

// SetIndex sets the value of Index.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) SetIndex(val int) {
	s.Index = val
}

// SetValue sets the value of Value.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) SetValue(val int) {
	s.Value = val
}

// SetValuetwo sets the value of Valuetwo.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) SetValuetwo(val OptInt) {
	s.Valuetwo = val
}

// SetOp sets the value of Op.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItem) SetOp(val StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp) {
	s.Op = val
}

type StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp string

const (
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_NE"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_LT"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_LE"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_EQ"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_GE"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT       StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_GT"
	StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp = "SCMP_CMP_MASKED_EQ"
)

// AllValues returns all StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp values.
func (StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp) AllValues() []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp {
	return []StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp{
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT,
		StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp) MarshalText() ([]byte, error) {
	switch s {
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT:
		return []byte(s), nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp) UnmarshalText(data []byte) error {
	switch StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOp(data) {
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPNE
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLT
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPLE
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPEQ
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGE
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPGT
		return nil
	case StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ:
		*s = StackSpecTestContainerConfigRuntimeSeccompRulesItemSyscallArgsItemOpSCMPCMPMASKEDEQ
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StackSpecTestContainerConfigRuntimeSysctl map[string]string

func (s *StackSpecTestContainerConfigRuntimeSysctl) init() StackSpecTestContainerConfigRuntimeSysctl {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackSpecTestContainerImage struct {
	Name    NilString                                `json:"name"`
	Origin  ImageOrigin                              `json:"origin"`
	Build   OptNilStackSpecTestContainerImageBuild   `json:"build"`
	Builder OptNilStackSpecTestContainerImageBuilder `json:"builder"`
}

// GetName returns the value of Name.
func (s *StackSpecTestContainerImage) GetName() NilString {
	return s.Name
}

// GetOrigin returns the value of Origin.
func (s *StackSpecTestContainerImage) GetOrigin() ImageOrigin {
	return s.Origin
}

// GetBuild returns the value of Build.
func (s *StackSpecTestContainerImage) GetBuild() OptNilStackSpecTestContainerImageBuild {
	return s.Build
}

// GetBuilder returns the value of Builder.
func (s *StackSpecTestContainerImage) GetBuilder() OptNilStackSpecTestContainerImageBuilder {
	return s.Builder
}

// SetName sets the value of Name.
func (s *StackSpecTestContainerImage) SetName(val NilString) {
	s.Name = val
}

// SetOrigin sets the value of Origin.
func (s *StackSpecTestContainerImage) SetOrigin(val ImageOrigin) {
	s.Origin = val
}

// SetBuild sets the value of Build.
func (s *StackSpecTestContainerImage) SetBuild(val OptNilStackSpecTestContainerImageBuild) {
	s.Build = val
}

// SetBuilder sets the value of Builder.
func (s *StackSpecTestContainerImage) SetBuilder(val OptNilStackSpecTestContainerImageBuilder) {
	s.Builder = val
}

type StackSpecTestContainerImageBuild struct {
	Args StackSpecTestContainerImageBuildArgs `json:"args"`
}

// GetArgs returns the value of Args.
func (s *StackSpecTestContainerImageBuild) GetArgs() StackSpecTestContainerImageBuildArgs {
	return s.Args
}

// SetArgs sets the value of Args.
func (s *StackSpecTestContainerImageBuild) SetArgs(val StackSpecTestContainerImageBuildArgs) {
	s.Args = val
}

type StackSpecTestContainerImageBuildArgs map[string]string

func (s *StackSpecTestContainerImageBuildArgs) init() StackSpecTestContainerImageBuildArgs {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type StackSpecTestContainerImageBuilder struct {
	IntegrationID HybridIdentifier `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *StackSpecTestContainerImageBuilder) GetIntegrationID() HybridIdentifier {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *StackSpecTestContainerImageBuilder) SetIntegrationID(val HybridIdentifier) {
	s.IntegrationID = val
}

// Merged schema.
// Ref: #/components/schemas/StackState
type StackState struct {
	// The current state of the stack.
	Current StackStateCurrent `json:"current"`
	Changed DateTime          `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptStackStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *StackState) GetCurrent() StackStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *StackState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *StackState) GetError() OptStackStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *StackState) SetCurrent(val StackStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *StackState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *StackState) SetError(val OptStackStateError) {
	s.Error = val
}

// The current state of the stack.
type StackStateCurrent string

const (
	StackStateCurrentLive     StackStateCurrent = "live"
	StackStateCurrentDeleting StackStateCurrent = "deleting"
	StackStateCurrentDeleted  StackStateCurrent = "deleted"
)

// AllValues returns all StackStateCurrent values.
func (StackStateCurrent) AllValues() []StackStateCurrent {
	return []StackStateCurrent{
		StackStateCurrentLive,
		StackStateCurrentDeleting,
		StackStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StackStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case StackStateCurrentLive:
		return []byte(s), nil
	case StackStateCurrentDeleting:
		return []byte(s), nil
	case StackStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StackStateCurrent) UnmarshalText(data []byte) error {
	switch StackStateCurrent(data) {
	case StackStateCurrentLive:
		*s = StackStateCurrentLive
		return nil
	case StackStateCurrentDeleting:
		*s = StackStateCurrentDeleting
		return nil
	case StackStateCurrentDeleted:
		*s = StackStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type StackStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *StackStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *StackStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *StackStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *StackStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// A map of default variable values used when building this stack. A variable can be added anywhere
// in a stack using the format `{{var}}` where `var` would be a key in this map.
type StackVariables map[string]string

func (s *StackVariables) init() StackVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A summary of resources by state.
// Ref: #/components/schemas/StateCountSummary
type StateCountSummary struct {
	// A count of this resource, grouped by state.
	State StateCountSummaryState `json:"state"`
	// The total number of this resource.
	Total int `json:"total"`
	// The total number of this resource available, less any deleted ones.
	Available int `json:"available"`
}

// GetState returns the value of State.
func (s *StateCountSummary) GetState() StateCountSummaryState {
	return s.State
}

// GetTotal returns the value of Total.
func (s *StateCountSummary) GetTotal() int {
	return s.Total
}

// GetAvailable returns the value of Available.
func (s *StateCountSummary) GetAvailable() int {
	return s.Available
}

// SetState sets the value of State.
func (s *StateCountSummary) SetState(val StateCountSummaryState) {
	s.State = val
}

// SetTotal sets the value of Total.
func (s *StateCountSummary) SetTotal(val int) {
	s.Total = val
}

// SetAvailable sets the value of Available.
func (s *StateCountSummary) SetAvailable(val int) {
	s.Available = val
}

// A count of this resource, grouped by state.
type StateCountSummaryState map[string]int

func (s *StateCountSummaryState) init() StateCountSummaryState {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// Information about the storage resources for a given server.
// Ref: #/components/schemas/StorageSpec
type StorageSpec struct {
	// The number of storage devices for a given server.
	Count int `json:"count"`
	// The total amount of storage on a given server, in GB.
	SizeGB int `json:"size_gb"`
	// The type of the storage device(s).
	Type string `json:"type"`
	// Extra information about the storage resources for a given server.
	Extra StorageSpecExtra `json:"extra"`
}

// GetCount returns the value of Count.
func (s *StorageSpec) GetCount() int {
	return s.Count
}

// GetSizeGB returns the value of SizeGB.
func (s *StorageSpec) GetSizeGB() int {
	return s.SizeGB
}

// GetType returns the value of Type.
func (s *StorageSpec) GetType() string {
	return s.Type
}

// GetExtra returns the value of Extra.
func (s *StorageSpec) GetExtra() StorageSpecExtra {
	return s.Extra
}

// SetCount sets the value of Count.
func (s *StorageSpec) SetCount(val int) {
	s.Count = val
}

// SetSizeGB sets the value of SizeGB.
func (s *StorageSpec) SetSizeGB(val int) {
	s.SizeGB = val
}

// SetType sets the value of Type.
func (s *StorageSpec) SetType(val string) {
	s.Type = val
}

// SetExtra sets the value of Extra.
func (s *StorageSpec) SetExtra(val StorageSpecExtra) {
	s.Extra = val
}

// Extra information about the storage resources for a given server.
type StorageSpecExtra map[string]string

func (s *StorageSpecExtra) init() StorageSpecExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Information about a billing support plan.
// Ref: #/components/schemas/SupportPlan
type SupportPlan struct {
	// The name of the support plan.
	Name  string        `json:"name"`
	Price BillingAmount `json:"price"`
	// Information about the billing support plan that describes the plan.
	Description string              `json:"description"`
	Features    SupportPlanFeatures `json:"features"`
	// A boolean where true represents the plan is a long term contract, not just month to month.
	Contract bool `json:"contract"`
	// This returns true if it shows up.
	Default bool `json:"default"`
}

// GetName returns the value of Name.
func (s *SupportPlan) GetName() string {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *SupportPlan) GetPrice() BillingAmount {
	return s.Price
}

// GetDescription returns the value of Description.
func (s *SupportPlan) GetDescription() string {
	return s.Description
}

// GetFeatures returns the value of Features.
func (s *SupportPlan) GetFeatures() SupportPlanFeatures {
	return s.Features
}

// GetContract returns the value of Contract.
func (s *SupportPlan) GetContract() bool {
	return s.Contract
}

// GetDefault returns the value of Default.
func (s *SupportPlan) GetDefault() bool {
	return s.Default
}

// SetName sets the value of Name.
func (s *SupportPlan) SetName(val string) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *SupportPlan) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetDescription sets the value of Description.
func (s *SupportPlan) SetDescription(val string) {
	s.Description = val
}

// SetFeatures sets the value of Features.
func (s *SupportPlan) SetFeatures(val SupportPlanFeatures) {
	s.Features = val
}

// SetContract sets the value of Contract.
func (s *SupportPlan) SetContract(val bool) {
	s.Contract = val
}

// SetDefault sets the value of Default.
func (s *SupportPlan) SetDefault(val bool) {
	s.Default = val
}

// Information about billing support plan features.
// Ref: #/components/schemas/SupportPlanFeatures
type SupportPlanFeatures struct {
	// A boolean where true indicates the contract includes support for engineering.
	EngineeringSupport bool `json:"engineering_support"`
	// A boolean where true represents the contract has an uptime SLA agreement.
	UptimeSLA bool `json:"uptime_sla"`
	// The time in which this support contract guarantees response time.
	GuaranteedResponseTime NilString `json:"guaranteed_response_time"`
}

// GetEngineeringSupport returns the value of EngineeringSupport.
func (s *SupportPlanFeatures) GetEngineeringSupport() bool {
	return s.EngineeringSupport
}

// GetUptimeSLA returns the value of UptimeSLA.
func (s *SupportPlanFeatures) GetUptimeSLA() bool {
	return s.UptimeSLA
}

// GetGuaranteedResponseTime returns the value of GuaranteedResponseTime.
func (s *SupportPlanFeatures) GetGuaranteedResponseTime() NilString {
	return s.GuaranteedResponseTime
}

// SetEngineeringSupport sets the value of EngineeringSupport.
func (s *SupportPlanFeatures) SetEngineeringSupport(val bool) {
	s.EngineeringSupport = val
}

// SetUptimeSLA sets the value of UptimeSLA.
func (s *SupportPlanFeatures) SetUptimeSLA(val bool) {
	s.UptimeSLA = val
}

// SetGuaranteedResponseTime sets the value of GuaranteedResponseTime.
func (s *SupportPlanFeatures) SetGuaranteedResponseTime(val NilString) {
	s.GuaranteedResponseTime = val
}

// Ref: #/components/schemas/TaskState
type TaskState struct {
	Changed OptDateTime `json:"changed"`
	// The current state of the task.
	Current OptTaskStateCurrent `json:"current"`
}

// GetChanged returns the value of Changed.
func (s *TaskState) GetChanged() OptDateTime {
	return s.Changed
}

// GetCurrent returns the value of Current.
func (s *TaskState) GetCurrent() OptTaskStateCurrent {
	return s.Current
}

// SetChanged sets the value of Changed.
func (s *TaskState) SetChanged(val OptDateTime) {
	s.Changed = val
}

// SetCurrent sets the value of Current.
func (s *TaskState) SetCurrent(val OptTaskStateCurrent) {
	s.Current = val
}

// The current state of the task.
type TaskStateCurrent string

const (
	TaskStateCurrentPending   TaskStateCurrent = "pending"
	TaskStateCurrentError     TaskStateCurrent = "error"
	TaskStateCurrentRunning   TaskStateCurrent = "running"
	TaskStateCurrentCompleted TaskStateCurrent = "completed"
)

// AllValues returns all TaskStateCurrent values.
func (TaskStateCurrent) AllValues() []TaskStateCurrent {
	return []TaskStateCurrent{
		TaskStateCurrentPending,
		TaskStateCurrentError,
		TaskStateCurrentRunning,
		TaskStateCurrentCompleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TaskStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case TaskStateCurrentPending:
		return []byte(s), nil
	case TaskStateCurrentError:
		return []byte(s), nil
	case TaskStateCurrentRunning:
		return []byte(s), nil
	case TaskStateCurrentCompleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskStateCurrent) UnmarshalText(data []byte) error {
	switch TaskStateCurrent(data) {
	case TaskStateCurrentPending:
		*s = TaskStateCurrentPending
		return nil
	case TaskStateCurrentError:
		*s = TaskStateCurrentError
		return nil
	case TaskStateCurrentRunning:
		*s = TaskStateCurrentRunning
		return nil
	case TaskStateCurrentCompleted:
		*s = TaskStateCurrentCompleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A step for a given job task.
// Ref: #/components/schemas/TaskStep
type TaskStep struct {
	// A short description of the step.
	Caption string `json:"caption"`
	// A more verbose description.
	Description string   `json:"description"`
	Started     DateTime `json:"started"`
	Completed   DateTime `json:"completed"`
}

// GetCaption returns the value of Caption.
func (s *TaskStep) GetCaption() string {
	return s.Caption
}

// GetDescription returns the value of Description.
func (s *TaskStep) GetDescription() string {
	return s.Description
}

// GetStarted returns the value of Started.
func (s *TaskStep) GetStarted() DateTime {
	return s.Started
}

// GetCompleted returns the value of Completed.
func (s *TaskStep) GetCompleted() DateTime {
	return s.Completed
}

// SetCaption sets the value of Caption.
func (s *TaskStep) SetCaption(val string) {
	s.Caption = val
}

// SetDescription sets the value of Description.
func (s *TaskStep) SetDescription(val string) {
	s.Description = val
}

// SetStarted sets the value of Started.
func (s *TaskStep) SetStarted(val DateTime) {
	s.Started = val
}

// SetCompleted sets the value of Completed.
func (s *TaskStep) SetCompleted(val DateTime) {
	s.Completed = val
}

// Additional configuration options for TCP mode routers.
// Ref: #/components/schemas/TcpRouterConfig
type TcpRouterConfig struct {
	Details TcpRouterConfigDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *TcpRouterConfig) GetDetails() TcpRouterConfigDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *TcpRouterConfig) SetDetails(val TcpRouterConfigDetails) {
	s.Details = val
}

type TcpRouterConfigDetails map[string]jx.Raw

func (s *TcpRouterConfigDetails) init() TcpRouterConfigDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type TcpRouterConfigType string

const (
	TcpRouterConfigTypeTCP TcpRouterConfigType = "tcp"
)

// AllValues returns all TcpRouterConfigType values.
func (TcpRouterConfigType) AllValues() []TcpRouterConfigType {
	return []TcpRouterConfigType{
		TcpRouterConfigTypeTCP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TcpRouterConfigType) MarshalText() ([]byte, error) {
	switch s {
	case TcpRouterConfigTypeTCP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TcpRouterConfigType) UnmarshalText(data []byte) error {
	switch TcpRouterConfigType(data) {
	case TcpRouterConfigTypeTCP:
		*s = TcpRouterConfigTypeTCP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional configuration options for the TCP transport mode.
// Ref: #/components/schemas/TcpTransportConfig
type TcpTransportConfig struct {
	Details TcpTransportConfigDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *TcpTransportConfig) GetDetails() TcpTransportConfigDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *TcpTransportConfig) SetDetails(val TcpTransportConfigDetails) {
	s.Details = val
}

type TcpTransportConfigDetails struct {
	Connections TcpTransportConfigDetailsConnections `json:"connections"`
}

// GetConnections returns the value of Connections.
func (s *TcpTransportConfigDetails) GetConnections() TcpTransportConfigDetailsConnections {
	return s.Connections
}

// SetConnections sets the value of Connections.
func (s *TcpTransportConfigDetails) SetConnections(val TcpTransportConfigDetailsConnections) {
	s.Connections = val
}

type TcpTransportConfigDetailsConnections map[string]jx.Raw

func (s *TcpTransportConfigDetailsConnections) init() TcpTransportConfigDetailsConnections {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type TcpTransportConfigType string

const (
	TcpTransportConfigTypeTCP TcpTransportConfigType = "tcp"
)

// AllValues returns all TcpTransportConfigType values.
func (TcpTransportConfigType) AllValues() []TcpTransportConfigType {
	return []TcpTransportConfigType{
		TcpTransportConfigTypeTCP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TcpTransportConfigType) MarshalText() ([]byte, error) {
	switch s {
	case TcpTransportConfigTypeTCP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TcpTransportConfigType) UnmarshalText(data []byte) error {
	switch TcpTransportConfigType(data) {
	case TcpTransportConfigTypeTCP:
		*s = TcpTransportConfigTypeTCP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A summary of report requests and when they occured.
// Ref: #/components/schemas/TelemetryReportRequest
type TelemetryReportRequest struct {
	// The ID of the instance this telemetry reporting pertains to.
	InstanceID string   `json:"instance_id"`
	Start      DateTime `json:"start"`
	End        DateTime `json:"end"`
}

// GetInstanceID returns the value of InstanceID.
func (s *TelemetryReportRequest) GetInstanceID() string {
	return s.InstanceID
}

// GetStart returns the value of Start.
func (s *TelemetryReportRequest) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TelemetryReportRequest) GetEnd() DateTime {
	return s.End
}

// SetInstanceID sets the value of InstanceID.
func (s *TelemetryReportRequest) SetInstanceID(val string) {
	s.InstanceID = val
}

// SetStart sets the value of Start.
func (s *TelemetryReportRequest) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TelemetryReportRequest) SetEnd(val DateTime) {
	s.End = val
}

// Information about a billing term.
// Ref: #/components/schemas/Term
type Term struct {
	Start DateTime `json:"start"`
	End   DateTime `json:"end"`
	// The term renewal period.
	Renew NilTermRenew `json:"renew"`
}

// GetStart returns the value of Start.
func (s *Term) GetStart() DateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *Term) GetEnd() DateTime {
	return s.End
}

// GetRenew returns the value of Renew.
func (s *Term) GetRenew() NilTermRenew {
	return s.Renew
}

// SetStart sets the value of Start.
func (s *Term) SetStart(val DateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *Term) SetEnd(val DateTime) {
	s.End = val
}

// SetRenew sets the value of Renew.
func (s *Term) SetRenew(val NilTermRenew) {
	s.Renew = val
}

// The term renewal period.
type TermRenew string

const (
	TermRenewOnce    TermRenew = "once"
	TermRenewMonthly TermRenew = "monthly"
	TermRenewYearly  TermRenew = "yearly"
)

// AllValues returns all TermRenew values.
func (TermRenew) AllValues() []TermRenew {
	return []TermRenew{
		TermRenewOnce,
		TermRenewMonthly,
		TermRenewYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TermRenew) MarshalText() ([]byte, error) {
	switch s {
	case TermRenewOnce:
		return []byte(s), nil
	case TermRenewMonthly:
		return []byte(s), nil
	case TermRenewYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TermRenew) UnmarshalText(data []byte) error {
	switch TermRenew(data) {
	case TermRenewOnce:
		*s = TermRenewOnce
		return nil
	case TermRenewMonthly:
		*s = TermRenewMonthly
		return nil
	case TermRenewYearly:
		*s = TermRenewYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A TierPlan object describes the attributes of a subscription tier.
// Ref: #/components/schemas/TierPlan
type TierPlan struct {
	ID                  string                   `json:"id"`
	Name                string                   `json:"name"`
	Code                string                   `json:"code"`
	Generation          int                      `json:"generation"`
	Usable              bool                     `json:"usable"`
	Price               BillingAmount            `json:"price"`
	Servers             BillingServers           `json:"servers"`
	Members             BillingMembers           `json:"members"`
	MaxNodes            NilInt                   `json:"max_nodes"`
	MaxMembers          NilInt                   `json:"max_members"`
	AdvancedFeatures    TierPlanAdvancedFeatures `json:"advanced_features"`
	MaxDailyAPIRequests NilInt                   `json:"max_daily_api_requests"`
	RAM                 BillingRam               `json:"ram"`
	ImageStorage        BillingImageStorage      `json:"image_storage"`
	Builds              BillingBuilds            `json:"builds"`
	Hidden              bool                     `json:"hidden"`
	Description         string                   `json:"description"`
}

// GetID returns the value of ID.
func (s *TierPlan) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *TierPlan) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *TierPlan) GetCode() string {
	return s.Code
}

// GetGeneration returns the value of Generation.
func (s *TierPlan) GetGeneration() int {
	return s.Generation
}

// GetUsable returns the value of Usable.
func (s *TierPlan) GetUsable() bool {
	return s.Usable
}

// GetPrice returns the value of Price.
func (s *TierPlan) GetPrice() BillingAmount {
	return s.Price
}

// GetServers returns the value of Servers.
func (s *TierPlan) GetServers() BillingServers {
	return s.Servers
}

// GetMembers returns the value of Members.
func (s *TierPlan) GetMembers() BillingMembers {
	return s.Members
}

// GetMaxNodes returns the value of MaxNodes.
func (s *TierPlan) GetMaxNodes() NilInt {
	return s.MaxNodes
}

// GetMaxMembers returns the value of MaxMembers.
func (s *TierPlan) GetMaxMembers() NilInt {
	return s.MaxMembers
}

// GetAdvancedFeatures returns the value of AdvancedFeatures.
func (s *TierPlan) GetAdvancedFeatures() TierPlanAdvancedFeatures {
	return s.AdvancedFeatures
}

// GetMaxDailyAPIRequests returns the value of MaxDailyAPIRequests.
func (s *TierPlan) GetMaxDailyAPIRequests() NilInt {
	return s.MaxDailyAPIRequests
}

// GetRAM returns the value of RAM.
func (s *TierPlan) GetRAM() BillingRam {
	return s.RAM
}

// GetImageStorage returns the value of ImageStorage.
func (s *TierPlan) GetImageStorage() BillingImageStorage {
	return s.ImageStorage
}

// GetBuilds returns the value of Builds.
func (s *TierPlan) GetBuilds() BillingBuilds {
	return s.Builds
}

// GetHidden returns the value of Hidden.
func (s *TierPlan) GetHidden() bool {
	return s.Hidden
}

// GetDescription returns the value of Description.
func (s *TierPlan) GetDescription() string {
	return s.Description
}

// SetID sets the value of ID.
func (s *TierPlan) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TierPlan) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *TierPlan) SetCode(val string) {
	s.Code = val
}

// SetGeneration sets the value of Generation.
func (s *TierPlan) SetGeneration(val int) {
	s.Generation = val
}

// SetUsable sets the value of Usable.
func (s *TierPlan) SetUsable(val bool) {
	s.Usable = val
}

// SetPrice sets the value of Price.
func (s *TierPlan) SetPrice(val BillingAmount) {
	s.Price = val
}

// SetServers sets the value of Servers.
func (s *TierPlan) SetServers(val BillingServers) {
	s.Servers = val
}

// SetMembers sets the value of Members.
func (s *TierPlan) SetMembers(val BillingMembers) {
	s.Members = val
}

// SetMaxNodes sets the value of MaxNodes.
func (s *TierPlan) SetMaxNodes(val NilInt) {
	s.MaxNodes = val
}

// SetMaxMembers sets the value of MaxMembers.
func (s *TierPlan) SetMaxMembers(val NilInt) {
	s.MaxMembers = val
}

// SetAdvancedFeatures sets the value of AdvancedFeatures.
func (s *TierPlan) SetAdvancedFeatures(val TierPlanAdvancedFeatures) {
	s.AdvancedFeatures = val
}

// SetMaxDailyAPIRequests sets the value of MaxDailyAPIRequests.
func (s *TierPlan) SetMaxDailyAPIRequests(val NilInt) {
	s.MaxDailyAPIRequests = val
}

// SetRAM sets the value of RAM.
func (s *TierPlan) SetRAM(val BillingRam) {
	s.RAM = val
}

// SetImageStorage sets the value of ImageStorage.
func (s *TierPlan) SetImageStorage(val BillingImageStorage) {
	s.ImageStorage = val
}

// SetBuilds sets the value of Builds.
func (s *TierPlan) SetBuilds(val BillingBuilds) {
	s.Builds = val
}

// SetHidden sets the value of Hidden.
func (s *TierPlan) SetHidden(val bool) {
	s.Hidden = val
}

// SetDescription sets the value of Description.
func (s *TierPlan) SetDescription(val string) {
	s.Description = val
}

type TierPlanAdvancedFeatures struct {
	Gpu         bool `json:"gpu"`
	Ial         bool `json:"ial"`
	Deployments bool `json:"deployments"`
	Autoscale   bool `json:"autoscale"`
}

// GetGpu returns the value of Gpu.
func (s *TierPlanAdvancedFeatures) GetGpu() bool {
	return s.Gpu
}

// GetIal returns the value of Ial.
func (s *TierPlanAdvancedFeatures) GetIal() bool {
	return s.Ial
}

// GetDeployments returns the value of Deployments.
func (s *TierPlanAdvancedFeatures) GetDeployments() bool {
	return s.Deployments
}

// GetAutoscale returns the value of Autoscale.
func (s *TierPlanAdvancedFeatures) GetAutoscale() bool {
	return s.Autoscale
}

// SetGpu sets the value of Gpu.
func (s *TierPlanAdvancedFeatures) SetGpu(val bool) {
	s.Gpu = val
}

// SetIal sets the value of Ial.
func (s *TierPlanAdvancedFeatures) SetIal(val bool) {
	s.Ial = val
}

// SetDeployments sets the value of Deployments.
func (s *TierPlanAdvancedFeatures) SetDeployments(val bool) {
	s.Deployments = val
}

// SetAutoscale sets the value of Autoscale.
func (s *TierPlanAdvancedFeatures) SetAutoscale(val bool) {
	s.Autoscale = val
}

// A pipeline trigger key resource.
// Ref: #/components/schemas/TriggerKey
type TriggerKey struct {
	ID ID `json:"id"`
	// The name of the trigger key.
	Name string `json:"name"`
	// The secret used when calling the trigger key programmatically.
	Secret  string       `json:"secret"`
	Creator CreatorScope `json:"creator"`
	HubID   HubID        `json:"hub_id"`
	// The ID for the pipeline related to this trigger key.
	PipelineID string          `json:"pipeline_id"`
	State      TriggerKeyState `json:"state"`
	// A collection of timestamps for each event in the trigger key's lifetime.
	Events TriggerKeyEvents `json:"events"`
	// An array of ips this trigger key is usable from.
	Ips []string `json:"ips"`
}

// GetID returns the value of ID.
func (s *TriggerKey) GetID() ID {
	return s.ID
}

// GetName returns the value of Name.
func (s *TriggerKey) GetName() string {
	return s.Name
}

// GetSecret returns the value of Secret.
func (s *TriggerKey) GetSecret() string {
	return s.Secret
}

// GetCreator returns the value of Creator.
func (s *TriggerKey) GetCreator() CreatorScope {
	return s.Creator
}

// GetHubID returns the value of HubID.
func (s *TriggerKey) GetHubID() HubID {
	return s.HubID
}

// GetPipelineID returns the value of PipelineID.
func (s *TriggerKey) GetPipelineID() string {
	return s.PipelineID
}

// GetState returns the value of State.
func (s *TriggerKey) GetState() TriggerKeyState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *TriggerKey) GetEvents() TriggerKeyEvents {
	return s.Events
}

// GetIps returns the value of Ips.
func (s *TriggerKey) GetIps() []string {
	return s.Ips
}

// SetID sets the value of ID.
func (s *TriggerKey) SetID(val ID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TriggerKey) SetName(val string) {
	s.Name = val
}

// SetSecret sets the value of Secret.
func (s *TriggerKey) SetSecret(val string) {
	s.Secret = val
}

// SetCreator sets the value of Creator.
func (s *TriggerKey) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetHubID sets the value of HubID.
func (s *TriggerKey) SetHubID(val HubID) {
	s.HubID = val
}

// SetPipelineID sets the value of PipelineID.
func (s *TriggerKey) SetPipelineID(val string) {
	s.PipelineID = val
}

// SetState sets the value of State.
func (s *TriggerKey) SetState(val TriggerKeyState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *TriggerKey) SetEvents(val TriggerKeyEvents) {
	s.Events = val
}

// SetIps sets the value of Ips.
func (s *TriggerKey) SetIps(val []string) {
	s.Ips = val
}

// A collection of timestamps for each event in the trigger key's lifetime.
type TriggerKeyEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *TriggerKeyEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *TriggerKeyEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *TriggerKeyEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *TriggerKeyEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *TriggerKeyEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *TriggerKeyEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// Merged schema.
// Ref: #/components/schemas/TriggerKeyState
type TriggerKeyState struct {
	// The current state of the trigger key.
	Current TriggerKeyStateCurrent `json:"current"`
	Changed DateTime               `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptTriggerKeyStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *TriggerKeyState) GetCurrent() TriggerKeyStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *TriggerKeyState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *TriggerKeyState) GetError() OptTriggerKeyStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *TriggerKeyState) SetCurrent(val TriggerKeyStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *TriggerKeyState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *TriggerKeyState) SetError(val OptTriggerKeyStateError) {
	s.Error = val
}

// The current state of the trigger key.
type TriggerKeyStateCurrent string

const (
	TriggerKeyStateCurrentLive     TriggerKeyStateCurrent = "live"
	TriggerKeyStateCurrentDeleting TriggerKeyStateCurrent = "deleting"
	TriggerKeyStateCurrentDeleted  TriggerKeyStateCurrent = "deleted"
)

// AllValues returns all TriggerKeyStateCurrent values.
func (TriggerKeyStateCurrent) AllValues() []TriggerKeyStateCurrent {
	return []TriggerKeyStateCurrent{
		TriggerKeyStateCurrentLive,
		TriggerKeyStateCurrentDeleting,
		TriggerKeyStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TriggerKeyStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case TriggerKeyStateCurrentLive:
		return []byte(s), nil
	case TriggerKeyStateCurrentDeleting:
		return []byte(s), nil
	case TriggerKeyStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TriggerKeyStateCurrent) UnmarshalText(data []byte) error {
	switch TriggerKeyStateCurrent(data) {
	case TriggerKeyStateCurrentLive:
		*s = TriggerKeyStateCurrentLive
		return nil
	case TriggerKeyStateCurrentDeleting:
		*s = TriggerKeyStateCurrentDeleting
		return nil
	case TriggerKeyStateCurrentDeleted:
		*s = TriggerKeyStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type TriggerKeyStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *TriggerKeyStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *TriggerKeyStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *TriggerKeyStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *TriggerKeyStateError) SetTime(val OptDateTime) {
	s.Time = val
}

// Ref: #/components/schemas/TwoFactorAuthRecovery
type TwoFactorAuthRecovery struct {
	RecoveryCodes []string `json:"recovery_codes"`
	TotpPasscode  string   `json:"totp_passcode"`
}

// GetRecoveryCodes returns the value of RecoveryCodes.
func (s *TwoFactorAuthRecovery) GetRecoveryCodes() []string {
	return s.RecoveryCodes
}

// GetTotpPasscode returns the value of TotpPasscode.
func (s *TwoFactorAuthRecovery) GetTotpPasscode() string {
	return s.TotpPasscode
}

// SetRecoveryCodes sets the value of RecoveryCodes.
func (s *TwoFactorAuthRecovery) SetRecoveryCodes(val []string) {
	s.RecoveryCodes = val
}

// SetTotpPasscode sets the value of TotpPasscode.
func (s *TwoFactorAuthRecovery) SetTotpPasscode(val string) {
	s.TotpPasscode = val
}

// Ref: #/components/schemas/TwoFactorAuthSetup
type TwoFactorAuthSetup struct {
	Qr     string `json:"qr"`
	Secret string `json:"secret"`
}

// GetQr returns the value of Qr.
func (s *TwoFactorAuthSetup) GetQr() string {
	return s.Qr
}

// GetSecret returns the value of Secret.
func (s *TwoFactorAuthSetup) GetSecret() string {
	return s.Secret
}

// SetQr sets the value of Qr.
func (s *TwoFactorAuthSetup) SetQr(val string) {
	s.Qr = val
}

// SetSecret sets the value of Secret.
func (s *TwoFactorAuthSetup) SetSecret(val string) {
	s.Secret = val
}

// The `URL` type of scoped variable `value`, referred to as a source. This means the value of this
// variable is the result of calling the given URL. It is dynamic, in that Cycle will refetch the
// contents on every start.
// Ref: #/components/schemas/URLSource
type URLSource struct {
	Details URLSourceDetails `json:"details"`
}

// GetDetails returns the value of Details.
func (s *URLSource) GetDetails() URLSourceDetails {
	return s.Details
}

// SetDetails sets the value of Details.
func (s *URLSource) SetDetails(val URLSourceDetails) {
	s.Details = val
}

type URLSourceDetails struct {
	// The URL to call to produce the value.
	URL string `json:"url"`
	// Additional headers that can be attached to the URL request. Useful for adding metadata to
	// third-party services.
	Headers URLSourceDetailsHeaders `json:"headers"`
	// A URL that can be provided to authenticate with a third party secret service. Cycle will make a
	// request to this URL before fetching the secret URL, and use the response as the value of an
	// Authorization header when requesting the secret.
	AuthTokenURL NilString `json:"auth_token_url"`
}

// GetURL returns the value of URL.
func (s *URLSourceDetails) GetURL() string {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *URLSourceDetails) GetHeaders() URLSourceDetailsHeaders {
	return s.Headers
}

// GetAuthTokenURL returns the value of AuthTokenURL.
func (s *URLSourceDetails) GetAuthTokenURL() NilString {
	return s.AuthTokenURL
}

// SetURL sets the value of URL.
func (s *URLSourceDetails) SetURL(val string) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *URLSourceDetails) SetHeaders(val URLSourceDetailsHeaders) {
	s.Headers = val
}

// SetAuthTokenURL sets the value of AuthTokenURL.
func (s *URLSourceDetails) SetAuthTokenURL(val NilString) {
	s.AuthTokenURL = val
}

// Additional headers that can be attached to the URL request. Useful for adding metadata to
// third-party services.
type URLSourceDetailsHeaders map[string]jx.Raw

func (s *URLSourceDetailsHeaders) init() URLSourceDetailsHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// The type of source value, can be either `raw` or `url`.
type URLSourceType string

const (
	URLSourceTypeURL URLSourceType = "url"
)

// AllValues returns all URLSourceType values.
func (URLSourceType) AllValues() []URLSourceType {
	return []URLSourceType{
		URLSourceTypeURL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s URLSourceType) MarshalText() ([]byte, error) {
	switch s {
	case URLSourceTypeURL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *URLSourceType) UnmarshalText(data []byte) error {
	switch URLSourceType(data) {
	case URLSourceTypeURL:
		*s = URLSourceTypeURL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateAPIKeyOK struct {
	Data ApiKey `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateAPIKeyOK) GetData() ApiKey {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateAPIKeyOK) SetData(val ApiKey) {
	s.Data = val
}

type UpdateAPIKeyReq struct {
	// A name given to the API Key.
	Name         OptString      `json:"name"`
	Permissions  OptPermissions `json:"permissions"`
	Capabilities jx.Raw         `json:"capabilities"`
	// An array of approved IPs from which this API Key can be used.
	Ips OptNilStringArray `json:"ips"`
}

// GetName returns the value of Name.
func (s *UpdateAPIKeyReq) GetName() OptString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *UpdateAPIKeyReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// GetCapabilities returns the value of Capabilities.
func (s *UpdateAPIKeyReq) GetCapabilities() jx.Raw {
	return s.Capabilities
}

// GetIps returns the value of Ips.
func (s *UpdateAPIKeyReq) GetIps() OptNilStringArray {
	return s.Ips
}

// SetName sets the value of Name.
func (s *UpdateAPIKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateAPIKeyReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

// SetCapabilities sets the value of Capabilities.
func (s *UpdateAPIKeyReq) SetCapabilities(val jx.Raw) {
	s.Capabilities = val
}

// SetIps sets the value of Ips.
func (s *UpdateAPIKeyReq) SetIps(val OptNilStringArray) {
	s.Ips = val
}

type UpdateAccountInviteIncludeItem string

const (
	UpdateAccountInviteIncludeItemSenders  UpdateAccountInviteIncludeItem = "senders"
	UpdateAccountInviteIncludeItemHubs     UpdateAccountInviteIncludeItem = "hubs"
	UpdateAccountInviteIncludeItemAccounts UpdateAccountInviteIncludeItem = "accounts"
	UpdateAccountInviteIncludeItemRoles    UpdateAccountInviteIncludeItem = "roles"
)

// AllValues returns all UpdateAccountInviteIncludeItem values.
func (UpdateAccountInviteIncludeItem) AllValues() []UpdateAccountInviteIncludeItem {
	return []UpdateAccountInviteIncludeItem{
		UpdateAccountInviteIncludeItemSenders,
		UpdateAccountInviteIncludeItemHubs,
		UpdateAccountInviteIncludeItemAccounts,
		UpdateAccountInviteIncludeItemRoles,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateAccountInviteIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateAccountInviteIncludeItemSenders:
		return []byte(s), nil
	case UpdateAccountInviteIncludeItemHubs:
		return []byte(s), nil
	case UpdateAccountInviteIncludeItemAccounts:
		return []byte(s), nil
	case UpdateAccountInviteIncludeItemRoles:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateAccountInviteIncludeItem) UnmarshalText(data []byte) error {
	switch UpdateAccountInviteIncludeItem(data) {
	case UpdateAccountInviteIncludeItemSenders:
		*s = UpdateAccountInviteIncludeItemSenders
		return nil
	case UpdateAccountInviteIncludeItemHubs:
		*s = UpdateAccountInviteIncludeItemHubs
		return nil
	case UpdateAccountInviteIncludeItemAccounts:
		*s = UpdateAccountInviteIncludeItemAccounts
		return nil
	case UpdateAccountInviteIncludeItemRoles:
		*s = UpdateAccountInviteIncludeItemRoles
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateAccountInviteOK struct {
	Data     HubMembership            `json:"data"`
	Includes OptHubMembershipIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *UpdateAccountInviteOK) GetData() HubMembership {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *UpdateAccountInviteOK) GetIncludes() OptHubMembershipIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *UpdateAccountInviteOK) SetData(val HubMembership) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *UpdateAccountInviteOK) SetIncludes(val OptHubMembershipIncludes) {
	s.Includes = val
}

type UpdateAccountInviteReq struct {
	// If true, the Invite will be accepted and the associated Account will join the Hub.
	Accept OptBool `json:"accept"`
	// If true, the Invite will be declined and the associated Account will NOT join the Hub.
	Decline OptBool `json:"decline"`
}

// GetAccept returns the value of Accept.
func (s *UpdateAccountInviteReq) GetAccept() OptBool {
	return s.Accept
}

// GetDecline returns the value of Decline.
func (s *UpdateAccountInviteReq) GetDecline() OptBool {
	return s.Decline
}

// SetAccept sets the value of Accept.
func (s *UpdateAccountInviteReq) SetAccept(val OptBool) {
	s.Accept = val
}

// SetDecline sets the value of Decline.
func (s *UpdateAccountInviteReq) SetDecline(val OptBool) {
	s.Decline = val
}

type UpdateAccountOK struct {
	Data Account `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateAccountOK) GetData() Account {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateAccountOK) SetData(val Account) {
	s.Data = val
}

type UpdateAccountReq struct {
	// The new name on the Account.
	Name OptUpdateAccountReqName `json:"name"`
	// If true, Cycle employees will have the ability, upon consent, to access the account for support
	// purposes. This access will be logged.
	AllowSupportLogin OptBool `json:"allow_support_login"`
}

// GetName returns the value of Name.
func (s *UpdateAccountReq) GetName() OptUpdateAccountReqName {
	return s.Name
}

// GetAllowSupportLogin returns the value of AllowSupportLogin.
func (s *UpdateAccountReq) GetAllowSupportLogin() OptBool {
	return s.AllowSupportLogin
}

// SetName sets the value of Name.
func (s *UpdateAccountReq) SetName(val OptUpdateAccountReqName) {
	s.Name = val
}

// SetAllowSupportLogin sets the value of AllowSupportLogin.
func (s *UpdateAccountReq) SetAllowSupportLogin(val OptBool) {
	s.AllowSupportLogin = val
}

// The new name on the Account.
type UpdateAccountReqName struct {
	First OptString `json:"first"`
	Last  OptString `json:"last"`
}

// GetFirst returns the value of First.
func (s *UpdateAccountReqName) GetFirst() OptString {
	return s.First
}

// GetLast returns the value of Last.
func (s *UpdateAccountReqName) GetLast() OptString {
	return s.Last
}

// SetFirst sets the value of First.
func (s *UpdateAccountReqName) SetFirst(val OptString) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *UpdateAccountReqName) SetLast(val OptString) {
	s.Last = val
}

type UpdateAutoScaleGroupOK struct {
	Data AutoScaleGroup `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateAutoScaleGroupOK) GetData() AutoScaleGroup {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateAutoScaleGroupOK) SetData(val AutoScaleGroup) {
	s.Data = val
}

type UpdateAutoScaleGroupReq struct {
	Name           string                       `json:"name"`
	Identifier     string                       `json:"identifier"`
	Cluster        string                       `json:"cluster"`
	Scale          AutoScaleGroupScale          `json:"scale"`
	Infrastructure AutoScaleGroupInfrastructure `json:"infrastructure"`
}

// GetName returns the value of Name.
func (s *UpdateAutoScaleGroupReq) GetName() string {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateAutoScaleGroupReq) GetIdentifier() string {
	return s.Identifier
}

// GetCluster returns the value of Cluster.
func (s *UpdateAutoScaleGroupReq) GetCluster() string {
	return s.Cluster
}

// GetScale returns the value of Scale.
func (s *UpdateAutoScaleGroupReq) GetScale() AutoScaleGroupScale {
	return s.Scale
}

// GetInfrastructure returns the value of Infrastructure.
func (s *UpdateAutoScaleGroupReq) GetInfrastructure() AutoScaleGroupInfrastructure {
	return s.Infrastructure
}

// SetName sets the value of Name.
func (s *UpdateAutoScaleGroupReq) SetName(val string) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateAutoScaleGroupReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCluster sets the value of Cluster.
func (s *UpdateAutoScaleGroupReq) SetCluster(val string) {
	s.Cluster = val
}

// SetScale sets the value of Scale.
func (s *UpdateAutoScaleGroupReq) SetScale(val AutoScaleGroupScale) {
	s.Scale = val
}

// SetInfrastructure sets the value of Infrastructure.
func (s *UpdateAutoScaleGroupReq) SetInfrastructure(val AutoScaleGroupInfrastructure) {
	s.Infrastructure = val
}

type UpdateBillingMethodOK struct {
	Data Method `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateBillingMethodOK) GetData() Method {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateBillingMethodOK) SetData(val Method) {
	s.Data = val
}

type UpdateBillingMethodReq struct {
	// A name for the billing method.
	Name OptString `json:"name"`
	// A boolean where true represents a billing method being primary.
	Primary    OptBool       `json:"primary"`
	Address    OptAddress    `json:"address"`
	CreditCard OptCreditCard `json:"credit_card"`
}

// GetName returns the value of Name.
func (s *UpdateBillingMethodReq) GetName() OptString {
	return s.Name
}

// GetPrimary returns the value of Primary.
func (s *UpdateBillingMethodReq) GetPrimary() OptBool {
	return s.Primary
}

// GetAddress returns the value of Address.
func (s *UpdateBillingMethodReq) GetAddress() OptAddress {
	return s.Address
}

// GetCreditCard returns the value of CreditCard.
func (s *UpdateBillingMethodReq) GetCreditCard() OptCreditCard {
	return s.CreditCard
}

// SetName sets the value of Name.
func (s *UpdateBillingMethodReq) SetName(val OptString) {
	s.Name = val
}

// SetPrimary sets the value of Primary.
func (s *UpdateBillingMethodReq) SetPrimary(val OptBool) {
	s.Primary = val
}

// SetAddress sets the value of Address.
func (s *UpdateBillingMethodReq) SetAddress(val OptAddress) {
	s.Address = val
}

// SetCreditCard sets the value of CreditCard.
func (s *UpdateBillingMethodReq) SetCreditCard(val OptCreditCard) {
	s.CreditCard = val
}

type UpdateBillingOrderIncludeItem string

const (
	UpdateBillingOrderIncludeItemPromoCodes UpdateBillingOrderIncludeItem = "promo_codes"
)

// AllValues returns all UpdateBillingOrderIncludeItem values.
func (UpdateBillingOrderIncludeItem) AllValues() []UpdateBillingOrderIncludeItem {
	return []UpdateBillingOrderIncludeItem{
		UpdateBillingOrderIncludeItemPromoCodes,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateBillingOrderIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateBillingOrderIncludeItemPromoCodes:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateBillingOrderIncludeItem) UnmarshalText(data []byte) error {
	switch UpdateBillingOrderIncludeItem(data) {
	case UpdateBillingOrderIncludeItemPromoCodes:
		*s = UpdateBillingOrderIncludeItemPromoCodes
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateBillingOrderMetaItem string

const (
	UpdateBillingOrderMetaItemDue UpdateBillingOrderMetaItem = "due"
)

// AllValues returns all UpdateBillingOrderMetaItem values.
func (UpdateBillingOrderMetaItem) AllValues() []UpdateBillingOrderMetaItem {
	return []UpdateBillingOrderMetaItem{
		UpdateBillingOrderMetaItemDue,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateBillingOrderMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateBillingOrderMetaItemDue:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateBillingOrderMetaItem) UnmarshalText(data []byte) error {
	switch UpdateBillingOrderMetaItem(data) {
	case UpdateBillingOrderMetaItemDue:
		*s = UpdateBillingOrderMetaItemDue
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateBillingOrderOK struct {
	Data     Order                   `json:"data"`
	Includes OptBillingOrderIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *UpdateBillingOrderOK) GetData() Order {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *UpdateBillingOrderOK) GetIncludes() OptBillingOrderIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *UpdateBillingOrderOK) SetData(val Order) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *UpdateBillingOrderOK) SetIncludes(val OptBillingOrderIncludes) {
	s.Includes = val
}

type UpdateBillingOrderReq struct {
	// ID associated with the tier plan.
	TierPlanID OptString `json:"tier_plan_id"`
	// ID associated with the support plan.
	SupportPlanID OptString `json:"support_plan_id"`
	// String that defines term length.
	TermLength OptUpdateBillingOrderReqTermLength `json:"term_length"`
	// String that defines a promo code.
	PromoCode OptString `json:"promo_code"`
}

// GetTierPlanID returns the value of TierPlanID.
func (s *UpdateBillingOrderReq) GetTierPlanID() OptString {
	return s.TierPlanID
}

// GetSupportPlanID returns the value of SupportPlanID.
func (s *UpdateBillingOrderReq) GetSupportPlanID() OptString {
	return s.SupportPlanID
}

// GetTermLength returns the value of TermLength.
func (s *UpdateBillingOrderReq) GetTermLength() OptUpdateBillingOrderReqTermLength {
	return s.TermLength
}

// GetPromoCode returns the value of PromoCode.
func (s *UpdateBillingOrderReq) GetPromoCode() OptString {
	return s.PromoCode
}

// SetTierPlanID sets the value of TierPlanID.
func (s *UpdateBillingOrderReq) SetTierPlanID(val OptString) {
	s.TierPlanID = val
}

// SetSupportPlanID sets the value of SupportPlanID.
func (s *UpdateBillingOrderReq) SetSupportPlanID(val OptString) {
	s.SupportPlanID = val
}

// SetTermLength sets the value of TermLength.
func (s *UpdateBillingOrderReq) SetTermLength(val OptUpdateBillingOrderReqTermLength) {
	s.TermLength = val
}

// SetPromoCode sets the value of PromoCode.
func (s *UpdateBillingOrderReq) SetPromoCode(val OptString) {
	s.PromoCode = val
}

// String that defines term length.
type UpdateBillingOrderReqTermLength string

const (
	UpdateBillingOrderReqTermLengthOnce    UpdateBillingOrderReqTermLength = "once"
	UpdateBillingOrderReqTermLengthMonthly UpdateBillingOrderReqTermLength = "monthly"
	UpdateBillingOrderReqTermLengthYearly  UpdateBillingOrderReqTermLength = "yearly"
)

// AllValues returns all UpdateBillingOrderReqTermLength values.
func (UpdateBillingOrderReqTermLength) AllValues() []UpdateBillingOrderReqTermLength {
	return []UpdateBillingOrderReqTermLength{
		UpdateBillingOrderReqTermLengthOnce,
		UpdateBillingOrderReqTermLengthMonthly,
		UpdateBillingOrderReqTermLengthYearly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateBillingOrderReqTermLength) MarshalText() ([]byte, error) {
	switch s {
	case UpdateBillingOrderReqTermLengthOnce:
		return []byte(s), nil
	case UpdateBillingOrderReqTermLengthMonthly:
		return []byte(s), nil
	case UpdateBillingOrderReqTermLengthYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateBillingOrderReqTermLength) UnmarshalText(data []byte) error {
	switch UpdateBillingOrderReqTermLength(data) {
	case UpdateBillingOrderReqTermLengthOnce:
		*s = UpdateBillingOrderReqTermLengthOnce
		return nil
	case UpdateBillingOrderReqTermLengthMonthly:
		*s = UpdateBillingOrderReqTermLengthMonthly
		return nil
	case UpdateBillingOrderReqTermLengthYearly:
		*s = UpdateBillingOrderReqTermLengthYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateContainerOK struct {
	Data Container `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateContainerOK) GetData() Container {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateContainerOK) SetData(val Container) {
	s.Data = val
}

type UpdateContainerReq struct {
	// The name for the Container.
	Name OptString `json:"name"`
	// The name for the identifier.
	Identifier OptString `json:"identifier"`
	// Sets whether Container should be deprecated.
	Deprecate OptBool `json:"deprecate"`
	// When set to true, prevents this Container from being deleted.
	Lock OptBool `json:"lock"`
	// User meta data for the Container.
	Annotation OptUpdateContainerReqAnnotation `json:"annotation"`
}

// GetName returns the value of Name.
func (s *UpdateContainerReq) GetName() OptString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateContainerReq) GetIdentifier() OptString {
	return s.Identifier
}

// GetDeprecate returns the value of Deprecate.
func (s *UpdateContainerReq) GetDeprecate() OptBool {
	return s.Deprecate
}

// GetLock returns the value of Lock.
func (s *UpdateContainerReq) GetLock() OptBool {
	return s.Lock
}

// GetAnnotation returns the value of Annotation.
func (s *UpdateContainerReq) GetAnnotation() OptUpdateContainerReqAnnotation {
	return s.Annotation
}

// SetName sets the value of Name.
func (s *UpdateContainerReq) SetName(val OptString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateContainerReq) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetDeprecate sets the value of Deprecate.
func (s *UpdateContainerReq) SetDeprecate(val OptBool) {
	s.Deprecate = val
}

// SetLock sets the value of Lock.
func (s *UpdateContainerReq) SetLock(val OptBool) {
	s.Lock = val
}

// SetAnnotation sets the value of Annotation.
func (s *UpdateContainerReq) SetAnnotation(val OptUpdateContainerReqAnnotation) {
	s.Annotation = val
}

// User meta data for the Container.
type UpdateContainerReqAnnotation map[string]string

func (s *UpdateContainerReqAnnotation) init() UpdateContainerReqAnnotation {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UpdateDNSZoneIncludeItem string

const (
	UpdateDNSZoneIncludeItemCreators UpdateDNSZoneIncludeItem = "creators"
)

// AllValues returns all UpdateDNSZoneIncludeItem values.
func (UpdateDNSZoneIncludeItem) AllValues() []UpdateDNSZoneIncludeItem {
	return []UpdateDNSZoneIncludeItem{
		UpdateDNSZoneIncludeItemCreators,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateDNSZoneIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateDNSZoneIncludeItemCreators:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateDNSZoneIncludeItem) UnmarshalText(data []byte) error {
	switch UpdateDNSZoneIncludeItem(data) {
	case UpdateDNSZoneIncludeItemCreators:
		*s = UpdateDNSZoneIncludeItemCreators
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateDNSZoneOK struct {
	Data     Zone            `json:"data"`
	Includes OptZoneIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *UpdateDNSZoneOK) GetData() Zone {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *UpdateDNSZoneOK) GetIncludes() OptZoneIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *UpdateDNSZoneOK) SetData(val Zone) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *UpdateDNSZoneOK) SetIncludes(val OptZoneIncludes) {
	s.Includes = val
}

type UpdateDNSZoneRecordOK struct {
	Data Record `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateDNSZoneRecordOK) GetData() Record {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateDNSZoneRecordOK) SetData(val Record) {
	s.Data = val
}

type UpdateDNSZoneRecordReq struct {
	Type RecordTypes `json:"type"`
}

// GetType returns the value of Type.
func (s *UpdateDNSZoneRecordReq) GetType() RecordTypes {
	return s.Type
}

// SetType sets the value of Type.
func (s *UpdateDNSZoneRecordReq) SetType(val RecordTypes) {
	s.Type = val
}

type UpdateDNSZoneReq struct {
	// A boolean where true represents the desire for the origin to be of the type `hosted`.
	Hosted bool `json:"hosted"`
}

// GetHosted returns the value of Hosted.
func (s *UpdateDNSZoneReq) GetHosted() bool {
	return s.Hosted
}

// SetHosted sets the value of Hosted.
func (s *UpdateDNSZoneReq) SetHosted(val bool) {
	s.Hosted = val
}

type UpdateEnvironmentOK struct {
	Data Environment `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateEnvironmentOK) GetData() Environment {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateEnvironmentOK) SetData(val Environment) {
	s.Data = val
}

type UpdateEnvironmentReq struct {
	Name       OptNilString        `json:"name"`
	Identifier OptNilString        `json:"identifier"`
	Version    OptNilString        `json:"version"`
	About      OptEnvironmentAbout `json:"about"`
}

// GetName returns the value of Name.
func (s *UpdateEnvironmentReq) GetName() OptNilString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateEnvironmentReq) GetIdentifier() OptNilString {
	return s.Identifier
}

// GetVersion returns the value of Version.
func (s *UpdateEnvironmentReq) GetVersion() OptNilString {
	return s.Version
}

// GetAbout returns the value of About.
func (s *UpdateEnvironmentReq) GetAbout() OptEnvironmentAbout {
	return s.About
}

// SetName sets the value of Name.
func (s *UpdateEnvironmentReq) SetName(val OptNilString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateEnvironmentReq) SetIdentifier(val OptNilString) {
	s.Identifier = val
}

// SetVersion sets the value of Version.
func (s *UpdateEnvironmentReq) SetVersion(val OptNilString) {
	s.Version = val
}

// SetAbout sets the value of About.
func (s *UpdateEnvironmentReq) SetAbout(val OptEnvironmentAbout) {
	s.About = val
}

type UpdateHubMemberOK struct {
	Data HubMembership `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateHubMemberOK) GetData() HubMembership {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateHubMemberOK) SetData(val HubMembership) {
	s.Data = val
}

type UpdateHubMemberReq struct {
	RoleID      OptID          `json:"role_id"`
	Permissions OptPermissions `json:"permissions"`
}

// GetRoleID returns the value of RoleID.
func (s *UpdateHubMemberReq) GetRoleID() OptID {
	return s.RoleID
}

// GetPermissions returns the value of Permissions.
func (s *UpdateHubMemberReq) GetPermissions() OptPermissions {
	return s.Permissions
}

// SetRoleID sets the value of RoleID.
func (s *UpdateHubMemberReq) SetRoleID(val OptID) {
	s.RoleID = val
}

// SetPermissions sets the value of Permissions.
func (s *UpdateHubMemberReq) SetPermissions(val OptPermissions) {
	s.Permissions = val
}

type UpdateHubOK struct {
	Data Hub `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateHubOK) GetData() Hub {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateHubOK) SetData(val Hub) {
	s.Data = val
}

type UpdateHubReq struct {
	// A name for the hub.
	Name     OptString      `json:"name"`
	Webhooks OptHubWebhooks `json:"webhooks"`
}

// GetName returns the value of Name.
func (s *UpdateHubReq) GetName() OptString {
	return s.Name
}

// GetWebhooks returns the value of Webhooks.
func (s *UpdateHubReq) GetWebhooks() OptHubWebhooks {
	return s.Webhooks
}

// SetName sets the value of Name.
func (s *UpdateHubReq) SetName(val OptString) {
	s.Name = val
}

// SetWebhooks sets the value of Webhooks.
func (s *UpdateHubReq) SetWebhooks(val OptHubWebhooks) {
	s.Webhooks = val
}

type UpdateImageOK struct {
	Data Image `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateImageOK) GetData() Image {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateImageOK) SetData(val Image) {
	s.Data = val
}

type UpdateImageReq struct {
	// A name for the image.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateImageReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateImageReq) SetName(val OptString) {
	s.Name = val
}

type UpdateImageSourceOK struct {
	Data ImageSource `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateImageSourceOK) GetData() ImageSource {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateImageSourceOK) SetData(val ImageSource) {
	s.Data = val
}

type UpdateImageSourceReq struct {
	// A name for the image source.
	Name    OptString                         `json:"name"`
	Origin  OptImageOrigin                    `json:"origin"`
	Builder OptNilUpdateImageSourceReqBuilder `json:"builder"`
	// User defined information about the image source.
	About OptUpdateImageSourceReqAbout `json:"about"`
}

// GetName returns the value of Name.
func (s *UpdateImageSourceReq) GetName() OptString {
	return s.Name
}

// GetOrigin returns the value of Origin.
func (s *UpdateImageSourceReq) GetOrigin() OptImageOrigin {
	return s.Origin
}

// GetBuilder returns the value of Builder.
func (s *UpdateImageSourceReq) GetBuilder() OptNilUpdateImageSourceReqBuilder {
	return s.Builder
}

// GetAbout returns the value of About.
func (s *UpdateImageSourceReq) GetAbout() OptUpdateImageSourceReqAbout {
	return s.About
}

// SetName sets the value of Name.
func (s *UpdateImageSourceReq) SetName(val OptString) {
	s.Name = val
}

// SetOrigin sets the value of Origin.
func (s *UpdateImageSourceReq) SetOrigin(val OptImageOrigin) {
	s.Origin = val
}

// SetBuilder sets the value of Builder.
func (s *UpdateImageSourceReq) SetBuilder(val OptNilUpdateImageSourceReqBuilder) {
	s.Builder = val
}

// SetAbout sets the value of About.
func (s *UpdateImageSourceReq) SetAbout(val OptUpdateImageSourceReqAbout) {
	s.About = val
}

// User defined information about the image source.
type UpdateImageSourceReqAbout struct {
	// A description of the image source.
	Description NilString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *UpdateImageSourceReqAbout) GetDescription() NilString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *UpdateImageSourceReqAbout) SetDescription(val NilString) {
	s.Description = val
}

type UpdateImageSourceReqBuilder struct {
	IntegrationID OptHybridIdentifier `json:"integration_id"`
}

// GetIntegrationID returns the value of IntegrationID.
func (s *UpdateImageSourceReqBuilder) GetIntegrationID() OptHybridIdentifier {
	return s.IntegrationID
}

// SetIntegrationID sets the value of IntegrationID.
func (s *UpdateImageSourceReqBuilder) SetIntegrationID(val OptHybridIdentifier) {
	s.IntegrationID = val
}

type UpdateIntegrationMetaItem string

const (
	UpdateIntegrationMetaItemDefinition UpdateIntegrationMetaItem = "definition"
)

// AllValues returns all UpdateIntegrationMetaItem values.
func (UpdateIntegrationMetaItem) AllValues() []UpdateIntegrationMetaItem {
	return []UpdateIntegrationMetaItem{
		UpdateIntegrationMetaItemDefinition,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateIntegrationMetaItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateIntegrationMetaItemDefinition:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateIntegrationMetaItem) UnmarshalText(data []byte) error {
	switch UpdateIntegrationMetaItem(data) {
	case UpdateIntegrationMetaItemDefinition:
		*s = UpdateIntegrationMetaItemDefinition
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateIntegrationOK struct {
	Data Integration `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateIntegrationOK) GetData() Integration {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateIntegrationOK) SetData(val Integration) {
	s.Data = val
}

type UpdateIntegrationReq struct {
	// A new name for the Integration.
	Name       OptNilString                   `json:"name"`
	Identifier OptIdentifier                  `json:"identifier"`
	Auth       OptNilUpdateIntegrationReqAuth `json:"auth"`
	// Updated key-value pairs associated with the Integration.
	Extra OptNilUpdateIntegrationReqExtra `json:"extra"`
}

// GetName returns the value of Name.
func (s *UpdateIntegrationReq) GetName() OptNilString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateIntegrationReq) GetIdentifier() OptIdentifier {
	return s.Identifier
}

// GetAuth returns the value of Auth.
func (s *UpdateIntegrationReq) GetAuth() OptNilUpdateIntegrationReqAuth {
	return s.Auth
}

// GetExtra returns the value of Extra.
func (s *UpdateIntegrationReq) GetExtra() OptNilUpdateIntegrationReqExtra {
	return s.Extra
}

// SetName sets the value of Name.
func (s *UpdateIntegrationReq) SetName(val OptNilString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateIntegrationReq) SetIdentifier(val OptIdentifier) {
	s.Identifier = val
}

// SetAuth sets the value of Auth.
func (s *UpdateIntegrationReq) SetAuth(val OptNilUpdateIntegrationReqAuth) {
	s.Auth = val
}

// SetExtra sets the value of Extra.
func (s *UpdateIntegrationReq) SetExtra(val OptNilUpdateIntegrationReqExtra) {
	s.Extra = val
}

type UpdateIntegrationReqAuth struct {
	// The region associated with the Integration.
	Region OptNilString `json:"region"`
	// The namespace associated with the Integration.
	Namespace OptNilString `json:"namespace"`
	// API key for accessing the Integration.
	APIKey OptNilString `json:"api_key"`
	// Key ID for accessing the Integration.
	KeyID OptNilString `json:"key_id"`
	// Secret for accessing the Integration.
	Secret OptNilString `json:"secret"`
	// Subscription ID for the Integration.
	SubscriptionID OptNilString `json:"subscription_id"`
	// Client ID for the Integration.
	ClientID OptNilString `json:"client_id"`
	// Base64 encoded configuration for the Integration.
	Base64Config OptNilString `json:"base64_config"`
}

// GetRegion returns the value of Region.
func (s *UpdateIntegrationReqAuth) GetRegion() OptNilString {
	return s.Region
}

// GetNamespace returns the value of Namespace.
func (s *UpdateIntegrationReqAuth) GetNamespace() OptNilString {
	return s.Namespace
}

// GetAPIKey returns the value of APIKey.
func (s *UpdateIntegrationReqAuth) GetAPIKey() OptNilString {
	return s.APIKey
}

// GetKeyID returns the value of KeyID.
func (s *UpdateIntegrationReqAuth) GetKeyID() OptNilString {
	return s.KeyID
}

// GetSecret returns the value of Secret.
func (s *UpdateIntegrationReqAuth) GetSecret() OptNilString {
	return s.Secret
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *UpdateIntegrationReqAuth) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetClientID returns the value of ClientID.
func (s *UpdateIntegrationReqAuth) GetClientID() OptNilString {
	return s.ClientID
}

// GetBase64Config returns the value of Base64Config.
func (s *UpdateIntegrationReqAuth) GetBase64Config() OptNilString {
	return s.Base64Config
}

// SetRegion sets the value of Region.
func (s *UpdateIntegrationReqAuth) SetRegion(val OptNilString) {
	s.Region = val
}

// SetNamespace sets the value of Namespace.
func (s *UpdateIntegrationReqAuth) SetNamespace(val OptNilString) {
	s.Namespace = val
}

// SetAPIKey sets the value of APIKey.
func (s *UpdateIntegrationReqAuth) SetAPIKey(val OptNilString) {
	s.APIKey = val
}

// SetKeyID sets the value of KeyID.
func (s *UpdateIntegrationReqAuth) SetKeyID(val OptNilString) {
	s.KeyID = val
}

// SetSecret sets the value of Secret.
func (s *UpdateIntegrationReqAuth) SetSecret(val OptNilString) {
	s.Secret = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *UpdateIntegrationReqAuth) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetClientID sets the value of ClientID.
func (s *UpdateIntegrationReqAuth) SetClientID(val OptNilString) {
	s.ClientID = val
}

// SetBase64Config sets the value of Base64Config.
func (s *UpdateIntegrationReqAuth) SetBase64Config(val OptNilString) {
	s.Base64Config = val
}

// Updated key-value pairs associated with the Integration.
type UpdateIntegrationReqExtra map[string]string

func (s *UpdateIntegrationReqExtra) init() UpdateIntegrationReqExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UpdateNetworkIncludeItem string

const (
	UpdateNetworkIncludeItemCreators     UpdateNetworkIncludeItem = "creators"
	UpdateNetworkIncludeItemEnvironments UpdateNetworkIncludeItem = "environments"
)

// AllValues returns all UpdateNetworkIncludeItem values.
func (UpdateNetworkIncludeItem) AllValues() []UpdateNetworkIncludeItem {
	return []UpdateNetworkIncludeItem{
		UpdateNetworkIncludeItemCreators,
		UpdateNetworkIncludeItemEnvironments,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateNetworkIncludeItem) MarshalText() ([]byte, error) {
	switch s {
	case UpdateNetworkIncludeItemCreators:
		return []byte(s), nil
	case UpdateNetworkIncludeItemEnvironments:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateNetworkIncludeItem) UnmarshalText(data []byte) error {
	switch UpdateNetworkIncludeItem(data) {
	case UpdateNetworkIncludeItemCreators:
		*s = UpdateNetworkIncludeItemCreators
		return nil
	case UpdateNetworkIncludeItemEnvironments:
		*s = UpdateNetworkIncludeItemEnvironments
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateNetworkOK struct {
	Data     Network            `json:"data"`
	Includes OptNetworkIncludes `json:"includes"`
}

// GetData returns the value of Data.
func (s *UpdateNetworkOK) GetData() Network {
	return s.Data
}

// GetIncludes returns the value of Includes.
func (s *UpdateNetworkOK) GetIncludes() OptNetworkIncludes {
	return s.Includes
}

// SetData sets the value of Data.
func (s *UpdateNetworkOK) SetData(val Network) {
	s.Data = val
}

// SetIncludes sets the value of Includes.
func (s *UpdateNetworkOK) SetIncludes(val OptNetworkIncludes) {
	s.Includes = val
}

type UpdateNetworkReq struct {
	// The name of the Network.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *UpdateNetworkReq) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *UpdateNetworkReq) SetName(val OptString) {
	s.Name = val
}

type UpdatePipelineOK struct {
	Data Pipeline `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdatePipelineOK) GetData() Pipeline {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdatePipelineOK) SetData(val Pipeline) {
	s.Data = val
}

type UpdatePipelineReq struct {
	// A name for the Pipeline.
	Name OptString `json:"name"`
	// Setting to true enables variable and other advanced logic support on this Pipeline. This is a
	// one-way toggle. Once set to true, it cannot be set back to false.
	Dynamic OptBool `json:"dynamic"`
	// An array of stages.
	Stages []PipelineStage `json:"stages"`
	// A boolean where true signifies the Pipeline is disabled.
	Disable OptBool `json:"disable"`
}

// GetName returns the value of Name.
func (s *UpdatePipelineReq) GetName() OptString {
	return s.Name
}

// GetDynamic returns the value of Dynamic.
func (s *UpdatePipelineReq) GetDynamic() OptBool {
	return s.Dynamic
}

// GetStages returns the value of Stages.
func (s *UpdatePipelineReq) GetStages() []PipelineStage {
	return s.Stages
}

// GetDisable returns the value of Disable.
func (s *UpdatePipelineReq) GetDisable() OptBool {
	return s.Disable
}

// SetName sets the value of Name.
func (s *UpdatePipelineReq) SetName(val OptString) {
	s.Name = val
}

// SetDynamic sets the value of Dynamic.
func (s *UpdatePipelineReq) SetDynamic(val OptBool) {
	s.Dynamic = val
}

// SetStages sets the value of Stages.
func (s *UpdatePipelineReq) SetStages(val []PipelineStage) {
	s.Stages = val
}

// SetDisable sets the value of Disable.
func (s *UpdatePipelineReq) SetDisable(val OptBool) {
	s.Disable = val
}

type UpdatePipelineTriggerKeyOK struct {
	Data JobDescriptor `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdatePipelineTriggerKeyOK) GetData() JobDescriptor {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdatePipelineTriggerKeyOK) SetData(val JobDescriptor) {
	s.Data = val
}

type UpdatePipelineTriggerKeyReq struct {
	// Set name of Trigger Key.
	Name OptString `json:"name"`
	// List of IP Restrictions.
	Ips []string `json:"ips"`
}

// GetName returns the value of Name.
func (s *UpdatePipelineTriggerKeyReq) GetName() OptString {
	return s.Name
}

// GetIps returns the value of Ips.
func (s *UpdatePipelineTriggerKeyReq) GetIps() []string {
	return s.Ips
}

// SetName sets the value of Name.
func (s *UpdatePipelineTriggerKeyReq) SetName(val OptString) {
	s.Name = val
}

// SetIps sets the value of Ips.
func (s *UpdatePipelineTriggerKeyReq) SetIps(val []string) {
	s.Ips = val
}

type UpdateRoleOK struct {
	Data Role `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateRoleOK) GetData() Role {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateRoleOK) SetData(val Role) {
	s.Data = val
}

type UpdateRoleReq struct {
	// A name given to the Role.
	Name       OptNilString `json:"name"`
	Identifier string       `json:"identifier"`
	// The list of platform level capabilities assigned to this Role.
	Capabilities OptNilUpdateRoleReqCapabilities `json:"capabilities"`
	Rank         int                             `json:"rank"`
	// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
	Extra OptNilUpdateRoleReqExtra `json:"extra"`
}

// GetName returns the value of Name.
func (s *UpdateRoleReq) GetName() OptNilString {
	return s.Name
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateRoleReq) GetIdentifier() string {
	return s.Identifier
}

// GetCapabilities returns the value of Capabilities.
func (s *UpdateRoleReq) GetCapabilities() OptNilUpdateRoleReqCapabilities {
	return s.Capabilities
}

// GetRank returns the value of Rank.
func (s *UpdateRoleReq) GetRank() int {
	return s.Rank
}

// GetExtra returns the value of Extra.
func (s *UpdateRoleReq) GetExtra() OptNilUpdateRoleReqExtra {
	return s.Extra
}

// SetName sets the value of Name.
func (s *UpdateRoleReq) SetName(val OptNilString) {
	s.Name = val
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateRoleReq) SetIdentifier(val string) {
	s.Identifier = val
}

// SetCapabilities sets the value of Capabilities.
func (s *UpdateRoleReq) SetCapabilities(val OptNilUpdateRoleReqCapabilities) {
	s.Capabilities = val
}

// SetRank sets the value of Rank.
func (s *UpdateRoleReq) SetRank(val int) {
	s.Rank = val
}

// SetExtra sets the value of Extra.
func (s *UpdateRoleReq) SetExtra(val OptNilUpdateRoleReqExtra) {
	s.Extra = val
}

// The list of platform level capabilities assigned to this Role.
type UpdateRoleReqCapabilities struct {
	// If true, the Role has all capabilities.
	All      bool         `json:"all"`
	Specific []Capability `json:"specific"`
}

// GetAll returns the value of All.
func (s *UpdateRoleReqCapabilities) GetAll() bool {
	return s.All
}

// GetSpecific returns the value of Specific.
func (s *UpdateRoleReqCapabilities) GetSpecific() []Capability {
	return s.Specific
}

// SetAll sets the value of All.
func (s *UpdateRoleReqCapabilities) SetAll(val bool) {
	s.All = val
}

// SetSpecific sets the value of Specific.
func (s *UpdateRoleReqCapabilities) SetSpecific(val []Capability) {
	s.Specific = val
}

// Custom user-defined properties for storing extra information on the Role. Not utilized by Cycle.
type UpdateRoleReqExtra map[string]string

func (s *UpdateRoleReqExtra) init() UpdateRoleReqExtra {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type UpdateScopedVariableOK struct {
	Data ScopedVariable `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateScopedVariableOK) GetData() ScopedVariable {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateScopedVariableOK) SetData(val ScopedVariable) {
	s.Data = val
}

type UpdateScopedVariableReq struct {
	// An identifier, similar to a key in an Environment variable.  Its used when envoking the Scoped
	// Variable.
	Identifier OptString               `json:"identifier"`
	Scope      OptScopedVariableScope  `json:"scope"`
	Access     OptScopedVariableAccess `json:"access"`
	// The source or value of the Scoped Variable.
	Source OptUpdateScopedVariableReqSource `json:"source"`
}

// GetIdentifier returns the value of Identifier.
func (s *UpdateScopedVariableReq) GetIdentifier() OptString {
	return s.Identifier
}

// GetScope returns the value of Scope.
func (s *UpdateScopedVariableReq) GetScope() OptScopedVariableScope {
	return s.Scope
}

// GetAccess returns the value of Access.
func (s *UpdateScopedVariableReq) GetAccess() OptScopedVariableAccess {
	return s.Access
}

// GetSource returns the value of Source.
func (s *UpdateScopedVariableReq) GetSource() OptUpdateScopedVariableReqSource {
	return s.Source
}

// SetIdentifier sets the value of Identifier.
func (s *UpdateScopedVariableReq) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetScope sets the value of Scope.
func (s *UpdateScopedVariableReq) SetScope(val OptScopedVariableScope) {
	s.Scope = val
}

// SetAccess sets the value of Access.
func (s *UpdateScopedVariableReq) SetAccess(val OptScopedVariableAccess) {
	s.Access = val
}

// SetSource sets the value of Source.
func (s *UpdateScopedVariableReq) SetSource(val OptUpdateScopedVariableReqSource) {
	s.Source = val
}

// The source or value of the Scoped Variable.
type UpdateScopedVariableReqSource struct {
	OneOf UpdateScopedVariableReqSourceSum
}

// GetOneOf returns the value of OneOf.
func (s *UpdateScopedVariableReqSource) GetOneOf() UpdateScopedVariableReqSourceSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *UpdateScopedVariableReqSource) SetOneOf(val UpdateScopedVariableReqSourceSum) {
	s.OneOf = val
}

// UpdateScopedVariableReqSourceSum represents sum type.
type UpdateScopedVariableReqSourceSum struct {
	Type      UpdateScopedVariableReqSourceSumType // switch on this field
	RawSource RawSource
	URLSource URLSource
}

// UpdateScopedVariableReqSourceSumType is oneOf type of UpdateScopedVariableReqSourceSum.
type UpdateScopedVariableReqSourceSumType string

// Possible values for UpdateScopedVariableReqSourceSumType.
const (
	RawSourceUpdateScopedVariableReqSourceSum UpdateScopedVariableReqSourceSumType = "raw"
	URLSourceUpdateScopedVariableReqSourceSum UpdateScopedVariableReqSourceSumType = "url"
)

// IsRawSource reports whether UpdateScopedVariableReqSourceSum is RawSource.
func (s UpdateScopedVariableReqSourceSum) IsRawSource() bool {
	return s.Type == RawSourceUpdateScopedVariableReqSourceSum
}

// IsURLSource reports whether UpdateScopedVariableReqSourceSum is URLSource.
func (s UpdateScopedVariableReqSourceSum) IsURLSource() bool {
	return s.Type == URLSourceUpdateScopedVariableReqSourceSum
}

// SetRawSource sets UpdateScopedVariableReqSourceSum to RawSource.
func (s *UpdateScopedVariableReqSourceSum) SetRawSource(v RawSource) {
	s.Type = RawSourceUpdateScopedVariableReqSourceSum
	s.RawSource = v
}

// GetRawSource returns RawSource and true boolean if UpdateScopedVariableReqSourceSum is RawSource.
func (s UpdateScopedVariableReqSourceSum) GetRawSource() (v RawSource, ok bool) {
	if !s.IsRawSource() {
		return v, false
	}
	return s.RawSource, true
}

// NewRawSourceUpdateScopedVariableReqSourceSum returns new UpdateScopedVariableReqSourceSum from RawSource.
func NewRawSourceUpdateScopedVariableReqSourceSum(v RawSource) UpdateScopedVariableReqSourceSum {
	var s UpdateScopedVariableReqSourceSum
	s.SetRawSource(v)
	return s
}

// SetURLSource sets UpdateScopedVariableReqSourceSum to URLSource.
func (s *UpdateScopedVariableReqSourceSum) SetURLSource(v URLSource) {
	s.Type = URLSourceUpdateScopedVariableReqSourceSum
	s.URLSource = v
}

// GetURLSource returns URLSource and true boolean if UpdateScopedVariableReqSourceSum is URLSource.
func (s UpdateScopedVariableReqSourceSum) GetURLSource() (v URLSource, ok bool) {
	if !s.IsURLSource() {
		return v, false
	}
	return s.URLSource, true
}

// NewURLSourceUpdateScopedVariableReqSourceSum returns new UpdateScopedVariableReqSourceSum from URLSource.
func NewURLSourceUpdateScopedVariableReqSourceSum(v URLSource) UpdateScopedVariableReqSourceSum {
	var s UpdateScopedVariableReqSourceSum
	s.SetURLSource(v)
	return s
}

type UpdateServerOK struct {
	Data InfraServer `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateServerOK) GetData() InfraServer {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateServerOK) SetData(val InfraServer) {
	s.Data = val
}

type UpdateServerReq struct {
	// Server constriants.
	Constraints UpdateServerReqConstraints `json:"constraints"`
}

// GetConstraints returns the value of Constraints.
func (s *UpdateServerReq) GetConstraints() UpdateServerReqConstraints {
	return s.Constraints
}

// SetConstraints sets the value of Constraints.
func (s *UpdateServerReq) SetConstraints(val UpdateServerReqConstraints) {
	s.Constraints = val
}

// Server constriants.
type UpdateServerReqConstraints struct {
	// A list of Server tags.
	Tags []string `json:"tags"`
	// Server constraints for the given Server.
	Allow OptUpdateServerReqConstraintsAllow `json:"allow"`
}

// GetTags returns the value of Tags.
func (s *UpdateServerReqConstraints) GetTags() []string {
	return s.Tags
}

// GetAllow returns the value of Allow.
func (s *UpdateServerReqConstraints) GetAllow() OptUpdateServerReqConstraintsAllow {
	return s.Allow
}

// SetTags sets the value of Tags.
func (s *UpdateServerReqConstraints) SetTags(val []string) {
	s.Tags = val
}

// SetAllow sets the value of Allow.
func (s *UpdateServerReqConstraints) SetAllow(val OptUpdateServerReqConstraintsAllow) {
	s.Allow = val
}

// Server constraints for the given Server.
type UpdateServerReqConstraintsAllow struct {
	// A boolean where true represents the Server can accept containers with no tags set.
	Pool bool `json:"pool"`
	// A boolean where true represents the Server being a target for service containers.
	Services bool `json:"services"`
	// A boolean where true represents the desire for the Server to allow the overcommitting of shares.
	Overcommit bool `json:"overcommit"`
}

// GetPool returns the value of Pool.
func (s *UpdateServerReqConstraintsAllow) GetPool() bool {
	return s.Pool
}

// GetServices returns the value of Services.
func (s *UpdateServerReqConstraintsAllow) GetServices() bool {
	return s.Services
}

// GetOvercommit returns the value of Overcommit.
func (s *UpdateServerReqConstraintsAllow) GetOvercommit() bool {
	return s.Overcommit
}

// SetPool sets the value of Pool.
func (s *UpdateServerReqConstraintsAllow) SetPool(val bool) {
	s.Pool = val
}

// SetServices sets the value of Services.
func (s *UpdateServerReqConstraintsAllow) SetServices(val bool) {
	s.Services = val
}

// SetOvercommit sets the value of Overcommit.
func (s *UpdateServerReqConstraintsAllow) SetOvercommit(val bool) {
	s.Overcommit = val
}

type UpdateStackOK struct {
	Data Stack `json:"data"`
}

// GetData returns the value of Data.
func (s *UpdateStackOK) GetData() Stack {
	return s.Data
}

// SetData sets the value of Data.
func (s *UpdateStackOK) SetData(val Stack) {
	s.Data = val
}

type UpdateStackReq struct {
	// A name for the Stack.
	Name OptString `json:"name"`
	// A map of default variable values used when building this Stack. A variable can be added anywhere
	// in a Stack using the format `{{var}}` where `var` would be a key in this map.
	Variables OptUpdateStackReqVariables `json:"variables"`
	Source    OptStackSource             `json:"source"`
}

// GetName returns the value of Name.
func (s *UpdateStackReq) GetName() OptString {
	return s.Name
}

// GetVariables returns the value of Variables.
func (s *UpdateStackReq) GetVariables() OptUpdateStackReqVariables {
	return s.Variables
}

// GetSource returns the value of Source.
func (s *UpdateStackReq) GetSource() OptStackSource {
	return s.Source
}

// SetName sets the value of Name.
func (s *UpdateStackReq) SetName(val OptString) {
	s.Name = val
}

// SetVariables sets the value of Variables.
func (s *UpdateStackReq) SetVariables(val OptUpdateStackReqVariables) {
	s.Variables = val
}

// SetSource sets the value of Source.
func (s *UpdateStackReq) SetSource(val OptStackSource) {
	s.Source = val
}

// A map of default variable values used when building this Stack. A variable can be added anywhere
// in a Stack using the format `{{var}}` where `var` would be a key in this map.
type UpdateStackReqVariables map[string]string

func (s *UpdateStackReqVariables) init() UpdateStackReqVariables {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Server usage data.
// Ref: #/components/schemas/UsageDatum
type UsageDatum struct {
	Time DateTime `json:"time"`
	// The number of nodes the data is pulled from.
	Nodes int `json:"nodes"`
	// A number in GB representing memory.
	MemoryGB int `json:"memory_gb"`
}

// GetTime returns the value of Time.
func (s *UsageDatum) GetTime() DateTime {
	return s.Time
}

// GetNodes returns the value of Nodes.
func (s *UsageDatum) GetNodes() int {
	return s.Nodes
}

// GetMemoryGB returns the value of MemoryGB.
func (s *UsageDatum) GetMemoryGB() int {
	return s.MemoryGB
}

// SetTime sets the value of Time.
func (s *UsageDatum) SetTime(val DateTime) {
	s.Time = val
}

// SetNodes sets the value of Nodes.
func (s *UsageDatum) SetNodes(val int) {
	s.Nodes = val
}

// SetMemoryGB sets the value of MemoryGB.
func (s *UsageDatum) SetMemoryGB(val int) {
	s.MemoryGB = val
}

// A type of creator and a matching identifier.
// Ref: #/components/schemas/UserScope
type UserScope struct {
	// The type of user that created the resource.
	Type UserScopeType `json:"type"`
	ID   ID            `json:"id"`
}

// GetType returns the value of Type.
func (s *UserScope) GetType() UserScopeType {
	return s.Type
}

// GetID returns the value of ID.
func (s *UserScope) GetID() ID {
	return s.ID
}

// SetType sets the value of Type.
func (s *UserScope) SetType(val UserScopeType) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *UserScope) SetID(val ID) {
	s.ID = val
}

// The type of user that created the resource.
type UserScopeType string

const (
	UserScopeTypeAccount          UserScopeType = "account"
	UserScopeTypeEnvironment      UserScopeType = "environment"
	UserScopeTypePlatform         UserScopeType = "platform"
	UserScopeTypePlatformPipeline UserScopeType = "platform-pipeline"
	UserScopeTypeEmployee         UserScopeType = "employee"
	UserScopeTypeAPIKey           UserScopeType = "api-key"
	UserScopeTypeVisitor          UserScopeType = "visitor"
)

// AllValues returns all UserScopeType values.
func (UserScopeType) AllValues() []UserScopeType {
	return []UserScopeType{
		UserScopeTypeAccount,
		UserScopeTypeEnvironment,
		UserScopeTypePlatform,
		UserScopeTypePlatformPipeline,
		UserScopeTypeEmployee,
		UserScopeTypeAPIKey,
		UserScopeTypeVisitor,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UserScopeType) MarshalText() ([]byte, error) {
	switch s {
	case UserScopeTypeAccount:
		return []byte(s), nil
	case UserScopeTypeEnvironment:
		return []byte(s), nil
	case UserScopeTypePlatform:
		return []byte(s), nil
	case UserScopeTypePlatformPipeline:
		return []byte(s), nil
	case UserScopeTypeEmployee:
		return []byte(s), nil
	case UserScopeTypeAPIKey:
		return []byte(s), nil
	case UserScopeTypeVisitor:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserScopeType) UnmarshalText(data []byte) error {
	switch UserScopeType(data) {
	case UserScopeTypeAccount:
		*s = UserScopeTypeAccount
		return nil
	case UserScopeTypeEnvironment:
		*s = UserScopeTypeEnvironment
		return nil
	case UserScopeTypePlatform:
		*s = UserScopeTypePlatform
		return nil
	case UserScopeTypePlatformPipeline:
		*s = UserScopeTypePlatformPipeline
		return nil
	case UserScopeTypeEmployee:
		*s = UserScopeTypeEmployee
		return nil
	case UserScopeTypeAPIKey:
		*s = UserScopeTypeAPIKey
		return nil
	case UserScopeTypeVisitor:
		*s = UserScopeTypeVisitor
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/V1LbConfig
type V1LbConfig struct {
	// A configuration for a specific port.
	Controllers        []V1LbController  `json:"controllers"`
	ControllerTemplate OptV1LbController `json:"controller_template"`
}

// GetControllers returns the value of Controllers.
func (s *V1LbConfig) GetControllers() []V1LbController {
	return s.Controllers
}

// GetControllerTemplate returns the value of ControllerTemplate.
func (s *V1LbConfig) GetControllerTemplate() OptV1LbController {
	return s.ControllerTemplate
}

// SetControllers sets the value of Controllers.
func (s *V1LbConfig) SetControllers(val []V1LbController) {
	s.Controllers = val
}

// SetControllerTemplate sets the value of ControllerTemplate.
func (s *V1LbConfig) SetControllerTemplate(val OptV1LbController) {
	s.ControllerTemplate = val
}

// A specific router configuration that describes how traffic matching the rule is handled.
// Ref: #/components/schemas/V1LbConfigRouter
type V1LbConfigRouter struct {
	// The ruleset for this router to be selected. If both `domains`` and `internal_port` are null, then
	// this match acts as a wildcard and will match all.
	Match V1LbConfigRouterMatch `json:"match"`
	// How to route the traffic to the destination.
	// `random`: Pick a valid destination at random.
	// `round-robin`: Send each request to the 'next' destination on the list, restarting from the
	// beginning when the last destination is used.
	Mode   V1LbConfigRouterMode   `json:"mode"`
	Config V1LbConfigRouterConfig `json:"config"`
}

// GetMatch returns the value of Match.
func (s *V1LbConfigRouter) GetMatch() V1LbConfigRouterMatch {
	return s.Match
}

// GetMode returns the value of Mode.
func (s *V1LbConfigRouter) GetMode() V1LbConfigRouterMode {
	return s.Mode
}

// GetConfig returns the value of Config.
func (s *V1LbConfigRouter) GetConfig() V1LbConfigRouterConfig {
	return s.Config
}

// SetMatch sets the value of Match.
func (s *V1LbConfigRouter) SetMatch(val V1LbConfigRouterMatch) {
	s.Match = val
}

// SetMode sets the value of Mode.
func (s *V1LbConfigRouter) SetMode(val V1LbConfigRouterMode) {
	s.Mode = val
}

// SetConfig sets the value of Config.
func (s *V1LbConfigRouter) SetConfig(val V1LbConfigRouterConfig) {
	s.Config = val
}

type V1LbConfigRouterConfig struct {
	// If a request comes in from the same origin, ensure it hits the same destination.
	StickySessions bool `json:"sticky_sessions"`
	// If a destination is unavailable, retry up to [x] times, instead of immediately failing with a
	// 503/504 error.
	DestinationRetries int `json:"destination_retries"`
	// TLS termination configuration. If null, the platform will use the default configuration. Port 443
	// by default has TLS termination enabled.
	TLS OptNilV1LbConfigRouterConfigTLS `json:"tls"`
	// Defines how the length of various sorts of timeouts when communicating with the destination.
	Timeouts V1LbConfigRouterConfigTimeouts `json:"timeouts"`
	// Additional configuration options specific to the selected mode (tcp/http).
	Extension OptV1LbConfigRouterConfigExtension `json:"extension"`
}

// GetStickySessions returns the value of StickySessions.
func (s *V1LbConfigRouterConfig) GetStickySessions() bool {
	return s.StickySessions
}

// GetDestinationRetries returns the value of DestinationRetries.
func (s *V1LbConfigRouterConfig) GetDestinationRetries() int {
	return s.DestinationRetries
}

// GetTLS returns the value of TLS.
func (s *V1LbConfigRouterConfig) GetTLS() OptNilV1LbConfigRouterConfigTLS {
	return s.TLS
}

// GetTimeouts returns the value of Timeouts.
func (s *V1LbConfigRouterConfig) GetTimeouts() V1LbConfigRouterConfigTimeouts {
	return s.Timeouts
}

// GetExtension returns the value of Extension.
func (s *V1LbConfigRouterConfig) GetExtension() OptV1LbConfigRouterConfigExtension {
	return s.Extension
}

// SetStickySessions sets the value of StickySessions.
func (s *V1LbConfigRouterConfig) SetStickySessions(val bool) {
	s.StickySessions = val
}

// SetDestinationRetries sets the value of DestinationRetries.
func (s *V1LbConfigRouterConfig) SetDestinationRetries(val int) {
	s.DestinationRetries = val
}

// SetTLS sets the value of TLS.
func (s *V1LbConfigRouterConfig) SetTLS(val OptNilV1LbConfigRouterConfigTLS) {
	s.TLS = val
}

// SetTimeouts sets the value of Timeouts.
func (s *V1LbConfigRouterConfig) SetTimeouts(val V1LbConfigRouterConfigTimeouts) {
	s.Timeouts = val
}

// SetExtension sets the value of Extension.
func (s *V1LbConfigRouterConfig) SetExtension(val OptV1LbConfigRouterConfigExtension) {
	s.Extension = val
}

// Additional configuration options specific to the selected mode (tcp/http).
type V1LbConfigRouterConfigExtension struct {
	OneOf V1LbConfigRouterConfigExtensionSum
}

// GetOneOf returns the value of OneOf.
func (s *V1LbConfigRouterConfigExtension) GetOneOf() V1LbConfigRouterConfigExtensionSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *V1LbConfigRouterConfigExtension) SetOneOf(val V1LbConfigRouterConfigExtensionSum) {
	s.OneOf = val
}

// V1LbConfigRouterConfigExtensionSum represents sum type.
type V1LbConfigRouterConfigExtensionSum struct {
	Type             V1LbConfigRouterConfigExtensionSumType // switch on this field
	TcpRouterConfig  TcpRouterConfig
	HttpRouterConfig HttpRouterConfig
}

// V1LbConfigRouterConfigExtensionSumType is oneOf type of V1LbConfigRouterConfigExtensionSum.
type V1LbConfigRouterConfigExtensionSumType string

// Possible values for V1LbConfigRouterConfigExtensionSumType.
const (
	TcpRouterConfigV1LbConfigRouterConfigExtensionSum  V1LbConfigRouterConfigExtensionSumType = "tcp"
	HttpRouterConfigV1LbConfigRouterConfigExtensionSum V1LbConfigRouterConfigExtensionSumType = "http"
)

// IsTcpRouterConfig reports whether V1LbConfigRouterConfigExtensionSum is TcpRouterConfig.
func (s V1LbConfigRouterConfigExtensionSum) IsTcpRouterConfig() bool {
	return s.Type == TcpRouterConfigV1LbConfigRouterConfigExtensionSum
}

// IsHttpRouterConfig reports whether V1LbConfigRouterConfigExtensionSum is HttpRouterConfig.
func (s V1LbConfigRouterConfigExtensionSum) IsHttpRouterConfig() bool {
	return s.Type == HttpRouterConfigV1LbConfigRouterConfigExtensionSum
}

// SetTcpRouterConfig sets V1LbConfigRouterConfigExtensionSum to TcpRouterConfig.
func (s *V1LbConfigRouterConfigExtensionSum) SetTcpRouterConfig(v TcpRouterConfig) {
	s.Type = TcpRouterConfigV1LbConfigRouterConfigExtensionSum
	s.TcpRouterConfig = v
}

// GetTcpRouterConfig returns TcpRouterConfig and true boolean if V1LbConfigRouterConfigExtensionSum is TcpRouterConfig.
func (s V1LbConfigRouterConfigExtensionSum) GetTcpRouterConfig() (v TcpRouterConfig, ok bool) {
	if !s.IsTcpRouterConfig() {
		return v, false
	}
	return s.TcpRouterConfig, true
}

// NewTcpRouterConfigV1LbConfigRouterConfigExtensionSum returns new V1LbConfigRouterConfigExtensionSum from TcpRouterConfig.
func NewTcpRouterConfigV1LbConfigRouterConfigExtensionSum(v TcpRouterConfig) V1LbConfigRouterConfigExtensionSum {
	var s V1LbConfigRouterConfigExtensionSum
	s.SetTcpRouterConfig(v)
	return s
}

// SetHttpRouterConfig sets V1LbConfigRouterConfigExtensionSum to HttpRouterConfig.
func (s *V1LbConfigRouterConfigExtensionSum) SetHttpRouterConfig(v HttpRouterConfig) {
	s.Type = HttpRouterConfigV1LbConfigRouterConfigExtensionSum
	s.HttpRouterConfig = v
}

// GetHttpRouterConfig returns HttpRouterConfig and true boolean if V1LbConfigRouterConfigExtensionSum is HttpRouterConfig.
func (s V1LbConfigRouterConfigExtensionSum) GetHttpRouterConfig() (v HttpRouterConfig, ok bool) {
	if !s.IsHttpRouterConfig() {
		return v, false
	}
	return s.HttpRouterConfig, true
}

// NewHttpRouterConfigV1LbConfigRouterConfigExtensionSum returns new V1LbConfigRouterConfigExtensionSum from HttpRouterConfig.
func NewHttpRouterConfigV1LbConfigRouterConfigExtensionSum(v HttpRouterConfig) V1LbConfigRouterConfigExtensionSum {
	var s V1LbConfigRouterConfigExtensionSum
	s.SetHttpRouterConfig(v)
	return s
}

// TLS termination configuration. If null, the platform will use the default configuration. Port 443
// by default has TLS termination enabled.
type V1LbConfigRouterConfigTLS struct {
	// [Advanced] Change the domain the controller listens on.
	ServerName OptNilString `json:"server_name"`
	// If enabled, accept TLS traffic with an invalid certificate. This is usually done for
	// development/testing, and is not recommended for production use.
	AllowInsecure OptNilBool `json:"allow_insecure"`
	// A PEM encoded string of certificates.
	ClientCertAuth OptNilString `json:"client_cert_auth"`
	// Defines how to validate the connecting TLS certificate.
	// `none`: Do not require a TLS certificate to be sent
	// `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
	// `require`: Requires a certificate be sent for the request to be valid, but does not validate the
	// certificate.
	// `require-verify`: Requires both that the client send a certificate, and that the certificate is
	// valid. This is required when using https.
	ClientAuth OptNilV1LbConfigRouterConfigTLSClientAuth `json:"client_auth"`
}

// GetServerName returns the value of ServerName.
func (s *V1LbConfigRouterConfigTLS) GetServerName() OptNilString {
	return s.ServerName
}

// GetAllowInsecure returns the value of AllowInsecure.
func (s *V1LbConfigRouterConfigTLS) GetAllowInsecure() OptNilBool {
	return s.AllowInsecure
}

// GetClientCertAuth returns the value of ClientCertAuth.
func (s *V1LbConfigRouterConfigTLS) GetClientCertAuth() OptNilString {
	return s.ClientCertAuth
}

// GetClientAuth returns the value of ClientAuth.
func (s *V1LbConfigRouterConfigTLS) GetClientAuth() OptNilV1LbConfigRouterConfigTLSClientAuth {
	return s.ClientAuth
}

// SetServerName sets the value of ServerName.
func (s *V1LbConfigRouterConfigTLS) SetServerName(val OptNilString) {
	s.ServerName = val
}

// SetAllowInsecure sets the value of AllowInsecure.
func (s *V1LbConfigRouterConfigTLS) SetAllowInsecure(val OptNilBool) {
	s.AllowInsecure = val
}

// SetClientCertAuth sets the value of ClientCertAuth.
func (s *V1LbConfigRouterConfigTLS) SetClientCertAuth(val OptNilString) {
	s.ClientCertAuth = val
}

// SetClientAuth sets the value of ClientAuth.
func (s *V1LbConfigRouterConfigTLS) SetClientAuth(val OptNilV1LbConfigRouterConfigTLSClientAuth) {
	s.ClientAuth = val
}

// Defines how to validate the connecting TLS certificate.
// `none`: Do not require a TLS certificate to be sent
// `request`: Asks the client to send a TLS certificate, but does not require nor validate it.
// `require`: Requires a certificate be sent for the request to be valid, but does not validate the
// certificate.
// `require-verify`: Requires both that the client send a certificate, and that the certificate is
// valid. This is required when using https.
type V1LbConfigRouterConfigTLSClientAuth string

const (
	V1LbConfigRouterConfigTLSClientAuthNone          V1LbConfigRouterConfigTLSClientAuth = "none"
	V1LbConfigRouterConfigTLSClientAuthRequest       V1LbConfigRouterConfigTLSClientAuth = "request"
	V1LbConfigRouterConfigTLSClientAuthRequire       V1LbConfigRouterConfigTLSClientAuth = "require"
	V1LbConfigRouterConfigTLSClientAuthRequireVerify V1LbConfigRouterConfigTLSClientAuth = "require-verify"
)

// AllValues returns all V1LbConfigRouterConfigTLSClientAuth values.
func (V1LbConfigRouterConfigTLSClientAuth) AllValues() []V1LbConfigRouterConfigTLSClientAuth {
	return []V1LbConfigRouterConfigTLSClientAuth{
		V1LbConfigRouterConfigTLSClientAuthNone,
		V1LbConfigRouterConfigTLSClientAuthRequest,
		V1LbConfigRouterConfigTLSClientAuthRequire,
		V1LbConfigRouterConfigTLSClientAuthRequireVerify,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s V1LbConfigRouterConfigTLSClientAuth) MarshalText() ([]byte, error) {
	switch s {
	case V1LbConfigRouterConfigTLSClientAuthNone:
		return []byte(s), nil
	case V1LbConfigRouterConfigTLSClientAuthRequest:
		return []byte(s), nil
	case V1LbConfigRouterConfigTLSClientAuthRequire:
		return []byte(s), nil
	case V1LbConfigRouterConfigTLSClientAuthRequireVerify:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1LbConfigRouterConfigTLSClientAuth) UnmarshalText(data []byte) error {
	switch V1LbConfigRouterConfigTLSClientAuth(data) {
	case V1LbConfigRouterConfigTLSClientAuthNone:
		*s = V1LbConfigRouterConfigTLSClientAuthNone
		return nil
	case V1LbConfigRouterConfigTLSClientAuthRequest:
		*s = V1LbConfigRouterConfigTLSClientAuthRequest
		return nil
	case V1LbConfigRouterConfigTLSClientAuthRequire:
		*s = V1LbConfigRouterConfigTLSClientAuthRequire
		return nil
	case V1LbConfigRouterConfigTLSClientAuthRequireVerify:
		*s = V1LbConfigRouterConfigTLSClientAuthRequireVerify
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Defines how the length of various sorts of timeouts when communicating with the destination.
type V1LbConfigRouterConfigTimeouts struct {
	DestinationConnection Duration `json:"destination_connection"`
}

// GetDestinationConnection returns the value of DestinationConnection.
func (s *V1LbConfigRouterConfigTimeouts) GetDestinationConnection() Duration {
	return s.DestinationConnection
}

// SetDestinationConnection sets the value of DestinationConnection.
func (s *V1LbConfigRouterConfigTimeouts) SetDestinationConnection(val Duration) {
	s.DestinationConnection = val
}

// The ruleset for this router to be selected. If both `domains“ and `internal_port` are null, then
// this match acts as a wildcard and will match all.
type V1LbConfigRouterMatch struct {
	// The specific domains to match against.
	Domains []string `json:"domains"`
	// The specific ports to match against.
	InternalPort []int        `json:"internal_port"`
	Path         OptNilString `json:"path"`
}

// GetDomains returns the value of Domains.
func (s *V1LbConfigRouterMatch) GetDomains() []string {
	return s.Domains
}

// GetInternalPort returns the value of InternalPort.
func (s *V1LbConfigRouterMatch) GetInternalPort() []int {
	return s.InternalPort
}

// GetPath returns the value of Path.
func (s *V1LbConfigRouterMatch) GetPath() OptNilString {
	return s.Path
}

// SetDomains sets the value of Domains.
func (s *V1LbConfigRouterMatch) SetDomains(val []string) {
	s.Domains = val
}

// SetInternalPort sets the value of InternalPort.
func (s *V1LbConfigRouterMatch) SetInternalPort(val []int) {
	s.InternalPort = val
}

// SetPath sets the value of Path.
func (s *V1LbConfigRouterMatch) SetPath(val OptNilString) {
	s.Path = val
}

// How to route the traffic to the destination.
// `random`: Pick a valid destination at random.
// `round-robin`: Send each request to the 'next' destination on the list, restarting from the
// beginning when the last destination is used.
type V1LbConfigRouterMode string

const (
	V1LbConfigRouterModeRandom     V1LbConfigRouterMode = "random"
	V1LbConfigRouterModeRoundRobin V1LbConfigRouterMode = "round-robin"
)

// AllValues returns all V1LbConfigRouterMode values.
func (V1LbConfigRouterMode) AllValues() []V1LbConfigRouterMode {
	return []V1LbConfigRouterMode{
		V1LbConfigRouterModeRandom,
		V1LbConfigRouterModeRoundRobin,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s V1LbConfigRouterMode) MarshalText() ([]byte, error) {
	switch s {
	case V1LbConfigRouterModeRandom:
		return []byte(s), nil
	case V1LbConfigRouterModeRoundRobin:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1LbConfigRouterMode) UnmarshalText(data []byte) error {
	switch V1LbConfigRouterMode(data) {
	case V1LbConfigRouterModeRandom:
		*s = V1LbConfigRouterModeRandom
		return nil
	case V1LbConfigRouterModeRoundRobin:
		*s = V1LbConfigRouterModeRoundRobin
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/V1LbController
type V1LbController struct {
	Default bool `json:"default"`
	// A human-readable identifier for this controller. It will default to the port, i.e. `port-443`, but
	// can be renamed to anything, such as the service this controller represents.
	Identifier string `json:"identifier"`
	// Defines how traffic comes in to the load balancer, and how the load balancer handles it.
	Transport V1LbControllerTransport `json:"transport"`
}

// GetDefault returns the value of Default.
func (s *V1LbController) GetDefault() bool {
	return s.Default
}

// GetIdentifier returns the value of Identifier.
func (s *V1LbController) GetIdentifier() string {
	return s.Identifier
}

// GetTransport returns the value of Transport.
func (s *V1LbController) GetTransport() V1LbControllerTransport {
	return s.Transport
}

// SetDefault sets the value of Default.
func (s *V1LbController) SetDefault(val bool) {
	s.Default = val
}

// SetIdentifier sets the value of Identifier.
func (s *V1LbController) SetIdentifier(val string) {
	s.Identifier = val
}

// SetTransport sets the value of Transport.
func (s *V1LbController) SetTransport(val V1LbControllerTransport) {
	s.Transport = val
}

// Defines how traffic comes in to the load balancer, and how the load balancer handles it.
type V1LbControllerTransport struct {
	// When true, this controller is disabled and will not be used.
	Disable bool `json:"disable"`
	// The kind of traffic (http/tcp) that will be sent to the load balancer.
	Mode V1LbControllerTransportMode `json:"mode"`
	// Defines how the transport for this controller operates.
	Config V1LbControllerTransportConfig `json:"config"`
	// Defines where traffic is sent. Many can be defined per controller.
	Routers []V1LbConfigRouter `json:"routers"`
}

// GetDisable returns the value of Disable.
func (s *V1LbControllerTransport) GetDisable() bool {
	return s.Disable
}

// GetMode returns the value of Mode.
func (s *V1LbControllerTransport) GetMode() V1LbControllerTransportMode {
	return s.Mode
}

// GetConfig returns the value of Config.
func (s *V1LbControllerTransport) GetConfig() V1LbControllerTransportConfig {
	return s.Config
}

// GetRouters returns the value of Routers.
func (s *V1LbControllerTransport) GetRouters() []V1LbConfigRouter {
	return s.Routers
}

// SetDisable sets the value of Disable.
func (s *V1LbControllerTransport) SetDisable(val bool) {
	s.Disable = val
}

// SetMode sets the value of Mode.
func (s *V1LbControllerTransport) SetMode(val V1LbControllerTransportMode) {
	s.Mode = val
}

// SetConfig sets the value of Config.
func (s *V1LbControllerTransport) SetConfig(val V1LbControllerTransportConfig) {
	s.Config = val
}

// SetRouters sets the value of Routers.
func (s *V1LbControllerTransport) SetRouters(val []V1LbConfigRouter) {
	s.Routers = val
}

// Defines how the transport for this controller operates.
type V1LbControllerTransportConfig struct {
	// Enable/disable performance mode. If enabled, some telemetry will be disabled to dedicate full
	// processing to handling requests.
	// You will not see per-request breakdowns or URL logging if performance mode is enabled.
	Performance bool `json:"performance"`
	// Defines how traffic gets into the load balancer.
	Ingress V1LbControllerTransportConfigIngress `json:"ingress"`
	// Defines settings for various types of timeouts.
	Timeouts V1LbControllerTransportConfigTimeouts `json:"timeouts"`
	// Verbosity describes the level of logging detail for the controller.
	Verbosity V1LbControllerTransportConfigVerbosity `json:"verbosity"`
	// Extended configurations for the specified transport mode (http/tcp).
	Extension OptV1LbControllerTransportConfigExtension `json:"extension"`
}

// GetPerformance returns the value of Performance.
func (s *V1LbControllerTransportConfig) GetPerformance() bool {
	return s.Performance
}

// GetIngress returns the value of Ingress.
func (s *V1LbControllerTransportConfig) GetIngress() V1LbControllerTransportConfigIngress {
	return s.Ingress
}

// GetTimeouts returns the value of Timeouts.
func (s *V1LbControllerTransportConfig) GetTimeouts() V1LbControllerTransportConfigTimeouts {
	return s.Timeouts
}

// GetVerbosity returns the value of Verbosity.
func (s *V1LbControllerTransportConfig) GetVerbosity() V1LbControllerTransportConfigVerbosity {
	return s.Verbosity
}

// GetExtension returns the value of Extension.
func (s *V1LbControllerTransportConfig) GetExtension() OptV1LbControllerTransportConfigExtension {
	return s.Extension
}

// SetPerformance sets the value of Performance.
func (s *V1LbControllerTransportConfig) SetPerformance(val bool) {
	s.Performance = val
}

// SetIngress sets the value of Ingress.
func (s *V1LbControllerTransportConfig) SetIngress(val V1LbControllerTransportConfigIngress) {
	s.Ingress = val
}

// SetTimeouts sets the value of Timeouts.
func (s *V1LbControllerTransportConfig) SetTimeouts(val V1LbControllerTransportConfigTimeouts) {
	s.Timeouts = val
}

// SetVerbosity sets the value of Verbosity.
func (s *V1LbControllerTransportConfig) SetVerbosity(val V1LbControllerTransportConfigVerbosity) {
	s.Verbosity = val
}

// SetExtension sets the value of Extension.
func (s *V1LbControllerTransportConfig) SetExtension(val OptV1LbControllerTransportConfigExtension) {
	s.Extension = val
}

// Extended configurations for the specified transport mode (http/tcp).
type V1LbControllerTransportConfigExtension struct {
	OneOf V1LbControllerTransportConfigExtensionSum
}

// GetOneOf returns the value of OneOf.
func (s *V1LbControllerTransportConfigExtension) GetOneOf() V1LbControllerTransportConfigExtensionSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *V1LbControllerTransportConfigExtension) SetOneOf(val V1LbControllerTransportConfigExtensionSum) {
	s.OneOf = val
}

// V1LbControllerTransportConfigExtensionSum represents sum type.
type V1LbControllerTransportConfigExtensionSum struct {
	Type                V1LbControllerTransportConfigExtensionSumType // switch on this field
	TcpTransportConfig  TcpTransportConfig
	HttpTransportConfig HttpTransportConfig
}

// V1LbControllerTransportConfigExtensionSumType is oneOf type of V1LbControllerTransportConfigExtensionSum.
type V1LbControllerTransportConfigExtensionSumType string

// Possible values for V1LbControllerTransportConfigExtensionSumType.
const (
	TcpTransportConfigV1LbControllerTransportConfigExtensionSum  V1LbControllerTransportConfigExtensionSumType = "tcp"
	HttpTransportConfigV1LbControllerTransportConfigExtensionSum V1LbControllerTransportConfigExtensionSumType = "http"
)

// IsTcpTransportConfig reports whether V1LbControllerTransportConfigExtensionSum is TcpTransportConfig.
func (s V1LbControllerTransportConfigExtensionSum) IsTcpTransportConfig() bool {
	return s.Type == TcpTransportConfigV1LbControllerTransportConfigExtensionSum
}

// IsHttpTransportConfig reports whether V1LbControllerTransportConfigExtensionSum is HttpTransportConfig.
func (s V1LbControllerTransportConfigExtensionSum) IsHttpTransportConfig() bool {
	return s.Type == HttpTransportConfigV1LbControllerTransportConfigExtensionSum
}

// SetTcpTransportConfig sets V1LbControllerTransportConfigExtensionSum to TcpTransportConfig.
func (s *V1LbControllerTransportConfigExtensionSum) SetTcpTransportConfig(v TcpTransportConfig) {
	s.Type = TcpTransportConfigV1LbControllerTransportConfigExtensionSum
	s.TcpTransportConfig = v
}

// GetTcpTransportConfig returns TcpTransportConfig and true boolean if V1LbControllerTransportConfigExtensionSum is TcpTransportConfig.
func (s V1LbControllerTransportConfigExtensionSum) GetTcpTransportConfig() (v TcpTransportConfig, ok bool) {
	if !s.IsTcpTransportConfig() {
		return v, false
	}
	return s.TcpTransportConfig, true
}

// NewTcpTransportConfigV1LbControllerTransportConfigExtensionSum returns new V1LbControllerTransportConfigExtensionSum from TcpTransportConfig.
func NewTcpTransportConfigV1LbControllerTransportConfigExtensionSum(v TcpTransportConfig) V1LbControllerTransportConfigExtensionSum {
	var s V1LbControllerTransportConfigExtensionSum
	s.SetTcpTransportConfig(v)
	return s
}

// SetHttpTransportConfig sets V1LbControllerTransportConfigExtensionSum to HttpTransportConfig.
func (s *V1LbControllerTransportConfigExtensionSum) SetHttpTransportConfig(v HttpTransportConfig) {
	s.Type = HttpTransportConfigV1LbControllerTransportConfigExtensionSum
	s.HttpTransportConfig = v
}

// GetHttpTransportConfig returns HttpTransportConfig and true boolean if V1LbControllerTransportConfigExtensionSum is HttpTransportConfig.
func (s V1LbControllerTransportConfigExtensionSum) GetHttpTransportConfig() (v HttpTransportConfig, ok bool) {
	if !s.IsHttpTransportConfig() {
		return v, false
	}
	return s.HttpTransportConfig, true
}

// NewHttpTransportConfigV1LbControllerTransportConfigExtensionSum returns new V1LbControllerTransportConfigExtensionSum from HttpTransportConfig.
func NewHttpTransportConfigV1LbControllerTransportConfigExtensionSum(v HttpTransportConfig) V1LbControllerTransportConfigExtensionSum {
	var s V1LbControllerTransportConfigExtensionSum
	s.SetHttpTransportConfig(v)
	return s
}

// Defines how traffic gets into the load balancer.
type V1LbControllerTransportConfigIngress struct {
	// The port inbound trafic is accepted on.
	Port int                                           `json:"port"`
	TLS  OptNilV1LbControllerTransportConfigIngressTLS `json:"tls"`
}

// GetPort returns the value of Port.
func (s *V1LbControllerTransportConfigIngress) GetPort() int {
	return s.Port
}

// GetTLS returns the value of TLS.
func (s *V1LbControllerTransportConfigIngress) GetTLS() OptNilV1LbControllerTransportConfigIngressTLS {
	return s.TLS
}

// SetPort sets the value of Port.
func (s *V1LbControllerTransportConfigIngress) SetPort(val int) {
	s.Port = val
}

// SetTLS sets the value of TLS.
func (s *V1LbControllerTransportConfigIngress) SetTLS(val OptNilV1LbControllerTransportConfigIngressTLS) {
	s.TLS = val
}

type V1LbControllerTransportConfigIngressTLS struct {
	// Enables or disables TLS.
	Enable bool `json:"enable"`
}

// GetEnable returns the value of Enable.
func (s *V1LbControllerTransportConfigIngressTLS) GetEnable() bool {
	return s.Enable
}

// SetEnable sets the value of Enable.
func (s *V1LbControllerTransportConfigIngressTLS) SetEnable(val bool) {
	s.Enable = val
}

// Defines settings for various types of timeouts.
type V1LbControllerTransportConfigTimeouts struct {
	Idle Duration `json:"idle"`
}

// GetIdle returns the value of Idle.
func (s *V1LbControllerTransportConfigTimeouts) GetIdle() Duration {
	return s.Idle
}

// SetIdle sets the value of Idle.
func (s *V1LbControllerTransportConfigTimeouts) SetIdle(val Duration) {
	s.Idle = val
}

// Verbosity describes the level of logging detail for the controller.
type V1LbControllerTransportConfigVerbosity string

const (
	V1LbControllerTransportConfigVerbosityLow    V1LbControllerTransportConfigVerbosity = "low"
	V1LbControllerTransportConfigVerbosityNormal V1LbControllerTransportConfigVerbosity = "normal"
	V1LbControllerTransportConfigVerbosityHigh   V1LbControllerTransportConfigVerbosity = "high"
	V1LbControllerTransportConfigVerbosityDebug  V1LbControllerTransportConfigVerbosity = "debug"
)

// AllValues returns all V1LbControllerTransportConfigVerbosity values.
func (V1LbControllerTransportConfigVerbosity) AllValues() []V1LbControllerTransportConfigVerbosity {
	return []V1LbControllerTransportConfigVerbosity{
		V1LbControllerTransportConfigVerbosityLow,
		V1LbControllerTransportConfigVerbosityNormal,
		V1LbControllerTransportConfigVerbosityHigh,
		V1LbControllerTransportConfigVerbosityDebug,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s V1LbControllerTransportConfigVerbosity) MarshalText() ([]byte, error) {
	switch s {
	case V1LbControllerTransportConfigVerbosityLow:
		return []byte(s), nil
	case V1LbControllerTransportConfigVerbosityNormal:
		return []byte(s), nil
	case V1LbControllerTransportConfigVerbosityHigh:
		return []byte(s), nil
	case V1LbControllerTransportConfigVerbosityDebug:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1LbControllerTransportConfigVerbosity) UnmarshalText(data []byte) error {
	switch V1LbControllerTransportConfigVerbosity(data) {
	case V1LbControllerTransportConfigVerbosityLow:
		*s = V1LbControllerTransportConfigVerbosityLow
		return nil
	case V1LbControllerTransportConfigVerbosityNormal:
		*s = V1LbControllerTransportConfigVerbosityNormal
		return nil
	case V1LbControllerTransportConfigVerbosityHigh:
		*s = V1LbControllerTransportConfigVerbosityHigh
		return nil
	case V1LbControllerTransportConfigVerbosityDebug:
		*s = V1LbControllerTransportConfigVerbosityDebug
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The kind of traffic (http/tcp) that will be sent to the load balancer.
type V1LbControllerTransportMode string

const (
	V1LbControllerTransportModeTCP  V1LbControllerTransportMode = "tcp"
	V1LbControllerTransportModeHTTP V1LbControllerTransportMode = "http"
)

// AllValues returns all V1LbControllerTransportMode values.
func (V1LbControllerTransportMode) AllValues() []V1LbControllerTransportMode {
	return []V1LbControllerTransportMode{
		V1LbControllerTransportModeTCP,
		V1LbControllerTransportModeHTTP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s V1LbControllerTransportMode) MarshalText() ([]byte, error) {
	switch s {
	case V1LbControllerTransportModeTCP:
		return []byte(s), nil
	case V1LbControllerTransportModeHTTP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1LbControllerTransportMode) UnmarshalText(data []byte) error {
	switch V1LbControllerTransportMode(data) {
	case V1LbControllerTransportModeTCP:
		*s = V1LbControllerTransportModeTCP
		return nil
	case V1LbControllerTransportModeHTTP:
		*s = V1LbControllerTransportModeHTTP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/V1LbType
type V1LbType struct {
	// Allow / disallow traffic to be routed via IPv4.
	Ipv4 bool `json:"ipv4"`
	// Allow / disallow traffic to be routed via IPv6.
	Ipv6    bool            `json:"ipv6"`
	Details V1LbTypeDetails `json:"details"`
}

// GetIpv4 returns the value of Ipv4.
func (s *V1LbType) GetIpv4() bool {
	return s.Ipv4
}

// GetIpv6 returns the value of Ipv6.
func (s *V1LbType) GetIpv6() bool {
	return s.Ipv6
}

// GetDetails returns the value of Details.
func (s *V1LbType) GetDetails() V1LbTypeDetails {
	return s.Details
}

// SetIpv4 sets the value of Ipv4.
func (s *V1LbType) SetIpv4(val bool) {
	s.Ipv4 = val
}

// SetIpv6 sets the value of Ipv6.
func (s *V1LbType) SetIpv6(val bool) {
	s.Ipv6 = val
}

// SetDetails sets the value of Details.
func (s *V1LbType) SetDetails(val V1LbTypeDetails) {
	s.Details = val
}

// V1LbTypeDetails represents sum type.
type V1LbTypeDetails struct {
	Type       V1LbTypeDetailsType // switch on this field
	V1LbConfig V1LbConfig
}

// V1LbTypeDetailsType is oneOf type of V1LbTypeDetails.
type V1LbTypeDetailsType string

// Possible values for V1LbTypeDetailsType.
const (
	V1LbConfigV1LbTypeDetails V1LbTypeDetailsType = "V1LbConfig"
)

// IsV1LbConfig reports whether V1LbTypeDetails is V1LbConfig.
func (s V1LbTypeDetails) IsV1LbConfig() bool { return s.Type == V1LbConfigV1LbTypeDetails }

// SetV1LbConfig sets V1LbTypeDetails to V1LbConfig.
func (s *V1LbTypeDetails) SetV1LbConfig(v V1LbConfig) {
	s.Type = V1LbConfigV1LbTypeDetails
	s.V1LbConfig = v
}

// GetV1LbConfig returns V1LbConfig and true boolean if V1LbTypeDetails is V1LbConfig.
func (s V1LbTypeDetails) GetV1LbConfig() (v V1LbConfig, ok bool) {
	if !s.IsV1LbConfig() {
		return v, false
	}
	return s.V1LbConfig, true
}

// NewV1LbConfigV1LbTypeDetails returns new V1LbTypeDetails from V1LbConfig.
func NewV1LbConfigV1LbTypeDetails(v V1LbConfig) V1LbTypeDetails {
	var s V1LbTypeDetails
	s.SetV1LbConfig(v)
	return s
}

type V1LbTypeType string

const (
	V1LbTypeTypeV1 V1LbTypeType = "v1"
)

// AllValues returns all V1LbTypeType values.
func (V1LbTypeType) AllValues() []V1LbTypeType {
	return []V1LbTypeType{
		V1LbTypeTypeV1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s V1LbTypeType) MarshalText() ([]byte, error) {
	switch s {
	case V1LbTypeTypeV1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *V1LbTypeType) UnmarshalText(data []byte) error {
	switch V1LbTypeType(data) {
	case V1LbTypeTypeV1:
		*s = V1LbTypeTypeV1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A summary of a VPN service for a given environment.
// Ref: #/components/schemas/VPNInfoReturn
type VPNInfoReturn struct {
	// A url associated with the VPN service.
	URL     string                  `json:"url"`
	Service NilVPNInfoReturnService `json:"service"`
}

// GetURL returns the value of URL.
func (s *VPNInfoReturn) GetURL() string {
	return s.URL
}

// GetService returns the value of Service.
func (s *VPNInfoReturn) GetService() NilVPNInfoReturnService {
	return s.Service
}

// SetURL sets the value of URL.
func (s *VPNInfoReturn) SetURL(val string) {
	s.URL = val
}

// SetService sets the value of Service.
func (s *VPNInfoReturn) SetService(val NilVPNInfoReturnService) {
	s.Service = val
}

// Information about the environments vpn service(s).
type VPNInfoReturnService struct {
	// Whether or not the VPN service is enabled.
	Enable bool `json:"enable"`
	// The ID of the VPN service container.
	ContainerID string `json:"container_id"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptBool `json:"auto_update"`
	// The config object for the VPN service.
	Config NilVPNInfoReturnServiceConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *VPNInfoReturnService) GetEnable() bool {
	return s.Enable
}

// GetContainerID returns the value of ContainerID.
func (s *VPNInfoReturnService) GetContainerID() string {
	return s.ContainerID
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *VPNInfoReturnService) GetAutoUpdate() OptBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *VPNInfoReturnService) GetConfig() NilVPNInfoReturnServiceConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *VPNInfoReturnService) SetEnable(val bool) {
	s.Enable = val
}

// SetContainerID sets the value of ContainerID.
func (s *VPNInfoReturnService) SetContainerID(val string) {
	s.ContainerID = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *VPNInfoReturnService) SetAutoUpdate(val OptBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *VPNInfoReturnService) SetConfig(val NilVPNInfoReturnServiceConfig) {
	s.Config = val
}

// The config object for the VPN service.
type VPNInfoReturnServiceConfig struct {
	// If true, routes all traffic through the VPN, even non-Cycle traffic.
	AllowInternet bool `json:"allow_internet"`
	// Auth configuration for the VPN.
	Auth VPNInfoReturnServiceConfigAuth `json:"auth"`
}

// GetAllowInternet returns the value of AllowInternet.
func (s *VPNInfoReturnServiceConfig) GetAllowInternet() bool {
	return s.AllowInternet
}

// GetAuth returns the value of Auth.
func (s *VPNInfoReturnServiceConfig) GetAuth() VPNInfoReturnServiceConfigAuth {
	return s.Auth
}

// SetAllowInternet sets the value of AllowInternet.
func (s *VPNInfoReturnServiceConfig) SetAllowInternet(val bool) {
	s.AllowInternet = val
}

// SetAuth sets the value of Auth.
func (s *VPNInfoReturnServiceConfig) SetAuth(val VPNInfoReturnServiceConfigAuth) {
	s.Auth = val
}

// Auth configuration for the VPN.
type VPNInfoReturnServiceConfigAuth struct {
	// A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should
	// return a 200 status if the login is permitted.
	Webhook NilString `json:"webhook"`
	// If true, allows any Cycle account with access to the environment to log in to the VPN using their
	// Cycle email and password.
	CycleAccounts bool `json:"cycle_accounts"`
	// If true, allows the custom VPN accounts to log in to the VPN.
	VpnAccounts OptBool `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *VPNInfoReturnServiceConfigAuth) GetWebhook() NilString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *VPNInfoReturnServiceConfigAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *VPNInfoReturnServiceConfigAuth) GetVpnAccounts() OptBool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *VPNInfoReturnServiceConfigAuth) SetWebhook(val NilString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *VPNInfoReturnServiceConfigAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *VPNInfoReturnServiceConfigAuth) SetVpnAccounts(val OptBool) {
	s.VpnAccounts = val
}

// A VPN login event record.
// Ref: #/components/schemas/VPNLogin
type VPNLogin struct {
	ID ID `json:"id"`
	// The username used when logging in.
	Username string `json:"username"`
	// The ID of the environment the VPN service is in.
	EnvironmentID string `json:"environment_id"`
	// The IP address of the machine the user has logged in from.
	IP   string   `json:"ip"`
	Time DateTime `json:"time"`
	// A boolean where true means the login attempt was successful.
	Success bool `json:"success"`
}

// GetID returns the value of ID.
func (s *VPNLogin) GetID() ID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *VPNLogin) GetUsername() string {
	return s.Username
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *VPNLogin) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetIP returns the value of IP.
func (s *VPNLogin) GetIP() string {
	return s.IP
}

// GetTime returns the value of Time.
func (s *VPNLogin) GetTime() DateTime {
	return s.Time
}

// GetSuccess returns the value of Success.
func (s *VPNLogin) GetSuccess() bool {
	return s.Success
}

// SetID sets the value of ID.
func (s *VPNLogin) SetID(val ID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *VPNLogin) SetUsername(val string) {
	s.Username = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *VPNLogin) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetIP sets the value of IP.
func (s *VPNLogin) SetIP(val string) {
	s.IP = val
}

// SetTime sets the value of Time.
func (s *VPNLogin) SetTime(val DateTime) {
	s.Time = val
}

// SetSuccess sets the value of Success.
func (s *VPNLogin) SetSuccess(val bool) {
	s.Success = val
}

// A VPN user for a given VPN.
// Ref: #/components/schemas/VPNUsers
type VPNUsers struct {
	ID ID `json:"id"`
	// The username for the login.
	Username  string       `json:"username"`
	Creator   CreatorScope `json:"creator"`
	LastLogin DateTime     `json:"last_login"`
	HubID     HubID        `json:"hub_id"`
	// An identifier for the environment the VPN service is associated with.
	EnvironmentID string `json:"environment_id"`
	// A collection of timestamps for each event in the VPN user's lifetime.
	Events VPNUsersEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *VPNUsers) GetID() ID {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *VPNUsers) GetUsername() string {
	return s.Username
}

// GetCreator returns the value of Creator.
func (s *VPNUsers) GetCreator() CreatorScope {
	return s.Creator
}

// GetLastLogin returns the value of LastLogin.
func (s *VPNUsers) GetLastLogin() DateTime {
	return s.LastLogin
}

// GetHubID returns the value of HubID.
func (s *VPNUsers) GetHubID() HubID {
	return s.HubID
}

// GetEnvironmentID returns the value of EnvironmentID.
func (s *VPNUsers) GetEnvironmentID() string {
	return s.EnvironmentID
}

// GetEvents returns the value of Events.
func (s *VPNUsers) GetEvents() VPNUsersEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *VPNUsers) SetID(val ID) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *VPNUsers) SetUsername(val string) {
	s.Username = val
}

// SetCreator sets the value of Creator.
func (s *VPNUsers) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetLastLogin sets the value of LastLogin.
func (s *VPNUsers) SetLastLogin(val DateTime) {
	s.LastLogin = val
}

// SetHubID sets the value of HubID.
func (s *VPNUsers) SetHubID(val HubID) {
	s.HubID = val
}

// SetEnvironmentID sets the value of EnvironmentID.
func (s *VPNUsers) SetEnvironmentID(val string) {
	s.EnvironmentID = val
}

// SetEvents sets the value of Events.
func (s *VPNUsers) SetEvents(val VPNUsersEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the VPN user's lifetime.
type VPNUsersEvents struct {
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Deleted DateTime `json:"deleted"`
}

// GetCreated returns the value of Created.
func (s *VPNUsersEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *VPNUsersEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *VPNUsersEvents) GetDeleted() DateTime {
	return s.Deleted
}

// SetCreated sets the value of Created.
func (s *VPNUsersEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *VPNUsersEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *VPNUsersEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

type Version string

// A summary of relevant volume information.
// Ref: #/components/schemas/VolumeSummary
type VolumeSummary struct {
	ID ID `json:"id"`
	// A unique hash for the given volume.
	Hash   string          `json:"hash"`
	Config ContainerVolume `json:"config"`
}

// GetID returns the value of ID.
func (s *VolumeSummary) GetID() ID {
	return s.ID
}

// GetHash returns the value of Hash.
func (s *VolumeSummary) GetHash() string {
	return s.Hash
}

// GetConfig returns the value of Config.
func (s *VolumeSummary) GetConfig() ContainerVolume {
	return s.Config
}

// SetID sets the value of ID.
func (s *VolumeSummary) SetID(val ID) {
	s.ID = val
}

// SetHash sets the value of Hash.
func (s *VolumeSummary) SetHash(val string) {
	s.Hash = val
}

// SetConfig sets the value of Config.
func (s *VolumeSummary) SetConfig(val ContainerVolume) {
	s.Config = val
}

// Ref: #/components/schemas/VpnReconfigureTask
type VpnReconfigureTask struct {
	// Additional information the platform needs to create this job.
	Contents VpnReconfigureTaskContents `json:"contents"`
}

// GetContents returns the value of Contents.
func (s *VpnReconfigureTask) GetContents() VpnReconfigureTaskContents {
	return s.Contents
}

// SetContents sets the value of Contents.
func (s *VpnReconfigureTask) SetContents(val VpnReconfigureTaskContents) {
	s.Contents = val
}

// The action to take.
type VpnReconfigureTaskAction string

const (
	VpnReconfigureTaskActionReconfigure VpnReconfigureTaskAction = "reconfigure"
)

// AllValues returns all VpnReconfigureTaskAction values.
func (VpnReconfigureTaskAction) AllValues() []VpnReconfigureTaskAction {
	return []VpnReconfigureTaskAction{
		VpnReconfigureTaskActionReconfigure,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VpnReconfigureTaskAction) MarshalText() ([]byte, error) {
	switch s {
	case VpnReconfigureTaskActionReconfigure:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VpnReconfigureTaskAction) UnmarshalText(data []byte) error {
	switch VpnReconfigureTaskAction(data) {
	case VpnReconfigureTaskActionReconfigure:
		*s = VpnReconfigureTaskActionReconfigure
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional information the platform needs to create this job.
type VpnReconfigureTaskContents struct {
	// A boolean where true means the VPN service is enabled.
	Enable OptBool `json:"enable"`
	// A boolean where `true` represents the desire to run the environment vpn service in high
	// availability mode.
	HighAvailability OptNilBool `json:"high_availability"`
	// A boolean representing if this service container is set to autoupdate or not.
	AutoUpdate OptNilBool `json:"auto_update"`
	// The config object for the VPN service, in this case without the required fields normally found in
	// a VPN config object.
	Config OptNilVpnReconfigureTaskContentsConfig `json:"config"`
}

// GetEnable returns the value of Enable.
func (s *VpnReconfigureTaskContents) GetEnable() OptBool {
	return s.Enable
}

// GetHighAvailability returns the value of HighAvailability.
func (s *VpnReconfigureTaskContents) GetHighAvailability() OptNilBool {
	return s.HighAvailability
}

// GetAutoUpdate returns the value of AutoUpdate.
func (s *VpnReconfigureTaskContents) GetAutoUpdate() OptNilBool {
	return s.AutoUpdate
}

// GetConfig returns the value of Config.
func (s *VpnReconfigureTaskContents) GetConfig() OptNilVpnReconfigureTaskContentsConfig {
	return s.Config
}

// SetEnable sets the value of Enable.
func (s *VpnReconfigureTaskContents) SetEnable(val OptBool) {
	s.Enable = val
}

// SetHighAvailability sets the value of HighAvailability.
func (s *VpnReconfigureTaskContents) SetHighAvailability(val OptNilBool) {
	s.HighAvailability = val
}

// SetAutoUpdate sets the value of AutoUpdate.
func (s *VpnReconfigureTaskContents) SetAutoUpdate(val OptNilBool) {
	s.AutoUpdate = val
}

// SetConfig sets the value of Config.
func (s *VpnReconfigureTaskContents) SetConfig(val OptNilVpnReconfigureTaskContentsConfig) {
	s.Config = val
}

// The config object for the VPN service, in this case without the required fields normally found in
// a VPN config object.
type VpnReconfigureTaskContentsConfig struct {
	// If true, routes all traffic through the VPN, even non-Cycle traffic.
	AllowInternet OptBool `json:"allow_internet"`
	// Auth configuration for the VPN.
	Auth OptVpnReconfigureTaskContentsConfigAuth `json:"auth"`
}

// GetAllowInternet returns the value of AllowInternet.
func (s *VpnReconfigureTaskContentsConfig) GetAllowInternet() OptBool {
	return s.AllowInternet
}

// GetAuth returns the value of Auth.
func (s *VpnReconfigureTaskContentsConfig) GetAuth() OptVpnReconfigureTaskContentsConfigAuth {
	return s.Auth
}

// SetAllowInternet sets the value of AllowInternet.
func (s *VpnReconfigureTaskContentsConfig) SetAllowInternet(val OptBool) {
	s.AllowInternet = val
}

// SetAuth sets the value of Auth.
func (s *VpnReconfigureTaskContentsConfig) SetAuth(val OptVpnReconfigureTaskContentsConfigAuth) {
	s.Auth = val
}

// Auth configuration for the VPN.
type VpnReconfigureTaskContentsConfigAuth struct {
	// A webhook endpoint to hit. Will be passed the login credentials provided to the user, and should
	// return a 200 status if the login is permitted.
	Webhook NilString `json:"webhook"`
	// If true, allows any Cycle account with access to the environment to log in to the VPN using their
	// Cycle email and password.
	CycleAccounts bool `json:"cycle_accounts"`
	// If true, allows the custom VPN accounts to log in to the VPN.
	VpnAccounts OptBool `json:"vpn_accounts"`
}

// GetWebhook returns the value of Webhook.
func (s *VpnReconfigureTaskContentsConfigAuth) GetWebhook() NilString {
	return s.Webhook
}

// GetCycleAccounts returns the value of CycleAccounts.
func (s *VpnReconfigureTaskContentsConfigAuth) GetCycleAccounts() bool {
	return s.CycleAccounts
}

// GetVpnAccounts returns the value of VpnAccounts.
func (s *VpnReconfigureTaskContentsConfigAuth) GetVpnAccounts() OptBool {
	return s.VpnAccounts
}

// SetWebhook sets the value of Webhook.
func (s *VpnReconfigureTaskContentsConfigAuth) SetWebhook(val NilString) {
	s.Webhook = val
}

// SetCycleAccounts sets the value of CycleAccounts.
func (s *VpnReconfigureTaskContentsConfigAuth) SetCycleAccounts(val bool) {
	s.CycleAccounts = val
}

// SetVpnAccounts sets the value of VpnAccounts.
func (s *VpnReconfigureTaskContentsConfigAuth) SetVpnAccounts(val OptBool) {
	s.VpnAccounts = val
}

// This will reset the VPN certificates and restart the container. Should be done when the
// certificates expire, every 1000 days. Then, you will need to redownload the VPN config in order to
// connect.
// Ref: #/components/schemas/VpnResetTask
type VpnResetTask struct{}

// The name of the action to perform.
type VpnResetTaskAction string

const (
	VpnResetTaskActionReset VpnResetTaskAction = "reset"
)

// AllValues returns all VpnResetTaskAction values.
func (VpnResetTaskAction) AllValues() []VpnResetTaskAction {
	return []VpnResetTaskAction{
		VpnResetTaskActionReset,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VpnResetTaskAction) MarshalText() ([]byte, error) {
	switch s {
	case VpnResetTaskActionReset:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VpnResetTaskAction) UnmarshalText(data []byte) error {
	switch VpnResetTaskAction(data) {
	case VpnResetTaskActionReset:
		*s = VpnResetTaskActionReset
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A pipeline step that will make a GET request to the specified endpoint.
// Ref: #/components/schemas/WebhookGetStep
type WebhookGetStep struct {
	// An identifier for the step.
	Identifier OptString                `json:"identifier"`
	Options    OptWebhookGetStepOptions `json:"options"`
	Details    WebhookGetStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *WebhookGetStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *WebhookGetStep) GetOptions() OptWebhookGetStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *WebhookGetStep) GetDetails() WebhookGetStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *WebhookGetStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *WebhookGetStep) SetOptions(val OptWebhookGetStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *WebhookGetStep) SetDetails(val WebhookGetStepDetails) {
	s.Details = val
}

// The action that the step takes.
type WebhookGetStepAction string

const (
	WebhookGetStepActionWebhookGet WebhookGetStepAction = "webhook.get"
)

// AllValues returns all WebhookGetStepAction values.
func (WebhookGetStepAction) AllValues() []WebhookGetStepAction {
	return []WebhookGetStepAction{
		WebhookGetStepActionWebhookGet,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookGetStepAction) MarshalText() ([]byte, error) {
	switch s {
	case WebhookGetStepActionWebhookGet:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookGetStepAction) UnmarshalText(data []byte) error {
	switch WebhookGetStepAction(data) {
	case WebhookGetStepActionWebhookGet:
		*s = WebhookGetStepActionWebhookGet
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type WebhookGetStepDetails struct {
	// The url to submit a POST request to.
	URL string `json:"url"`
	// An optional map of headers to send with the request.
	Headers OptNilWebhookGetStepDetailsHeaders `json:"headers"`
	Options OptNilWebhookGetStepDetailsOptions `json:"options"`
}

// GetURL returns the value of URL.
func (s *WebhookGetStepDetails) GetURL() string {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *WebhookGetStepDetails) GetHeaders() OptNilWebhookGetStepDetailsHeaders {
	return s.Headers
}

// GetOptions returns the value of Options.
func (s *WebhookGetStepDetails) GetOptions() OptNilWebhookGetStepDetailsOptions {
	return s.Options
}

// SetURL sets the value of URL.
func (s *WebhookGetStepDetails) SetURL(val string) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookGetStepDetails) SetHeaders(val OptNilWebhookGetStepDetailsHeaders) {
	s.Headers = val
}

// SetOptions sets the value of Options.
func (s *WebhookGetStepDetails) SetOptions(val OptNilWebhookGetStepDetailsOptions) {
	s.Options = val
}

// An optional map of headers to send with the request.
type WebhookGetStepDetailsHeaders map[string]string

func (s *WebhookGetStepDetailsHeaders) init() WebhookGetStepDetailsHeaders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Options for configuring webhook pipeline steps.
type WebhookGetStepDetailsOptions struct {
	MaxAttempts OptNilInt `json:"max_attempts"`
	// How long to wait between retries on wait.
	Interval OptNilString                              `json:"interval"`
	FailOn   OptNilWebhookGetStepDetailsOptionsFailOn  `json:"fail_on"`
	RetryOn  OptNilWebhookGetStepDetailsOptionsRetryOn `json:"retry_on"`
}

// GetMaxAttempts returns the value of MaxAttempts.
func (s *WebhookGetStepDetailsOptions) GetMaxAttempts() OptNilInt {
	return s.MaxAttempts
}

// GetInterval returns the value of Interval.
func (s *WebhookGetStepDetailsOptions) GetInterval() OptNilString {
	return s.Interval
}

// GetFailOn returns the value of FailOn.
func (s *WebhookGetStepDetailsOptions) GetFailOn() OptNilWebhookGetStepDetailsOptionsFailOn {
	return s.FailOn
}

// GetRetryOn returns the value of RetryOn.
func (s *WebhookGetStepDetailsOptions) GetRetryOn() OptNilWebhookGetStepDetailsOptionsRetryOn {
	return s.RetryOn
}

// SetMaxAttempts sets the value of MaxAttempts.
func (s *WebhookGetStepDetailsOptions) SetMaxAttempts(val OptNilInt) {
	s.MaxAttempts = val
}

// SetInterval sets the value of Interval.
func (s *WebhookGetStepDetailsOptions) SetInterval(val OptNilString) {
	s.Interval = val
}

// SetFailOn sets the value of FailOn.
func (s *WebhookGetStepDetailsOptions) SetFailOn(val OptNilWebhookGetStepDetailsOptionsFailOn) {
	s.FailOn = val
}

// SetRetryOn sets the value of RetryOn.
func (s *WebhookGetStepDetailsOptions) SetRetryOn(val OptNilWebhookGetStepDetailsOptionsRetryOn) {
	s.RetryOn = val
}

type WebhookGetStepDetailsOptionsFailOn struct {
	// If true, will fail on any codes NOT defined in the http_codes array.
	Not bool `json:"not"`
	// A list of http response codes that will trigger a failure.
	HTTPCodes OptNilIntArray `json:"http_codes"`
}

// GetNot returns the value of Not.
func (s *WebhookGetStepDetailsOptionsFailOn) GetNot() bool {
	return s.Not
}

// GetHTTPCodes returns the value of HTTPCodes.
func (s *WebhookGetStepDetailsOptionsFailOn) GetHTTPCodes() OptNilIntArray {
	return s.HTTPCodes
}

// SetNot sets the value of Not.
func (s *WebhookGetStepDetailsOptionsFailOn) SetNot(val bool) {
	s.Not = val
}

// SetHTTPCodes sets the value of HTTPCodes.
func (s *WebhookGetStepDetailsOptionsFailOn) SetHTTPCodes(val OptNilIntArray) {
	s.HTTPCodes = val
}

type WebhookGetStepDetailsOptionsRetryOn struct {
	// If true, will retry on any codes NOT defined in the http_codes array.
	Not bool `json:"not"`
	// A list of http response codes that will trigger a retry.
	HTTPCodes OptNilIntArray `json:"http_codes"`
}

// GetNot returns the value of Not.
func (s *WebhookGetStepDetailsOptionsRetryOn) GetNot() bool {
	return s.Not
}

// GetHTTPCodes returns the value of HTTPCodes.
func (s *WebhookGetStepDetailsOptionsRetryOn) GetHTTPCodes() OptNilIntArray {
	return s.HTTPCodes
}

// SetNot sets the value of Not.
func (s *WebhookGetStepDetailsOptionsRetryOn) SetNot(val bool) {
	s.Not = val
}

// SetHTTPCodes sets the value of HTTPCodes.
func (s *WebhookGetStepDetailsOptionsRetryOn) SetHTTPCodes(val OptNilIntArray) {
	s.HTTPCodes = val
}

type WebhookGetStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *WebhookGetStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *WebhookGetStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// A pipeline step that will make a POST request to the specified endpoints. The webhook will post
// the full body of the resource referenced by the step.
// For example if you were to reference a step creating a container, you would receive that container
// object in the post body.
// You may also specify a custom body instead.
// Ref: #/components/schemas/WebhookPostStep
type WebhookPostStep struct {
	// An identifier for the step.
	Identifier OptString                 `json:"identifier"`
	Options    OptWebhookPostStepOptions `json:"options"`
	Details    WebhookPostStepDetails    `json:"details"`
}

// GetIdentifier returns the value of Identifier.
func (s *WebhookPostStep) GetIdentifier() OptString {
	return s.Identifier
}

// GetOptions returns the value of Options.
func (s *WebhookPostStep) GetOptions() OptWebhookPostStepOptions {
	return s.Options
}

// GetDetails returns the value of Details.
func (s *WebhookPostStep) GetDetails() WebhookPostStepDetails {
	return s.Details
}

// SetIdentifier sets the value of Identifier.
func (s *WebhookPostStep) SetIdentifier(val OptString) {
	s.Identifier = val
}

// SetOptions sets the value of Options.
func (s *WebhookPostStep) SetOptions(val OptWebhookPostStepOptions) {
	s.Options = val
}

// SetDetails sets the value of Details.
func (s *WebhookPostStep) SetDetails(val WebhookPostStepDetails) {
	s.Details = val
}

// The action that the step takes.
type WebhookPostStepAction string

const (
	WebhookPostStepActionWebhookPost WebhookPostStepAction = "webhook.post"
)

// AllValues returns all WebhookPostStepAction values.
func (WebhookPostStepAction) AllValues() []WebhookPostStepAction {
	return []WebhookPostStepAction{
		WebhookPostStepActionWebhookPost,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookPostStepAction) MarshalText() ([]byte, error) {
	switch s {
	case WebhookPostStepActionWebhookPost:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookPostStepAction) UnmarshalText(data []byte) error {
	switch WebhookPostStepAction(data) {
	case WebhookPostStepActionWebhookPost:
		*s = WebhookPostStepActionWebhookPost
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type WebhookPostStepDetails struct {
	// The url to submit a POST request to.
	URL string `json:"url"`
	// An optional map of headers to send with the request.
	Headers OptNilWebhookPostStepDetailsHeaders `json:"headers"`
	Options OptNilWebhookPostStepDetailsOptions `json:"options"`
	// An optional POST body to send with the request. Cannot be used with `from``.
	Body OptNilString `json:"body"`
	// Takes the output from a previous step and uses it as the body for the POST request. Cannot be used
	// with `body`. String format is <stageIdentifier/stepIdentifier>.
	From OptNilString `json:"from"`
}

// GetURL returns the value of URL.
func (s *WebhookPostStepDetails) GetURL() string {
	return s.URL
}

// GetHeaders returns the value of Headers.
func (s *WebhookPostStepDetails) GetHeaders() OptNilWebhookPostStepDetailsHeaders {
	return s.Headers
}

// GetOptions returns the value of Options.
func (s *WebhookPostStepDetails) GetOptions() OptNilWebhookPostStepDetailsOptions {
	return s.Options
}

// GetBody returns the value of Body.
func (s *WebhookPostStepDetails) GetBody() OptNilString {
	return s.Body
}

// GetFrom returns the value of From.
func (s *WebhookPostStepDetails) GetFrom() OptNilString {
	return s.From
}

// SetURL sets the value of URL.
func (s *WebhookPostStepDetails) SetURL(val string) {
	s.URL = val
}

// SetHeaders sets the value of Headers.
func (s *WebhookPostStepDetails) SetHeaders(val OptNilWebhookPostStepDetailsHeaders) {
	s.Headers = val
}

// SetOptions sets the value of Options.
func (s *WebhookPostStepDetails) SetOptions(val OptNilWebhookPostStepDetailsOptions) {
	s.Options = val
}

// SetBody sets the value of Body.
func (s *WebhookPostStepDetails) SetBody(val OptNilString) {
	s.Body = val
}

// SetFrom sets the value of From.
func (s *WebhookPostStepDetails) SetFrom(val OptNilString) {
	s.From = val
}

// An optional map of headers to send with the request.
type WebhookPostStepDetailsHeaders map[string]string

func (s *WebhookPostStepDetailsHeaders) init() WebhookPostStepDetailsHeaders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Options for configuring webhook pipeline steps.
type WebhookPostStepDetailsOptions struct {
	MaxAttempts OptNilInt `json:"max_attempts"`
	// How long to wait between retries on wait.
	Interval OptNilString                               `json:"interval"`
	FailOn   OptNilWebhookPostStepDetailsOptionsFailOn  `json:"fail_on"`
	RetryOn  OptNilWebhookPostStepDetailsOptionsRetryOn `json:"retry_on"`
}

// GetMaxAttempts returns the value of MaxAttempts.
func (s *WebhookPostStepDetailsOptions) GetMaxAttempts() OptNilInt {
	return s.MaxAttempts
}

// GetInterval returns the value of Interval.
func (s *WebhookPostStepDetailsOptions) GetInterval() OptNilString {
	return s.Interval
}

// GetFailOn returns the value of FailOn.
func (s *WebhookPostStepDetailsOptions) GetFailOn() OptNilWebhookPostStepDetailsOptionsFailOn {
	return s.FailOn
}

// GetRetryOn returns the value of RetryOn.
func (s *WebhookPostStepDetailsOptions) GetRetryOn() OptNilWebhookPostStepDetailsOptionsRetryOn {
	return s.RetryOn
}

// SetMaxAttempts sets the value of MaxAttempts.
func (s *WebhookPostStepDetailsOptions) SetMaxAttempts(val OptNilInt) {
	s.MaxAttempts = val
}

// SetInterval sets the value of Interval.
func (s *WebhookPostStepDetailsOptions) SetInterval(val OptNilString) {
	s.Interval = val
}

// SetFailOn sets the value of FailOn.
func (s *WebhookPostStepDetailsOptions) SetFailOn(val OptNilWebhookPostStepDetailsOptionsFailOn) {
	s.FailOn = val
}

// SetRetryOn sets the value of RetryOn.
func (s *WebhookPostStepDetailsOptions) SetRetryOn(val OptNilWebhookPostStepDetailsOptionsRetryOn) {
	s.RetryOn = val
}

type WebhookPostStepDetailsOptionsFailOn struct {
	// If true, will fail on any codes NOT defined in the http_codes array.
	Not bool `json:"not"`
	// A list of http response codes that will trigger a failure.
	HTTPCodes OptNilIntArray `json:"http_codes"`
}

// GetNot returns the value of Not.
func (s *WebhookPostStepDetailsOptionsFailOn) GetNot() bool {
	return s.Not
}

// GetHTTPCodes returns the value of HTTPCodes.
func (s *WebhookPostStepDetailsOptionsFailOn) GetHTTPCodes() OptNilIntArray {
	return s.HTTPCodes
}

// SetNot sets the value of Not.
func (s *WebhookPostStepDetailsOptionsFailOn) SetNot(val bool) {
	s.Not = val
}

// SetHTTPCodes sets the value of HTTPCodes.
func (s *WebhookPostStepDetailsOptionsFailOn) SetHTTPCodes(val OptNilIntArray) {
	s.HTTPCodes = val
}

type WebhookPostStepDetailsOptionsRetryOn struct {
	// If true, will retry on any codes NOT defined in the http_codes array.
	Not bool `json:"not"`
	// A list of http response codes that will trigger a retry.
	HTTPCodes OptNilIntArray `json:"http_codes"`
}

// GetNot returns the value of Not.
func (s *WebhookPostStepDetailsOptionsRetryOn) GetNot() bool {
	return s.Not
}

// GetHTTPCodes returns the value of HTTPCodes.
func (s *WebhookPostStepDetailsOptionsRetryOn) GetHTTPCodes() OptNilIntArray {
	return s.HTTPCodes
}

// SetNot sets the value of Not.
func (s *WebhookPostStepDetailsOptionsRetryOn) SetNot(val bool) {
	s.Not = val
}

// SetHTTPCodes sets the value of HTTPCodes.
func (s *WebhookPostStepDetailsOptionsRetryOn) SetHTTPCodes(val OptNilIntArray) {
	s.HTTPCodes = val
}

type WebhookPostStepOptions struct {
	Skip OptBool `json:"skip"`
}

// GetSkip returns the value of Skip.
func (s *WebhookPostStepOptions) GetSkip() OptBool {
	return s.Skip
}

// SetSkip sets the value of Skip.
func (s *WebhookPostStepOptions) SetSkip(val OptBool) {
	s.Skip = val
}

// DNS (Domain Name System), in short, is a decentralized naming system for computers, services, or
// other resources connected to the internet or a private network. It is what allows the translation
// of a URL, such as http://example.com, to an IP address.
// Ref: #/components/schemas/Zone
type Zone struct {
	ID      ID           `json:"id"`
	HubID   HubID        `json:"hub_id"`
	Creator CreatorScope `json:"creator"`
	// The origin for the given DNS zone.
	Origin string `json:"origin"`
	// A boolean where true represents this zone is a hosted zone.
	Hosted bool      `json:"hosted"`
	State  ZoneState `json:"state"`
	// A collection of timestamps for each event in the DNS zone's lifetime.
	Events ZoneEvents `json:"events"`
}

// GetID returns the value of ID.
func (s *Zone) GetID() ID {
	return s.ID
}

// GetHubID returns the value of HubID.
func (s *Zone) GetHubID() HubID {
	return s.HubID
}

// GetCreator returns the value of Creator.
func (s *Zone) GetCreator() CreatorScope {
	return s.Creator
}

// GetOrigin returns the value of Origin.
func (s *Zone) GetOrigin() string {
	return s.Origin
}

// GetHosted returns the value of Hosted.
func (s *Zone) GetHosted() bool {
	return s.Hosted
}

// GetState returns the value of State.
func (s *Zone) GetState() ZoneState {
	return s.State
}

// GetEvents returns the value of Events.
func (s *Zone) GetEvents() ZoneEvents {
	return s.Events
}

// SetID sets the value of ID.
func (s *Zone) SetID(val ID) {
	s.ID = val
}

// SetHubID sets the value of HubID.
func (s *Zone) SetHubID(val HubID) {
	s.HubID = val
}

// SetCreator sets the value of Creator.
func (s *Zone) SetCreator(val CreatorScope) {
	s.Creator = val
}

// SetOrigin sets the value of Origin.
func (s *Zone) SetOrigin(val string) {
	s.Origin = val
}

// SetHosted sets the value of Hosted.
func (s *Zone) SetHosted(val bool) {
	s.Hosted = val
}

// SetState sets the value of State.
func (s *Zone) SetState(val ZoneState) {
	s.State = val
}

// SetEvents sets the value of Events.
func (s *Zone) SetEvents(val ZoneEvents) {
	s.Events = val
}

// A collection of timestamps for each event in the DNS zone's lifetime.
type ZoneEvents struct {
	Created          DateTime `json:"created"`
	Updated          DateTime `json:"updated"`
	Deleted          DateTime `json:"deleted"`
	LastVerification DateTime `json:"last_verification"`
	Verified         DateTime `json:"verified"`
}

// GetCreated returns the value of Created.
func (s *ZoneEvents) GetCreated() DateTime {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ZoneEvents) GetUpdated() DateTime {
	return s.Updated
}

// GetDeleted returns the value of Deleted.
func (s *ZoneEvents) GetDeleted() DateTime {
	return s.Deleted
}

// GetLastVerification returns the value of LastVerification.
func (s *ZoneEvents) GetLastVerification() DateTime {
	return s.LastVerification
}

// GetVerified returns the value of Verified.
func (s *ZoneEvents) GetVerified() DateTime {
	return s.Verified
}

// SetCreated sets the value of Created.
func (s *ZoneEvents) SetCreated(val DateTime) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ZoneEvents) SetUpdated(val DateTime) {
	s.Updated = val
}

// SetDeleted sets the value of Deleted.
func (s *ZoneEvents) SetDeleted(val DateTime) {
	s.Deleted = val
}

// SetLastVerification sets the value of LastVerification.
func (s *ZoneEvents) SetLastVerification(val DateTime) {
	s.LastVerification = val
}

// SetVerified sets the value of Verified.
func (s *ZoneEvents) SetVerified(val DateTime) {
	s.Verified = val
}

// All includable resources linkable to the given Zone.
// Ref: #/components/schemas/ZoneIncludes
type ZoneIncludes struct {
	Creators OptCreatorInclude `json:"creators"`
}

// GetCreators returns the value of Creators.
func (s *ZoneIncludes) GetCreators() OptCreatorInclude {
	return s.Creators
}

// SetCreators sets the value of Creators.
func (s *ZoneIncludes) SetCreators(val OptCreatorInclude) {
	s.Creators = val
}

// Merged schema.
// Ref: #/components/schemas/ZoneState
type ZoneState struct {
	// The current state of the zone.
	Current ZoneStateCurrent `json:"current"`
	Changed DateTime         `json:"changed"`
	// An error, if any, that has occurred for this resource.
	Error OptZoneStateError `json:"error"`
}

// GetCurrent returns the value of Current.
func (s *ZoneState) GetCurrent() ZoneStateCurrent {
	return s.Current
}

// GetChanged returns the value of Changed.
func (s *ZoneState) GetChanged() DateTime {
	return s.Changed
}

// GetError returns the value of Error.
func (s *ZoneState) GetError() OptZoneStateError {
	return s.Error
}

// SetCurrent sets the value of Current.
func (s *ZoneState) SetCurrent(val ZoneStateCurrent) {
	s.Current = val
}

// SetChanged sets the value of Changed.
func (s *ZoneState) SetChanged(val DateTime) {
	s.Changed = val
}

// SetError sets the value of Error.
func (s *ZoneState) SetError(val OptZoneStateError) {
	s.Error = val
}

// The current state of the zone.
type ZoneStateCurrent string

const (
	ZoneStateCurrentNew       ZoneStateCurrent = "new"
	ZoneStateCurrentPending   ZoneStateCurrent = "pending"
	ZoneStateCurrentVerifying ZoneStateCurrent = "verifying"
	ZoneStateCurrentLive      ZoneStateCurrent = "live"
	ZoneStateCurrentDisabled  ZoneStateCurrent = "disabled"
	ZoneStateCurrentDeleting  ZoneStateCurrent = "deleting"
	ZoneStateCurrentDeleted   ZoneStateCurrent = "deleted"
)

// AllValues returns all ZoneStateCurrent values.
func (ZoneStateCurrent) AllValues() []ZoneStateCurrent {
	return []ZoneStateCurrent{
		ZoneStateCurrentNew,
		ZoneStateCurrentPending,
		ZoneStateCurrentVerifying,
		ZoneStateCurrentLive,
		ZoneStateCurrentDisabled,
		ZoneStateCurrentDeleting,
		ZoneStateCurrentDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ZoneStateCurrent) MarshalText() ([]byte, error) {
	switch s {
	case ZoneStateCurrentNew:
		return []byte(s), nil
	case ZoneStateCurrentPending:
		return []byte(s), nil
	case ZoneStateCurrentVerifying:
		return []byte(s), nil
	case ZoneStateCurrentLive:
		return []byte(s), nil
	case ZoneStateCurrentDisabled:
		return []byte(s), nil
	case ZoneStateCurrentDeleting:
		return []byte(s), nil
	case ZoneStateCurrentDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ZoneStateCurrent) UnmarshalText(data []byte) error {
	switch ZoneStateCurrent(data) {
	case ZoneStateCurrentNew:
		*s = ZoneStateCurrentNew
		return nil
	case ZoneStateCurrentPending:
		*s = ZoneStateCurrentPending
		return nil
	case ZoneStateCurrentVerifying:
		*s = ZoneStateCurrentVerifying
		return nil
	case ZoneStateCurrentLive:
		*s = ZoneStateCurrentLive
		return nil
	case ZoneStateCurrentDisabled:
		*s = ZoneStateCurrentDisabled
		return nil
	case ZoneStateCurrentDeleting:
		*s = ZoneStateCurrentDeleting
		return nil
	case ZoneStateCurrentDeleted:
		*s = ZoneStateCurrentDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An error, if any, that has occurred for this resource.
type ZoneStateError struct {
	// Details about the error that has occurred.
	Message OptString   `json:"message"`
	Time    OptDateTime `json:"time"`
}

// GetMessage returns the value of Message.
func (s *ZoneStateError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *ZoneStateError) GetTime() OptDateTime {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *ZoneStateError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *ZoneStateError) SetTime(val OptDateTime) {
	s.Time = val
}
