// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes ContainersListServersPage as URI form.
func (s *ContainersListServersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfContainersListServersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes ContainersListServersPage from URI form.
func (s *ContainersListServersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContainersListServersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContainersListServersPage")
	}

	return nil
}

// EncodeURI encodes DNSTLSAttemptsPage as URI form.
func (s *DNSTLSAttemptsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfDNSTLSAttemptsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes DNSTLSAttemptsPage from URI form.
func (s *DNSTLSAttemptsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DNSTLSAttemptsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DNSTLSAttemptsPage")
	}

	return nil
}

// EncodeURI encodes GetAccountInvitesPage as URI form.
func (s *GetAccountInvitesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetAccountInvitesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetAccountInvitesPage from URI form.
func (s *GetAccountInvitesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAccountInvitesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAccountInvitesPage")
	}

	return nil
}

// EncodeURI encodes GetAccountLoginsPage as URI form.
func (s *GetAccountLoginsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetAccountLoginsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetAccountLoginsPage from URI form.
func (s *GetAccountLoginsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAccountLoginsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAccountLoginsPage")
	}

	return nil
}

// EncodeURI encodes GetAnnouncementsListPage as URI form.
func (s *GetAnnouncementsListPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetAnnouncementsListPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetAnnouncementsListPage from URI form.
func (s *GetAnnouncementsListPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetAnnouncementsListPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetAnnouncementsListPage")
	}

	return nil
}

// EncodeURI encodes GetApiKeysPage as URI form.
func (s *GetApiKeysPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetApiKeysPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetApiKeysPage from URI form.
func (s *GetApiKeysPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetApiKeysPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetApiKeysPage")
	}

	return nil
}

// EncodeURI encodes GetBackupsCollectionPage as URI form.
func (s *GetBackupsCollectionPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetBackupsCollectionPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetBackupsCollectionPage from URI form.
func (s *GetBackupsCollectionPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetBackupsCollectionPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetBackupsCollectionPage")
	}

	return nil
}

// EncodeURI encodes GetBillingMethodsPage as URI form.
func (s *GetBillingMethodsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetBillingMethodsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetBillingMethodsPage from URI form.
func (s *GetBillingMethodsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetBillingMethodsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetBillingMethodsPage")
	}

	return nil
}

// EncodeURI encodes GetBillingOveragesPage as URI form.
func (s *GetBillingOveragesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetBillingOveragesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetBillingOveragesPage from URI form.
func (s *GetBillingOveragesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetBillingOveragesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetBillingOveragesPage")
	}

	return nil
}

// EncodeURI encodes GetBillingServicesPage as URI form.
func (s *GetBillingServicesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetBillingServicesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetBillingServicesPage from URI form.
func (s *GetBillingServicesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetBillingServicesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetBillingServicesPage")
	}

	return nil
}

// EncodeURI encodes GetBillingSupportPlansPage as URI form.
func (s *GetBillingSupportPlansPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetBillingSupportPlansPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetBillingSupportPlansPage from URI form.
func (s *GetBillingSupportPlansPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetBillingSupportPlansPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetBillingSupportPlansPage")
	}

	return nil
}

// EncodeURI encodes GetCompatibleImagesPage as URI form.
func (s *GetCompatibleImagesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetCompatibleImagesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetCompatibleImagesPage from URI form.
func (s *GetCompatibleImagesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCompatibleImagesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCompatibleImagesPage")
	}

	return nil
}

// EncodeURI encodes GetContainerInstanceVolumesPage as URI form.
func (s *GetContainerInstanceVolumesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetContainerInstanceVolumesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetContainerInstanceVolumesPage from URI form.
func (s *GetContainerInstanceVolumesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetContainerInstanceVolumesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetContainerInstanceVolumesPage")
	}

	return nil
}

// EncodeURI encodes GetContainersPage as URI form.
func (s *GetContainersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetContainersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetContainersPage from URI form.
func (s *GetContainersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetContainersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetContainersPage")
	}

	return nil
}

// EncodeURI encodes GetCreditsPage as URI form.
func (s *GetCreditsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetCreditsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetCreditsPage from URI form.
func (s *GetCreditsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCreditsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCreditsPage")
	}

	return nil
}

// EncodeURI encodes GetEnvironmentsPage as URI form.
func (s *GetEnvironmentsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetEnvironmentsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetEnvironmentsPage from URI form.
func (s *GetEnvironmentsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetEnvironmentsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetEnvironmentsPage")
	}

	return nil
}

// EncodeURI encodes GetHubActivityPage as URI form.
func (s *GetHubActivityPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetHubActivityPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetHubActivityPage from URI form.
func (s *GetHubActivityPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetHubActivityPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetHubActivityPage")
	}

	return nil
}

// EncodeURI encodes GetHubInvitesPage as URI form.
func (s *GetHubInvitesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetHubInvitesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetHubInvitesPage from URI form.
func (s *GetHubInvitesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetHubInvitesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetHubInvitesPage")
	}

	return nil
}

// EncodeURI encodes GetHubMembersPage as URI form.
func (s *GetHubMembersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetHubMembersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetHubMembersPage from URI form.
func (s *GetHubMembersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetHubMembersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetHubMembersPage")
	}

	return nil
}

// EncodeURI encodes GetImagePage as URI form.
func (s *GetImagePage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetImagePage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetImagePage from URI form.
func (s *GetImagePage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImagePage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetImagePage")
	}

	return nil
}

// EncodeURI encodes GetImagesPage as URI form.
func (s *GetImagesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetImagesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetImagesPage from URI form.
func (s *GetImagesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImagesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetImagesPage")
	}

	return nil
}

// EncodeURI encodes GetInfrastructureIPPoolsPage as URI form.
func (s *GetInfrastructureIPPoolsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetInfrastructureIPPoolsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetInfrastructureIPPoolsPage from URI form.
func (s *GetInfrastructureIPPoolsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetInfrastructureIPPoolsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetInfrastructureIPPoolsPage")
	}

	return nil
}

// EncodeURI encodes GetInstancesPage as URI form.
func (s *GetInstancesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetInstancesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetInstancesPage from URI form.
func (s *GetInstancesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetInstancesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetInstancesPage")
	}

	return nil
}

// EncodeURI encodes GetInvoicesPage as URI form.
func (s *GetInvoicesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetInvoicesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetInvoicesPage from URI form.
func (s *GetInvoicesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetInvoicesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetInvoicesPage")
	}

	return nil
}

// EncodeURI encodes GetJobsPage as URI form.
func (s *GetJobsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetJobsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetJobsPage from URI form.
func (s *GetJobsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetJobsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetJobsPage")
	}

	return nil
}

// EncodeURI encodes GetNativeProvidersPage as URI form.
func (s *GetNativeProvidersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetNativeProvidersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetNativeProvidersPage from URI form.
func (s *GetNativeProvidersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetNativeProvidersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetNativeProvidersPage")
	}

	return nil
}

// EncodeURI encodes GetNetworksPage as URI form.
func (s *GetNetworksPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetNetworksPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetNetworksPage from URI form.
func (s *GetNetworksPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetNetworksPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetNetworksPage")
	}

	return nil
}

// EncodeURI encodes GetOrdersPage as URI form.
func (s *GetOrdersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetOrdersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetOrdersPage from URI form.
func (s *GetOrdersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetOrdersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetOrdersPage")
	}

	return nil
}

// EncodeURI encodes GetPipelineTriggerKeysPage as URI form.
func (s *GetPipelineTriggerKeysPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetPipelineTriggerKeysPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetPipelineTriggerKeysPage from URI form.
func (s *GetPipelineTriggerKeysPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPipelineTriggerKeysPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPipelineTriggerKeysPage")
	}

	return nil
}

// EncodeURI encodes GetPipelinesPage as URI form.
func (s *GetPipelinesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetPipelinesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetPipelinesPage from URI form.
func (s *GetPipelinesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetPipelinesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetPipelinesPage")
	}

	return nil
}

// EncodeURI encodes GetProviderLocationsPage as URI form.
func (s *GetProviderLocationsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetProviderLocationsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetProviderLocationsPage from URI form.
func (s *GetProviderLocationsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetProviderLocationsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetProviderLocationsPage")
	}

	return nil
}

// EncodeURI encodes GetProviderServersPage as URI form.
func (s *GetProviderServersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetProviderServersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetProviderServersPage from URI form.
func (s *GetProviderServersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetProviderServersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetProviderServersPage")
	}

	return nil
}

// EncodeURI encodes GetProvidersPage as URI form.
func (s *GetProvidersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetProvidersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetProvidersPage from URI form.
func (s *GetProvidersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetProvidersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetProvidersPage")
	}

	return nil
}

// EncodeURI encodes GetRecordsCollectionPage as URI form.
func (s *GetRecordsCollectionPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetRecordsCollectionPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetRecordsCollectionPage from URI form.
func (s *GetRecordsCollectionPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetRecordsCollectionPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetRecordsCollectionPage")
	}

	return nil
}

// EncodeURI encodes GetServerInstancesPage as URI form.
func (s *GetServerInstancesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetServerInstancesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetServerInstancesPage from URI form.
func (s *GetServerInstancesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetServerInstancesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetServerInstancesPage")
	}

	return nil
}

// EncodeURI encodes GetServerTelemeteryPage as URI form.
func (s *GetServerTelemeteryPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetServerTelemeteryPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetServerTelemeteryPage from URI form.
func (s *GetServerTelemeteryPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetServerTelemeteryPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetServerTelemeteryPage")
	}

	return nil
}

// EncodeURI encodes GetServersCollectionPage as URI form.
func (s *GetServersCollectionPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetServersCollectionPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetServersCollectionPage from URI form.
func (s *GetServersCollectionPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetServersCollectionPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetServersCollectionPage")
	}

	return nil
}

// EncodeURI encodes GetSourcesCollectionPage as URI form.
func (s *GetSourcesCollectionPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetSourcesCollectionPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetSourcesCollectionPage from URI form.
func (s *GetSourcesCollectionPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetSourcesCollectionPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetSourcesCollectionPage")
	}

	return nil
}

// EncodeURI encodes GetStackBuildsPage as URI form.
func (s *GetStackBuildsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetStackBuildsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetStackBuildsPage from URI form.
func (s *GetStackBuildsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetStackBuildsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetStackBuildsPage")
	}

	return nil
}

// EncodeURI encodes GetStacksPage as URI form.
func (s *GetStacksPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetStacksPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetStacksPage from URI form.
func (s *GetStacksPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetStacksPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetStacksPage")
	}

	return nil
}

// EncodeURI encodes GetUsableServersPage as URI form.
func (s *GetUsableServersPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetUsableServersPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetUsableServersPage from URI form.
func (s *GetUsableServersPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetUsableServersPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetUsableServersPage")
	}

	return nil
}

// EncodeURI encodes GetVpnLoginsPage as URI form.
func (s *GetVpnLoginsPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetVpnLoginsPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetVpnLoginsPage from URI form.
func (s *GetVpnLoginsPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVpnLoginsPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetVpnLoginsPage")
	}

	return nil
}

// EncodeURI encodes GetZonesCollectionPage as URI form.
func (s *GetZonesCollectionPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfGetZonesCollectionPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes GetZonesCollectionPage from URI form.
func (s *GetZonesCollectionPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetZonesCollectionPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetZonesCollectionPage")
	}

	return nil
}

// EncodeURI encodes ListScopedVariablesPage as URI form.
func (s *ListScopedVariablesPage) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("number", func(e uri.Encoder) error {
		if val, ok := s.Number.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"number\"")
	}
	if err := e.EncodeField("size", func(e uri.Encoder) error {
		if val, ok := s.Size.Get(); ok {
			return e.EncodeValue(conv.Float64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"size\"")
	}
	return nil
}

var uriFieldsNameOfListScopedVariablesPage = [2]string{
	0: "number",
	1: "size",
}

// DecodeURI decodes ListScopedVariablesPage from URI form.
func (s *ListScopedVariablesPage) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListScopedVariablesPage to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "number":
			if err := func() error {
				var sDotNumberVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Number.SetTo(sDotNumberVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "size":
			if err := func() error {
				var sDotSizeVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					sDotSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Size.SetTo(sDotSizeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"size\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListScopedVariablesPage")
	}

	return nil
}
