// Code generated by ogen, DO NOT EDIT.

package api

// ContainersListServersParams is parameters of ContainersListServers operation.
type ContainersListServersParams struct {
	// The ID of the requested container.
	ContainerId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []ContainersListServersMetaItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptContainersListServersPage
}

// CreateContainerInstanceParams is parameters of createContainerInstance operation.
type CreateContainerInstanceParams struct {
	// The ID of the container this instance is created from.
	ContainerId string
}

// CreateContainerInstanceJobParams is parameters of createContainerInstanceJob operation.
type CreateContainerInstanceJobParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// CreateContainerJobParams is parameters of createContainerJob operation.
type CreateContainerJobParams struct {
	// The ID of the requested container.
	ContainerId string
}

// CreateDNSRecordParams is parameters of createDNSRecord operation.
type CreateDNSRecordParams struct {
	// The ID of the zone.
	ZoneId string
}

// CreateEnvironmentJobParams is parameters of createEnvironmentJob operation.
type CreateEnvironmentJobParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// CreateImageJobParams is parameters of createImageJob operation.
type CreateImageJobParams struct {
	// The ID of the requested image.
	ImageId string
}

// CreateInvoiceJobParams is parameters of createInvoiceJob operation.
type CreateInvoiceJobParams struct {
	// The ID of the invoice.
	InvoiceId string
}

// CreateNetworkJobParams is parameters of createNetworkJob operation.
type CreateNetworkJobParams struct {
	// The ID of the network.
	NetworkId string
}

// CreateOrderJobParams is parameters of createOrderJob operation.
type CreateOrderJobParams struct {
	// The ID of the requested order.
	OrderId string
}

// CreatePipelineJobParams is parameters of createPipelineJob operation.
type CreatePipelineJobParams struct {
	// The ID of the pipeline.
	PipelineId string
}

// CreatePipelineTriggerKeyParams is parameters of createPipelineTriggerKey operation.
type CreatePipelineTriggerKeyParams struct {
	// The ID of the pipeline.
	PipelineId string
}

// CreateProviderJobParams is parameters of createProviderJob operation.
type CreateProviderJobParams struct {
	// The ID for the given provider.
	ProviderId string
}

// CreateScopedVariableParams is parameters of createScopedVariable operation.
type CreateScopedVariableParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// CreateServerJobParams is parameters of createServerJob operation.
type CreateServerJobParams struct {
	// The ID for the given server.
	ServerId string
}

// CreateStackBuildParams is parameters of createStackBuild operation.
type CreateStackBuildParams struct {
	// The ID of the stack.
	StackId string
}

// CreateStackBuildJobParams is parameters of createStackBuildJob operation.
type CreateStackBuildJobParams struct {
	// The ID of the stack.
	StackId string
	// The ID of the build.
	BuildId string
}

// CreateStackJobParams is parameters of createStackJob operation.
type CreateStackJobParams struct {
	// The ID of the stack.
	StackId string
}

// CreateVPNUserParams is parameters of createVPNUser operation.
type CreateVPNUserParams struct {
	// The environmentId where the VPN service resides.
	EnvironmentId string
}

// DNSRecordTaskParams is parameters of DNSRecordTask operation.
type DNSRecordTaskParams struct {
	// The ID of the zone.
	ZoneId string
	// The ID of the record.
	RecordId string
}

// DNSTLSAttemptsParams is parameters of DNSTLSAttempts operation.
type DNSTLSAttemptsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptDNSTLSAttemptsPage
}

// DNSZoneTaskParams is parameters of DNSZoneTask operation.
type DNSZoneTaskParams struct {
	// The ID of the zone.
	ZoneId string
}

// ExpireInstanceSSHTokensParams is parameters of expireInstanceSSHTokens operation.
type ExpireInstanceSSHTokensParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// FetchScopedVariableParams is parameters of fetchScopedVariable operation.
type FetchScopedVariableParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// The ID of the requested scoped variable.
	ScopedVariableId string
}

// GetAccountInvitesParams is parameters of getAccountInvites operation.
type GetAccountInvitesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetAccountInvitesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetAccountInvitesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAccountInvitesPage
}

// GetAccountLoginsParams is parameters of getAccountLogins operation.
type GetAccountLoginsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAccountLoginsPage
}

// GetAnnouncementsListParams is parameters of getAnnouncementsList operation.
type GetAnnouncementsListParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAnnouncementsListPage
}

// GetApiKeyParams is parameters of getApiKey operation.
type GetApiKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
}

// GetApiKeysParams is parameters of getApiKeys operation.
type GetApiKeysParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetApiKeysPage
}

// GetBackupParams is parameters of getBackup operation.
type GetBackupParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container backup.
	BackupId string
}

// GetBackupLogsParams is parameters of getBackupLogs operation.
type GetBackupLogsParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container backup.
	BackupId string
}

// GetBackupsCollectionParams is parameters of getBackupsCollection operation.
type GetBackupsCollectionParams struct {
	// The ID of the requested container.
	ContainerId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBackupsCollectionPage
}

// GetBillingMethodParams is parameters of getBillingMethod operation.
type GetBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// GetBillingMethodsParams is parameters of getBillingMethods operation.
type GetBillingMethodsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingMethodsPage
}

// GetBillingOrderParams is parameters of getBillingOrder operation.
type GetBillingOrderParams struct {
	// The ID of the billing order.
	OrderId string
}

// GetBillingOveragesParams is parameters of getBillingOverages operation.
type GetBillingOveragesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingOveragesPage
}

// GetBillingServiceParams is parameters of getBillingService operation.
type GetBillingServiceParams struct {
	// The ID of the billing service.
	ServicesId string
}

// GetBillingServicesParams is parameters of getBillingServices operation.
type GetBillingServicesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingServicesPage
}

// GetBillingSupportPlansParams is parameters of getBillingSupportPlans operation.
type GetBillingSupportPlansParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingSupportPlansPage
}

// GetCompatibleImagesParams is parameters of getCompatibleImages operation.
type GetCompatibleImagesParams struct {
	// The ID of the requested container.
	ContainerId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetCompatibleImagesPage
}

// GetContainerByIdParams is parameters of getContainerById operation.
type GetContainerByIdParams struct {
	// The ID of the requested container.
	ContainerId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetContainerByIdMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetContainerByIdIncludeItem
}

// GetContainerInstanceParams is parameters of getContainerInstance operation.
type GetContainerInstanceParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetContainerInstanceIncludeItem
}

// GetContainerInstanceVolumesParams is parameters of getContainerInstanceVolumes operation.
type GetContainerInstanceVolumesParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetContainerInstanceVolumesPage
}

// GetContainerInstancesTelemetryParams is parameters of getContainerInstancesTelemetry operation.
type GetContainerInstancesTelemetryParams struct {
	// The ID of the desired container.
	ContainerId string
}

// GetContainerSummaryParams is parameters of getContainerSummary operation.
type GetContainerSummaryParams struct {
	// The ID of the requested container.
	ContainerId string
}

// GetContainersParams is parameters of getContainers operation.
type GetContainersParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetContainersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetContainersIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetContainersPage
}

// GetCreditParams is parameters of getCredit operation.
type GetCreditParams struct {
	// The ID for a given credit.
	CreditsId string
}

// GetCreditsParams is parameters of getCredits operation.
type GetCreditsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetCreditsPage
}

// GetDNSZoneParams is parameters of getDNSZone operation.
type GetDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
}

// GetEnvironmentByIdParams is parameters of getEnvironmentById operation.
type GetEnvironmentByIdParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetEnvironmentByIdMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetEnvironmentByIdIncludeItem
}

// GetEnvironmentInstancesTelemetryParams is parameters of getEnvironmentInstancesTelemetry operation.
type GetEnvironmentInstancesTelemetryParams struct {
	// The ID of the desired environment.
	EnvironmentId string
}

// GetEnvironmentSummaryParams is parameters of getEnvironmentSummary operation.
type GetEnvironmentSummaryParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// GetEnvironmentsParams is parameters of getEnvironments operation.
type GetEnvironmentsParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetEnvironmentsMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetEnvironmentsIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetEnvironmentsPage
}

// GetHubParams is parameters of getHub operation.
type GetHubParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubMetaItem
}

// GetHubActivityParams is parameters of getHubActivity operation.
type GetHubActivityParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubActivityIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubActivityPage
}

// GetHubInvitesParams is parameters of getHubInvites operation.
type GetHubInvitesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubInvitesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubInvitesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubInvitesPage
}

// GetHubMemberParams is parameters of getHubMember operation.
type GetHubMemberParams struct {
	// The ID for the given member.
	MemberId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMemberIncludeItem
}

// GetHubMembersParams is parameters of getHubMembers operation.
type GetHubMembersParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubMembersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMembersIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubMembersPage
}

// GetHubMembersAccountParams is parameters of getHubMembersAccount operation.
type GetHubMembersAccountParams struct {
	// The ID of the member account.
	AccountId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubMembersAccountMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMembersAccountIncludeItem
}

// GetImageParams is parameters of getImage operation.
type GetImageParams struct {
	// The ID of the image.
	ImageId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImageMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImageIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetImagePage
}

// GetImageBuildLogParams is parameters of getImageBuildLog operation.
type GetImageBuildLogParams struct {
	// The ID of the image.
	ImageId string
}

// GetImagesParams is parameters of getImages operation.
type GetImagesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImagesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImagesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetImagesPage
}

// GetInfrastructureIPPoolParams is parameters of getInfrastructureIPPool operation.
type GetInfrastructureIPPoolParams struct {
	// The ID for the given pool.
	PoolId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInfrastructureIPPoolIncludeItem
}

// GetInfrastructureIPPoolsParams is parameters of getInfrastructureIPPools operation.
type GetInfrastructureIPPoolsParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInfrastructureIPPoolsIncludeItem
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInfrastructureIPPoolsPage
}

// GetInstanceResourcesTelemetryReportParams is parameters of getInstanceResourcesTelemetryReport operation.
type GetInstanceResourcesTelemetryReportParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// GetInstanceResourcesTelemetryStreamParams is parameters of getInstanceResourcesTelemetryStream operation.
type GetInstanceResourcesTelemetryStreamParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// GetInstancesParams is parameters of getInstances operation.
type GetInstancesParams struct {
	// The ID of the container this instance is created from.
	ContainerId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInstancesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInstancesPage
}

// GetInvoiceParams is parameters of getInvoice operation.
type GetInvoiceParams struct {
	// The ID of the invoice.
	InvoiceId string
}

// GetInvoicesParams is parameters of getInvoices operation.
type GetInvoicesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInvoicesPage
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetInvoicesMetaItem
}

// GetJobParams is parameters of getJob operation.
type GetJobParams struct {
	// The ID for the given job.
	JobId string
}

// GetJobsParams is parameters of getJobs operation.
type GetJobsParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetJobsIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetJobsPage
}

// GetLoadBalancerInfoParams is parameters of getLoadBalancerInfo operation.
type GetLoadBalancerInfoParams struct {
	// The environmentId where the load balancer resides.
	EnvironmentId string
}

// GetNativeProvidersParams is parameters of getNativeProviders operation.
type GetNativeProvidersParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetNativeProvidersMetaItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetNativeProvidersPage
}

// GetNetworkParams is parameters of getNetwork operation.
type GetNetworkParams struct {
	// The ID of the network.
	NetworkId string
}

// GetNetworksParams is parameters of getNetworks operation.
type GetNetworksParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetNetworksIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetNetworksPage
}

// GetOrdersParams is parameters of getOrders operation.
type GetOrdersParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetOrdersPage
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetOrdersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetOrdersIncludeItem
}

// GetPipelineParams is parameters of getPipeline operation.
type GetPipelineParams struct {
	// The ID of the pipeline.
	PipelineId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetPipelineIncludeItem
}

// GetPipelineRunsParams is parameters of getPipelineRuns operation.
type GetPipelineRunsParams struct {
	// The ID of the pipeline.
	PipelineId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetPipelineRunsIncludeItem
}

// GetPipelineTriggerKeyParams is parameters of getPipelineTriggerKey operation.
type GetPipelineTriggerKeyParams struct {
	// The ID of the pipeline.
	PipelineId string
	// The ID of the trigger key.
	TriggerKeyId string
}

// GetPipelineTriggerKeysParams is parameters of getPipelineTriggerKeys operation.
type GetPipelineTriggerKeysParams struct {
	// The ID of the pipeline.
	PipelineId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetPipelineTriggerKeysPage
}

// GetPipelinesParams is parameters of getPipelines operation.
type GetPipelinesParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetPipelinesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetPipelinesPage
}

// GetPoolsIPsParams is parameters of getPoolsIPs operation.
type GetPoolsIPsParams struct {
	// The ID for the given pool.
	PoolId string
}

// GetProviderParams is parameters of getProvider operation.
type GetProviderParams struct {
	// The ID for the given provider.
	ProviderId string
}

// GetProviderLocationsParams is parameters of getProviderLocations operation.
type GetProviderLocationsParams struct {
	// The ID for the given provider.
	ProviderId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetProviderLocationsPage
}

// GetProviderServersParams is parameters of getProviderServers operation.
type GetProviderServersParams struct {
	// The ID for the given provider.
	ProviderId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetProviderServersPage
}

// GetProvidersParams is parameters of getProviders operation.
type GetProvidersParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetProvidersMetaItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetProvidersPage
}

// GetRecordsCollectionParams is parameters of getRecordsCollection operation.
type GetRecordsCollectionParams struct {
	// The ID of the zone.
	ZoneId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetRecordsCollectionIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetRecordsCollectionPage
}

// GetSSHConnectionParams is parameters of getSSHConnection operation.
type GetSSHConnectionParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// GetServerInstancesParams is parameters of getServerInstances operation.
type GetServerInstancesParams struct {
	// The ID for the given server.
	ServerId string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServerInstancesPage
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetServerInstancesIncludeItem
}

// GetServerTelemeteryParams is parameters of getServerTelemetery operation.
type GetServerTelemeteryParams struct {
	// The ID for the given server.
	ServerId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServerTelemeteryPage
}

// GetServerUsageParams is parameters of GetServerUsage operation.
type GetServerUsageParams struct {
	// The ID for the given server.
	ServerId string
}

// GetServersCollectionParams is parameters of getServersCollection operation.
type GetServersCollectionParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetServersCollectionMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetServersCollectionIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServersCollectionPage
}

// GetSingleServerParams is parameters of getSingleServer operation.
type GetSingleServerParams struct {
	// The ID for the given server.
	ServerId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetSingleServerIncludeItem
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetSingleServerMetaItem
}

// GetSourceParams is parameters of getSource operation.
type GetSourceParams struct {
	// The ID of the image source.
	SourceId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetSourceMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetSourceIncludeItem
}

// GetSourcesCollectionParams is parameters of getSourcesCollection operation.
type GetSourcesCollectionParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetSourcesCollectionMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetSourcesCollectionIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetSourcesCollectionPage
}

// GetStackParams is parameters of getStack operation.
type GetStackParams struct {
	// The ID of the stack.
	StackId string
}

// GetStackBuildParams is parameters of getStackBuild operation.
type GetStackBuildParams struct {
	// The ID of the stack.
	StackId string
	// The ID of the build.
	BuildId string
}

// GetStackBuildLookupParams is parameters of getStackBuildLookup operation.
type GetStackBuildLookupParams struct {
	// The ID of the build.
	BuildId string
}

// GetStackBuildsParams is parameters of getStackBuilds operation.
type GetStackBuildsParams struct {
	// The ID of the stack.
	StackId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetStackBuildsMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetStackBuildsIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetStackBuildsPage
}

// GetStacksParams is parameters of getStacks operation.
type GetStacksParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetStacksMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetStacksIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetStacksPage
}

// GetUsableServersParams is parameters of getUsableServers operation.
type GetUsableServersParams struct {
	// The ID of the requested container.
	ContainerId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetUsableServersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetUsableServersIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetUsableServersPage
}

// GetVPNInfoParams is parameters of getVPNInfo operation.
type GetVPNInfoParams struct {
	// The environmentId where the VPN resides.
	EnvironmentId string
}

// GetVPNUsersParams is parameters of getVPNUsers operation.
type GetVPNUsersParams struct {
	// The environmentId where the VPN service resides.
	EnvironmentId string
}

// GetVpnLoginsParams is parameters of getVpnLogins operation.
type GetVpnLoginsParams struct {
	// The environmentId where the VPN resides.
	EnvironmentId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetVpnLoginsPage
}

// GetZonesCollectionParams is parameters of getZonesCollection operation.
type GetZonesCollectionParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetZonesCollectionIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetZonesCollectionPage
}

// InstanceConsoleAuthParams is parameters of instanceConsoleAuth operation.
type InstanceConsoleAuthParams struct {
	// The ID for the container.
	ContainerId string
	// The ID of the instance.
	InstanceId string
}

// ListScopedVariablesParams is parameters of listScopedVariables operation.
type ListScopedVariablesParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptListScopedVariablesPage
}

// LookupDnsCertificateParams is parameters of lookupDnsCertificate operation.
type LookupDnsCertificateParams struct {
	// The domain to lookup.
	Domain string
	// Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For
	// example, if you are looking for a certificate for x.test.com, setting this to true will identify a
	// *.test.com certificate that would also be applicable.
	Wildcard OptBool
}

// ReconfigureDiscoveryParams is parameters of reconfigureDiscovery operation.
type ReconfigureDiscoveryParams struct {
	// The ID of the environment where this discovery service resides.
	EnvironmentId string
}

// ReconfigureLoadBalancerParams is parameters of reconfigureLoadBalancer operation.
type ReconfigureLoadBalancerParams struct {
	// The ID of the environment where this load balancer resides.
	EnvironmentId string
}

// ReconfigureVPNParams is parameters of reconfigureVPN operation.
type ReconfigureVPNParams struct {
	// The ID of the environment the VPN service resides in.
	EnvironmentId string
}

// RemoveApiKeyParams is parameters of removeApiKey operation.
type RemoveApiKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
}

// RemoveBackupParams is parameters of removeBackup operation.
type RemoveBackupParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container backup.
	BackupId string
}

// RemoveBillingMethodParams is parameters of removeBillingMethod operation.
type RemoveBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// RemoveContainerParams is parameters of removeContainer operation.
type RemoveContainerParams struct {
	// The ID of the requested container.
	ContainerId string
}

// RemoveContainerInstanceParams is parameters of removeContainerInstance operation.
type RemoveContainerInstanceParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// RemoveDNSRecordParams is parameters of removeDNSRecord operation.
type RemoveDNSRecordParams struct {
	// The ID of the zone.
	ZoneId string
	// The ID of the record.
	RecordId string
}

// RemoveDNSZoneParams is parameters of removeDNSZone operation.
type RemoveDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
}

// RemoveEnvironmentParams is parameters of removeEnvironment operation.
type RemoveEnvironmentParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// RemoveHubInviteParams is parameters of removeHubInvite operation.
type RemoveHubInviteParams struct {
	// The ID of the hub invite.
	InviteId string
}

// RemoveHubMemberParams is parameters of removeHubMember operation.
type RemoveHubMemberParams struct {
	// The ID for the given member.
	MemberId string
}

// RemoveImageParams is parameters of removeImage operation.
type RemoveImageParams struct {
	// The ID of the image.
	ImageId string
}

// RemoveImageSourceParams is parameters of removeImageSource operation.
type RemoveImageSourceParams struct {
	// The ID of the image source.
	SourceId string
}

// RemoveIpPoolParams is parameters of removeIpPool operation.
type RemoveIpPoolParams struct {
	// The ID for the given pool.
	PoolId string
}

// RemoveMultipleContainerInstancesParams is parameters of removeMultipleContainerInstances operation.
type RemoveMultipleContainerInstancesParams struct {
	// The ID of the container the instance(s) were created from.
	ContainerId string
}

// RemovePipelineParams is parameters of removePipeline operation.
type RemovePipelineParams struct {
	// The ID of the pipeline.
	PipelineId string
}

// RemovePipelineTriggerKeyParams is parameters of removePipelineTriggerKey operation.
type RemovePipelineTriggerKeyParams struct {
	// The ID of the pipeline.
	PipelineId string
	// The ID of the trigger key.
	TriggerKeyId string
}

// RemoveProviderParams is parameters of removeProvider operation.
type RemoveProviderParams struct {
	// The ID for the given provider.
	ProviderId string
}

// RemoveSDNNetworkParams is parameters of removeSDNNetwork operation.
type RemoveSDNNetworkParams struct {
	// The ID of the network.
	NetworkId string
}

// RemoveScopedVariableByIdParams is parameters of removeScopedVariableById operation.
type RemoveScopedVariableByIdParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// The ID of the requested scoped variable.
	ScopedVariableId string
}

// RemoveServerParams is parameters of removeServer operation.
type RemoveServerParams struct {
	// The ID for the given server.
	ServerId string
}

// RemoveStackParams is parameters of removeStack operation.
type RemoveStackParams struct {
	// The ID of the stack.
	StackId string
}

// RemoveStackBuildParams is parameters of removeStackBuild operation.
type RemoveStackBuildParams struct {
	// The ID of the stack.
	StackId string
	// The ID of the build.
	BuildId string
}

// RemoveVPNUserParams is parameters of removeVPNUser operation.
type RemoveVPNUserParams struct {
	// The environmentId where the VPN service the given user belongs to resides.
	EnvironmentId string
	// The userId of the user to be deleted.
	UserId string
}

// RestoreBackupJobParams is parameters of restoreBackupJob operation.
type RestoreBackupJobParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID of the backup.
	BackupId string
}

// UpdateAccountInviteParams is parameters of updateAccountInvite operation.
type UpdateAccountInviteParams struct {
	// The ID of the given invite.
	InviteId string
}

// UpdateApiKeyParams is parameters of updateApiKey operation.
type UpdateApiKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
}

// UpdateBillingMethodParams is parameters of updateBillingMethod operation.
type UpdateBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// UpdateBillingOrderParams is parameters of updateBillingOrder operation.
type UpdateBillingOrderParams struct {
	// The ID of the billing order.
	OrderId string
}

// UpdateContainerParams is parameters of updateContainer operation.
type UpdateContainerParams struct {
	// The ID of the container.
	ContainerId string
}

// UpdateDNSRecordParams is parameters of updateDNSRecord operation.
type UpdateDNSRecordParams struct {
	// The ID of the zone.
	ZoneId string
	// The ID of the record.
	RecordId string
}

// UpdateDNSZoneParams is parameters of updateDNSZone operation.
type UpdateDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []UpdateDNSZoneIncludeItem
}

// UpdateEnvironmentParams is parameters of updateEnvironment operation.
type UpdateEnvironmentParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// UpdateHubMemberParams is parameters of updateHubMember operation.
type UpdateHubMemberParams struct {
	// The ID for the given member.
	MemberId string
}

// UpdateImageParams is parameters of updateImage operation.
type UpdateImageParams struct {
	// The ID of the image.
	ImageId string
}

// UpdateImageSourceParams is parameters of updateImageSource operation.
type UpdateImageSourceParams struct {
	// The ID of the image source.
	SourceId string
}

// UpdatePipelineParams is parameters of updatePipeline operation.
type UpdatePipelineParams struct {
	// The ID of the pipeline.
	PipelineId string
}

// UpdatePipelineTriggerKeyParams is parameters of updatePipelineTriggerKey operation.
type UpdatePipelineTriggerKeyParams struct {
	// The ID of the pipeline.
	PipelineId string
	// The ID of the trigger key.
	TriggerKeyId string
}

// UpdateProviderParams is parameters of updateProvider operation.
type UpdateProviderParams struct {
	// The ID for the given provider.
	ProviderId string
}

// UpdateSDNNetworkParams is parameters of updateSDNNetwork operation.
type UpdateSDNNetworkParams struct {
	// The ID of the network.
	NetworkId string
}

// UpdateScopedVariableParams is parameters of updateScopedVariable operation.
type UpdateScopedVariableParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// The ID of the requested scoped variable.
	ScopedVariableId string
}

// UpdateServerParams is parameters of updateServer operation.
type UpdateServerParams struct {
	// The ID for the given server.
	ServerId string
}

// UpdateStackParams is parameters of updateStack operation.
type UpdateStackParams struct {
	// The ID of the stack.
	StackId string
}
