// Code generated by ogen, DO NOT EDIT.

package api

// CreateBillingMethodJobParams is parameters of createBillingMethodJob operation.
type CreateBillingMethodJobParams struct {
	// The ID of the method.
	MethodId string
}

// CreateContainerBackupJobParams is parameters of createContainerBackupJob operation.
type CreateContainerBackupJobParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID of the backup.
	BackupId string
}

// CreateContainerJobParams is parameters of createContainerJob operation.
type CreateContainerJobParams struct {
	// The ID of the requested container.
	ContainerId string
}

// CreateDNSZoneJobParams is parameters of createDNSZoneJob operation.
type CreateDNSZoneJobParams struct {
	// The ID of the zone.
	ZoneId string
}

// CreateDNSZoneRecordParams is parameters of createDNSZoneRecord operation.
type CreateDNSZoneRecordParams struct {
	// The ID of the Zone.
	ZoneId string
}

// CreateDNSZoneRecordJobParams is parameters of createDNSZoneRecordJob operation.
type CreateDNSZoneRecordJobParams struct {
	// The ID of the zone.
	ZoneId string
	// The ID of the record.
	RecordId string
}

// CreateDiscoveryServiceJobParams is parameters of createDiscoveryServiceJob operation.
type CreateDiscoveryServiceJobParams struct {
	// The ID of the environment where this discovery service resides.
	EnvironmentId string
}

// CreateEnvironmentJobParams is parameters of createEnvironmentJob operation.
type CreateEnvironmentJobParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
}

// CreateFunctionJobParams is parameters of createFunctionJob operation.
type CreateFunctionJobParams struct {
	// The ID of the requested container.
	ContainerId string
}

// CreateImageJobParams is parameters of createImageJob operation.
type CreateImageJobParams struct {
	// The ID of the requested Image.
	ImageId string
}

// CreateInstanceJobParams is parameters of createInstanceJob operation.
type CreateInstanceJobParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// CreateInstancesParams is parameters of createInstances operation.
type CreateInstancesParams struct {
	// The ID of the Container this Instance is created from.
	ContainerId string
}

// CreateIntegrationParams is parameters of createIntegration operation.
type CreateIntegrationParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []CreateIntegrationMetaItem
}

// CreateIntegrationJobParams is parameters of createIntegrationJob operation.
type CreateIntegrationJobParams struct {
	// The ID of the Hub Integration.
	IntegrationId string
}

// CreateInvoiceJobParams is parameters of createInvoiceJob operation.
type CreateInvoiceJobParams struct {
	// The ID of the invoice.
	InvoiceId string
}

// CreateLoadBalancerServiceJobParams is parameters of createLoadBalancerServiceJob operation.
type CreateLoadBalancerServiceJobParams struct {
	// The ID of the environment where this load balancer resides.
	EnvironmentId string
}

// CreateNetworkParams is parameters of createNetwork operation.
type CreateNetworkParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []CreateNetworkIncludeItem
}

// CreateNetworkJobParams is parameters of createNetworkJob operation.
type CreateNetworkJobParams struct {
	// The ID of the Network.
	NetworkId string
}

// CreateOrderParams is parameters of createOrder operation.
type CreateOrderParams struct {
	Meta    []CreateOrderMetaItem
	Include []CreateOrderIncludeItem
}

// CreateOrderJobParams is parameters of createOrderJob operation.
type CreateOrderJobParams struct {
	// The ID of the requested Order.
	OrderId string
}

// CreatePipelineJobParams is parameters of createPipelineJob operation.
type CreatePipelineJobParams struct {
	// The ID of the Pipeline.
	PipelineId string
}

// CreatePipelineTriggerKeyParams is parameters of createPipelineTriggerKey operation.
type CreatePipelineTriggerKeyParams struct {
	// The ID of the Pipeline.
	PipelineId string
}

// CreateSchedulerServiceJobParams is parameters of createSchedulerServiceJob operation.
type CreateSchedulerServiceJobParams struct {
	// The ID of the environment where this scheduler service resides.
	EnvironmentId string
}

// CreateScopedVariableParams is parameters of createScopedVariable operation.
type CreateScopedVariableParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
}

// CreateServerJobParams is parameters of createServerJob operation.
type CreateServerJobParams struct {
	// The ID for the given Server.
	ServerId string
}

// CreateStackBuildJobParams is parameters of createStackBuildJob operation.
type CreateStackBuildJobParams struct {
	// The ID of the Stack.
	StackId string
	// The ID of the Build.
	BuildId string
}

// CreateStackJobParams is parameters of createStackJob operation.
type CreateStackJobParams struct {
	// The ID of the Stack.
	StackId string
}

// CreateVPNServiceJobParams is parameters of createVPNServiceJob operation.
type CreateVPNServiceJobParams struct {
	// The ID of the Environment the VPN service resides in.
	EnvironmentId string
}

// CreateVPNUserParams is parameters of createVPNUser operation.
type CreateVPNUserParams struct {
	// The environmentId where the VPN service resides.
	EnvironmentId string
}

// CreateVirtualMachineParams is parameters of createVirtualMachine operation.
type CreateVirtualMachineParams struct {
	// A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have its own
	// relevant meta data.
	// In some rare cases, meta may not apply to individual resources, and may appear in the root
	// document. These will be clearly labeled.
	Meta []CreateVirtualMachineMetaItem
	// A comma-separated list of include values. Included resources will show up under the root
	// document's `include` field.
	// In the case of applying an include to a collection of resources, if multiple resources share the
	// same include, it will only appear once in the return.
	Include []CreateVirtualMachineIncludeItem
}

// CreateVirtualMachineJobParams is parameters of createVirtualMachineJob operation.
type CreateVirtualMachineJobParams struct {
	// The ID of the virtual machine.
	VirtualMachineId string
}

// DeleteAPIKeyParams is parameters of deleteAPIKey operation.
type DeleteAPIKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
}

// DeleteAutoScaleGroupParams is parameters of deleteAutoScaleGroup operation.
type DeleteAutoScaleGroupParams struct {
	// The ID for the given autoscale group.
	GroupId string
}

// DeleteBillingMethodParams is parameters of deleteBillingMethod operation.
type DeleteBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// DeleteClusterParams is parameters of deleteCluster operation.
type DeleteClusterParams struct {
	// The ID of the requested cluster.
	ClusterId string
}

// DeleteContainerParams is parameters of deleteContainer operation.
type DeleteContainerParams struct {
	// The ID of the requested Container.
	ContainerId string
}

// DeleteContainerBackupParams is parameters of deleteContainerBackup operation.
type DeleteContainerBackupParams struct {
	// The ID of the container.
	ContainerId string
	// The ID of the container backup.
	BackupId string
}

// DeleteContainerInstancesParams is parameters of deleteContainerInstances operation.
type DeleteContainerInstancesParams struct {
	// The ID of the container the instance(s) were created from.
	ContainerId string
}

// DeleteDNSZoneParams is parameters of deleteDNSZone operation.
type DeleteDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
}

// DeleteDNSZoneRecordParams is parameters of deleteDNSZoneRecord operation.
type DeleteDNSZoneRecordParams struct {
	// The ID of the Zone.
	ZoneId string
	// The ID of the DNS Zone Record.
	RecordId string
}

// DeleteEnvironmentParams is parameters of deleteEnvironment operation.
type DeleteEnvironmentParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
}

// DeleteHubInviteParams is parameters of deleteHubInvite operation.
type DeleteHubInviteParams struct {
	// The ID of the Hub Invite.
	InviteId string
}

// DeleteHubMemberParams is parameters of deleteHubMember operation.
type DeleteHubMemberParams struct {
	// The ID of the given Hub Member.
	MemberId string
}

// DeleteIPPoolParams is parameters of deleteIPPool operation.
type DeleteIPPoolParams struct {
	// The ID for the given IP Pool.
	PoolId string
}

// DeleteImageParams is parameters of deleteImage operation.
type DeleteImageParams struct {
	// The ID of the image.
	ImageId string
}

// DeleteImageSourceParams is parameters of deleteImageSource operation.
type DeleteImageSourceParams struct {
	// The ID of the Image Source.
	SourceId string
}

// DeleteInstanceParams is parameters of deleteInstance operation.
type DeleteInstanceParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// DeleteIntegrationParams is parameters of deleteIntegration operation.
type DeleteIntegrationParams struct {
	// The ID of the Integration to delete.
	IntegrationId string
}

// DeleteNetworkParams is parameters of deleteNetwork operation.
type DeleteNetworkParams struct {
	// The ID of the Network.
	NetworkId string
}

// DeletePipelineParams is parameters of deletePipeline operation.
type DeletePipelineParams struct {
	// The ID of the Pipeline.
	PipelineId string
}

// DeletePipelineTriggerKeyParams is parameters of deletePipelineTriggerKey operation.
type DeletePipelineTriggerKeyParams struct {
	// The ID of the Pipeline.
	PipelineId string
	// The ID of the Trigger Key.
	TriggerKeyId string
}

// DeleteRoleParams is parameters of deleteRole operation.
type DeleteRoleParams struct {
	// The ID of the Role.
	RoleId string
}

// DeleteScopedVariableParams is parameters of deleteScopedVariable operation.
type DeleteScopedVariableParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
	// The ID of the requested Scoped Variable.
	ScopedVariableId string
}

// DeleteServerParams is parameters of deleteServer operation.
type DeleteServerParams struct {
	// The ID of the Server.
	ServerId string
}

// DeleteStackParams is parameters of deleteStack operation.
type DeleteStackParams struct {
	// The ID of the Stack.
	StackId string
}

// DeleteStackBuildParams is parameters of deleteStackBuild operation.
type DeleteStackBuildParams struct {
	// The ID of the Stack.
	StackId string
	// The ID of the Build.
	BuildId string
}

// DeleteVPNUserParams is parameters of deleteVPNUser operation.
type DeleteVPNUserParams struct {
	// The environmentId where the VPN service the given user belongs to resides.
	EnvironmentId string
	// The userId of the user to be deleted.
	UserId string
}

// DeleteVirtualMachineParams is parameters of deleteVirtualMachine operation.
type DeleteVirtualMachineParams struct {
	// The ID of the virtual machine to delete.
	VirtualMachineId string
}

// ExpireInstanceSSHCredentialsParams is parameters of expireInstanceSSHCredentials operation.
type ExpireInstanceSSHCredentialsParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// GenerateAggregatedEventsParams is parameters of generateAggregatedEvents operation.
type GenerateAggregatedEventsParams struct {
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGenerateAggregatedEventsFilter
}

// GenerateAggregatedMetricsParams is parameters of generateAggregatedMetrics operation.
type GenerateAggregatedMetricsParams struct {
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGenerateAggregatedMetricsFilter
}

// GenerateInstanceSSHCredentialsParams is parameters of generateInstanceSSHCredentials operation.
type GenerateInstanceSSHCredentialsParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
}

// GetAPIKeyParams is parameters of getAPIKey operation.
type GetAPIKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetAPIKeyIncludeItem
}

// GetAccountInvitesParams is parameters of getAccountInvites operation.
type GetAccountInvitesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta    []GetAccountInvitesMetaItem
	Include []GetAccountInvitesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetAccountInvitesFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAccountInvitesPage
}

// GetAccountLoginsParams is parameters of getAccountLogins operation.
type GetAccountLoginsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetAccountLoginsFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAccountLoginsPage
}

// GetAccountMembershipsParams is parameters of getAccountMemberships operation.
type GetAccountMembershipsParams struct {
	Include []GetAccountMembershipsIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetAccountMembershipsFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAccountMembershipsPage
}

// GetAnnouncementsParams is parameters of getAnnouncements operation.
type GetAnnouncementsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAnnouncementsPage
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetAnnouncementsFilter
}

// GetApiKeysParams is parameters of getApiKeys operation.
type GetApiKeysParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetApiKeysFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetApiKeysPage
}

// GetAutoScaleGroupParams is parameters of getAutoScaleGroup operation.
type GetAutoScaleGroupParams struct {
	// The ID for the given Auto-Scale Group.
	GroupId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetAutoScaleGroupIncludeItem
}

// GetAutoScaleGroupsParams is parameters of getAutoScaleGroups operation.
type GetAutoScaleGroupsParams struct {
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetAutoScaleGroupsPage
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetAutoScaleGroupsIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetAutoScaleGroupsFilter
}

// GetBillingMethodParams is parameters of getBillingMethod operation.
type GetBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// GetBillingMethodsParams is parameters of getBillingMethods operation.
type GetBillingMethodsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetBillingMethodsFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingMethodsPage
}

// GetBillingOrderParams is parameters of getBillingOrder operation.
type GetBillingOrderParams struct {
	// The ID of the billing order.
	OrderId string
	Meta    []GetBillingOrderMetaItem
	Include []GetBillingOrderIncludeItem
}

// GetBillingOveragesParams is parameters of getBillingOverages operation.
type GetBillingOveragesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetBillingOveragesFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingOveragesPage
}

// GetBillingServiceParams is parameters of getBillingService operation.
type GetBillingServiceParams struct {
	// The ID of the Billing Service.
	ServicesId string
}

// GetBillingServicesParams is parameters of getBillingServices operation.
type GetBillingServicesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetBillingServicesFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingServicesPage
}

// GetBillingSupportPlansParams is parameters of getBillingSupportPlans operation.
type GetBillingSupportPlansParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetBillingSupportPlansFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetBillingSupportPlansPage
}

// GetClusterParams is parameters of getCluster operation.
type GetClusterParams struct {
	// The ID of the requested cluster.
	ClusterId string
}

// GetClustersParams is parameters of getClusters operation.
type GetClustersParams struct {
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetClustersPage
}

// GetCompatibleImagesParams is parameters of getCompatibleImages operation.
type GetCompatibleImagesParams struct {
	// The ID of the requested Container.
	ContainerId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetCompatibleImagesPage
}

// GetCompatibleServersParams is parameters of getCompatibleServers operation.
type GetCompatibleServersParams struct {
	// The ID of the requested container.
	ContainerId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetCompatibleServersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetCompatibleServersIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetCompatibleServersPage
}

// GetContainerBackupParams is parameters of getContainerBackup operation.
type GetContainerBackupParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container backup.
	BackupId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetContainerBackupIncludeItem
}

// GetContainerBackupLogsParams is parameters of getContainerBackupLogs operation.
type GetContainerBackupLogsParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container backup.
	BackupId string
}

// GetContainerBackupsParams is parameters of getContainerBackups operation.
type GetContainerBackupsParams struct {
	// The ID of the requested Container.
	ContainerId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetContainerBackupsIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetContainerBackupsPage
}

// GetContainerServersParams is parameters of getContainerServers operation.
type GetContainerServersParams struct {
	// The ID of the requested container.
	ContainerId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetContainerServersMetaItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetContainerServersPage
}

// GetContainerSummaryParams is parameters of getContainerSummary operation.
type GetContainerSummaryParams struct {
	// The ID of the requested container.
	ContainerId string
}

// GetCreditParams is parameters of getCredit operation.
type GetCreditParams struct {
	// The ID for a given credit.
	CreditsId string
}

// GetCreditsParams is parameters of getCredits operation.
type GetCreditsParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetCreditsFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetCreditsPage
}

// GetDNSZoneParams is parameters of getDNSZone operation.
type GetDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
}

// GetDNSZoneRecordsParams is parameters of getDNSZoneRecords operation.
type GetDNSZoneRecordsParams struct {
	// The ID of the zone.
	ZoneId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetDNSZoneRecordsIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetDNSZoneRecordsFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetDNSZoneRecordsPage
}

// GetDNSZonesParams is parameters of getDNSZones operation.
type GetDNSZonesParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetDNSZonesIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetDNSZonesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetDNSZonesPage
}

// GetEnvironmentParams is parameters of getEnvironment operation.
type GetEnvironmentParams struct {
	// The ID of the requested environment.
	EnvironmentId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetEnvironmentMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetEnvironmentIncludeItem
}

// GetEnvironmentDeploymentsParams is parameters of getEnvironmentDeployments operation.
type GetEnvironmentDeploymentsParams struct {
	// The ID of the Environment to get the list of deployments for.
	EnvironmentId string
}

// GetEnvironmentSummaryParams is parameters of getEnvironmentSummary operation.
type GetEnvironmentSummaryParams struct {
	// The ID of the requested environment.
	EnvironmentId string
}

// GetEnvironmentsParams is parameters of getEnvironments operation.
type GetEnvironmentsParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetEnvironmentsMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetEnvironmentsIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetEnvironmentsFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetEnvironmentsPage
}

// GetHubParams is parameters of getHub operation.
type GetHubParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubMetaItem
}

// GetHubInvitesParams is parameters of getHubInvites operation.
type GetHubInvitesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubInvitesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubInvitesIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetHubInvitesFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubInvitesPage
}

// GetHubMemberParams is parameters of getHubMember operation.
type GetHubMemberParams struct {
	// The ID for the given Hub member.
	MemberId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMemberIncludeItem
}

// GetHubMemberAccountParams is parameters of getHubMemberAccount operation.
type GetHubMemberAccountParams struct {
	// The ID of the member's Account.
	AccountId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetHubMemberAccountMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMemberAccountIncludeItem
}

// GetHubMembersParams is parameters of getHubMembers operation.
type GetHubMembersParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMembersIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetHubMembersFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubMembersPage
}

// GetHubMembershipParams is parameters of getHubMembership operation.
type GetHubMembershipParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetHubMembershipIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetHubMembershipFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubMembershipPage
}

// GetHubUsageParams is parameters of getHubUsage operation.
type GetHubUsageParams struct {
	Filter *GetHubUsageFilter
}

// GetHubsParams is parameters of getHubs operation.
type GetHubsParams struct {
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetHubsPage
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetHubsFilter
}

// GetIPPoolParams is parameters of getIPPool operation.
type GetIPPoolParams struct {
	// The ID for the given pool.
	PoolId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetIPPoolIncludeItem
}

// GetImageParams is parameters of getImage operation.
type GetImageParams struct {
	// The ID of the image.
	ImageId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImageMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImageIncludeItem
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetImagePage
}

// GetImageBuildLogParams is parameters of getImageBuildLog operation.
type GetImageBuildLogParams struct {
	// The ID of the Image.
	ImageId string
}

// GetImageSourceParams is parameters of getImageSource operation.
type GetImageSourceParams struct {
	// The ID of the Image Source.
	SourceId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImageSourceMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImageSourceIncludeItem
}

// GetImageSourcesParams is parameters of getImageSources operation.
type GetImageSourcesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImageSourcesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImageSourcesIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetImageSourcesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetImageSourcesPage
}

// GetImagesParams is parameters of getImages operation.
type GetImagesParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetImagesMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetImagesIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetImagesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetImagesPage
}

// GetInfrastructureIPPoolsParams is parameters of getInfrastructureIPPools operation.
type GetInfrastructureIPPoolsParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInfrastructureIPPoolsIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetInfrastructureIPPoolsFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInfrastructureIPPoolsPage
}

// GetInfrastructureSummaryParams is parameters of getInfrastructureSummary operation.
type GetInfrastructureSummaryParams struct {
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetInfrastructureSummaryFilter
}

// GetInstanceParams is parameters of getInstance operation.
type GetInstanceParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInstanceIncludeItem
}

// GetInstanceConsoleStreamAuthParams is parameters of getInstanceConsoleStreamAuth operation.
type GetInstanceConsoleStreamAuthParams struct {
	// The ID for the Container.
	ContainerId string
	// The ID of the Instance.
	InstanceId string
}

// GetInstanceTelemetryReportParams is parameters of getInstanceTelemetryReport operation.
type GetInstanceTelemetryReportParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the container instance.
	InstanceId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetInstanceTelemetryReportFilter
}

// GetInstanceTelemetryStreamAuthParams is parameters of getInstanceTelemetryStreamAuth operation.
type GetInstanceTelemetryStreamAuthParams struct {
	// The ID of the requested container.
	ContainerId string
	// The ID for the Container Instance.
	InstanceId string
}

// GetInstanceVolumesParams is parameters of getInstanceVolumes operation.
type GetInstanceVolumesParams struct {
	// The ID of the requested Container.
	ContainerId string
	// The ID for the Container Instance.
	InstanceId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInstanceVolumesPage
}

// GetInstancesParams is parameters of getInstances operation.
type GetInstancesParams struct {
	// The ID of the container this instance is created from.
	ContainerId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetInstancesIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetInstancesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInstancesPage
}

// GetIntegrationParams is parameters of getIntegration operation.
type GetIntegrationParams struct {
	// The ID of the Integration to retrieve.
	IntegrationId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetIntegrationMetaItem
}

// GetIntegrationsParams is parameters of getIntegrations operation.
type GetIntegrationsParams struct {
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetIntegrationsPage
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetIntegrationsMetaItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for. Supports filtering by state and a text search.
	Filter OptGetIntegrationsFilter
}

// GetInvoiceParams is parameters of getInvoice operation.
type GetInvoiceParams struct {
	// The ID of the invoice.
	InvoiceId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetInvoiceMetaItem
}

// GetInvoicesParams is parameters of getInvoices operation.
type GetInvoicesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetInvoicesPage
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetInvoicesMetaItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetInvoicesFilter
}

// GetJobParams is parameters of getJob operation.
type GetJobParams struct {
	// The ID for the given Job.
	JobId string
}

// GetJobsParams is parameters of getJobs operation.
type GetJobsParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetJobsIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetJobsFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetJobsPage
}

// GetLoadBalancerLatestTelemetryReportParams is parameters of getLoadBalancerLatestTelemetryReport operation.
type GetLoadBalancerLatestTelemetryReportParams struct {
	// The environmentId where the load balancer resides.
	EnvironmentId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	// On this endpoint, you MUST pass filter[controller].
	Filter GetLoadBalancerLatestTelemetryReportFilter
}

// GetLoadBalancerServiceParams is parameters of getLoadBalancerService operation.
type GetLoadBalancerServiceParams struct {
	// The environmentId where the load balancer resides.
	EnvironmentId string
}

// GetLoadBalancerTelemetryReportParams is parameters of getLoadBalancerTelemetryReport operation.
type GetLoadBalancerTelemetryReportParams struct {
	// The environmentId where the load balancer resides.
	EnvironmentId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter GetLoadBalancerTelemetryReportFilter
}

// GetNetworkParams is parameters of getNetwork operation.
type GetNetworkParams struct {
	// The ID of the Network.
	NetworkId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetNetworkIncludeItem
}

// GetNetworksParams is parameters of getNetworks operation.
type GetNetworksParams struct {
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetNetworksIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetNetworksFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetNetworksPage
}

// GetOrdersParams is parameters of getOrders operation.
type GetOrdersParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetOrdersFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page    OptGetOrdersPage
	Meta    []GetOrdersMetaItem
	Include []GetOrdersIncludeItem
}

// GetPipelineRunParams is parameters of getPipelineRun operation.
type GetPipelineRunParams struct {
	// The ID of the Pipeline.
	PipelineId string
	// The ID for the pipeline run.
	RunId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetPipelineRunIncludeItem
}

// GetPipelineRunsParams is parameters of getPipelineRuns operation.
type GetPipelineRunsParams struct {
	// The ID of the pipeline.
	PipelineId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetPipelineRunsIncludeItem
}

// GetPipelineTriggerKeyParams is parameters of getPipelineTriggerKey operation.
type GetPipelineTriggerKeyParams struct {
	// The ID of the Pipeline.
	PipelineId string
	// The ID of the Trigger Key.
	TriggerKeyId string
}

// GetPipelineTriggerKeysParams is parameters of getPipelineTriggerKeys operation.
type GetPipelineTriggerKeysParams struct {
	// The ID of the Pipeline.
	PipelineId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetPipelineTriggerKeysFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetPipelineTriggerKeysPage
}

// GetPoolIPsParams is parameters of getPoolIPs operation.
type GetPoolIPsParams struct {
	// The ID of the IP Pool to fetch the IPs of.
	PoolId string
}

// GetProviderLocationsParams is parameters of getProviderLocations operation.
type GetProviderLocationsParams struct {
	// The vendor for the given Provider Integration. Example `gcp`, `equinix-metal`, `abstraction`, etc.
	// Can also use the Integration ID.
	ProviderVendor string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetProviderLocationsPage
}

// GetProviderServersParams is parameters of getProviderServers operation.
type GetProviderServersParams struct {
	// The vendor for the given provider. Example `gcp`, `equinix-metal`, `abstraction`, etc. Can also
	// use a Provider Integration ID.
	ProviderVendor string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetProviderServersPage
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetProviderServersFilter
}

// GetRoleParams is parameters of getRole operation.
type GetRoleParams struct {
	// The ID of the Role.
	RoleId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetRoleMetaItem
}

// GetRolesParams is parameters of getRoles operation.
type GetRolesParams struct {
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort   []string
	Filter *GetRolesFilter
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetRolesPage
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetRolesMetaItem
}

// GetScopedVariableParams is parameters of getScopedVariable operation.
type GetScopedVariableParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
	// The ID of the requested Scoped Variable.
	ScopedVariableId string
}

// GetScopedVariablesParams is parameters of getScopedVariables operation.
type GetScopedVariablesParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetScopedVariablesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetScopedVariablesPage
}

// GetServerParams is parameters of getServer operation.
type GetServerParams struct {
	// The ID for the given Server.
	ServerId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetServerIncludeItem
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetServerMetaItem
}

// GetServerConsoleParams is parameters of GetServerConsole operation.
type GetServerConsoleParams struct {
	// The ID of the server to connect to.
	ServerId string
}

// GetServerInstancesParams is parameters of getServerInstances operation.
type GetServerInstancesParams struct {
	// The ID for the given server.
	ServerId string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServerInstancesPage
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetServerInstancesIncludeItem
}

// GetServerTagsParams is parameters of getServerTags operation.
type GetServerTagsParams struct {
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetServerTagsFilter
}

// GetServerTelemetryParams is parameters of getServerTelemetry operation.
type GetServerTelemetryParams struct {
	// The ID for the given Server.
	ServerId string
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetServerTelemetryFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServerTelemetryPage
}

// GetServerUsageParams is parameters of GetServerUsage operation.
type GetServerUsageParams struct {
	// The ID for the given server.
	ServerId string
}

// GetServersParams is parameters of getServers operation.
type GetServersParams struct {
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []GetServersMetaItem
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []GetServersIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetServersFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetServersPage
}

// GetTLSGenerationAttemptsParams is parameters of getTLSGenerationAttempts operation.
type GetTLSGenerationAttemptsParams struct {
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetTLSGenerationAttemptsFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetTLSGenerationAttemptsPage
}

// GetVPNLoginsParams is parameters of getVPNLogins operation.
type GetVPNLoginsParams struct {
	// The environmentId where the VPN resides.
	EnvironmentId string
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetVPNLoginsPage
}

// GetVPNServiceParams is parameters of getVPNService operation.
type GetVPNServiceParams struct {
	// The environmentId where the VPN resides.
	EnvironmentId string
}

// GetVPNUsersParams is parameters of getVPNUsers operation.
type GetVPNUsersParams struct {
	// The environmentId where the VPN service resides.
	EnvironmentId string
}

// GetVirtualMachineParams is parameters of getVirtualMachine operation.
type GetVirtualMachineParams struct {
	// The ID of the virtual machine.
	VirtualMachineId string
	// A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have its own
	// relevant meta data.
	// In some rare cases, meta may not apply to individual resources, and may appear in the root
	// document. These will be clearly labeled.
	Meta []GetVirtualMachineMetaItem
	// A comma-separated list of include values. Included resources will show up under the root
	// document's `include` field.
	// In the case of applying an include to a collection of resources, if multiple resources share the
	// same include, it will only appear once in the return.
	Include []GetVirtualMachineIncludeItem
}

// GetVirtualMachinesParams is parameters of getVirtualMachines operation.
type GetVirtualMachinesParams struct {
	// A comma-separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have its own
	// relevant meta data.
	// In some rare cases, meta may not apply to individual resources, and may appear in the root
	// document. These will be clearly labeled.
	Meta []GetVirtualMachinesMetaItem
	// A comma-separated list of include values. Included resources will show up under the root
	// document's `include` field.
	// In the case of applying an include to a collection of resources, if multiple resources share the
	// same include, it will only appear once in the return.
	Include []GetVirtualMachinesIncludeItem
	// The filter field is a key-value object, where the key is what you would like to filter, and the
	// value is the value you're filtering for.
	Filter OptGetVirtualMachinesFilter
	// An array of sort values. To sort descending, put a `-` in front of the value, e.g. `-id`.
	Sort []string
	// In a list return, the data associated with the page number and size returned. 20 results per page,
	// page 2 would be `page[size]=20&page[number]=2`.
	Page OptGetVirtualMachinesPage
}

// LookupIdentifierParams is parameters of lookupIdentifier operation.
type LookupIdentifierParams struct {
	// A base64 encoded resource identifier string.
	Identifier string
	// The type of resource to lookup from the identifier string.
	DesiredComponent LookupIdentifierDesiredComponent
}

// LookupTLSCertificateParams is parameters of lookupTLSCertificate operation.
type LookupTLSCertificateParams struct {
	// The domain to lookup.
	Domain string
	// Whether or not to lookup a *. wildcard certificate that would be applicable for this domain. For
	// example, if you are looking for a certificate for x.test.com, setting this to true will identify a
	// *.test.com certificate that would also be applicable.
	Wildcard OptBool
}

// TriggerPipelineParams is parameters of triggerPipeline operation.
type TriggerPipelineParams struct {
	// The ID of the Pipeline.
	PipelineId string
}

// UpdateAPIKeyParams is parameters of updateAPIKey operation.
type UpdateAPIKeyParams struct {
	// The ID of the API Key.
	ApikeyId string
}

// UpdateAccountInviteParams is parameters of updateAccountInvite operation.
type UpdateAccountInviteParams struct {
	// The ID of the given Invite.
	InviteId string
	Include  []UpdateAccountInviteIncludeItem
}

// UpdateAutoScaleGroupParams is parameters of updateAutoScaleGroup operation.
type UpdateAutoScaleGroupParams struct {
	// The ID for the given Auto-Scale Group.
	GroupId string
}

// UpdateAutoScaleGroupAccessParams is parameters of updateAutoScaleGroupAccess operation.
type UpdateAutoScaleGroupAccessParams struct {
	// The ID for the given Auto-Scale Group.
	GroupId string
}

// UpdateBillingMethodParams is parameters of updateBillingMethod operation.
type UpdateBillingMethodParams struct {
	// The ID of the billing method.
	MethodId string
}

// UpdateBillingOrderParams is parameters of updateBillingOrder operation.
type UpdateBillingOrderParams struct {
	// The ID of the billing order.
	OrderId string
	Meta    []UpdateBillingOrderMetaItem
	Include []UpdateBillingOrderIncludeItem
}

// UpdateClusterParams is parameters of updateCluster operation.
type UpdateClusterParams struct {
	// The ID of the requested cluster.
	ClusterId string
}

// UpdateClusterAccessParams is parameters of updateClusterAccess operation.
type UpdateClusterAccessParams struct {
	// The ID of the requested cluster.
	ClusterId string
}

// UpdateContainerParams is parameters of updateContainer operation.
type UpdateContainerParams struct {
	// The ID of the Container.
	ContainerId string
}

// UpdateDNSZoneParams is parameters of updateDNSZone operation.
type UpdateDNSZoneParams struct {
	// The ID of the zone.
	ZoneId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []UpdateDNSZoneIncludeItem
}

// UpdateDNSZoneAccessParams is parameters of updateDNSZoneAccess operation.
type UpdateDNSZoneAccessParams struct {
	// The ID of the zone.
	ZoneId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []UpdateDNSZoneAccessIncludeItem
}

// UpdateDNSZoneRecordParams is parameters of updateDNSZoneRecord operation.
type UpdateDNSZoneRecordParams struct {
	// The ID of the Zone.
	ZoneId string
	// The ID of the record.
	RecordId string
}

// UpdateEnvironmentParams is parameters of updateEnvironment operation.
type UpdateEnvironmentParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
}

// UpdateEnvironmentAccessParams is parameters of updateEnvironmentAccess operation.
type UpdateEnvironmentAccessParams struct {
	// The ID of the requested Environment.
	EnvironmentId string
}

// UpdateHubMemberParams is parameters of updateHubMember operation.
type UpdateHubMemberParams struct {
	// The ID for the given member.
	MemberId string
}

// UpdateImageParams is parameters of updateImage operation.
type UpdateImageParams struct {
	// The ID of the image.
	ImageId string
}

// UpdateImageSourceParams is parameters of updateImageSource operation.
type UpdateImageSourceParams struct {
	// The ID of the Image Source.
	SourceId string
}

// UpdateImageSourceAccessParams is parameters of updateImageSourceAccess operation.
type UpdateImageSourceAccessParams struct {
	// The ID of the Image Source.
	SourceId string
}

// UpdateIntegrationParams is parameters of updateIntegration operation.
type UpdateIntegrationParams struct {
	// The ID of the Integration to update.
	IntegrationId string
	// A comma separated list of meta values. Meta values will show up under a resource's `meta` field.
	// In the case of applying a meta to a collection of resources, each resource will have it's own
	// relevant meta data. In some rare cases, meta may not apply to individual resources, and may appear
	// in the root document. These will be clearly labeled.
	Meta []UpdateIntegrationMetaItem
}

// UpdateNetworkParams is parameters of updateNetwork operation.
type UpdateNetworkParams struct {
	// The ID of the Network.
	NetworkId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []UpdateNetworkIncludeItem
}

// UpdateNetworkAccessParams is parameters of updateNetworkAccess operation.
type UpdateNetworkAccessParams struct {
	// The ID of the Network.
	NetworkId string
	// A comma separated list of include values. Included resources will show up under the root
	// document's `include` field, with the key being the id of the included resource. In the case of
	// applying an include to a collection of resources, if two resources share the same include, it will
	// only appear once in the return.
	Include []UpdateNetworkAccessIncludeItem
}

// UpdatePipelineParams is parameters of updatePipeline operation.
type UpdatePipelineParams struct {
	// The ID of the Pipeline.
	PipelineId string
}

// UpdatePipelineAccessParams is parameters of updatePipelineAccess operation.
type UpdatePipelineAccessParams struct {
	// The ID of the pipeline.
	PipelineId string
}

// UpdatePipelineTriggerKeyParams is parameters of updatePipelineTriggerKey operation.
type UpdatePipelineTriggerKeyParams struct {
	// The ID of the Pipeline.
	PipelineId string
	// The ID of the Trigger Key.
	TriggerKeyId string
}

// UpdateRoleParams is parameters of updateRole operation.
type UpdateRoleParams struct {
	// The ID of the Role.
	RoleId string
}

// UpdateScopedVariableParams is parameters of updateScopedVariable operation.
type UpdateScopedVariableParams struct {
	// The ID of the requested endpointnvironment.
	EnvironmentId string
	// The ID of the requested Scoped Variable.
	ScopedVariableId string
}

// UpdateServerParams is parameters of updateServer operation.
type UpdateServerParams struct {
	// The ID for the given Server.
	ServerId string
}

// UpdateVirtualMachineParams is parameters of updateVirtualMachine operation.
type UpdateVirtualMachineParams struct {
	// The ID of the virtual machine.
	VirtualMachineId string
}
